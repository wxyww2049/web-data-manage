[
    {
        "url": "https://www.nowcoder.com/discuss/569160215472373760?sourceSSR=users",
        "title": "来自一名普通人的秋招碎碎念",
        "content": "拖了这么久，三方终于签了，也想趁此机会给大家分享一下一名普通人的秋招历程，希望大家以此为戒。好吧，其实我的主要目的是 【牛客捏捏乐】[好无辜]。\n\n## 秋招之前的实习\n\n我自己只有一段实习经历，今年3月-6月在NIO那个车载机器人的部门做相关工作，算是日常实习。当时，面试流程非常的快并且面试内容也比较简单，我想着好不容易有个实习offer就去吧，但是实习期间真就**没学到啥有含金量的东西**\n。以至于秋招时面试官问实习经历，要么听不懂、要么不感兴趣，唯一一个懂的面试官还是因为它做过类似的内容。\n\n只能说，当你看到你实习所做的项目用最简单的MVC三层架构，没有上下游，存储系统只有用到MySQL，仅仅几张非常简单的表，数据量也非常的少，还没有啥用户。赶快跑吧，不然你**拿头跟面试官吹啊**\n，哪有什么慢SQL、线上GC、各种场景解决方案。\n\n## 开始秋招\n\n开始到处看专栏、八股，丰富简历、应对面试官可能会问到的问题。\n\n虽然我的实习经历非常的水，没学到啥东西，但是将AI平台、对话（规则）引擎等关键字写到实习经历之后，自然而然的会有部门来捞。秋招面的唯二大厂，百度 &\n快手，都是因为这份**实习经历** 才来**捞我的简历** ，so 对口的实习经历很重要，哪怕它很水。\n\n7月份迎来了第一场大厂面试（百度），然后就被按在地上狠狠摩擦。\n\n>   * 实习经历\n>   * JDK后面版本的新变化（编程范式、变化趋势）\n>   *\n> 说说数据结构和算法，哪个重要，知道一致性哈希么，你写个一致性哈希吧（写完后，你再跟我说一下原理吧，说完后，你是知道原理的，但代码写的不对，一个节点怎么办，xxxx）再次被锤爆\n>   * 进程和线程的区别\n>   * 进程间通信方式（管道到底是个啥，内核中的数据结构我哪知道呀），socket严格来说不算进程间通信，共享内存他到底在哪个地方\n>   *\n> NIO，IO多路复用，select、poll、epoll（epoll监听的是个啥，不知道呀），poll和epoll只差个1个e，你不觉得很凑巧吗，跟我说e是事件驱动，poll的内核实现十分轻巧（与select的主要区别并不是一个数组一个链表），我太菜了\n>   * IO多路复用监听的是啥事件，\n>   * 然后就到了TCP三次握手，为什么不是2次，4次，直接被锤爆wocao。\n>   * 写SQL，一张表两个字段(id, status，只有0 or 1），如果status = 0，改为status = 1；如果status =\n> 1，改为status = 0。脑子已经不正常了，问支持取反运算吗，支持异或运算吗。。。\n>\n\n>\n> 直接被干趴下了，第一次碰到这么强的面试官，一个字服。\n>\n> 反问：\n>\n> 问：你是做Java的吗，那这些知识是在工作中学到的还是课后充能，看过Linux内核？\n>\n>\n> 答：思考为什么，不要天天看博客（博客都是人家写剩下的），要自己去验证，怎么验证呢（比如你要学TCP，有什么比Linux的TCP内核更加专业？）。Linux内核它说基本都看过一些，自己去验证。服了，服了。\n>\n> 问：面试是随机安排的么，官网上并没有显示哪个部门呀？\n>\n> 答：简历筛选通过后，会存在人才池和简历池，不同的部门会从人才池中找人面试（你是因为实习经历和部门沾边，所以才叫过来面试）。\n>\n> 想在想想，还是内推到部门爽啊，不然只能在简历池里面等人捞，或者随机分配到哪个部分，然后不匹配，被割了。\n\n咋说呢，这场面试打击了我的自信心，吓的我赶快又找了份实习（能转正的那种），怕最后没得工作[笑cry]\n\n现在想想，虽然菜是我的问题，但是大部分面试官应该不会和百度这个面试官一样要求候选者，这是面试官的问题。鼠鼠只能这样安慰自己[牛泪]\n\n接着就是体验感满满的快手面试，也是最后的唯一offer。只能说\n面试体验极佳，最后结果不是特别美好。不过鼠鼠也没别的选择，倘然接受吧。接受自己的普通，接受自己的平凡。\n\n## 感慨\n\n实习没有面过几家，秋招也没有面过几家。一是自己没有去海投，二是投了也不一定过，测评、笔试、面试，看着就头疼。\n\n没面过几家，带来的好处就是珍惜每一次面试机会，拿到还可以的之后就有了躺平的机会，但同时最终也缺乏了选择的权利，手中可打的牌太少。\n\n有自信、有能力、有实力，还是得多多面试，最终次中选优、优中选优。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/569155162569191424?sourceSSR=users",
        "title": "菜鸟补录面经（已正式offer）",
        "content": "## 一面&二面\n\n一面二面比较类似，我就放在一起讲了。上来先是自我介绍。自我介绍结束的时候，面试官让我谈谈自己最拿手的一个项目。\n\n我展开说了一下，用了哪些技术栈、怎么用的，做项目的时候遇到了哪些问题，后面的解决方案是怎么样的。 这之后，面试官根据我之前的描述，开始进行提问：\n\n### Q：你这边项目用到了Netty，你能说一说为什么要用Netty么？\n\n需要保持长连接的规模比较大，自己写连接、连接池之类的做管理可能会比较麻烦。Netty提供了非常多好的特性，也是现在大家使用最广泛的框架，社区也比较活跃，相对而言可靠性、Bug修复速度等都会更优\n\n### Q：你刚才说到Netty提供了非常多好的特性，你可以说说有哪些么\n\n首先是Netty封装了Java原生的NIO类，相比较Java原生的NIO类，使用起来更方便；其次是它支持很多编码协议，也支持自定义的编码，和我这个项目的需求也很贴合；然后Netty通过非阻塞的IO模型以及它的Reactor线程模型、内存池设计以及零拷贝的一些特性都能够提升它的并发量。官方宣称的并发量有100W，对于我这个项目而言还达不到那么高的并发数量级，所以完全够用。\n\n### Q：你能说说Netty的Reactor线程模型是怎么做的么？\n\n讲了一下单Reactor单线程模型、单Reactor多线程模型、主从Reactor模型，以及简单分析他们的优缺点和适应场景\n\n### Q：说一说Socket和WebSocket有什么区别\n\n我根据自己的理解，认为Socket是一组API，是从TCP层抽象出来的，而WebSocket是一种类似于Http协议之类的应用层协议（不知道对不对）\n\n### Q：你是怎么解决粘包和拆包的问题的？\n\nNetty本身提供了线程的解决方案，并且做了封装。Netty可以根据换行符切割报文，根据固定长度切割报文，根据数据包长度切割报文，也可以通过自定义分隔符符号来切割报文。对于我这个项目而言，是使用自定义分隔符符号来做切割的。使用的时候因为Netty是使用责任链模式做的，只需要直接使用.addLast导入即可。\n\n### Q：你这边使用WebSocket来保持长连接，为什么不用其他协议，比如TCP、UDP、MQTT？\n\n首先UDP直接就被排除了，它只保证尽最大可能交付，像视频场景用UDP可以适用，在项目中我要保证每一条数据都能够被正常接收。然后服务器在收到报文之后还要能够给设备有一个确认，因此需要一个全双工通信的机制，因此排除了TCP。至于为什么不用MQTT，一个是因为之前没了解过这个协议，另一个原因就是一开始接到这个项目的时候我就觉得用Socket来做很合适，然后和之前做过类似项目的师兄讨论了一下之后，决定用WebSocket。\n\n### Q：你之前说如果自己来写Socket控制连接的话会用到线程池，你有用过么？\n\n没有，了解一些\n\n### Q：有哪些创建线程的方法？\n\n继承Thread类创建线程、实现Runnable接口来创建线程、通过Callable和FutureTask创建线程、通过线程池创建线程。\n\n### Q：那你可以说一说，要使用线程池的话需要用到哪些参数么？\n\n首先要用线程池需要知道上下文（ACC），然后需要知道核心线程数量（corePoolSize）和最大的线程数量（maximumPoolSize），然后是等待队列（workQueue）、非核心线程空闲时间（keepAliveTime），最后是一个线程的创建工厂（threadFactory）和拒绝策略（handler）\n\n### Q：线程的数量怎么确定比较合适？比如现在有一个IO密集型的应用和一个CPU密集型的应用，你会怎么确定线程的数量？\n\nIO密集型的线程数量我觉得可以设置得大一些，比如设置为两倍或者更多的cpu核心数，CPU密集型的话选择的线程数会和CPU核心数接近。\n\n### Q：你这样设计的理由是什么\n\nIO密集型的任务，在数据准备的过程中CPU是处于空转状态，这个时候可以把CPU时间片分出去给其他线程使用；而CPU密集型任务CPU一直在工作，即使设置更大的线程数，也没有多余的核心来分配给其他线程使用。\n\n### Q：在数据库中应该都用到过索引，你可以说一下MySql为什么要用B+树实现索引，而不是别的数据结构，比如哈希、B树、AVL树\n\n首先B+树是一颗平衡树，每个叶节点到根节点的长度相同，这样可以提升查找效率；其次B+树所有关键字节点都在叶子结点上有序存放，且通过双向链表连接，方便了范围查询；B+树的非叶节点不存储数据，因此可以存放更多的索引数据。B+树的节点大小固定，有利于磁盘预读。\n\n为什么不用Hash、B-Tree、AVL理由也是从为什么用B+树的角度简单回答了一下。\n\n### Q：聚簇索引和非聚簇索引有什么区别？\n\n聚簇索引中叶节点存放的数据是一行数据，如果是通过非聚簇索引进行查找，查找的结果是想要查询的那一条数据的主键，需要一次回表之后根据主键再一次查找。\n\n### Q：有没有遇到过慢查询的情况，你是怎么解决的？\n\n没遇到过。。\n\n### Q：那你认为可能是什么原因引起的？\n\n索引失效、查询语句没遵循最左匹配原则、索引的区分度不高、网络故障。。\n\n### 简单小结\n\n一面时间在35分钟左右，和笔试是一起做的，手写LRU（写完之后介绍一下实现的逻辑）。面试结束收到测评。测评结束后第二天收到二面邀约\n\n二面时间在45分钟左右，面完第二天约的HR面。\n\n## hr面\n\n自我介绍，问了项目情况，因为项目我全程跟，从前期需求对接到中期审查、试运行、结项都是我再负责。hr问的问题比较普遍吧，一个是项目中遇到了什么难点，怎么解决的。然后怎么和他们沟通的，沟通的时候遇到什么问题，怎么解决的。这一块聊得蛮久的。\n\n## Offer\n\nHR面结束当天OC，第二天收到正式意向，一周后收到正式offer\n![alt](https://uploadfiles.nowcoder.com/images/20231226/728466714_1703569126113/76A4D93EB81DFF227FA73BF48C908AB1)\n\n![JuikUUDOrIPYdUnmsjiRYCEk69vwbcRS.jpg](https://uploadfiles.nowcoder.com/images/20240102/728466714_1704171565599/692DD35A00C07E69264FD913E233E44A)\n\n 暂时回忆起这些，如有补充后续会继续在本贴更新  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/569116932234829824?sourceSSR=users",
        "title": "字节跳动-飞书-后端开发实习一面凉经",
        "content": "12.18约的12.20下午面试，用的飞书会议面试的，1h\n\n  1. 个人介绍\n  2. 自己挑一个项目介绍，疯狂追问难点\n  3. 八股\n  4. 用过哪些linux命令\n  5. 根据进程名字搜进程id的命令\n  6. 服务器的负载情况用什么命令查看\n  7. linux进程线程的区别\n  8. 逻辑地址和物理地址的区别，为什么要用逻辑地址和物理地址\n  9. java里数组和链表的区别是啥，遍历时性能的差异\n  10. java里hashmap是怎么实现的，（我说不清楚然后追问）你觉得应该怎么实现\n  11. 多线程这块你用过哪些工具\n  12. 了解https吧，他是怎么交互来实现“安全”的\n  13. 做了一道算法题（好像不是力扣的题），先问你有什么思路然后让代码实现（飞书会议里直接发送的，问了面试官说我写的代码能实时看到）给定一个无序数组，找出其中所有比左边所有数都大的数，同时比右边所有数都小的数字。需要考虑时间复杂度。举例：给定数组：[2,8,4,25,77]，则满足条件的数字为：2,25,77\n  14. 反问\n\n说一周内出结果，但一直没消息，12.26问了hr说凉了，发过邮件但我没收到\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/569116640894255104?sourceSSR=users",
        "title": "找磨损度最高和最低的硬盘 -  华为机试真题题解",
        "content": "> 分值： 100分\n>\n> 题解： Java / Python / C++\n\n![alt](https://uploadfiles.nowcoder.com/images/20231201/644248237_1701399029315/A4F5E48572027B66E6ECFA2EF0A7C66A)\n\n## 题目描述\n\n存储阵列上使用的一批固态硬盘，根据硬盘磨损值给定一个数组endurances,数组中每个元素表示单块硬盘的磨损度(0到10000之间)。\n\n磨损度越大，表示此盘需要更换的概率越高。需要找出磨损度最高三块盘下标和磨损度最低的三块盘下标。\n\n## 输入描述\n\n一组硬盘磨损度的数组。\n\n说明:\n\n(1) 数组endurances中无重复值\n\n(2) 数组的长度范围:[6,200]\n\n(3) 数组的下标从0开始。\n\n## 输出描述\n\n第一行:磨损度最高三块盘下标，按下标升序展示\n\n第二行:磨损度最低的三块盘下标，按下标升序展示\n\n## 示例1\n\n    \n    \n    输入：\n    1 50 40 68 72 86 35 14 87 99 63 75\n    \n    输出：\n    5 8 9\n    0 6 7\n    \n    解释：\n    输入:1 50 40 68 72 86 35 14 87 99 63 75:表示一组硬盘磨损度的数组，其中的每个数值表示每个硬盘对应的磨损度。\n    输出:\n    5 8 9:表示磨损度最高三块盘的下标\n    0 6 7:表示磨损度最低的三块盘的下标\n    \n\n## 示例2\n\n    \n    \n    输入：\n    23 34 56 12 11 10\n    \n    输出：\n    0 1 2\n    3 4 5\n    \n    解释:\n    输入:23 34 56 12 11 10:表示一组硬盘磨损度的数组，其中的每个数值表示每个硬盘对应的磨损度。\n    输出:\n    0 1 2:表示磨损度最高三块盘的下标\n    3 4 5:表示磨损度最低的三块盘的下标\n    \n\n## 题解\n\n> 简单构造题\n>\n> 将“磨损度” 和 “下标” 封装在一起然后根据“磨损度”排序，前三个是磨损度最低的三块盘， 后三个是磨损度最高的三块盘。\n\n### Java\n\n    \n    \n    import java.util.ArrayList;\n    import java.util.Arrays;\n    import java.util.Collections;\n    import java.util.List;\n    import java.util.Scanner;\n    \n    /**\n     * @author code5bug\n     */\n    public class Main {\n    \n        // 打印输出\n        static void print(List<Integer> list) {\n            int n = list.size();\n            for (int i = 0; i < n; i++) {\n                if (i + 1 == n) {\n                    System.out.println(list.get(i));\n                } else {\n                    System.out.print(list.get(i) + \" \");\n                }\n            }\n        }\n    \n        public static void main(String[] args) {\n            Scanner scanner = new Scanner(System.in);\n    \n            List<int[]> endurances =\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568912333607559168?sourceSSR=users",
        "title": "360 Java开发实习一面 2023/12/25",
        "content": "一、八股文\n\n操作系统\n\n1.进程线程的理解\n\n2.零拷贝\n\n3.BIO,NIO(select、poll、epoll)\n\n4.线程的几种状态\n\n5.用户态和内核态（为什么要区分）\n\n计算机网络\n\n1.4层网络模型\n\n2.dns\n\nJava\n\n1.JWT相关\n\n2.注册中心（为什么需要），配置中心（怎么实时更新的配置）\n\n3.微服务架构\n\n4.JMM内存模型，happens-before原则，指令重排\n\n5.RabbitMMQ的几种模式，work模式怎么实现的能者多劳\n\n数据库\n\n1.B+树，为什么是这个，特点是什么\n\n2.count（聚簇索引）和count（二级索引），哪个快\n\n3.Redis五大基本数据类型\n\n4.RDB和AOF\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568893594174488576?sourceSSR=users",
        "title": "麻了，石化盈科一面面经",
        "content": "![alt](https://git.acwing.com/Hasity/interview_hunter/-/raw/master/2024/image/3%E7%9F%B3%E5%8C%96%E7%9B%88%E7%A7%91%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F.jpg)\n\n> Java面向对象的三大特性，分别介绍一下\n\n  1. **封装（Encapsulation）：**\n\n     * 封装是面向对象编程的基本原则之一。它将类的实现细节隐藏起来，只向外部暴露必要的接口和数据。通过封装，对象内部的实现细节对外部是不可见的，这提高了代码的安全性和可维护性。封装可以通过访问修饰符（如private、protected、public）来实现，同时提供公共的方法来访问或修改私有属性。\n  2. **继承（Inheritance）：**\n\n     * 继承是一种通过重用现有类的属性和方法来创建新类的机制。子类继承父类的特性，可以使用父类中的方法和属性，同时可以在子类中扩展或修改这些方法和属性。继承实现了代码的重用，提高了代码的可维护性。Java中通过关键字`extends`来实现继承关系。\n  3. **多态（Polymorphism）：**\n\n     * 多态是指同一个操作作用于不同的对象可以有不同的行为。多态提高了代码的灵活性和可扩展性。Java中有两种类型的多态：编译时多态（静态多态）和运行时多态（动态多态）。运行时多态是通过方法的重写（Override）和接口来实现的。编译时多态是通过方法的重载（Overload）来实现的。多态是面向对象编程中一个非常重要的概念，它使得程序更容易扩展和维护。\n\n>\n> **[面经专栏直通车](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fmanager%2FcolumnDetail%2F0xKkDM)**\n\n>\n> **[面经专栏下载](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgit.acwing.com%2Flicw%2F24_job_hunter)**\n\n> List如何去重复\n\n在Java中，可以使用以下几种方式对List进行去重：\n\n  1. **使用Set：** 利用Set的元素不可重复性，将List转换为Set，然后再转回List。这会自动去除重复元素。\n    \n        List<String> list = new ArrayList<>();\n    // 添加元素到list\n    Set<String> set = new LinkedHashSet<>(list);  // 使用LinkedHashSet保持顺序\n    list.clear();\n    list.addAll(set);\n    \n\n  2. **Java 8 Stream API：** 使用Java 8引入的Stream API，通过流的distinct()方法去重。\n    \n        List<String> list = new ArrayList<>();\n    // 添加元素到list\n    list = list.stream().distinct().collect(Collectors.toList());\n    \n\n  3. **Apache Commons Collections：** 使用Apache Commons Collections库中的ListUtils类。\n    \n        List<String> list = new ArrayList<>();\n    // 添加元素到list\n    list = ListUtils.distinct(list);\n    \n\n  4. **使用Java 8 Lambda 表达式和Collectors.toSet()：**\n    \n        List<String> list = new ArrayList<>();\n    // 添加元素到list\n    list = list.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList());\n    \n\n> 说一下冒泡排序的思想\n\n冒泡排序是一种简单的排序算法，它的基本思想是通过多次遍历待排序的元素，比较相邻两个元素的大小，并根据需要交换它们的位置。在一次遍历中，将最大（或最小）的元素移动到最右边（或最左边），然后缩小待排序元素的范围，重复进行比较和交换直至完成排序。\n\n具体的冒泡排序过程如下：\n\n  1. 从第一个元素开始，依次比较相邻的两个元素。\n  2. 如果前一个元素大于后一个元素，则交换它们的位置。\n  3. 继续向后比较和交换，直到最后一个元素，此时最大的元素已经被移到了最右边。\n  4. 缩小待排序的范围，重复上述步骤，直到所有元素都有序。\n\n冒泡排序的特点是每一轮遍历都会确定一个最大（或最小）值的最终位置，因此总共需要进行 n-1 轮遍历，其中 n 是待排序元素的个数。\n\n冒泡排序的时间复杂度为 O(n^2)，其中 n\n是待排序元素的个数。尽管它在效率上不如快速排序等高级算法，但由于其简单易懂的原理，通常在教学和理解排序算法的过程中被介绍和使用。\n\n> 创建线程有哪几种方式？线程池有哪几个\n\n在Java中，创建线程有两种主要的方式：继承Thread类和实现Runnable接口。线程池则是通过`java.util.concurrent`包中的`Executor`框架来创建和管理线程。\n\n**创建线程的方式：**\n\n  1. **继承Thread类：**\n\n     * 创建一个类继承自Thread类，并重写run方法，然后创建该类的实例并调用start方法启动线程。\n    \n        class MyThread extends Thread {\n        public void run() {\n            // 线程执行的代码\n        }\n    }\n    \n    MyThread myThread = new MyThread();\n    myThread.start();\n    \n\n  2. **实现Runnable接口：**\n\n     * 创建一个类实现Runnable接口，实现run方法，然后创建Thread类的实例，将实现了Runnable接口的对象作为参数传递给Thread的构造方法，并调用start方法启动线程。\n    \n        class MyRunnable implements Runnable {\n        public void run() {\n            // 线程执行的代码\n        }\n    }\n    \n    Thread thread = new Thread(new MyRunnable());\n    thread.start();\n    \n\n**线程池的方式** ：\n\nJava中的线程池是通过`java.util.concurrent`包提供的Executor框架实现的。常用的线程池有以下几种：\n\n  1. **`newCachedThreadPool`：**\n\n  * 创建一个可缓存的线程池，线程池的大小可根据需要进行自动扩展，但在某些情况下可能会回收线程。\n    \n        ExecutorService executor = Executors.newCachedThreadPool();\n    \n\n    \n    \n       \n    2. **`newFixedThreadPool`：**\n       - 创建一个固定大小的线程池，线程数始终保持不变。\n    \n       ```java\n       ExecutorService executor = Executors.newFixedThreadPool(10); // 10为线程池的大小\n    \n\n  3. **`newSingleThreadExecutor`：**\n\n     * 创建一个单线程的线程池，保证所有任务按照指定顺序（FIFO，LIFO，优先级）执行。\n    \n        ExecutorService executor = Executors.newSingleThreadExecutor();\n    \n\n  4. **`newScheduledThreadPool`：**\n\n     * 创建一个定时执行任务的线程池。\n    \n        ScheduledExecutorService executor = Executors.newScheduledThreadPool(5);\n    \n\n这些线程池的创建方式都是通过`Executors`工厂类提供的方法来实现的。选择不同的线程池取决于具体的业务需求和性能要求。\n\n> SpringBoot有哪些优点\n\nSpring Boot 是一个基于 Spring 框架的快速开发脚手架，它简化了 Spring 应用的初始搭建和开发过程。以下是 Spring Boot\n的一些优点：\n\n  1. **简化配置：** Spring Boot 通过约定大于配置的原则，采用默认配置，减少了开发人员的配置工作。同时提供了丰富的可配置项，使得配置变得更加灵活。\n\n  2. **内嵌容器：** Spring Boot 内置了常用的Servlet容器（如Tomcat、Jetty），使得应用程序可以以独立的方式运行，无需外部Web服务器的支持。这降低了部署和运维的难度。\n\n  3. **自动化配置：** Spring Boot 根据项目的依赖，自动进行应用程序上下文的配置。这意味着无需手动配置大量的Bean，开发者可以更专注于业务逻辑的实现。\n\n  4. **快速开发：** Spring Boot 提供了大量的开箱即用的功能，如自动配置、热部署、可执行的 JAR 文件等，使得开发者可以更快地构建原型和开发功能。\n\n  5. **集成测试支持：** Spring Boot 提供了方便的测试支持，可以轻松编写集成测试和单元测试。测试的便捷性有助于确保应用程序的稳定性和可靠性。\n\n  6. **微服务支持：** Spring Boot 很好地支持微服务架构，可以通过 Spring Cloud 进行更进一步的微服务治理，提供服务注册、发现、负载均衡等功能。\n\n  7. **丰富的扩展生态系统：** Spring Boot 集成了众多 Spring 生态项目，如Spring Data、Spring Security等，可以方便地使用这些功能进行开发。\n\n  8. **大量的社区支持：** Spring Boot 有着庞大的社区，社区提供了大量的文档、教程和解决方案，开发者可以方便地获取帮助和分享经验。\n\n  9. **监控和管理：** Spring Boot 提供了许多用于监控和管理应用程序的工具，如Spring Boot Actuator，可以方便地查看应用程序的运行状态、性能指标等。\n\n  10. **生态系统：** Spring Boot 借助于Spring生态系统，提供了丰富的功能和解决方案，使得开发者能够更轻松地构建各类应用程序，包括企业级应用和微服务。\n\n> SpringBoot常用的注解\n\nSpring Boot 提供了许多注解，用于简化应用程序的配置和开发。以下是一些常用的 Spring Boot 注解：\n\n  1. **`@SpringBootApplication`：**\n\n     * 该注解用于标识一个主程序类，通常位于项目的入口处。它包含了`@Configuration`、`@EnableAutoConfiguration`、`@ComponentScan`三个注解，用于启用自动配置和组件扫描。\n  2. **`@RestController`：**\n\n     * 用于标识一个类是 RESTful 风格的控制器，它的方法返回的数据直接作为响应体，不会被视图解析器解析。\n  3. **`@RequestMapping`：**\n\n     * 用于映射 HTTP 请求的路径和方法，可以用在类和方法上，定义了请求的路径和处理方法。\n  4. **`@Autowired`：**\n\n     * 用于进行依赖注入，可以标注在构造方法、Setter 方法、字段、方法上。\n  5. **`@Service`、`@Repository`、`@Component`：**\n\n     * 分别用于标识一个类是业务服务层、数据访问层、通用组件，让 Spring 进行组件扫描并纳入 IoC 容器管理。\n  6. **`@Configuration`：**\n\n     * 用于定义配置类，类似于 XML 配置文件。标注在类上，表示该类是一个配置类。\n  7. **`@Value`：**\n\n     * 用于将属性值注入到 Bean 中，可以注入简单类型、字符串、表达式等。\n  8. **`@PathVariable`：**\n\n     * 用于将 URL 模板中的变量绑定到方法参数中。\n  9. **`@RequestParam`：**\n\n     * 用于将请求参数绑定到方法参数中，可以指定参数名、是否必须等。\n  10. **`@ResponseBody`：**\n\n     * 用于标识一个方法返回的结果直接作为响应体，不进行视图解析。\n  11. **`@GetMapping`、`@PostMapping`、`@PutMapping`、`@DeleteMapping`：**\n\n     * 这些注解用于简化常见 HTTP 方法的映射，分别对应于 GET、POST、PUT、DELETE。\n  12. **`@ConfigurationProperties`：**\n\n     * 用于将配置文件中的属性值绑定到一个 JavaBean 中，方便统一管理配置。\n  13. **`@EnableAutoConfiguration`：**\n\n     * 用于开启 Spring Boot 的自动配置功能，通常不需要手动添加，`@SpringBootApplication`已经包含了该注解。\n  14. **`@Async`：**\n\n     * 用于标识一个方法是异步的，可以在方法上使用，也可以在类上使用。\n  15. **`@EnableScheduling`：**\n\n     * 用于开启 Spring 的定时任务功能，标注在配置类上。\n\n> 数据库事务了解吗\n\n事务是一组被视为单个逻辑工作单元的数据库操作，要么全部执行成功，要么全部失败回滚，以确保数据库的一致性和可靠性。事务具有四个基本特性，通常称为 ACID\n特性：\n\n  1. **原子性（Atomicity）：**\n\n     * 事务是原子的，要么全部执行成功，要么全部失败回滚。如果事务在执行过程中发生错误，所有的修改将被撤销，数据库将会回滚到事务开始前的状态。\n  2. **一致性（Consistency）：**\n\n     * 事务使数据库从一个一致的状态转变到另一个一致的状态。在事务执行过程中，数据库约束一直保持有效，不会因为事务的执行而被破坏。\n  3. **隔离性（Isolation）：**\n\n     * 多个事务可以并发执行，但每个事务的操作应该与其他事务隔离。隔离性能防止多个事务之间相互影响，保证每个事务都感觉不到其他事务的存在。\n  4. **持久性（Durability）：**\n\n     * 一旦事务提交，它对数据库的修改将是永久性的，即使系统发生故障。数据库系统通过将事务的修改记录到物理存储中来实现持久性。\n\n在关系型数据库中，通常使用以下方式来管理事务：\n\n  * **显式事务管理：**\n\n    * 开发者通过编程方式开始、提交或回滚事务。通常使用数据库连接对象的`beginTransaction()`、`commit()`和`rollback()`等方法。\n  * **声明式事务管理：**\n\n    * 基于注解或配置的方式声明事务的边界。在 Spring 框架中，可以使用`@Transactional`注解来声明事务。这样的声明式事务管理更加方便，开发者无需显式编写事务管理的代码。\n\n事务的使用场景包括需要一致性和可靠性的数据库操作，例如在银行应用中的转账操作、在线购物中的支付过程等。通过使用事务，可以确保这些操作不会在执行过程中发生错误或中断而导致数据不一致。\n\n> 小程序向后端发起请求经过了哪些网络节点\n\n当小程序向后端发起请求时，经过了一系列网络节点。以下是一般情况下的主要网络节点：\n\n  1. **小程序端：**\n\n     * 请求发起的地方，可以是用户的手机或其他设备上运行的小程序。\n  2. **小程序服务器：**\n\n     * 小程序端发送请求到小程序服务器，这是请求的第一个目标。小程序服务器负责接收请求、处理业务逻辑，然后向后端服务器发送请求。\n  3. **反向代理服务器（可选）：**\n\n     * 在一些部署架构中，可能会存在反向代理服务器，用于负载均衡、安全过滤等。这个节点并不是必需的，具体是否存在取决于后端服务的架构。\n  4. **应用服务器：**\n\n     * 后端应用服务器，接收小程序服务器的请求，处理业务逻辑，访问数据库等。这可能是一个单独的服务器或者一个集群。\n  5. **数据库服务器：**\n\n     * 如果请求涉及到数据库操作，后端应用服务器会向数据库服务器发送请求，执行相应的数据库操作。\n  6. **其他第三方服务（可选）：**\n\n     * 有时，后端服务可能还会涉及到与其他第三方服务进行交互，比如支付服务、消息推送服务等。\n  7. **返回路径：**\n\n     * 从数据库或其他第三方服务获取到数据后，数据经过相同的路径返回，依次经过应用服务器、反向代理服务器（可选）、小程序服务器，最终到达小程序端。\n\n在整个过程中，数据通过网络传输，每个网络节点都可能引入延迟，因此优化网络请求的性能是开发中需要考虑的一个重要方面。安全性也是关键问题，确保数据在传输过程中是加密的，并且服务端对请求进行了合适的身份验证和授权。\n\n> 小程序请求接口过程中网络安全是如何保证的\n\n在小程序请求接口的过程中，网络安全是非常重要的，涉及到用户的隐私和数据的保护。以下是一些主要的措施，这些措施一般也适用于其他前端应用：\n\n  1. **HTTPS加密：**\n\n     * 小程序要求所有的网络请求必须使用HTTPS协议，确保数据在传输过程中是加密的。HTTPS通过SSL/TLS协议对通信内容进行加密，防止数据被中间人窃取或篡改。\n  2. **数据签名与加密：**\n\n     * 对于重要的请求，可以使用签名机制确保请求的完整性和真实性。通常使用类似于 HMAC（Hash-based Message Authentication Code）的算法，将请求参数和密钥进行签名，并将签名附加到请求中。服务端根据相同的密钥进行签名验证。\n  3. **小程序登录态与用户鉴权：**\n\n     * 小程序通过调用 `wx.login` 获取登录凭证，然后将凭证发送到后端服务器。后端服务器使用这个凭证调用微信服务端接口验证，并获取到用户的唯一标识，以此来识别用户。确保在接口调用中对用户进行鉴权，只允许合法的用户访问敏感接口。\n  4. **接口访问限制：**\n\n     * 限制用户的访问频率，通过防刷策略来避免恶意攻击和非法访问。这可以通过限制同一 IP 地址的访问频率或者使用令牌桶、漏桶等算法进行限流。\n  5. **OAuth2.0认证：**\n\n     * 对于需要用户授权的操作，可以使用 OAuth2.0 协议，通过微信提供的用户授权接口，获取用户的授权同意后的令牌（access token）来进行接口访问。\n  6. **防止SQL注入和XSS攻击：**\n\n     * 在处理用户输入时，对输入进行有效的过滤和转义，防止SQL注入和XSS攻击。不信任的输入数据应该被过滤或者进行合适的编码，确保它们不会被误认为是执行代码或者SQL语句。\n  7. **敏感数据保护：**\n\n     * 对于敏感数据的存储和传输，需要进行适当的加密处理，包括数据库中的密码、个人隐私信息等。同时，确保在传输中采用安全的协议，如HTTPS。\n  8. **错误处理：**\n\n     * 在接口中提供详细的错误信息是为了方便开发调试，但在生产环境中应该尽可能减少详细的错误信息的返回，以防泄漏敏感信息。\n\n这些安全措施需要在前端小程序和后端服务器都进行合作实施，形成端到端的安全体系。前端应保护用户信息和凭证，后端则需要验证和授权请求，以确保系统的整体安全性。\n\n> linux相关的命令\n\n以下是一些常用的Linux命令，用于在终端中执行各种任务：\n\n  1. **`ls` \\- 列出文件和目录：**\n\n     * 用于列出当前目录下的文件和子目录。\n    \n        ls\n    \n\n  2. **`cd` \\- 切换目录：**\n\n     * 用于更改当前工作目录。\n    \n        cd directory_name\n    \n\n  3. **`pwd` \\- 显示当前工作目录：**\n\n     * 用于显示当前工作目录的路径。\n    \n        pwd\n    \n\n  4. **`cp` \\- 复制文件或目录：**\n\n     * 用于复制文件或目录。\n    \n        cp source destination\n    \n\n  5. **`mv` \\- 移动/重命名文件或目录：**\n\n     * 用于移动文件或目录，也可用于重命名。\n    \n        mv source destination\n    \n\n  6. **`rm` \\- 删除文件或目录：**\n\n     * 用于删除文件或目录。\n    \n        rm file_name\n    \n\n  7. **`mkdir` \\- 创建目录：**\n\n     * 用于创建新目录。\n    \n        mkdir directory_name\n    \n\n  8. **`rmdir` \\- 删除空目录：**\n\n     * 用于删除空目录。\n    \n        rmdir directory_name\n    \n\n  9. **`cat` \\- 查看文件内容：**\n\n     * 用于查看文件的内容。\n    \n        cat file_name\n    \n\n  10. **`more` \\- 逐屏显示文件内容：**\n\n     * 用于逐屏显示文件的内容。\n    \n        more file_name\n    \n\n  11. **`less` \\- 逐屏显示文件内容，支持向前翻页：**\n\n     * 用于逐屏显示文件的内容，支持向前翻页。\n    \n        less file_name\n    \n\n  12. **`head` \\- 显示文件头部内容：**\n\n     * 用于显示文件的头部内容。\n    \n        head file_name\n    \n\n  13. **`tail` \\- 显示文件尾部内容：**\n\n     * 用于显示文件的尾部内容，常用于查看日志。\n    \n        tail file_name\n    \n\n  14. **`grep` \\- 在文件中查找匹配的文本：**\n\n     * 用于在文件中查找包含指定文本的行。\n    \n        grep pattern file_name\n    \n\n  15. **`find` \\- 在文件系统中查找文件：**\n\n     * 用于在文件系统中递归查找文件。\n    \n        find directory -name file_name\n    \n\n  16. **`chmod` \\- 修改文件权限：**\n\n     * 用于修改文件或目录的权限。\n    \n        chmod permissions file_name\n    \n\n  17. **`chown` \\- 修改文件所有者：**\n\n     * 用于修改文件或目录的所有者。\n    \n        chown owner:group file_name\n    \n\n  18. **`ps` \\- 显示当前运行的进程：**\n\n     * 用于显示当前正在运行的进程信息。\n    \n        ps\n    \n\n  19. **`kill` \\- 终止进程：**\n\n     * 用于终止指定的进程。\n    \n        kill process_id\n    \n\n  20. **`man` \\- 查看命令手册：**\n\n     * 用于查看Linux命令的手册页。\n    \n        man command_name\n    \n\n> kill和kill -9有哪些区别\n\n![alt](https://git.acwing.com/Hasity/interview_hunter/-/raw/master/2024/image/3%E7%9F%B3%E5%8C%96%E7%9B%88%E7%A7%91%E4%B8%80%E9%9D%A2%E9%9D%A2%E7%BB%8F2.jpg)\n\n[来源连接](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Ffeed%2Fmain%2Fdetail%2F91be27d72ba14703a3b6809c5286783f)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568886408628293632?sourceSSR=users",
        "title": "上海某小厂面经",
        "content": "1.项目相关，逐条问。\n\n2.springboot使用过哪些注解\n\n3.hashmap是线程安全的吗？concurrenthashmap是如何解决线程安全的\n\n4.介绍一下索引，索引有什么好处，有什么坏处，索引什么时候失效\n\n5.事务操作的四大特性是什么，介绍一下\n\n6.事务的隔离级别了解吗\n\n7.synchronize是如何保证线程安全的\n\n8.介绍一下jvm，介绍一下堆，介绍一下垃圾回收算法，通常怎么选择垃圾回收算法\n\n  \n\n差不多就这些，都是八股能背到的，但是由于第一次面试没背的很熟悉，好在面试官没有问的非常细，我能答大部分点。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568870088326029312?sourceSSR=users",
        "title": "通话不中断的最短路径 -  华为机试真题题解",
        "content": "> 分值： 200分\n>\n> 题解： Java / Python / C++\n\n![alt](https://uploadfiles.nowcoder.com/images/20231201/644248237_1701399029315/A4F5E48572027B66E6ECFA2EF0A7C66A)\n\n## 题目描述\n\n给定一个MxN的网格，其中每个单元格都填有数字，数字大小表示覆盖信号强度。灰色网格代表空地，橙色网格代表信号覆盖区域，绿色网格代表基站，绿色网格内数字大小表示该基站发射信号的初始强度。\n\n基站信号每向外（上下左右）传播一格，信号强度减1，最小减为0，表示无信号，如下图示。当某个位置可以同时接收到多个基站的信号时，取其中接收信号强度的最大值作为该位置的信号强度。\n\n对于给定网格，请判断是否存在一条路径，使得从左上角移动到右下角过程中信号不中断，只能上下左右移动。假设接收到的信号强度低于门限Th ，信号就会中断。\n\n注意:出发点固定在网格的左上角，终点是网格的右下角。\n\n## 输入描述\n\n第一行输入信号强度Th。 (1<= Th <= 100)\n\n第二行输入矩阵M、N。 (1<= M <= 100，1<= N <= 100)\n\n第三行输入基站个数K。 (1<= K <= 100)\n\n后续K行输入基站位置及初始信号强度。(前两个值表示基站所在行、列索引，第3个值表示基站初始信号强度)\n\n## 输出描述\n\n返回信号不中断的最短路径，不存在返回0\n\n## 示例1\n\n    \n    \n    输入：\n    1\n    4 4\n    2\n    0 1 2\n    3 2 3\n    \n    输出：\n    6\n    \n    解释: \n    1) 信号强度门限Th = 1\n    2) M=4，N=4\n    3) 4*4网格中一共包含2个基站\n    4) 2个基站的位置，其中第1个基站在第0行第1列、初始信号强度 =2;第2个基站在第3行第2列、初始信号强度=3\n    \n\n![alt](https://uploadfiles.nowcoder.com/images/20231222/644248237_1703217592354/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n注:如上Grid，绿色表示基站，橙色为基站信号往外传播后覆盖的区域;按照图中箭头方向移动路径最短，为6\n\n## 示例2\n\n    \n    \n    输入：\n    1\n    3 3\n    2\n    0 1 2\n    1 1 2\n    \n    输出：\n    0\n    \n    解释：\n    1) 信号强度门限Th = 1\n    2) M=3，N=3\n    3) 3*3网格中一共包含2个基站\n    4) 2个基站的位置，其中第1个基站在第0行第1列、初始信号强度 = 2;第2个基站在第1行第1列、初始信号强度 =2;\n    \n\n![alt](https://uploadfiles.nowcoder.com/images/20231222/644248237_1703217603932/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n注:如上Grid，绿色表示基站，橙色为基站信号往外传播后覆盖的区域;如图，第2行第2列无信号覆盖，返回0\n\n## 题解\n\n> ### 解题思路\n>\n>\n> 题目可以通过深度优先搜索（DFS）和广度优先搜索（BFS）结合来解决。首先，通过DFS模拟基站信号的辐射过程，然后使用BFS找到从左上角到右下角的最短路径。\n>\n>   1. 使用DFS在网格上模拟基站信号辐射过程，记录每个格子上的信号强度。\n>   2. 使用BFS搜索从左上角到右下角的最短路径，考虑信号强度和信号门限。\n>\n\n>\n> ### 代码大致描述\n>\n>   1. 输入Th，M，N，K，以及每个基站的位置和初始信号强度。\n>   2. 使用DFS模拟基站信号辐射，记录每个格子的信号强度。\n>   3. 使用BFS搜索从左上角到右下角的最短路径，考虑信号强度和信号门限。\n>   4. 输出最短路径的长度。\n>\n\n### Java\n\n    \n    \n    package contest.acmcoder.p1;\n    \n    \n    import java.util.ArrayDeque;\n    import java.util.Queue;\n    import java.util.Scanner;\n    \n    /**\n     * @author code5bug\n     */\n    public class Main {\n        static int M, N, Th;\n    \n        public static void main(String[] args) {\n            Scanner in = new Scanner(System.in);\n            Th = in.nextInt();\n            M = in.nextInt();\n            N = in.nextInt();\n            int K = in.nextInt();\n            int[][] g = new int[M][N];\n            for (int i = 0; i < K; i++) {\n                int r = in.nextInt(), c = in.nextInt(), x = in.nextInt();\n                dfs(g, r, c, x, new boolean[M][N]);\n            }\n    \n            boolean[][] vis = new boolean[M][N];\n            Queue<int[]> q = new ArrayDeque<>();\n            if (g[0][0] != 0) {\n                q.offer(new int[]{0, 0});\n                vis[0][0] = true;\n            }\n            int step = 0;\n            while (!q.isEmpty()) {\n                int size = q.size();\n                for (int i = 0; i < size; i++) {\n                    int[] p = q.poll();\n                    int r = p[0], c = p[1];\n    \n                    if (r == M - 1 && c == N - 1) {\n                        System.out.println(step);\n                        return;\n                    }\n    \n                    int[] dirs = new int[]{-1, 0, 1, 0, -1};\n                    for (int j = 1; j < 5; j++) {\n                        int nr = r + dirs[j - 1], nc = c + dirs[j];\n    \n                        if (nr < 0 || nc < 0 || nr >= M || nc >= N || vis[nr][nc] || g[nr][nc] == 0) cont\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568863354995879936?sourceSSR=users",
        "title": "武汉某小厂后端开发实习生",
        "content": "技术面：\n\n  1. 真手撕，给你纸，让你手写代码（20分钟解决）：\n  2. 最长回文子串\n  3. 刷过几遍了，秒了\n  4. 两个线程，实现顺序交替打印\n  5. 信号量解决（有点不熟练）\n  6. 项目穿插八股（接近半小时）\n  7. 介绍项目以及难点\n  8. 项目中如何使用shardingsphere的\n  9. 讲一讲责任链模式\n  10. 还知道什么模式\n  11. 了解的不多，还知道单例\n  12. 讲一讲单例\n  13. 具体如何实现单例\n  14. 有点忘了\n  15. 如何实现幂等接口\n  16. 讲一讲redis的数据结构\n  17. 用简单的话讲一讲redis的缓存击穿，缓存穿透，缓存雪崩，以及对应的解决方案\n  18. 纯八股（半小时）\n  19. 并发编程\n  20. 线程的生命周期 \n  21. 讲一讲AQS\n  22. AQS如何实现semaphor，countdownlatch，cyclebarrier\n  23. 有点含糊的扯过去了\n  24. semaphor，countdownlatch，cyclebarrier的使用场景\n  25. 多个线程获取资源，游戏加载/多线程下载\n  26. 讲一讲java中的常用线程池\n  27. 固定大小线程池，缓存线程池，其他的记不清了\n  28. ThreadLocal是干什么的，底层的实现\n  29. 线程私有盒子，hashmap实现\n  30. 初始化为3的信号量，先减为0再扩大至5可以吗？\n  31. 不会\n  32. java基础\n  33. 常用集合\n  34. ArrayLIst LinkedList的不同\n  35. 底层结构，使用场景\n  36. HashMap底层实现\n  37. PriorityQueue底层实现\n  38. 链表？忘了\n  39. JVM\n  40. 讲一讲jvm的内存结构\n  41. 讲一讲GC算法\n  42. 新生代的比重？\n  43. 啥啊，没听明白\n  44. 新生代存活多少次对象进入老年代\n  45. 15\n  46. MySQL\n  47. 讲一讲事务及其原理\n  48. 原理有点忘了，讲到binlog，redolog的双重检查去了\n  49. 讲一讲索引的类别\n  50. 按结构分，按功能分\n  51. 讲一讲索引失效，为什么会失效\n  52. 字符串不加引号\n  53. 头部模糊匹配\n  54. 最左前缀法则以及失效原因\n  55. 讲一讲MySQL的隔离级别\n  56. rc，rr，串行化\n  57. 默认隔离级别\n  58. rr\n  59. 讲一讲MVCC\n  60. 隐藏字段，undolog，读视图\n  61. 讲一讲MySQL常见存储引擎，以及对比\n  62. innodb，还有一个不会读😂\n  63. 对比就讲了一个行级锁？没背这个\n  64. 其他\n  65. spring的核心\n  66. ioc，aop\n  67. springcloud了解吗\n  68. 没深入学习，讲了个大概\n\n感觉问的挺多的，但是不深入，面试体验一般\n\n\\--------------------------------------\n\n已过\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568861392392957952?sourceSSR=users",
        "title": "小米安卓校招一面 2023/12/25",
        "content": "45分钟结束，无需自我介绍，约了二面\n\n一、八股文\n\n1.泛型擦除的概念。什么时候用\n\n2.ThreadLocal原理，内存泄漏的原因\n\n3.知道哪些数据压缩算法\n\n4.dns挟持是什么，哪些解决办法\n\n5.Charles怎么抓https的包\n\n6.java四种引用类型\n\n7.jvm有哪几种gc算法，分代收集新生代老年代分别使用哪一种\n\n8.数据库第三范式\n\n9.http状态码\n\n10.https的流程\n\n11.tcp四次挥手\n\n12.dns解析过程\n\n13.为什么hashmap链表是尾插\n\n14.concurrenthashmap为什么不可以存null的key而hashmap可以\n\n15.equals和hashcode\n\n16.线程池怎么配置参数保证有序\n\n17.synchronized底层原理\n\n18.cas的缺点，怎么解决\n\n19.http2.0和http3.0\n\n20.快重传和快恢复\n\n21.cookies和session\n\n22.五层网络结构，每一层有哪些协议\n\n二、代码题\n\n斐波那契数列（递归版本、dp版本、矩阵版本）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568796229434355712?sourceSSR=users",
        "title": "小红书 电商 后端实习 一面",
        "content": "12.19 小红书电商团队 Java后端实习 一面 base上海\n\n一面是微信视频聊的，面完第二天hr约二面，到这里好像才正式进入公司流程，不过拿了其他offer了就主动暂停了流程\n\n部分面试内容：\n\n  1. 聊实习项目，分库分表怎么做的？这块不是我做的，不太了解\n  2. ZooKeeper相关（因为rpc项目中用到zk）\n  3. 如何监测节点可用？session、心跳机制\n  4. 如何zk注册中心挂了，如何实现高可用？说了客户端加可用节点列表的缓存，zk集群两种方式\n  5. 集群间如何同步？\n  6. 动态代理\n  7. 除了JDK动态代理，还有什么动态代理方法？\n  8. JDK和CGLIB的原理？\n  9. JDK代理对象与被代理对象之间是什么关系？\n  10. stream流\n  11. 一个链表中的对象还有链表类型的属性，如何打平了进行取值，用哪个函数？flatMap\n  12. 如何分组，如何过滤？groupingBy，filter\n  13. 如何选出第一个不重复的元素？说另外用一个set，面试官说filter也能实现\n  14. 场景思考题\n  15. 手机扫浏览器二维码实现自动登录是如何实现的？面试官有引导思考\n  16. 浏览器如何感知到已经扫码？说了轮询请求，面试官说这是最基本的方法，更常用的是消息队列\n  17. 算法题：链表反转每两个相邻节点？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568765183909167104?sourceSSR=users",
        "title": "拿到offer的校招生都是这么说自我介绍的！游戏行业适用",
        "content": "Hello大家好，我是陪伴游戏人成长的Ceci学姐。\n\n作为面试过上千人的学姐告诉你一个残酷真相！那就是面试官的第一印象占面试成功率的50%！\n\n那么如何让面试的自我介绍环节脱颖而出呢？\n\nCeci学姐有妙招，照着这篇文章去准备，保证让你吸睛1倍！ 建议找工作的同学们收藏起来喔~~\n\n普通人的自我介绍：\n\n大家好，我叫小A，毕业于XX大学，今年22岁。我在学校里担任班级干部和校学生会的干部，\n\n曾经成功举办了各类学生会活动。（不要一来就说你在学校里的职位和成就，面试官并不关心，更想听到的是你的实习经历！）\n\n我今天应聘的是游戏运营，因为我很爱玩游戏，一般会玩LOL、王者荣耀，我是黄金段位，carry全场。（不要说一些大众游戏！10个学生里9个都说爱玩王者荣耀，面试官已经听腻了！各种类型的游戏都要说，特别是和目标公司相关类型的！）\n\n但是我不怎么氪金，我认为氪金就输了，很没有面子。（很傻很天真的想法，面试官OS：玩家都不氪金我们公司怎么赚钱呢。如果你经常氪金，可以具体聊一聊。）\n\n因为我很爱玩游戏，我想成就一个游戏梦想，希望各位面试官能给我一次机会。（错误！如果你空有一腔热血，公司并不是成就你梦想的地方，这里是职场，一切还是以能力说话。）\n\n拿到offer的同学的自我介绍：\n\n\"各位面试官好，我叫小A，毕业于XX大学，今年22岁。我应聘的是游戏运营岗位，我对于本岗位的理解是……，\n\n我认为我有能力胜任，原因有3，第1点……，第2点……，第3点……（如果有实习经历，那就直接介绍实习经历）。\n\n当然，我也有非常丰富的游戏经历，我比较热爱rpg类型的游戏，其中XX游戏（可以选一个小众一点的）我的游戏时长是1000个小时，在过程中我也对游戏的系统进行了分析和技能的拆解。\"\n\n同时也可以聊一聊对于氪金、商业化的理解。其次自己在学校里的岗位可以一笔带过，最后表达对行业的热爱，和对自己能够应聘上的信心。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568749047066959872?sourceSSR=users",
        "title": "华为od-22届考研-测试面经",
        "content": "**背景：**\n二战失败选手，双非一本目标院校，数学与应用数学专业，无相关工作经验也没有什么拿得出手的项目。3月中旬开始重新学java（大学里有学过一个学期的java，很水）。期间经常通宵肝，学习框架、刷leedcode，可能是因为数学专业出身，数据结构和算法这一块学起来并没有觉得陌生。\n\n一开始是希望去尝试开发，后面在栗栗姐的介绍下以及了衡量了自身的情况转了测试，同时也对测试这份工作也非常感兴趣的，非常感谢栗栗姐的指导（大家对od有兴趣的话可以找她哦）、同时也非常感谢部门对接人魏哥的辅导。**总体流程的效率真的很高！**\n\n  * **准备心得：**\n\n**1、在准备机考之前一定要看栗栗姐的刷题指南，有目的做题！**\n\n**2、面试的时候我觉得最重要的是自我介绍，可以在面试前就准备好自我介绍，对着镜头多练几遍！提前进入会议调试设备并且适应在镜头面前说话**\n\n**3、在面试的过程中自我介绍、回答问题的时候可以尝试着将话题引导自己相对比较熟悉的部分，引导面试官向你熟悉的方面进行提问。**\n\n**4、回答面试官的问题可以先给结论，然后分点讲细节，这样面试官听你回答会更加轻松一些。**\n\n**5、面试的过程中要注意让面试官感受到你的诚意，在适当的时候表现自己，大多数时候需要保持谦逊。**\n\n  * **5月11号 一面（一个半小时）**\n\n**面试心得：认真对待，认真准备，尊重面试官，回答有逻辑，不自大不过分自夸，不过分自卑**\n\n1、面试官介绍面试流程\n\n2、介绍下毕业后到现在的经历\n\n3、涉及的问题大概有这些\n\n（1）测试流程有哪些，以及你觉得测试流程哪几个部分是比较重要的？\n\n（2）对于安全测试这块东西有了解吗？（我自己聊到了sql注入、ddos这些）\n\n（3）刚才你谈到了sql注入，你可以给我讲讲sql注入是什么原因导致的吗？如何排查这样的问题？\n\n（4）平常做项目的时候用过哪些测试工具？\n\n（5）我看你的项目用到了docker容器，你可以给我介绍下docker容器的原理吗，除了docker你还了解过其他的容器吗？\n\n（6）你平时自己写代码的时候有用到什么代码审查工具吗？\n\n（7）如果我让你说linux命令，你脑海里最先浮出的是哪3个linux命令\n\n还有其他一些问题，记不太清楚了，印象中大多都能够聊上一些，认真准备岗位相关的东西以及简历上写的东西熟悉一些，大多数问题是能够聊一些的。\n\n4、手撕代码\n\n面试官准备了不同难度的编程题，问我是想要选简单一点的还是难一点的，我说难一点的，没有做出来（笑），题目是一道有关于依次反转字符串里面括号里面所包括的字母，最终输出不带括号的字母内容。\n\n面试结束后回忆起了这道题觉得不难做，私下做了一遍。（在当时的面试情况下紧张到脑袋有点宕机了）当时跟面试官讲了有关于这道题的思路，面试官认可我的思路，然后换了道题较为简单的题做出来了。\n\n5、面试结束，面试官问有什么问题要问他的\n\n（1）刚才的手撕代码题有更好的解法吗？\n\n（2）如果说我有幸获得了这份工作，可能会遇到的挑战是什么（好像大概意思是这个，我有点忘了）\n\n**6、****面试结束后不到5分钟告知一面通过，定级D1**\n\n  * **5月12号 二面（一个小时）**\n\n**面试心得：认真对待，认真准备，尊重面试官，回答有逻辑，不自大不过分自夸，不过分自卑**\n\n1、面试官介绍面试流程\n\n2、自我介绍\n\n3、涉及的问题\n\n（1）针对简历上的项目提问了一些问题\n\n（2）描述一下自己做的项目？\n\n（3）项目做了什么测试\n\n（4）介绍下项目里面用到的架构\n\n（5）Docker容器相关的东西\n\n（6）黑盒测试、白盒测试的方法有哪些？\n\n（7）描述下等价类方法，给了一个例子让我利用等价类方法进行划分\n\n（8）如果我要修改数据库某个表的字段，请描述一下相关的sql语句\n\n（9）如果我要创建一个文件夹，请用linux命令描述一下相关命令\n\n（10）接口测试相关的东西\n\n大概是这样，有些问题记不太清楚了，面试官会针对你的回答的有涉及的东西深入问你，所以回答的时候要注意一点，尽量少提及一些自己不熟悉的东西，以免面试官会抓住你所提及的东西一直问你，熟悉的还好，不熟悉的话可能会有点回不上来。\n\n4、手撕代码题：简单题\n\n**5、****面试结束后一个小时后告知面试通过**\n\n  * **5月13号早上 hr面（十几分钟）**\n\n**面试心得：认真对待，认真准备，尊重面试官，让hr知道你是能够胜任这份工作的，能够为公司做出贡献的**\n\n1、自我介绍\n\n2、为什么选择东莞作为工作地点\n\n3、对这个岗位的认识\n\n4、问是不是通过英语六级\n\n5、期望薪资是多少\n\n6、hr问我有什么需要问他的，我问了团队的氛围怎么样，以及我该采取什么的方式能够更好的融入团队\n\n**7、****面试结束后不到三分钟告知面试通过****，效率很高**\n\nhr面有时候面试官会有意的探一探你的简历是否有造假的成分，个人稳定性（对公司文化的是否认同这些）\n\nhr面我觉得最重要的部分是自我介绍，自我介绍的时候要把自身与这个岗位的适配点介绍性，自身的稳定性，自身的能力、团队协作能力，向hr传递一个信息：你是有能力有信心从事这份工作的，并且你是能够融入团队的，是比较稳定的。\n\n  * **5月13号晚上 综合面（不到二十分钟）**\n\n**面试心得：认真对待，认真准备，尊重面试官，让主管知道你是能够胜任这份工作的，能够为团队做出贡献的。**\n\n1、自我介绍\n\n2、考研考的哪个学校？\n\n3、喜欢东莞这座城市吗？\n\n4、考研期间面临的挑战是什么，以及你是如何解决这些困难的？\n\n5、父母是做什么的？\n\n6、还有准备考研打算吗？\n\n7、未来的规划是什么？\n\n8、对于加班文化怎么看？是否能够接受加班？\n\n9、还有什么需要问他的？ 我问了团队的合作方式是怎么样的\n\n10、最后主管给我提了一些未来职业方向上的建议，以及应该往哪个方面思考。\n\n**11、****面试结束，面试结束后不到五分钟告知面试通过。**\n\n主管面保持问答前后逻辑融洽，保持一种谦逊的态度，尊重面试官，如实回答（当然也不要傻乎乎的把自己一些比较严重的缺点暴露出来哦），不要过分自大自夸，回答的时候不要紧张到话说不出来应该是没有什么大问题的。\n\n## **总结**\n\n我觉得od对我来说是不错的去向，虽然在网上看有关于od的负面评论也有一些顾虑，但我觉得每个人对自己的定位不一样，我觉得od一个比较适合目前自己的定位，适合自己的跑道。至于未来，我觉得是能够通过个人的努力不断去提升自己的能力来弥补其他方面的缺陷，只是需要一些时间沉淀。\n\n**最后大家对od有兴趣的话可以联系栗栗姐哦，是一个负责任且真诚的HR**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568731020787200000?sourceSSR=users",
        "title": "大众汽车(CARIAD China)Android实习面经",
        "content": "9月就在实习僧投了，一直没有响应，一直到12月好像原本的实习生准备离职了所以腾出了一个HC才想要招人\n\n## 一面（2023/12/7 45min）\n\n  1. 如何实现一个循环链表？树的遍历方式有哪些？\n  2. 项目介绍，聊项目\n  3. 如何实现跨线程的数据和UI更新？Handler机制和回调\n  4. Activity和Fragment的生命周期？Activity和Fragment之间如何数据传递？\n  5. Android里面如何去调用c、c++的代码？不了解NDK编程\n  6. 自定义ViewGroup\n  7. 如何实现不同界面风格代码的快速切换？之后就没问技术了\n  8. 除了编程方面你觉得你还有什么优势？\n  9. 问我的本专业相关的课程\n  10. 问我的英语水平，口语水平\n\n反问：\n\n  1. 实习生的主要工作和部门业务，技术栈？\n  2. 面试表现？\n\n总结：没问什么八股，很长时间在聊项目，大众、特斯拉这一类外企真的会看你的英语水平\n\n  \n\n大概过了一周通知过了，也没有后续面试了，直接电话聊待遇和入职时间，好像汽车厂、手机厂的面试难度真的没有互联网那么高，还是偏向于找互联网的比较好，已拒，不知道他们招到人没有，感兴趣的兄弟可以试一试，我在实习僧投的\n\n  \n\n最近：考试贼多，到现在还有很多考试，好想快点考完。噢对了，今天是圣诞节，祝大家圣诞快乐！愿我们每个人所求皆如愿，所行化坦途，多喜乐，长安宁！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568528102536511488?sourceSSR=users",
        "title": "某外企-信息安全岗（Cyber security）面经",
        "content": "11.15一面：线上30分钟左右\n\n  1. 自我介绍，问项目\n  2. 你对EDR和传统终端防病毒软件怎么看，这俩有啥异同之处（随便扯了几句）\n  3. 哪些产品或者哪些厂商的洞挖的多一些\n  4. （英文问答）做过应急响应吗，举几个例子\n  5. 简历里写你在网络尖刀？那个组织现在咋样了，里面的人怎么样（直接开吹\n  6. 有没有参加过攻防比赛，CTF啥的\n  7. 有对二进制进行逆向么，脱壳的方法（随便扯了几句）\n  8. 红蓝队搞过吗（我只搞过红队，没咋搞过蓝队不太了解）\n  9. 情景问答：你是一个安全工程师，对于公司内现存的一些产品，如何给出安全加固建议\n\n不得不吐槽一下这个Cisco WebEx，一开始一直连不上，后来换了个网才好\n\n11.28二面：\n\n  1. 介绍\n  2. git用过吗，高级点的功能知道吗（说只用过平常那些git clone、checkout、rebase这些）\n  3. 你是怎么学习安全技术和安全知识的（自学）\n  4. ATT&CK模型知道吗\n  5. 渗透过程中遇到过哪些卡点，怎么解决的 挖SRC的过程中遇到过哪些漏洞？\n  6. TCP和UDP的区别、HTTP常见的状态码有哪些（八股）\n  7. NAT是什么，有啥作用\n  8. 说出几种常见的漏洞，并且简单描述一下原理和修复方法\n  9. 对数据安全了解吗，做过合规吗，知道安全认证的标准（PCI-DSS和ISO/27001）\n  10. 如何在交换机上配置镜像接口（只记得mirroring-group这个命令了）\n  11. OSPF和BGP的区别\n  12. 关于安全，后续想往哪个方向发展\n\n反问：\n\n安全部门在集团哪个大部门下面（说是中国区合规和安全的在一块）\n\n会值班吗（有，会有加班工资和调休）团队人数（中国区人不多）\n\n公司培训体系\n\n前面安全相关的都还好说，后面那几个计网问题把我问住了，还好脑子里有点印象要不然就彻底尬住\n\n场景问答较少，八股较多\n\n过了几天被通知二面通过，HR面就纯粹是聊天\n\n  1. 个人基本情况\n  2. 你家是哪的，为什么投了我们公司的岗位\n  3. 扯了会校园生活，问考研了没有\n  4. 对在这里工作的期待，我说我英语打字聊天可以，但可能不太会说 HR笑了说问题不大\n  5. 反问：公司福利、年假、加班情况、是否有外派机会\n\n待更新\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568379499612483584?sourceSSR=users",
        "title": "最大化控制资源成本 - 华为OD统一考试",
        "content": "> OD统一考试\n>\n> 题解： Java / Python / C++\n\n![alt](https://uploadfiles.nowcoder.com/images/20231201/644248237_1701399029315/A4F5E48572027B66E6ECFA2EF0A7C66A)\n\n## 题目描述\n\n公司创新实验室正在研究如何最小化资源成本，最大化资源利用率，请你设计算法帮他们解决一个任务分布问题:有taskNum项任务，每人任务有开始时间(startTime)\n，结更时间(endTme) 并行度(paralelism)\n三个属性，并行度是指这个任务运行时将会占用的服务器数量，一个服务器在每个时刻可以被任意任务使用但最多被一个任务占用，任务运行完成立即释放(结束时刻不占用)。任务分布问题是指给定一批任务，让这批任务由同一批服务器承载运行，请你计算完成这批任务分布最少需要多少服务器，从而最大最大化控制资源成本。\n\n## 输入描述\n\n第一行输入为taskNum，表示有taskNum项任务 接下来taskNum行，每行三个整数，表示每个任务的开始时间(startTime ) ，结束时间\n(endTime ) ，并行度 (parallelism)\n\n## 输出描述\n\n一个整数，表示最少需要的服务器数量\n\n## 示例1\n\n    \n    \n    输入\n    3\n    2 3 1\n    6 9 2\n    0 5 1\n    输出\n    2\n    \n    说明\n    共有三个任务，第一个任务在时间区间[2，3] 运行，占用1个服务器，第二个任务在时间区间[6，9] 运行，占用2个服务器，第三个任务在时间区间[0，5] 运行，占用1个服务器，需要最多服务器的时间区间为[2，3] 和[6，9] ，需要2个服务器。\n    \n\n## 示例2\n\n    \n    \n    输入\n    2\n    3 9 2\n    4 7 3\n    输出\n    5\n    说明\n    共两个任务，第一个任务在时间区间[3，9]运行，占用2个服务器，第二个任务在时间区间[4，7] 运行，占用3个服务器，需要最多服务器的时间区间为[4，7] ，需要5个服务器\n    \n\n**备注** 1 <= taskNum <= 100000 0 <= startTime < endTime <=50000 1 <=\nparallelism <= 100\n\n## 题解\n\n> **差分数组** 题\n>\n> **解题思路：**\n>\n> 使用差分数组的思想，创建一个数组 `d`\n> 来记录每个时间点的服务器占用情况。遍历每个任务，将其开始时间和结束时间对应的数组元素进行累加和累减，表示服务器的占用情况。在遍历的过程中，记录累加和的最大值，即为需要的最大服务器数量。\n\n### Java\n\n    \n    \n    import java.util.Scanner;\n    \n    /**\n     * @author code5bug\n     */\n    public class Main {\n        public static void main(String[] args) {\n            Scanner scanner = new Scanner(System.in);\n            int taskNum = scanner.nextInt();\n            \n            // 差分数组\n     \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568142137070493696?sourceSSR=users",
        "title": "2024秋招，百度测试开发工程师二面",
        "content": "## 前言\n\n家人们，今天回顾一下我在23年12月参加的大厂二面\n\n面试官针对投递岗位和简历情况进行提问，八股部分占比较大\n\n## 过程\n\n  1. 自我介绍\n  2. 为什么实习经历比较短？\n  3. 都做了些什么，学到了什么？\n  4. 场景题：给产品所有的核心接口加一个公参，怎么测试？ 对之前功能的影响\n  5. 参数非常多，有什么方式可以节省效率吗？ 给我问蒙了，说的使用缓存...面试官回答开发测试工具，利用测试平台\n  6. 对自动化测试怎么理解的？\n  7. 自动化测试和人工测试的区别\n  8. 手撕：列表元素排序（手写排序规则），讲解原理\n  9. 怎么测试这段代码？ 老三样-根据题目功能描述写case\n  10. 一直问我还有吗？ 异常情况-学习能力\n  11. 手撕2：给你一个字符串 s，请将 s 分割成一些子串，使每个子串都是回文串，返回 s 所有可能的分割方案。\n  12. 写了15分钟，发现想错思路了，最后说用回溯解\n  13. 测试微信聊天框，发现消息发不出去了，怎么定位问题？ 界面-网络-找开发小组-前端-后端-定位问题\n  14. 怎么区分前后端bug？ 日志-打点-服务-状态，抓包看接口请求和返回来判断\n  15. 浏览器输入网址到界面展示经历了什么过程？ 域名解析-DNS缓存-返回IP地址-解析-展示\n  16. 三次握手\n  17. 四次挥手\n  18. 为啥是四次？\n  19. 什么是死锁？ 产生的必要条件\n  20. 怎么防止死锁？ \n  21. 银行家算法\n  22. 软件产品开发中，从需求到上线，测试要经历哪些步骤？\n  23. 反问\n  24. 业务\n  25. 新人培养\n  26. 职业发展\n  27. 发展\n\n## 总结\n\n压力面，面试官全程未开摄像头，上来简单问了几个问题，就开始手写代码\n\n但是小姐姐人还是很好的，虽然很多问题回答的不是很完美，依然给过二面了\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567874944424476672?sourceSSR=users",
        "title": "快手-电商-数据分析师-日常实习（凉经）",
        "content": "复盘一下面试经历，总体来说回答地磕磕绊绊，面试官很耐心一直在引导回答。\n\n但是我的水平不够，缺少深入思考，回答的点很散不成体系，逻辑性也不强。\n\n有些题面试官点出了关键，对比自己的回答，明显感受到思维层次差距。\n\n把面试题和自己的回答都放上来，给自己攒点人品，也希望大佬们指教~\n\n1，自我介绍（主要介绍了一段互联网电商运营实习）\n\n2，在实习经历中有没有对某个指标进行分析，有无相关case经历？\n\n答：没有(⊙﹏⊙)。。。（实习的时候主要负责供应链相关工作，还没有主动学习分析数据的意识）\n\n3，如果作为数据分析师，分析电商用什么指标？\n\n答：核心指标GMV\n\n4，如果GMV下滑30%，如何分析？\n\n答：用公式拆解 GMV = 客单价 * 购买人数 * 购买次数\n\n从这三个方面拆解。\n\n如果购买人数下滑，考虑用漏斗模型细分：购买人数 = 流量 * 进店转化率 * 购物车转化率 * 付款转化率，判断哪个环节出现下滑 。\n\n追问：如果客单价下滑，怎么分析呢？\n\n答：根据用户细分，判断是高价值用户/低价值用户，或者新/老用户，或者忠诚用户/一般用户。\n\n追问：如果高价值客户下降怎么分析？低价值客户下降怎么分析？\n\n答：高价值客户从商品，服务，物流三方面找原因，低价值客户考虑价格因素。\n\n追问：还有别的思路吗？\n\n（想不到了T_T\n\n面试官思路：人货场\n\n人：例如按用户群体分\n\n货：例如按品类分\n\n场：例如流量or推荐\n\n5，SQL题\n\nStudent(SID, Sname, Sage, Ssex)学生表，SID：学号；Sname：学生姓名；Sage：学生年龄；Ssex：学生性别\n\nCourse(CID, Cname, TID)课程表，CID：课程编号；Cname：课程名称；TID：教师编号\n\nSC(SID, CID, score)成绩表，SID：学号；CID：课程编号；score：成绩\n\n问题：查询没有学全所有课的同学的学号、姓名\n\n要求：代码+口述思路\n\n面试官评：错误很多T_T\n\n6，传统电商像京东电商，与抖音、快手的内容电商的区别是什么？\n\n答：从规模角度，传统电商规模大，种类全；内容电商更注重单一商品，非标品比较多。\n\n从与用户互动角度，传统电商更多用图文展示，互动性低；内容电商依赖于主播或视频发布者讲解，与用户互动性高。\n\n从用户行为角度，传统电商更多的是用户主动搜索行为，复购率可能较高；内容电商偏向于算法推荐，复购率可能较低。\n\n7，假如某个传统电商的供应商品牌要做内容电商，怎么做？\n\n（从这里开始乱答了\n\n直播：在抖音快手平台进行品牌直播。\n\n营销：在社交平台发布商品内容和活动，与其目标客户互动。\n\n（其他想不到了。。。\n\n8，平时哪个平台用的多？\n\n答：小红书和b站。\n\n问：小红书和b站都是双瀑布流，抖音是单一瀑布流，分析一下异同点\n\n（这里我答成了优劣势）\n\n如果要关注一个作者，双页比单页的路径要多一步，需要点进页面才能关注作者，这样双页流作者的粉丝的粘性可能更强，粉丝价值更高。\n\n双页劣势在于可能会分散用户的注意力。\n\n面试官思路：\n\n单：依赖于算法推荐，抖音的推荐算法强\n\n双：内容社区\n\n9，小红书上有视频和图文，如果你作为数据分析师如何确定视频和图文的比例呢？\n\n答：使用AB test。\n\n问：怎么做呢？\n\n答：简单说了AB test流程（没有AB test相关经历，就只能根据网上看到的经验简单说了几点）\n\n1，流量分配，假设流量均分\n\n2，进行试验\n\n3，计算收益，指标选择DAU和用户额外使用时长\n\n4，假设检验\n\n问：流量限制，（此处面试官解释了一下但没听懂T_T）,只有三次测试机会，怎么做？\n\n这里不知道怎么回答，按照我的理解说了下。\n\n面试官评：看来你不是很了解这块。（汗流浃背了\n\n接下来是反问环节，问的问题都详细解答，还给了一些职业发展建议。面试官人非常好！！\n\n整场面试下来，感觉就是自己可能不适合数据分析这个岗位。该往哪个方向发展还得继续探索~\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567772334254219264?sourceSSR=users",
        "title": "快手移动端开发实习三面 2023/12/22",
        "content": "自我介绍（问项目，面试官什么都懂，测开的知识都问的很细，他拿着手机边看我测试的需求然后边听我讲）\n\n其他问题\n\n1.个人素质方面\n\n你认为你上次的实习阶段是否符合预期？\n\n你认为成功的标准是什么？\n\n2.场景类题目\n\n从数据源到后端到前端，抽象出一套模板方法的接口提供给报表开发复用\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568140201667592192?sourceSSR=users",
        "title": "2024秋招，百度测试开发工程师一面",
        "content": "## 前言\n\n大家好，今天我来回顾一下秋招中的一场很重要技术面试\n\n一面面试官深挖我的项目经历，并提出了很多的实际场景，我现在回顾依然有很多新的认识\n\n## 过程\n\n  1. 自我介绍\n  2. 实习工作中，做得最好的地方是什么？ 我先介绍了一下实习经历\n  3. 需要把所有的测试用例都给开发，开发测完了再给测试吗？ 开发自测减少问题\n  4. 产品出现bug，需要记录哪些内容？ 场景-设备-时间-复现结果-评估紧急程度-找到对应的负责人\n  5. 场景是什么意思？ bug出现的场景，现象+步骤\n  6. 其他的亮点工作？ 负责用户反馈\n  7. 写的什么功能的测试用例？ 介绍业务\n  8. 添加文件/图片，测试用例？ 功能测试-性能测试-压力测试-兼容性测试-安全性测试-可靠性-异常测试-可用性-边界测试-敏感度测试\n  9. 高并发测试怎么做？\n  10. 管理系统怎么设计的？ Springboot+Mybatis+鉴权设计\n  11. 后端测试项目介绍 工作内容-项目问题-改进工作\n  12. QPS很高，数据库存储量很大，有什么弊端？ 系统性能\n  13. 项目重新设计，server怎么设计？ 硬件提升-处理核心数量\n  14. 多线程处理怎么设计的？ \n  15. 多线程和多进程的区别？ \n  16. Redis的应用场景？ 双十一爆款商品-先查缓存-没有查硬盘-提高索引速度-避免内存穿透\n  17. Redis在存储方面有用吗？\n  18. 怎么判断A、B用户上传的文件是相同的？\n  19. 压力测试用postman做得？ 连续请求\n  20. 压力测试要关注什么？ 服务承受能力\n  21. 怎么考虑是否达到最大压力？ 用户请求报错增加-硬件占用率-响应时长\n  22. ToB系统登录相关测试用例？ 老三样（True、False、Null）排列组合\n  23. ToB业务功能权限测试？ 请求没有访问权限的接口\n  24. 一个用户同时在多个权限用户组的情况？ 我说一个用户只能对应自己角色的权限\n  25. 两个权限中，一部分功能独立，一部分功能交叉？ 重复也没问题\n  26. 手撕一：爬楼梯\n  27. 测试它，等价类划分\n  28. 手撕二：左上到右下最短路径值，我赋值搞错了，但是方法对了\n  29. 反问\n  30. 岗位工作内容\n  31. 面评\n\n## 总结\n\n体验还是很不错的，面试官人美心善，对我简历中的很多地方提出了问题，也对我后面的面试准备有着很大的帮助。\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567772285646446592?sourceSSR=users",
        "title": "唯品会一面，被问麻了.....",
        "content": "唯品会后端面经，被严刑烤打。\n\n共24个问题，八股文占了一大半。。问的巨细无比，人麻了。\n\n![alt](https://git.acwing.com/Hasity/interview_hunter/-/raw/master/2024/image/1question.jpg)\n\n>\n> **[面经专栏直通车](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fmanager%2FcolumnDetail%2F0xKkDM)**\n\n>\n> **[面经专栏下载](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgit.acwing.com%2Flicw%2F24_job_hunter)**\n\n## 面经解析：\n\n### 1\\. Java的数据类型\n\nJava的数据类型包括基本数据类型和引用数据类型：\n\n  * 基本数据类型：byte, short, int, long, float, double, char, boolean。\n  * 引用数据类型：class, interface, array。\n\n### 2\\. list和set实现类\n\n  * List实现类：ArrayList, LinkedList, Vector。\n  * Set实现类：HashSet, TreeSet, LinkedHashSet。\n\n> ##\n> 更多面经直通车：**[24面经大全](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fmanager%2FcolumnDetail%2F0xKkDM)**\n\n### 3\\. ArrayList和LinkedList的区别\n\n`ArrayList`和`LinkedList`都是Java集合框架中的实现类，它们分别基于数组和链表的数据结构。以下是它们之间的一些主要区别：\n\n  1. **底层数据结构：**\n\n     * `ArrayList`使用动态数组实现。它的内部是一个数组，当数组容量不足时，会自动进行扩容。\n     * `LinkedList`使用双向链表实现。每个元素都包含一个指向前一个元素和一个指向后一个元素的引用。\n  2. **随机访问性能：**\n\n     * `ArrayList`支持快速的随机访问，因为它是基于数组的，可以通过索引直接访问元素。\n     * `LinkedList`在随机访问时性能较差，因为必须从链表的头部或尾部开始遍历，直到找到目标元素。\n  3. **插入和删除操作性能：**\n\n     * `ArrayList`在中间插入或删除元素时性能较差，因为需要移动数组中的元素。\n     * `LinkedList`在插入和删除元素时性能较好，因为只需要改变相邻元素的引用。\n  4. **空间复杂度：**\n\n     * `ArrayList`相对较省空间，因为它只需要存储元素值和数组容量。\n     * `LinkedList`相对较耗费空间，因为每个元素都需要额外的两个引用字段。\n  5. **迭代器性能：**\n\n     * `ArrayList`上的迭代器性能较好，因为它可以通过索引直接访问元素。\n     * `LinkedList`上的迭代器性能较差，因为必须沿着链表一个一个地移动。\n  6. **适用场景：**\n\n     * 如果需要频繁进行随机访问，使用`ArrayList`更为合适。\n     * 如果需要频繁进行插入和删除操作，特别是在集合的中间位置，使用`LinkedList`更为合适。\n\n选择使用哪个取决于具体的使用场景和操作需求。如果不确定，通常来说，`ArrayList`是一个更通用的选择，因为它在大多数常见的操作上都表现得很好。\n\n### 4\\. HashSet加入元素的过程\n\n`HashSet` 是基于哈希表实现的无序集合，它使用哈希算法来存储和检索元素。下面是向 `HashSet` 中加入元素的过程：\n\n  1. **计算哈希码（Hash Code）：**\n\n     * 当你向 `HashSet` 中添加一个元素时，首先会调用该元素的 `hashCode()` 方法，得到元素的哈希码。\n     * 如果元素为 `null`，则它的哈希码为 0。\n  2. **映射到桶位置（Bucket Position）：**\n\n     * 哈希码经过一系列的变换和运算，被映射到哈希表中的一个桶位置（bucket position）。\n     * 桶位置是一个数组索引，表示存储元素的位置。\n  3. **处理哈希冲突：**\n\n     * 哈希表可能存在冲突，即不同元素映射到相同的桶位置。为了解决冲突，`HashSet` 使用链表或红黑树（在JDK 8之后）来存储相同桶位置上的元素。\n     * 如果桶位置上已经有一个元素，新元素会被添加到链表或红黑树的末尾。\n  4. **检查元素唯一性：**\n\n     * 在添加元素的过程中，`HashSet` 会通过调用元素的 `equals()` 方法来检查元素的唯一性。\n     * 如果已经存在相同的元素（根据 `equals()` 判断），新元素不会被加入。\n\n`HashSet`\n的添加过程通过哈希码和哈希表的桶来实现，确保元素的快速存储和检索。因为哈希表的桶位置是通过哈希码计算得到的，所以元素的存储位置在理想情况下是均匀分布的。这有助于在大多数情况下实现\nO(1) 时间复杂度的添加、删除和查找操作。\n\n### 5\\. HashMap线程安全吗？为什么不安全？\n\n`HashMap` 在多线程环境下不是线程安全的。这是因为 `HashMap`\n的实现是基于哈希表的，而哈希表的操作涉及到多个步骤，包括计算哈希码、定位桶位置、插入或检索元素等。在多线程环境下，多个线程同时对 `HashMap`\n进行修改操作可能导致数据不一致或者丢失。\n\n以下是一些可能导致线程不安全的情况：\n\n  1. **竞态条件（Race Condition）：** 多个线程同时尝试插入或删除元素时，可能导致竞态条件。两个线程可能同时检测到某个位置为空，然后都尝试插入元素，导致其中一个线程的操作被覆盖。\n\n  2. **扩容操作：** 当 `HashMap` 需要扩容时，会创建一个新的数组并将旧的元素重新分配到新数组中。在这个过程中，如果有其他线程同时对 `HashMap` 进行修改，可能会导致元素在扩容过程中丢失或者被重复添加。\n\n为了在多线程环境下保证线程安全，可以使用 `ConcurrentHashMap` 类，它提供了一些并发安全的操作。`ConcurrentHashMap`\n使用分段锁的机制，将哈希表分成多个段，每个段上都有一个独立的锁，从而降低了锁的粒度，提高了并发性能。这样，不同的线程可以同时修改不同的段，避免了整个数据结构的锁竞争。\n\n总的来说，如果需要在多线程环境中使用哈希表，推荐使用 `ConcurrentHashMap` 而不是 `HashMap`，以确保线程安全性。\n\n### 6\\. 如何做到让HashMap线程安全？\n\n在Java中，`HashMap`本身不是线程安全的，但可以通过以下几种方式来实现线程安全的`HashMap`：\n\n  1. **使用`Collections.synchronizedMap`方法：**\n    \n        Map<K, V> synchronizedMap = Collections.synchronizedMap(new HashMap<K, V>());\n    \n\n这将返回一个线程安全的`Map`，它在每个方法上都使用同步机制来确保线程安全。但请注意，虽然这确保了每个方法的原子性，但在多个操作之间，仍然可能需要额外的同步。\n\n  2. **使用`ConcurrentHashMap`：** `ConcurrentHashMap`是Java提供的线程安全的`Map`实现。它使用分段锁机制，每个段相当于一个小的`HashMap`，不同的段之间互不影响，这样可以提高并发性能。\n    \n        Map<K, V> concurrentMap = new ConcurrentHashMap<K, V>();\n    \n\n  3. **使用`Collections.synchronizedMap`包装`HashMap`的迭代器：** 如果你使用`Collections.synchronizedMap`来创建线程安全的`HashMap`，当你迭代`Map`时，仍然需要手动同步。你可以通过在迭代器上使用`synchronized`块来实现：\n    \n        Map<K, V> synchronizedMap = Collections.synchronizedMap(new HashMap<K, V>());\n    Set<K> keySet = synchronizedMap.keySet();\n    synchronized (keySet) {\n        Iterator<K> iterator = keySet.iterator();\n        while (iterator.hasNext()) {\n            K key = iterator.next();\n            // 在此处执行操作\n        }\n    }\n    \n\n如果需要线程安全的`HashMap`，推荐使用`ConcurrentHashMap`，因为它在并发场景下性能更好。根据具体的需求，选择适合的方法来保证线程安全。\n\n### 7\\. ConcurrentHashMap怎么保证线程安全的？\n\n`ConcurrentHashMap`是Java集合框架中的线程安全的`Map`实现。它采用了一些策略来确保在多线程环境中的安全性：\n\n  1. **分段锁（Segmentation）：** `ConcurrentHashMap`将整个数据结构分割成多个独立的段（segments），每个段独立地管理一部分数据。每个段都类似于一个小的`HashMap`，有自己的锁。这样，不同段的数据可以在不同的锁上进行操作，提高了并发度。当一个线程在一个段上进行操作时，其他线程可以同时在其他段上进行操作，减小了竞争范围。\n\n  2. **精细化的锁策略：** 在`ConcurrentHashMap`中，只有在读写冲突的时候才会使用锁，而且只锁定与冲突相关的段，而不是整个`Map`。这种细粒度的锁策略减小了锁的争用，提高了并发性能。\n\n  3. **读操作的无锁支持：** `ConcurrentHashMap`对于读操作提供了无锁支持，允许多个线程同时进行读取操作，不会阻塞。只有在写操作发生时才需要加锁，确保写操作的原子性和可见性。\n\n  4. **CAS（Compare and Swap）操作：** `ConcurrentHashMap`使用CAS操作来确保对数据的原子更新。CAS是一种无锁算法，它比传统的锁机制更轻量级。通过CAS，`ConcurrentHashMap`可以在不加锁的情况下完成一些简单的操作。\n\n  5. **适应性自动调整：** `ConcurrentHashMap`在运行时会根据负载因子、并发度等参数进行自动调整。这使得它在不同的负载和并发情况下都能够保持高效。\n\n`ConcurrentHashMap`通过使用分段锁、细粒度的锁策略、无锁的读操作和CAS操作等技术，以及适应性自动调整，来保证在多线程环境中的高并发性能和线程安全。这些特性使得`ConcurrentHashMap`成为处理高并发情况下`Map`操作的理想选择。\n\n### 8\\. 手撕生产者消费者模型\n\n    \n    \n    // 生产者\n    class Producer implements Runnable {\n        private BlockingQueue<Integer> queue;\n    \n        public Producer(BlockingQueue<Integer> queue) {\n            this.queue = queue;\n        }\n        \n        public void run() {\n            try {\n                while (true) {\n                    int value = produce(); // 生产数据\n                    queue.put(value); // 将数据放入队列\n                    Thread.sleep(1000); // 模拟生产过程\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        \n        private int produce() {\n            // 生产过程\n            return 1;\n        }\n    }\n    \n    // 消费者\n    class Consumer implements Runnable {\n        private BlockingQueue<Integer> queue;\n    \n        public Consumer(BlockingQueue<Integer> queue) {\n            this.queue = queue;\n        }\n        \n        public void run() {\n            try {\n                while (true) {\n                    int value = queue.take(); // 从队列中取出数据\n                    consume(value); // 消费数据\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        \n        private void consume(int value) {\n            // 消费过程\n        }\n    }\n    \n\n### 9\\. 手撕两个线程抢票代码，有没有其他方式保证线程安全？\n\n    \n    \n    // 使用synchronized关键字保证线程安全\n    class TicketSystem {\n        private int tickets = 100;\n    \n        public synchronized void sellTicket() {\n            if (tickets > 0) {\n                System.out.println(Thread.currentThread().getName() + \"卖出一张票，剩余票数：\" + --tickets);\n            }\n        }\n    }\n    \n    // 或使用ReentrantLock\n    class TicketSystem {\n        private int tickets = 100;\n        private ReentrantLock lock = new ReentrantLock();\n    \n        public void sellTicket() {\n            lock.lock();\n            try {\n                if (tickets > 0) {\n                    System.out.println(Thread.currentThread().getName() + \"卖出一张票，剩余票数：\" + --tickets);\n                }\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n    \n\n### 10\\. Volatile关键字的作用\n\n`volatile`是Java关键字之一，它主要用于保证多线程环境下变量的可见性和禁止指令重排序。`volatile`关键字的主要作用包括：\n\n  1. **可见性（Visibility）：** 当一个变量被声明为`volatile`时，意味着这个变量可能会被多个线程同时访问，且不同线程之间的修改操作是可见的。具体来说，如果一个线程修改了一个`volatile`变量的值，这个修改对其他线程是可见的，其他线程会立即看到这个变量的最新值。\n\n  2. **禁止指令重排序（Ordering）：** `volatile`关键字还有禁止指令重排序的作用。在不使用`volatile`的情况下，编译器和处理器可能会对指令进行重排序，这在多线程环境下可能导致意外的行为。通过将变量声明为`volatile`，可以防止编译器和处理器对其进行重排序，确保按照代码的顺序执行。\n\n使用`volatile`的经典场景包括：\n\n  * **标志位：** 在多线程环境中，一个线程设置一个`volatile`标志位，另一个线程检查这个标志位，以便在某个条件满足时通知其他线程停止执行或执行某个操作。\n\n  * **单例模式中的双检锁：** 在双检锁机制中，为了避免指令重排序，需要将单例对象声明为`volatile`。\n\n    \n    \n    public class Singleton {\n        private static volatile Singleton instance;\n    \n        private Singleton() {\n        }\n    \n        public static Singleton getInstance() {\n            if (instance == null) {\n                synchronized (Singleton.class) {\n                    if (instance == null) {\n                        instance = new Singleton();\n                    }\n                }\n            }\n            return instance;\n        }\n    }\n    \n\n`volatile`不能保证复合操作的原子性。如果一个操作涉及到多个变量的读写，而且这些操作必须在一个原子步骤内完成，那么`volatile`就无法满足需求，此时可能需要使用其他的同步机制，例如使用`java.util.concurrent`包中的原子类。\n\n### 11\\. Atomic包用过吗？\n\n`java.util.concurrent.atomic` 包提供了一组用于在多线程环境中进行原子操作的类。这些类通过使用硬件级别的原子性操作或者利用\n`sun.misc.Unsafe` 提供的 CAS（Compare-And-\nSwap）操作来确保对变量的操作是原子的。这些类大多数都是基于原始数据类型的，例如 `int`、`long`，还有一些是引用类型。\n\n以下是 `java.util.concurrent.atomic` 包中一些主要的类以及它们的用途：\n\n  1. **AtomicInteger：** 用于对整数进行原子操作，支持原子的自增（`incrementAndGet()`）、自减（`decrementAndGet()`）等操作。\n\n  2. **AtomicLong：** 用于对长整型进行原子操作，同样支持原子的自增、自减等操作。\n\n  3. **AtomicBoolean：** 用于对布尔类型进行原子操作，支持原子的设置和获取操作。\n\n  4. **AtomicReference：** 用于对引用类型进行原子操作，支持原子的获取和设置引用对象。\n\n  5. **AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray：** 用于对数组中的元素进行原子操作，提供了一些原子性的数组操作。\n\n  6. **AtomicIntegerFieldUpdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater：** 用于对类的字段进行原子更新，允许在并发环境中对对象的字段进行原子性操作。\n\n这些原子类提供了一种比使用 `synchronized`\n关键字更轻量级的线程安全机制，特别适用于一些简单的计数器、状态标志等场景。在需要进行原子操作而又不需要全局的锁的情况下，这些类可以提供更好的性能。\n\n虽然这些类提供了原子性的操作，但并不是所有的操作都可以用原子方式完成，因此在使用时仍然需要注意保证原子性的操作是否符合预期。\n\n### 12\\. 索引是什么？为什么能提高查询效率？\n\n  * 索引是数据库中用于加速查询的一种数据结构，通过存储一定规则的索引信息，可以快速定位到符合条件的记录。\n  * 索引提高查询效率的原因是它减少了需要扫描的数据量，使得数据库能够更快地定位到符合条件的数据。\n\n![alt](https://git.acwing.com/Hasity/interview_hunter/-/raw/master/2024/image/1answer.jpg)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567755588877168640?sourceSSR=users",
        "title": "武汉某小公司后端开发",
        "content": "半小时技术，半小时hr，问的十分简单\n\n1，自我介绍\n\n2，简要介绍两个项目\n\n3，分库分表在项目中的使用\n\n4，用什么监听binlog实现缓存数据库一致性\n\n（canal）\n\n5，讲一讲binlog\n\n6，如何利用多线程加速大资源的下载\n\n（countdownlatch）\n\n7，链表数组区别，使用场景\n\n8，如何实现购票下单\n\n9，如何防止消息重复消费\n\n（讲了自己如何实现幂等接口）\n\n10，http1.1，2，3的演变\n\n（有点忘了，1.1解决了短连结，3解决了对头阻塞?得复习复习了）\n\n11，自旋锁如何发挥其优势?\n\n\\------------------------------------------\n\n已过\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/568085076144054272?sourceSSR=users",
        "title": "2024秋招，腾讯测试与质量管理工程师一面",
        "content": "## 前言\n\n家人们，秋招都开奖了吗，拿到自己心仪的offer了吗，还是在准备明年的春招呢？\n\n今天我记录一下，之前面试腾讯测开的一面过程\n\n## 过程（75min）\n\n  1. 自我介绍\n  2. why测试\n  3. 实习工作内容\n  4. 迭代速度\n  5. 敏捷模式、scrum模式\n  6. 需求无法准时上线怎么处理？ 加人/延后\n  7. 测试流程，从需求开始\n  8. 涉及到自动化测试吗？\n  9. DevOps在工作中的体现？\n  10. Jenkins？\n  11. 微信红包测试（只考虑功能） 我说了30多条的样子\n  12. 八股部分\n  13. Linux命令：查询系统CPU、内存使用率 top\n  14. 查询系统进程 ps\n  15. 跟踪打印日志文件在屏幕上 tail、head、cat\n  16. 什么是域名解析？ 我开始说过程，他让我用名词回答\n  17. DNS是什么？ 做URL和IP地址的映射\n  18. TCP和UDP区别？ 安全-效率-稳定-可靠链接-应用场景-建立连接-面向对象\n  19. UDP在直播的应用，原因是什么？ 视频丢帧影响很小-消耗低-效率高，可以在应用层用https补救UDP的传输安全\n  20. Python装饰器是干啥的？ 我说对现有的东西做补充\n  21. 手撕一道简单题，没写出来..当时我确实是太菜了，思路对了，但是实现不出来，也没有考虑特殊情况，面试官也给我详细解答了怎么解题\n  22. 反问\n  23. 工作业务\n  24. 面试流程\n  25. QA职业发展\n\n## 总结\n\n面试官人非常好，我回答中有问题的地方，及时帮我指正同时耐心回答我的反问\n\n只可惜我当时的能力不足以达到鹅厂的标准，遗憾错过\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567743711845560320?sourceSSR=users",
        "title": "从大寄到特寄",
        "content": "百度实习二轮面试\n\n好消息，一面过了，坏消息，二面更炸\n\n#### 纯聊天\n\n##### 5min\n\n为什么来北京\n\n未来职业规划\n\n非常轻松\n\n#### Golang相关\n\n##### 10min\n\nGMP的底层实现\n\nmap的底层实现\n\n扩容，缩容的流程（缩容不太懂）\n\n锁的底层原理\n\n设计一个并发安全的map\n\n你知道泛型吗，和interface的区别\n\n你写golang的时候遇到什么坑吗\n\n#### 计算机网络\n\n##### 5min\n\n从输入域名到返回页面的全部流程\n\n负载均衡的策略（不会）\n\n限流的例子\n\n### 设计\n\n##### 5min\n\n设计一个好友系统，要什么技术（答得非常不好）\n\n如何保证redis双写一致\n\nGin框架的底层实现是什么（只知道中间件和路由前缀树）\n\n#### 算法\n\n##### 5min\n\n两数之和，共享屏幕在自己idea上写就行，非常尴尬我少了一个，l++，出了bug一次\n\n#### 反问\n\n您觉得我还有什么不足，我现阶段学习的方向，面对生产环境怎么办之类的\n\n#### 总结\n\n这次时间非常短，30几分钟不到，面试官非常和气，我说不会都是笑着说没事可以学的那种，（但是估计心里想的是怎么会有这种sb），虽然感觉又寄了但是面试体验很好，一点都不紧张，哎，只能说技不如人是这样的。二面项目完全没问，感觉就是层次上了一个台阶真正开始问素养方面了，，，还得多练\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567724523940782080?sourceSSR=users",
        "title": "杭州小厂一面面经",
        "content": "处女面，表现大概还不错（？） 之后还有两轮，发下面经许愿之后一切顺利！\n\n自我介绍\n\n项目拷打\n\n八股：\n\n  1. Redis 数据怎么持久化\n  2. AOF文件过大怎么处理（AOF重写）\n  3. 缓存击穿、缓存穿透、缓存雪崩及处理方式\n  4. Redis怎么保证高可用 主从同步 全量/增量\n  5. JVM内存区域的划分\n  6. 对象怎么被回收的\n  7. 如何判断对象何时应该被回收\n  8. 可以作为可达性算法中GC Root的对象有哪些\n  9. 常见的垃圾回收算法有哪些\n  10. 常见的垃圾回收器有哪些\n  11. 详细说说G1回收器\n  12. 线程和进程的区别\n  13. 线程有哪些状态\n  14. 创建线程池的参数有哪些\n  15. 线程池拒绝策略\n  16. Spring框架特性（IoC/AOP）\n\n反问：\n\n1\\. 几轮技术面（三轮）\n\n2\\. 有什么改进的地方（可以研究下造轮子的项目）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567662046183989248?sourceSSR=users",
        "title": "库洛文案一面面经",
        "content": "10月投的11月笔试12月面试感觉进度好慢，，，\n\n会问笔试的时候写的人设和脚本\n\n  * 玩什么游戏、手游端游都行\n\n这里面有没有印象深刻的角色或剧情请描述\n\n让你印象深刻的是为什么\n\n从这一段引申问你怎么塑造一个人物\n\n扁平人物和圆形人物的优劣\n\n  * 有什么看过的小说（问了一下包括漫画）主要讲了什么 \n\n印象深刻的一幕是什么+为什么让你印象深刻\n\n小说和游戏剧本区别\n\n（这里有点后悔，，，说了半天今年看的某个老作品后面试官来了句哦其实我看过，，，，让我感觉我的叙述全漏洞了\n\n  * 问了笔试的题，你是怎么塑造这个人物人设的\n\n你这个剧本你觉得有哪里不合理，有哪里比较好，基本构思思路\n\n你觉得如果给你两个CG位该用在哪里\n\n好像没啥库洛文案的面经，，，\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567436318603476992?sourceSSR=users",
        "title": "记录人生第一次面试：腾讯游戏引擎实习面经，已OC",
        "content": "# 📅 oc时间线\n\n12.05 初试\n\n12.12 复试\n\n12.19HR面\n\n12.21 offer\n\n# ⏳ 获得面试的机会\n\n通过参加腾讯客户端开发公开课，得到实习面试的机会，12.02投递的游戏客户端开发的简历，12.04就有光子的面试官给我电话说考虑游戏引擎吗？(内心os：什么我还能去搞引擎？)赶紧回答考虑的😂然后就约了第二天下午的面试。\n\n📝 实习无笔试\n\n# 👥 一面 1h\n\n## 个人介绍\n\n1.自我介绍，硕士研究方向介绍\n\n2.导师做的项目的介绍。\n\n3.为什么选择图形\n\n## C++八股\n\n4.C++多态：虚表指针存在什么地方？(犹豫了很很久，回答了一个在对象里边。面试官挺好给我补充了说存在对象空间的前几个字节，学到了！)\n\n5.智能指针了解吗？讲一下shared_ptr？如何解决循环引用的问题(还好前一天晚上刷了牛客的面经全回答出来了，感谢各位大佬们的面经分享！)\n\n6.stl map是如何实现的？为什么要使用红黑树？红黑树有什么特点？(讲了一下红黑树与AVL)\n\n7.C++ 堆内存与栈内存之间的区别是什么？\n\n## 并行编程\n\n8.了解并行编程吗？线程与进程的区别是什么？线程之间的通信方式有哪些？(看过C++并行编程这本书，小case😘)\n\n## 图形学\n\n9.讲一下PBR的原理。(讲了一下微表面理论，以及组成BRDF几项有哪些以及含义)\n\n10.了解path tracing吗？讲一下重要性采样是怎么做的。(当时只想到了PDF与CDF两个名词，以及cdf是pdf的积分，其他的不知道😂)\n\n11.虚幻引擎中的深度缓冲进行过什么优化？(回答了inverse-Z)为什么要使用inverseZ？(远处需要更大的精度，float越靠近0，精度越高)\n\n12.earlyZ做了什么工作，原理是什么？为什么深度测试要放在像素着色器之后而不能放在之前呢？(我回答了alpha测试，结果面试官说不是。。我支支吾吾半天没答上来，面试官说是因为像素着色器也有可能改变深度缓冲，啊？可是alpha测试不就是会改变深度缓冲吗😂)\n\n## 聊天\n\n13.看过哪些书？学过哪些与图形相关的课程？\n\n面试官说如果一面过了的话，需要我准备一个30min的PPT，然后二面是群面，很多面试官面我一个人（内心os：我就面一个实习岗就要来这么猛的吗，算了好好准备PPT吧）\n\n# 二面 1h\n\n花了半个小时讲PPT，包括本科硕士经历中的获奖、社会实践、项目、实习 balabala~\n\n讲完关掉PPT之后，然后看腾讯会议，猜我看到了什么？10个面试官！！没错10个头像！！10个！至于吗，我的人生的第一次面试，还是实习岗，就要面对这么大阵仗吗？牛客上的人都没给我讲实习要来这么多面试官啊5555\n\n然后就是被各个面试官挨个问问题（每问一个问题，就有十多秒的停顿，给我整尴尬了，看来大家都不是很情愿问问题🤣🤣），所有问题都是基于我做的虚幻的项目（硕士的研究东西都是基于虚幻的）。\n\n然后只有一个面试官问了我一个专业上的问题：我看你学过dx12，那么现代图形API（dx，vulkan）与以前的图形API，例如OpenGL有什么区别呢？（回答了可供控制的东西更多了，多线程之类的balabla），又问：现代图形API中为什么要设置Pipeline\nState呢，有什么用？我回答了程序员可以更自由的控制。被怼回去了...说OpenGL我也可以用函数控制啊。我又回答了资源生命周期之类的，被说是跑题了不对。又回答了说使图形编程更有逻辑，更好写代码（我自己都不信哈哈哈哈），然后面试官蚌埠住了，说这玩意儿写起来可太痛苦了😂😂，最后我回答了一个可复用，他才说这只是其中一点。。。叫我下去再看看，这里边的东西绕得很🤣\n\n然后主面试官问了我一个震惊全场的问题：你是25年毕业的吗？你投的是实习岗吗？我：啊？我投的就是实习啊？？？。主面试官说：那我搞错了，我以为你秋招的，实习不用准备PPT，也不用群面。。。我：😧😧😧😧😨😰😱🥶🥶🥶\n\n周末被通知二面过了。\n\n# HR面\n\n简单聊天，氛围挺轻松的。\n\n# offer\n\n12.21拿的offer\n\n# 整体感受\n\n虽然说被搞成秋招了😂😂但是几场面试腾讯给我的感受都很好，一面面试官在看我有些问题回答不太上来的时候，会很耐心地等我思考，有时候也会给一点提示，实在答不出来的，也会告诉我答案，然后耐心给我讲其中的原理，太nice了！！二面虽然有10个面试官，有一点压力，但是面试官也都很nice，会给我提我做的项目怎么做的更好，哪里可以改进😁总之，我人生的第一次面试还是很圆满的。\n\n腾仔，我来啦！！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567424049500954624?sourceSSR=users",
        "title": "华为客户经理面经",
        "content": "首先感谢前辈们的面经分享，我也会将经验传递下去  \nbg：末9本，信息管理与信息系统专业，绩点一般，本人大学校园里的表现非常一般，只有数学成绩值得浅吹一下。  \n建议：不打算保研或者考研的同学一定要多实习，且围绕一个岗位实习，不然真的很难找工作。  \n面经：  \n1.群面  \n        群面很简单，只会晒掉完全不适合做客户经理的同学，表现大方一点情商高一点即可，不做过多说明  \n2.业务面  \n        在我们学校里面面试，坐满了业务主管和大主管，面试的竞争压力绝对是很大的，但因为大家都在一个教室里分别1v1面试，所以不会很紧张。业务面会深挖你的简历，所以简历上写的一定要是亲身参与过的，简单来说就是简历不能造假，因为他会问的特别细假的一定会被看出来。例如他可能问：你实习的时候都在哪吃饭，饭店叫什么名字。这种猝不及防的问题，他看你的眼神就会知道你有没有说谎。总结：深挖简历细到你想不到。45min  \n3.主管面  \n        主管面压力没那么大，但有一种棉里藏刀的感觉。会问爱好是什么；对华为的价值观有没有自己的理解；你觉得你有哪些优势；情景模拟向我推荐一款你实习的时候相关的产品；酒量怎么样；职业规划是怎么样的等等一系列问题都可能问到，并且也会根据问题进行延伸拓展。45min  \n4.综合测评  \n一律按照entj的性格来填，注意前后一致性，否则会被认为说谎  \n5.英语测试  \n本人口语很烂，两分钟的topic没说几句话不停的卡顿但还是过了，听力很好拿分，难度低于六级，需要把握住。  \n  \n注意：所有问题都要围绕利好于工作来进行回答，但也不能过度，要把握掌控自己的节奏；所有问题尽量思考之后再回答，按照总分的方式，由浅入深，需要具有一定的表达能力和逻辑思维；线下面试的同学多注意与面试官的眼神交流，眼神是判断一个人是否灵泛的最直接的方法。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567360638045925376?sourceSSR=users",
        "title": "CPU算力分配 - 华为OD统一考试",
        "content": "> OD统一考试\n>\n> 题解： Java / Python / C++\n\n![alt](https://uploadfiles.nowcoder.com/images/20231201/644248237_1701399029315/A4F5E48572027B66E6ECFA2EF0A7C66A)\n\n## 题目描述\n\n现有两组服务器A和B，每组有多个算力不同的CPU，其中 A 是A组第个CPU的运算能力，是 B组\n第个CPU的运算能力。一组服务器的总算力是各CPU的算力之和。 为了让两组服务器的算力相等，允许从每组各选出一个CPU进行一次交换。\n求两组服务器中，用于交换的CPU的算力，并且要求从A组服务器中选出的CPU，算力尽可能小。\n\n## 输入描述\n\n第一行输入为L1和L2，以空格分隔，L1表示A组服务器中的CPU数量，L2表示B组服务器中的CPU数量\n\n第二行输入为A组服务器中各个CPU的算力值，以空格分隔.\n\n第三行输入为B组服务器中各个CPU的算力值，以空格分隔 1 ≤ L1, L2 ≤ 10000 1 ≤ A[i], B[i] ≤ 100000\n\n## 输出描述\n\n对于每组测试数据，输出两个整数，以空格分隔，依次表示A组选出的CPU算力，B组选出的CPU算力。要求从A组选出的CPU的算力尽可能小。 **备注**\n:保证两组服务器的初始总算力不同，答案肯定存在。\n\n## 示例1\n\n    \n    \n    输入:\n    2 2\n    1 1\n    2 2\n    输出\n    1 2\n    说明\n    从A组中选出算力为1的CPU，与B组中算力为2的进行交换，使两组服务器的算力都等于3\n    \n\n## 示例2\n\n    \n    \n    输入:\n    2 2\n    1 2\n    2 3\n    输出\n    1 2\n    \n\n## 示例3\n\n    \n    \n    输入:\n    1 2\n    2\n    1 3\n    输出\n    2 3\n    \n\n## 示例4\n\n    \n    \n    输入:\n    3 2\n    1 2 5\n    2 4\n    输出:\n    5 4\n    \n\n## 题解\n\n> 模拟的题目\n>\n> **解题思路:**\n>\n>   1. 计算两组服务器的总算力。\n>   2. 根据总算力的差值，计算出需要交换的差值的一半。\n>   3. 遍历第一组服务器的算力，尝试在第二组服务器中找到合适的算力进行交换，使得两组服务器的总算力相等。\n>   4. 输出找到的交换方案。\n>\n\n### Java\n\n    \n    \n    import java.util.Arrays;\n    import java.util.HashSet;\n    import java.util.Scanner;\n    import java.util.Set;\n    import java.util.stream.IntStream;\n    \n    /**\n     * @author code5bug\n     */\n    public class Main {\n        public static void main(String[] args) {\n            Scanner in = new Scanner(System.in);\n            int L1 = in.nextInt(), L2 = in.nextInt();\n            // A 组服务器\n            int[] a = IntStream.range(0, L1).map(i -> in.nextInt()).toArray();\n            Arrays.sort(a);\n            int sum1\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567319609783615488?sourceSSR=users",
        "title": "华为od前端面经：d3#面经#",
        "content": "面经\n\n这次面试华为od最重要的环节就是笔试啦。总分400，最后考了360通过的。非常感谢hr发了我很多题库和参考资料******************************************针对题库的算法题做好针对的训练就没什么问题。这里需要注意100分的两题和200分的题是分开作答的，我选择先做200分的，拿到尽量多的分数再去做100分的题，大家可以根据自己的策略去选择。\n\n第二轮是hr资格面，主要问一些常见的工作经历，离职原因之类的问题，跳槽比较多的可以提前准备好回答。\n\n接下来两轮是技术面，主要就是自我介绍，然后问一些前端八股，最后会有一道算法题，基本上题目做出来就能过了，我拿的是一道动态规划和一道贪心，如果做不出来尽量和面试官说一下思路，总体上不难。\n\n最后是主管面，我的这轮没怎么问技术，就问了些项目经验以及擅长的技术点，结合岗位的方向聊了下薪资之类的。面试官态度很和善，体验很好。\n\n接下来就是发offer啦，总体上还是比较顺利的，也希望大家都能拿到自己理想的offer。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567296604001009664?sourceSSR=users",
        "title": "滴滴 秋招 网约车 后端开发 一二面（凉经）",
        "content": "## 一面 10.12（43min）\n\n  * 自我介绍\n  * 实习经历\n  * MySQL性能慢的原因\n  * 联合索引 (a, b, c)，where b = 1，能走吗，where a = 1，能走吗\n  * MySQL索引原理\n  * B+树更扁 有什么好处\n  * InnoDB默认隔离级别\n  * 可重复读级别是怎么实现的\n  * 限流算法\n  * 手撕 \n    * 力扣 92.反转链表II\n    * 力扣 53.最大子数组和\n  * 项目\n  * Redis持久化\n  * AOF文件存储的是什么类型的数据\n  * 反问\n\n## 二面 10.12（50min）\n\n  * 自我介绍\n  * 挑一个项目详细介绍一下 背景、遇到了什么问题、你是怎么解决的\n  * 实习项目\n  * Go协程模型\n  * 协程创建过程（启动main函数初始化，它会创建哪些协程、哪些G、哪些M、哪些P、队列是什么时候创建的、全局队列是什么时候创建的） \n    * 这块不会，跟面试官说我是主Java的，然后问了我线程池的创建过程\n  * 线程池中的线程，工作的时候是什么状态，不工作的时候是什么状态\n  * 线程在什么场景下会变为`Blocked`状态\n  * 线程 进程区别\n  * 介绍CMS或者G1的回收过程\n  * CMS怎么识别出来对象可以被回收的\n  * 可达性分析算法\n  * 除了可达性分析算法还有什么标记法\n  * JMM工作内存和主内存怎么交互的\n  * volatile\n  * 如果不加volatile，值会从哪读\n  * 共享内存和工作内存有什么区别\n  * TCP怎么保证可靠性\n  * 超时重传，时间设置不当会有什么问题\n  * 滑动窗口 接收方窗口过大会有什么影响\n  * MySQL事务，读已提交、可重复读\n  * 手撕 \n    * 力扣 33. 搜索旋转排序数组\n    * 力扣 300. 最长递增子序列\n  * 反问\n\n> 手撕最后一道没撕出来，直接秒挂了。写成了最长连续递增子序列，太扯淡了..\n\n> 每轮面试2道手撕，没顶住呀。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567290689139023872?sourceSSR=users",
        "title": "大厂面筋合集-每天更新",
        "content": "**【1】科大讯飞-硬件**\n\n科大讯飞(技术问题汇总)\n\n总统流程:1面技术30min--2面20minHR--3面技术20min\n\n1、画出BOOST、BUCK基本原理图，讲解对应每个器件作用\n\n2、BOOST芯片内部构成大致讲解\n\nMOS、电感选型细节3\n\n画出LDO芯片内部构成，讲解工作原理4\n\n5、LDO为什么用NMOs不用PMOS，细节区别有什么\n\n6、LDO设计原因，LDO关键参数，参数对应会影响什么\n\n7、LDO与DCDC差别\n\n8、画出反向放大10倍+电压跟随器的电路\n\n9、运放选型细节\n\n10、设计一个12V转5V的电路，存在异常情况: 输入电压会出现大的电压跳变，若12V下降到3.3V怎么处理，说出设计思路\n\n电机堵转如何处理\n\n12、项目中遇到的难题怎么解决\n\n**【2】快手- JAVA**\n\n一面：\n\n介绍项目和实习\n\n做题 ，6道判断题\n\n判断string，重载，索引等\n\nmysql的索引知道吗\n\n场景题：如何将1亿个qq号高效保存\n\njvm类加载\n\n对象里面有什么？\n\n什么是spi？\n\n如何计算对象大小？\n\n做题：最长回文子序列\n\n二面：\n\n介绍项目\n\ndouble如何在计算机存储的\n\nkafka和rocketmq的区别\n\n如何设计系统？有点忘是不是这个问题，我回答分布式，系统无状态等\n\n如何高效存储—位图和压缩位图\n\n接口幂等性如何判断\n\njwt技术？\n\nsession和cookie的区别？\n\n做题：\n\n字符串相乘\n\n三面：\n\n自我介绍\n\n然后就做题\n\n如何设计一个类？稀疏矩阵要保存所有数据的同时，要更高效的压缩，同时计算矩阵和矩阵的乘积。\n\n**【3】格力电器-信息技术类**\n\n一面（技术面）\n\n1、 自我介绍\n\n答：学校+学历+本科时的实习经历+研究生期间研究方向\n\n2、 HR问了简历中其中一个项目和比赛进行提问\n\n答：①运用的语言+项目期间担任的角色。\n\n②参加比赛的收获\n\n3、 项目开发过程中遇到的问题+项目的细节和优化+提问了一些Java的问题\n\n答：①列举问题②解决方法+优化细节③收获④回答Java问题\n\n4、 毕业设计做的什么题目，为什么选这个题目？\n\n5、 本科那段实习主要做了什么？遇到困难怎么解决的？\n\n二面（HR面）\n\n1、 自我介绍\n\n答：比一面多说了我为什么应聘格力\n\n2、 说一下对格力电器的了解\n\n3、 最近求职应聘的都是这种类型的岗位吗？研究生期间研究方向和这个岗位匹配度高吗？\n\n4、 职业规划的方向？未来希望在哪个城市发展为什么选择珠海？\n\n5、 手上有其他企业offer吗？\n\n6、 有什么兴趣爱好？读研期间如何缓解压力的？\n\n7、 你希望在一个怎样的工作氛围和环境？\n\n8、 反问：是否提供周转房？大概多久能有面试结果\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567156166782889984?sourceSSR=users",
        "title": "快手商家技术一面and二本鼠鼠对于今年的总结吧",
        "content": "整体50min 不难但是也不让我发挥基本都答上来了\n\n1：常规八股jvm、juc、JAVA重载重写（举一些设计模式来具体化），异常，redis的aof rdb 数据结构这些……都是挺简单的八股就没必要写了\n\n2：问实习项目说一下业务然后聊了下\n\n3：一个easy算法题（找数组每一个元素前面比当前元素大的数，单调站）\n\n  \n\n9.14约面的，但是我推到9.20才面，感觉基本人选已经找好了，所以可能更偏向kpi面\n\n  \n\n  \n\n整体也写个总结吧，当然学历和算法这一块还是硬伤，但是不可否认的自身优势可能就在于看博客扩展自己的眼界和思维，对于场景题就会不那么害怕。包括一整年学下来的八股基础，其实都还挺OK的。\n\n其实相对于学历劣势的群体来说，就应该更加努力去弥补，比如通过开源和实习，其实卡不卡学历其实也就那回事，毕竟学历就是一种努力付出的结果体现，没什么不公平。与其在时代浪潮下被淹没，我更想去捶死挣扎一下，比如说那些“有可能”\n\n  \n\n“二本的出路在哪？”\n\n其实没啥出路，都是死路一条，还不如该学学，该玩玩，与其要有个答案，我觉得出路就是“天天开心”。\n\n  \n\n当然也没有说的那么惨烈，起码对于咱二本鼠鼠来说，我也约了三家大厂面试，虽然都没过……，但是其实还是可以冲一冲中厂然后跳槽大厂，其中陆陆续续的小厂也有很多面试，基本上小厂有时候面试比大厂问的更难。\n\n  \n\n今年面试就到此为止吧，二本鼠鼠尽力了，好好沉淀一下算法拓展一下技术深度吧，明年暑期实习再战![优秀]\n\n  \n\n  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567110128730636288?sourceSSR=users",
        "title": "华为软件类笔试-嵌入式软件开发 12-20",
        "content": "**《嵌入式软件开发笔试与面试手册》**\n：[https://blog.nowcoder.net/zhuanlan/jvN8gj](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgw-c.nowcoder.com%2Fapi%2Fsparta%2Fjump%2Flink%3Flink%3Dhttps%253A%252F%252Fgw-c.nowcoder.com%252Fapi%252Fsparta%252Fjump%252Flink%253Flink%253Dhttps%25253A%25252F%25252Fgw-c.nowcoder.com%25252Fapi%25252Fsparta%25252Fjump%25252Flink%25253Flink%25253Dhttps%2525253A%2525252F%2525252Fgw-c.nowcoder.com%2525252Fapi%2525252Fsparta%2525252Fjump%2525252Flink%2525253Flink%2525253Dhttps%252525253A%252525252F%252525252Fgw-c.nowcoder.com%252525252Fapi%252525252Fsparta%252525252Fjump%252525252Flink%252525253Flink%252525253Dhttps%25252525253A%25252525252F%25252525252Fgw-c.nowcoder.com%25252525252Fapi%25252525252Fsparta%25252525252Fjump%25252525252Flink%25252525253Flink%25252525253Dhttps%2525252525253A%2525252525252F%2525252525252Fgw-c.nowcoder.com%2525252525252Fapi%2525252525252Fsparta%2525252525252Fjump%2525252525252Flink%2525252525253Flink%2525252525253Dhttps%252525252525253A%252525252525252F%252525252525252Fgw-c.nowcoder.com%252525252525252Fapi%252525252525252Fsparta%252525252525252Fjump%252525252525252Flink%252525252525253Flink%252525252525253Dhttps%25252525252525253A%25252525252525252F%25252525252525252Fgw-c.nowcoder.com%25252525252525252Fapi%25252525252525252Fsparta%25252525252525252Fjump%25252525252525252Flink%25252525252525253Flink%25252525252525253Dhttps%2525252525252525253A%2525252525252525252F%2525252525252525252Fgw-c.nowcoder.com%2525252525252525252Fapi%2525252525252525252Fsparta%2525252525252525252Fjump%2525252525252525252Flink%2525252525252525253Flink%2525252525252525253Dhttps%252525252525252525253A%252525252525252525252F%252525252525252525252Fgw-c.nowcoder.com%252525252525252525252Fapi%252525252525252525252Fsparta%252525252525252525252Fjump%252525252525252525252Flink%252525252525252525253Flink%252525252525252525253Dhttps%25252525252525252525253A%25252525252525252525252F%25252525252525252525252Fgw-c.nowcoder.com%25252525252525252525252Fapi%25252525252525252525252Fsparta%25252525252525252525252Fjump%25252525252525252525252Flink%25252525252525252525253Flink%25252525252525252525253Dhttps%2525252525252525252525253A%2525252525252525252525252F%2525252525252525252525252Fgw-c.nowcoder.com%2525252525252525252525252Fapi%2525252525252525252525252Fsparta%2525252525252525252525252Fjump%2525252525252525252525252Flink%2525252525252525252525253Flink%2525252525252525252525253Dhttps%252525252525252525252525253A%252525252525252525252525252F%252525252525252525252525252Fgw-c.nowcoder.com%252525252525252525252525252Fapi%252525252525252525252525252Fsparta%252525252525252525252525252Fjump%252525252525252525252525252Flink%252525252525252525252525253Flink%252525252525252525252525253Dhttps%25252525252525252525252525253A%25252525252525252525252525252F%25252525252525252525252525252Fgw-c.nowcoder.com%25252525252525252525252525252Fapi%25252525252525252525252525252Fsparta%25252525252525252525252525252Fjump%25252525252525252525252525252Flink%25252525252525252525252525253Flink%25252525252525252525252525253Dhttps%2525252525252525252525252525253A%2525252525252525252525252525252F%2525252525252525252525252525252Fgw-c.nowcoder.com%2525252525252525252525252525252Fapi%2525252525252525252525252525252Fsparta%2525252525252525252525252525252Fjump%2525252525252525252525252525252Flink%2525252525252525252525252525253Flink%2525252525252525252525252525253Dhttps%252525252525252525252525252525253A%252525252525252525252525252525252F%252525252525252525252525252525252Fgw-c.nowcoder.com%252525252525252525252525252525252Fapi%252525252525252525252525252525252Fsparta%252525252525252525252525252525252Fjump%252525252525252525252525252525252Flink%252525252525252525252525252525253Flink%252525252525252525252525252525253Dhttps%25252525252525252525252525252525253A%25252525252525252525252525252525252F%25252525252525252525252525252525252Fblog.nowcoder.net%25252525252525252525252525252525252Fzhuanlan%25252525252525252525252525252525252FjvN8gj)\n\n**《软件开发笔试汇总》**\n：[https://blog.nowcoder.net/zhuanlan/0oDWVm](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgw-c.nowcoder.com%2Fapi%2Fsparta%2Fjump%2Flink%3Flink%3Dhttps%253A%252F%252Fgw-c.nowcoder.com%252Fapi%252Fsparta%252Fjump%252Flink%253Flink%253Dhttps%25253A%25252F%25252Fgw-c.nowcoder.com%25252Fapi%25252Fsparta%25252Fjump%25252Flink%25253Flink%25253Dhttps%2525253A%2525252F%2525252Fgw-c.nowcoder.com%2525252Fapi%2525252Fsparta%2525252Fjump%2525252Flink%2525253Flink%2525253Dhttps%252525253A%252525252F%252525252Fgw-c.nowcoder.com%252525252Fapi%252525252Fsparta%252525252Fjump%252525252Flink%252525253Flink%252525253Dhttps%25252525253A%25252525252F%25252525252Fgw-c.nowcoder.com%25252525252Fapi%25252525252Fsparta%25252525252Fjump%25252525252Flink%25252525253Flink%25252525253Dhttps%2525252525253A%2525252525252F%2525252525252Fgw-c.nowcoder.com%2525252525252Fapi%2525252525252Fsparta%2525252525252Fjump%2525252525252Flink%2525252525253Flink%2525252525253Dhttps%252525252525253A%252525252525252F%252525252525252Fgw-c.nowcoder.com%252525252525252Fapi%252525252525252Fsparta%252525252525252Fjump%252525252525252Flink%252525252525253Flink%252525252525253Dhttps%25252525252525253A%25252525252525252F%25252525252525252Fgw-c.nowcoder.com%25252525252525252Fapi%25252525252525252Fsparta%25252525252525252Fjump%25252525252525252Flink%25252525252525253Flink%25252525252525253Dhttps%2525252525252525253A%2525252525252525252F%2525252525252525252Fgw-c.nowcoder.com%2525252525252525252Fapi%2525252525252525252Fsparta%2525252525252525252Fjump%2525252525252525252Flink%2525252525252525253Flink%2525252525252525253Dhttps%252525252525252525253A%252525252525252525252F%252525252525252525252Fgw-c.nowcoder.com%252525252525252525252Fapi%252525252525252525252Fsparta%252525252525252525252Fjump%252525252525252525252Flink%252525252525252525253Flink%252525252525252525253Dhttps%25252525252525252525253A%25252525252525252525252F%25252525252525252525252Fgw-c.nowcoder.com%25252525252525252525252Fapi%25252525252525252525252Fsparta%25252525252525252525252Fjump%25252525252525252525252Flink%25252525252525252525253Flink%25252525252525252525253Dhttps%2525252525252525252525253A%2525252525252525252525252F%2525252525252525252525252Fgw-c.nowcoder.com%2525252525252525252525252Fapi%2525252525252525252525252Fsparta%2525252525252525252525252Fjump%2525252525252525252525252Flink%2525252525252525252525253Flink%2525252525252525252525253Dhttps%252525252525252525252525253A%252525252525252525252525252F%252525252525252525252525252Fgw-c.nowcoder.com%252525252525252525252525252Fapi%252525252525252525252525252Fsparta%252525252525252525252525252Fjump%252525252525252525252525252Flink%252525252525252525252525253Flink%252525252525252525252525253Dhttps%25252525252525252525252525253A%25252525252525252525252525252F%25252525252525252525252525252Fgw-c.nowcoder.com%25252525252525252525252525252Fapi%25252525252525252525252525252Fsparta%25252525252525252525252525252Fjump%25252525252525252525252525252Flink%25252525252525252525252525253Flink%25252525252525252525252525253Dhttps%2525252525252525252525252525253A%2525252525252525252525252525252F%2525252525252525252525252525252Fgw-c.nowcoder.com%2525252525252525252525252525252Fapi%2525252525252525252525252525252Fsparta%2525252525252525252525252525252Fjump%2525252525252525252525252525252Flink%2525252525252525252525252525253Flink%2525252525252525252525252525253Dhttps%252525252525252525252525252525253A%252525252525252525252525252525252F%252525252525252525252525252525252Fgw-c.nowcoder.com%252525252525252525252525252525252Fapi%252525252525252525252525252525252Fsparta%252525252525252525252525252525252Fjump%252525252525252525252525252525252Flink%252525252525252525252525252525253Flink%252525252525252525252525252525253Dhttps%25252525252525252525252525252525253A%25252525252525252525252525252525252F%25252525252525252525252525252525252Fwww.nowcoder.com%25252525252525252525252525252525252Fcreation%25252525252525252525252525252525252Fmanager%25252525252525252525252525252525252FcolumnDetail%25252525252525252525252525252525252F0oDWVm)\n\n3、平面灯阵中寻找最大正方形边界\n\n现在有个二维数组来模拟一个平面灯阵,平面灯阵中每个位置灯处于点亮或熄灭,分别对应数组常个元素取值只能为1或0,现在需要找一个正方形边界,其每条边上的灯都是点亮(对应数组中元素的值为1)的，且该正方形面积最大:\n\n输入\n\n第一行为灯阵的高度(二维数组的行数）\n\n第二行为灯阵的宽度(二维数组的列数）\n\n接著为模拟平台灯阵的二维数组arr\n\n1<arr.length<=200\n\n1<arr[0].length<=200\n\n输出\n\n返回满足条件的面积最大正方形边界信息。返回信息[r, c, w],其中r,\nc分别代表方阵右下角的行号和列号,w代表正方形的宽度。如果存在多个满足条件的正方形,则返回r最小的,若r相同,返回最小的正方形。\n\n样例1\n\n输入:\n\n4\n\n5\n\n1 0 0 0 1\n\n1 1 1 1 1\n\n1 0 1 1 0\n\n1 1 1 1 1\n\n输出:\n\n[3, 2, 3]\n\n解释:满足条件且面积最大的正方形边界，其右下角的顶点为[3, 2]，即行号为3，列号为2，其宽度为3，因此返回信息为[3, 2, 3].\n\n样例2\n\n输入\n\n3\n\n3\n\n1 0 0\n\n0 1 0\n\n0 0 1\n\n输出：\n\n[0, 0, 1]\n\n1、找磨损度最高和最低的硬盘\n\n存储阵列上使用的一批固态硬盘,根据硬盘磨损值给定一个数组endurances,数组中每个元素表示单块硬盘的磨损度(0到10000之间)。\n\n磨损度越大,表示此盘需要更换的概率越高。需要找出磨损度最高三块盘下标和磨损度最低的三块盘下标。\n\n输入\n\n一组硬盘磨损度的数组。\n\n说明:\n\n1)数组endurances中无重复值\n\n2)数组的长度范围:[6, 200]\n\n3)数组的下标从0开始。\n\n输出\n\n第一行:磨损度最高三块盘下标,按下标升序展示\n\n第二行:磨损度最低的三块盘下标,按下标升序展示\n\n样例1\n\n样例1\n\n输入：\n\n1 50 40 68 72 86 35 14 87 99 63 75\n\n输出:\n\n5 8 9\n\n0 6 7\n\n样例2\n\n输入\n\n23 34 56 12 11 10\n\n输出\n\n0 1 2\n\n3 4 5\n\n    \n    \n    #include <iostream>\n    #include <vector>\n    #include <algorithm>\n    #include <sstream>\n    using namespace std;\n    \n    void findDisks(const vector<int>& endurances) {\n        vector<pair<int, int>> diskPairs;\n    \n        for (int i = 0; i < endurances.size(); ++i) {\n            diskPairs.emplace_back(endurances[i], i);\n        }\n    \n        sort(diskPairs.begin(), diskPairs.end());\n    \n        vector<int> lowestIndexes, highestIndexes;\n    \n        for (int i = 0; i < 3; ++i) {\n            lowestIndexes.push_back(diskPairs[i].second);\n        }\n    \n        for (int i = 0; i < 3; ++i) {\n            highestIndexes.push_back(diskPairs[endurances.size() - 1 - i].second);\n        }\n    \n        sort(lowestIndexes.begin(), lowestIndexes.end());\n        sort(highestIndexes.begin(), highestIndexes.end());\n        \n        for (int i = 0; i < 3; ++i) {\n            if (i > 0) cout << \" \";\n            cout << highestIndexes[i];\n        }\n        cout << endl;\n    \n        for (int i = 0; i < 3; ++i) {\n            if (i > 0) cout << \" \";\n            cout << lowestIndexes[i];\n        }\n        cout << endl;\n    \n    }\n    \n    int main() {\n        string line;\n        vector<int> endurances;\n    \n        getline(cin, line);\n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567105658588246016?sourceSSR=users",
        "title": "百度  大模型平台后端实习二面面经",
        "content": "1、自我介绍\n\n2、深挖腾讯实习项目 ，聊了快半小时(面试官也没想到AILab会接这么多业务，有的细节没讲好面试官没听懂)\n\n3、代码题:求一个数的开方根，写了二分后以为就结束了，没想到还要考虑负数和小数以及溢出的情况，代码优化的点，后面问了进阶版的如果开多次根号该如何处理，还问了如果是高次函数二分法还能求解嘛，牵扯到了深度学习中学习率和冲量的方法，没想到一道题能问这么深\n\n4、反问，实习能接触大模型sdk开发，模型训练，少部份模型部署方面的东西。\n\n二面应该是过了，面试官说主要看我意愿。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567096876135129088?sourceSSR=users",
        "title": "亿联网络 海外技术支持（一面口语挂）",
        "content": "HR中午11：30Boss上约了下午14：30的电话面试\n\n1，自我介绍（中文），不会打断\n\n2，询问地域（简历上没体现会问）\n\n3，询问实习经历（是否在职）\n\n4，未来的发展规划，主要我刚结束上一家的实习，目前在gap，规划要有短，有长。\n\n5，询问实习不转正的原因\n\n6，博客经历，创作博客的动机\n\n7，技术支持文档的创作经历（效果），大模型的运用，文档是否落地\n\n8，实习经历中遇到具有困难的经历\n\n9，反问“美亚杯”保障经历，想突出自己的工作能力和解决问题能力\n\n10，接着问我实习中排查网络故障的真实经历，用到的技术，排查的流程，我举了网络配置的一般流程，网络故障排查的一般思路。\n\n11，HR问第十点的真实性，可能我讲的太理论了，其实很多情况下不需要排查到最后一步就可以了，极端情况下（tcpip，nic，网关，路由器，流过滤）\n\n12，技术相关问题：TCP/IP模型\n\n13，DNS是什么，有什么用\n\n14，\n\n  \n\n问到这里，噩梦来了\n\n英语口语水平，用英语介绍自己的\n\n😅英语稀碎  \n\n  \n\n15，口语完，问了意向薪资\n\n16，能否接受夜班，1.5个月轮一次5天夜班（21：30～6：30）\n\n  \n\n反问环节，问了员工的晋升路线\n\n  \n\n总结：\n\n技术方面因为问的都是我实习中的技术，所以都能打上来\n\n  \n\n口语真的崩了，心态崩😖\n\n  \n\nHR小姐姐的声音很甜，很有礼貌，专业素质极高，总的来说是一次很棒的体验\n\n  \n\n  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567089839686823936?sourceSSR=users",
        "title": "快手移动端开发实习二面 2023/12/20",
        "content": "一、自我介绍（项目和经历都没有问）\n\n二、代码题（介绍完直接做题）\n\n比较版本号\n\n三、八股文（基本都是多线程内容）\n\n1\\. ConcurrentHashMap底层数据结构，什么时候树化，什么时候退回链表，装填因子为什么是0.75\n\n2\\.\nConcurrentHashMap的volatile关键字修饰的是node还是node的val，为什么要用Jvolatile（JMM），sizectl属性（扩容、初始化、扩容阈值），get（为什么不加锁）方法，put方法（cas是什么，什么情况用，synchronized）\n\n3\\. String s1= “1\",String s2 = new String(\"1\")，s1和s2相同吗（一个指向常量池，一个指向堆）\n\n4\\. 虚拟机栈是什么，有什么作用？a=1,b=2,b = a+1,c = a+b;\n\n(这几个操作在虚拟机栈怎么体现，当时题目都没记住，所以就说不会了，应该往局部变量表的更新和操作数上去答题)\n\n5\\. 线程池有哪些参数（corepoolsize，maxpoolsize，workQueue，keepalive，handler），线程池的工作流程\n\n6\\. ThreadLocal是什么（讲了Thread的ThreadLocalMap，用于线程隔离和共享信息）\n\n7\\. 让你设计如何最快的使jvm栈溢出和堆溢出（答了递归、造大对象，内存泄漏，改jvm参数）\n\n四、反问\n\n业务是sdk开发，面试不足之处是不自信，有些知识欠缺理解（换个问的方式就不会回答了）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567076004414382080?sourceSSR=users",
        "title": "没想到我会有在金11银12解约三方的一天",
        "content": "# 超聚变 通用软件开发-24届秋招笔面试  \n\n  \n\n# 整体流程时间线：\n\n早早笔试完但人才库\n[牛泪]，其他各路面试流程都走完了，就早早在10月底签了三方开始摆烂，没想到12月初被超聚变HR捞了，问还有没有意愿，于是摆烂一个多月的我，被从人才库捞出来，重新拿出笔记，继续准备面试，两天速通业务面和主管面，一周内oc+offer，效率杠杠滴！\n[赞]\n\n# 9.20 投递简历\n\n# 9.22 笔试\n\n三道编程算法题：\n\n1.唯一出现字符组成的新字符串（100分）\n\n第一题比较简单，哈希表记录字符出现次数，再将键值为1的字符组合成字符串即可；\n\n2.修改后的最大二进制（200分）\n\n力扣原题：[*******************](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fleetcode.cn%2Fproblems%2Fmaximum-\nbinary-string-after-change%2F)\n\n3.解数独（300分）\n\n力扣原题：[********](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fleetcode.cn%2Fproblems%2Fsudoku-\nsolver%2F)\n\n运气算是比较好了，让我遇到难度不是很高的三道题，唯一比较难的第三题还是做过的LeetCode原题 [嘤嘤嘤]。\n\n# 12.7 专业面试\n\n手撕一道LeetCode hard——滑动窗口最大值\n[*************](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fleetcode.cn%2Fproblems%2Fsliding-\nwindow-maximum%2F)\n\n前几天还在说刷了一年算法题，但是实习秋招都没手撕过，全白刷了，结果这波专业面上来面试官就说:\"写道题吧\"，哈人 [栓Q]\n\n# 12.8 综合面试\n\n      主要问了实习和竞赛，没深入问技术\n\n因为在超聚变另外一个部门实习过，主管重点问实习：\n\n1\\. 你对实习部门的业务工作有什么理解？\n\n2\\. 你实习时主要负责的什么部分？\n\n3\\. 你有什么创新性的想法对于如何提高这部分工作的效率？\n\n4\\. 为什么不在原实习部门实习转正呢？\n\n然后就是高频问题——团队协作\n\n5\\. 你有没有什么团队协作的经历？项目中或竞赛中，担任什么角色？\n\n6\\. 问智能车竞赛项目，问PID；\n\n      其他就聊天，问考研吗，为什么觉得就业更适合自己，家在哪等等...\n\n# 12.15 收到offer邮件！\n\n# 超聚变 通用软件开发（管理软件方向）\n\n在走三方违约流程了，登上金11银12的秋招末班车，准备去超聚变了 [喝可乐]\n\n![](https://uploadfiles.nowcoder.com/images/20231220/390369354_1703074945858/AF15D32B95882262ED9E996C2C43843D)\n\n![](https://uploadfiles.nowcoder.com/images/20231220/390369354_1703074938594/7A36E26A3D19DEE3737BE81E1AF6AA83)\n\n![](https://uploadfiles.nowcoder.com/images/20231220/390369354_1703073424666/E70D7EA68AF90528D88FBD58308722D1)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567073762785361920?sourceSSR=users",
        "title": "经纬恒润java后端开发一面凉经",
        "content": "1.kmp算法\n\n2.堆排序\n\n3.sql语句执行顺序\n\n4.jdk1.8的新特性\n\n5.undo log和redo log\n\n6.CGLIB动态代理\n\n7.事务隔离级别\n\n8.Spring三级缓存，为什么要有第三级缓存\n\n9.Spring源码看过吗\n\n10.synchronized和ReenTrantLock有什么区别 ? 为什么说synchronized是重量级锁\n\n11.打过acm,蓝桥杯吗\n\n12.垃圾回收4种引用类型\n\n13.分代回收算法\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567050024501129216?sourceSSR=users",
        "title": "计算三叉搜索树的高度 - 华为OD统一考试",
        "content": "> OD统一考试\n>\n> 分值： 100分\n>\n> 题解： Java / Python / C++\n\n![alt](https://uploadfiles.nowcoder.com/images/20231201/644248237_1701399029315/A4F5E48572027B66E6ECFA2EF0A7C66A)\n\n定义构造三叉搜索树规则如下: 每个节点都存有一个数，当插入一个新的数时，从根节点向下寻找，直到找到一个合适的空节点插入查找的规则是:\n\n1.如果数小于节点的数减去500，则将数插入节点的左子树\n\n2.如果数大于节点的数加上500，则将数插入节点的右子树\n\n3.否则，将数插入节点的中子树\n\n给你一系列数，请按以上规则，按顺序将数插入树中，构建出一棵三叉搜索树，最后输出树的高度。\n\n## 输入描述\n\n第一行为一个数N，表示有N个数，1<=N<=10000\n\n第二行为N个空格分隔的整数，每个数的范围为[1,10000]\n\n## 输出描述\n\n输出树的高度(根节点的高度为1)\n\n## 示例1\n\n    \n    \n    输入\n    5\n    5000 2000 5000 8000 1800\n    输出\n    3\n    说明\n    最终构造出的树如下，高度为3\n    \n\n![alt](https://uploadfiles.nowcoder.com/images/20231215/644248237_1702636097765/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n## 示例2\n\n    \n    \n    输入\n    3\n    5000 4000 3000\n    输出\n    3\n    说明\n    最终构造出的树如下，高度为3\n    \n\n![alt](https://uploadfiles.nowcoder.com/images/20231215/644248237_1702636109927/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n## 题解\n\n> 模拟题\n>\n> 按题目要求规则直接构造树， 然后递归方式获取树的高度即可。\n\n### Java\n\n    \n    \n    import java.util.Scanner;\n    \n    /**\n     * @author code5bug\n     */\n    public class Main {\n        public static void main(String[] args) {\n            Scanner scanner = new Scanner(System.in);\n            int n = scanner.nextInt();\n            Node root = new Node(scanner.nextInt());\n    \n            for (int i = 1; i < n; i++) root.insert(scanner.nextInt());\n    \n            System.out.println(root.getHeight());\n        }\n    }\n    \n    class Node {\n        public int val;\n        public Node left, mid, right;\n    \n        public Node(int val) {\n            this.val = val;\n        }\n    \n        /**\n         * 新节点插入树中\n         *\n         * @param nval\n         */\n        public void insert(int nval) {\n            if (nval < this.val - 500) {    // 则将数插入节点的左子树\n                if (this.left != null) this.left.insert(nval);\n                else this.left = new Node(nval);\n            } else if (nval > this.val + 500) { // 则将数插入节点的右子树\n                if (this.right != null) this.right.insert(nval);\n                else this.right = new Node(nval);\n            } else {    // 将数插入节点的中子树\n                if (this.mid != null) this.mid.insert(nval);\n                else this.mid = new Node(nval);\n            }\n        }\n    \n        /**\n         * 获取树的高度\n         *\n         * @return\n         */\n        public int getHeight() {\n            int maxHeight = 0;\n            if (this.left != null) maxHeight = Math.max(maxHeight, this.left.getHeight());\n            if (this.mid != null) maxHeight = Math.max(maxHeight, this.mid.getHeight());\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567046779758182400?sourceSSR=users",
        "title": "成都借贷宝前端日常实习",
        "content": "面经\n\n借贷宝一面：\n\n笔试题：\n\n大概涉及了闭包、及时执行函数、数组去重的方式、事件循环\n\n问题：\n\nVue和React的区别？vue2的响应式是用什么？\n\nvar、let、const区别\n\n怎么理解回流跟重绘？什么场景下会触发？\n\nhttp和https的区别？\n\nhttp常用状态码？\n\n弹性盒子布局？\n\nTCP协议？三次挥手和四次挥手？\n\n地址栏输入url敲下回车发生了什么？\n\n讲一下axios？封装用了什么？\n\n什么是防抖和节流？口头描述一下防抖和节流？引申到Date.now()获取的时间戳可能有错误，怎么解决？\n\nES6新增属性有哪些？\n\n说说对事件循环的理解？\n\n如果要var定义一个变量自增执行一个for循环，后面用settimeout输出五次这个变量，结果是什么？怎么处理这个问题？\n\n实现元素居中的几种方法？\n\n如果后端传过来的数据数量大怎么解决？\n\n如果同时很多人访问网站，但服务器带宽不够，应该怎么办\n\nmap和set的区别？Weakmap和map的区别？\n\n什么办法可以减少github合并代码冲突？\n\n说说 Javascript 数字精度丢失的问题，如何解决？为什么0.1+0.2 > 0.3\n\n二面：\n\nHttp和Https区别\n\n学过哪些数据结构？链表和数组查找和插入的时间复杂度？怎么把它们两个的优势结合？\n\n散列表是什么？最坏的情况的时间复杂度？怎么解决?红黑树？\n\n进程和线程？事件循环？\n\n在项目中学到的东西？项目怎么部署的？pipeLine？jenkins检测更新的方法？\n\n进度：已oc[哇哇]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567045711611600896?sourceSSR=users",
        "title": "微软前端面经",
        "content": "### 一面（1h20min）\n\n自我介绍\n\n项目相关\n\n深浅拷贝理解？ 手写\n\n事件循环 输出题\n\n节流防抖？ 场景 手写\n\nSSR相关\n\nreact18有哪些新特性\n\nhook能不能在判断条件中执行，为什么？\n\n副作用函数？ 和普通event有什么区别\n\nvue响应式原理\n\n手写了reactive\n\ndiff原理\n\n双向链表\n\n### 二面（1h）\n\n实习相关\n\n埋点咋做的 我说手动加点位 面试官笑了。。。\n\nSSR相关\n\n同构问题\n\n打包优化\n\nloader和plugin区别\n\n为什么要用zustand\n\ntoken refreshToken\n\n如果发现用户有异常行为，想让他的token过期能实现吗\n\n安全问题 csrf xss\n\nvue和react区别\n\nvue2的更新为什么是component级别的\n\n实现usePrevious 保存上一次的值\n\nts实现泛型工具exclude\n\n版本号比较\n\n### **三面（1h）**\n\n现场起自己项目\n\n问项目相关\n\n前端如何解决负载和选择冲突的问题\n\n技术选型\n\nvue和react对比\n\nvue双向绑定\n\nvue2生命周期有哪些\n\nvue2和vue3区别\n\nSSR项目介绍\n\n打包优化\n\n手写使用html+css实现鼠标hover悬浮层\n\n如何判断链表有环\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567033333687820288?sourceSSR=users",
        "title": "爱奇艺移动端安卓开发实习一面 2023/12/20",
        "content": "一、自我介绍（没问项目）\n\n二、八股文\n\n1.mysql的左连接右连接和inner join\n\n2.http是哪一层，应用层还有哪些协议，为什么http使用tcp\n\n3.多线程交替打印数组怎么设计\n\n4.树的遍历方式（dfs、层序、bfs），口述怎么实现\n\n5.wait和notify\n\n三、代码\n\n括号匹配\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567025126269530112?sourceSSR=users",
        "title": "中科曙光一二面凉经",
        "content": "base 成都\n\n视频一面\n\n手撕三题 输出结果 找错 编程\n\n项目经验\n\n感觉比较轻松\n\n现场二面\n\n换工作原因\n\n简历拷打，做出过哪些贡献？\n\nread函数的数据传输过程是怎样的？\n\nC函数编译成汇编后从哪里获取参数的值？\n\n多线程数据一致性问题，怎么优化？\n\n手撕三题 输出结果 找错 编程\n\n反问 公司层面 岗位相关 工作氛围\n\n严肃 问的仔细 感觉有压力\n\n运气不太好，发点攒攒人品吧\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567027596794306560?sourceSSR=users",
        "title": "字节一面二面三面",
        "content": "**一面（1h）**\n\n自我介绍\n\n聊实习\n\n防抖，手写防抖\n\nvue的双向绑定\n\nvue响应式原理\n\n响应式编程的优缺点\n\nreact fiber\n\nreact hook 底层如何实现\n\nhttp状态码\n\nhttp缓存\n\nmap weakMap 区别\n\narray set weakSet 区别\n\n反转链表\n\n**二面（40min）**\n\nfor in for of 区别 for of 能遍历对象吗\n\nnew的过程\n\nccs水平垂直居中\n\nwatch和computed区别 场景\n\n生命周期 父子组件挂载顺序\n\nvue2和vue3有哪些区别\n\nhooks的好处\n\n讲讲useEffect\n\npromise有哪些静态方法\n\n手写promise.all\n\nSSR优缺点\n\nCSR优点 一开始就是类SSR的模式 为什么又改成了CSR\n\nvite为什么快\n\npnpm优点\n\n性能优化\n\n**三面**\n\nk个一组反转链表\n\n进程线程\n\n虚拟内存\n\ntcp三次握手\n\n闭包\n\nthis关键字怎么实现的\n\n其它的忘了\n\n麻了三面的问题一个没答上来\n\n计算机基础太薄弱了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567024894135803904?sourceSSR=users",
        "title": "腾讯云智一面",
        "content": "我是一个在有压力下，完全处于fw状态的，不管多简单的题目，太难了[牛泪]，面完复盘立马写出！\n\n  1. 开场简单聊一下\n  2. 两道编程题，1. 重写Array.prototype.find; 2. f(1) = 1, f(2) = 2,f (3) = 3, n > 3时，f(n) = Sumi=3 到 n {f(i - 1) * f(i - 2)};\n  3. 闭包和作用域链的区别\n  4. xss，csrf原理和预防措施\n  5. Promise，async await优缺点，捕获错误\n  6. 浏览器缓存\n  7. 构建工具（不会，没学过）\n  8. 手撕没写出来，对我没兴趣，就问了这么多\n  9. 自己面完后写的，\n  10. \n\n    \n    \n    Array.prototype.find = function (callback, thisArg) {\n        var array = this;\n    \n        for (var i = 0; i < array.length; i++) {\n            var res = callback.call(thisArg, array[i], i, array);\n            if (res) {\n                return array[i];\n            }\n        }\n        return undefined;\n    };\n    \n    var getFn = function (n, memo) {\n        if (n === 1) return 1;\n        if (n === 2) return 2;\n        if (n === 3) return 3;\n    \n        if (memo[n]) return memo[n];\n    \n        let sum = 0;\n        for (var i = n; i > 1; i--) {\n            sum += getFn(i - 1, memo) * getFn(i - 2, memo)\n        }\n        memo[n] = sum;\n        return sum;\n    }\n    \n    var n = 8,\n        memo = Object.create(null);\n    \n    getFn(n, memo)\n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567019741512990720?sourceSSR=users",
        "title": "寄了！，有请下一位天才中单",
        "content": "#### 百度后端实习 一面凉经\n\n### 15min\n\n##### 自我介绍+问项目\n\n介绍项目的具体详情，为什么要写这个项目，具体是怎么实现的\n\n数据库表是怎么建的，数据读取流程是怎么样的\n\nredis用到了那些结构，是怎么保持数据一直性的\n\n我看你有整合日志，你是怎么对日志分级的\n\n怎么串联起日志的上下游（不会）\n\n### 25 min\n\n##### golang基础\n\nslice和array的区别\n\nslice的扩容过程\n\n大切片和小切片的耗时是一样的吗\n\ndefer的执行流程，顺序\n\n##### Mysql\n\nmysql有那些索引\n\n你项目里的mysql是怎么建索引的\n\n索引树的数据结构是什么样的\n\n联合索引的流程，结构\n\n走索引和不走索引的流程\n\nmysql的锁了解吗（只知道行锁）\n\n行锁解决了哪些问题（不会）\n\n##### Redis\n\n你项目里有用到hash吗，具体是什么样的\n\nhash的底层数据结构是什么（不会）\n\nstring的底层数据结构是什么\n\nredis的缓存策略有哪些\n\nreids的缓存开着和关着的时候对读写有什么影响吗（不会）\n\nredis过期删除策略有那些\n\n知道分布式锁吗\n\n用redis实现分布式锁的流程是什么样的\n\n在分布式锁中怎么防止等待太久或者因为故障不能解锁\n\n分布式锁解决了什么单机锁不能解决的问题（没答到点上）\n\n##### 数据结构\n\n聊聊链表和二叉树的区别，插入，搜索方面\n\n### 10min\n\n##### 算法\n\n一个二叉树从树的右边看，看到的值是哪些\n\n[*************](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fleetcode.cn%2Fproblems%2Fbinary-\ntree-right-side-view%2F)\n\nbfs（秒了）\n\n### 结束\n\n反问：您觉得我有那些不足，公司业务最近重视哪些方面\n\n你还有没有其他offer（不是哥，铁凉的面试你还问这个来羞辱我）\n\n### 总结\n\n题目是都很简单，但是感觉没答好，中午没吃饭又困又饿，，，基础不牢，地动山摇，面试官人很好，很帅，但是我的回答总是把他干沉默了，，，，，非常尴尬。寄\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/567003504779210752?sourceSSR=users",
        "title": "整理牛客网100份面经的C/C++校招、社招面试题总结",
        "content": "注：部分面试题分类不一定严格按类别分类。\n\n200+道常见面试题。大部分的面试题对于C++后端、桌面开发、嵌入式、音视频开发都是通用的。\n\n建议大家根据老廖整理的面试题整理答案，**一定要自己整理答案才能把知识转化成自己的能力** ，只有通过动手动脑才能加深映像。\n\n# C/C++\n\n常见问题：智能指针、多态、虚函数、stl原理。\n\n  1. 智能指针实现原理\n  2. 智能指针，里面的计数器何时会改变\n  3. 智能指针和管理的对象分别在哪个区（智能指针本身在栈区，托管的资源在堆区，利用了栈对象超出生命周期后自动析构的特征，所以无需手动delete释放资源。\n  4. 面向对象的特性：多态原理\n  5. 介绍一下虚函数，虚函数怎么实现的\n  6. 多态和继承在什么情况下使用\n  7. 除了多态和继承还有什么面向对象方法\n  8. C++内存分布。什么样的数据在栈区，什么样的在堆区\n  9. C++内存管理（RAII啥的）\n  10. C++从源程序到可执行程序的过程\n  11. 一个对象=另一个对象会发生什么（赋值构造函数）\n  12. 如果new了之后出了问题直接return。会导致内存泄漏。怎么办（智能指针，raii）\n  13. c++11的智能指针有哪些。weak_ptr的使用场景。什么情况下会产生循环引用\n  14. 多进程fork后不同进程会共享哪些资源\n  15. 多线程里线程的同步方式有哪些\n  16. size_of是在编译期还是在运行期确定\n  17. 函数重载的机制。重载是在编译期还是在运行期确定\n  18. 指针常量和常量指针\n  19. vector的原理，怎么扩容\n  20. 介绍一下const\n  21. 引用和指针的区别\n  22. Cpp新特性知道哪些\n  23. 类型转换\n  24. RAII基于什么实现的（生命周期、作用域、构造析构\n  25. 手撕：Unique_ptr，控制权转移(移动语义）\n\n手撕：类继承，堆栈上分别代码实现多态\n\n  1. unique_ptr和shared_ptr区别\n  2. 右值引用\n  3. 函数参数可不可以传右值\n  4. 参考c/c++堆栈实现自己的堆栈。要求：不能用stl容器。\n  5. stl容器了解吗？底层如何实现：vector数组，map红黑树，红黑树的实现\n  6. 完美转发介绍一下 去掉std::forward会怎样？\n  7. 介绍一下unique_lock和lock_guard区别？\n  8. C代码中引用C++代码有时候会报错为什么？\n  9. 静态多态有什么？ 虚函数原理 虚表是什么时候建立的 为什么要把析构函数设置成虚函数？\n  10. map为啥用红黑树不用avl树？（几乎所有面试都问了map和unordered_map区别）\n  11. inline 失效场景\n  12. C++ 中 struct 和 class 区别\n  13. 如何防止一个头文件 include 多次\n  14. lambda表达式的理解，它可以捕获哪些类型\n  15. 友元friend介绍\n  16. move函数\n  17. 模版类的作用\n  18. 模版和泛型的区别\n  19. 内存管理：C++的new和malloc的区别\n  20. new可以重载吗，可以改写new函数吗\n  21. C++中的map和unordered_map的区别和使用场景\n  22. 他们是线程安全的吗\n  23. c++标准库里优先队列是怎么实现的？\n  24. gcc编译的过程\n  25. C++ Coroutine\n  26. extern C有什么作用\n  27. c++ memoryorder/elf文件格式/中断对于操作系统的作\n  28. C++的符号表\n  29. C++的单元测试\n\n# 数据结构算法\n\n常见问题：链表、排序、二叉树\n\n  1. 数组和链表区别和优缺点\n  2. 快速排序\n  3. 堆排序是怎么做的\n  4. 冒泡排序\n  5. 二分查找（复杂度）\n  6. hash表数据很大。rehash的代价很高，怎么办\n  7. 二叉树前序遍历非递归\n  8. 链表反转\n  9. 二叉树输出每一层最右边的节点\n  10. 千万级数组如何求最大k个数？（用最小堆反之最大堆） 千万数据范围有限，0到1000，有很多重复的，按频率排序怎么处理？\n  11. 计算二叉树层高。\n  12. 给一个连续非空子数组，找它乘积最大的（动态规划）\n  13. 排序算法. 哪些是稳定的，哪些不稳定的\n  14. 树的深度和高度。一开始分别用了一个层序遍历和一个dfs，然后面试官问能否都在一个dfs里面呢，提示了一下在dfs是否可以传一个参数，然后解决了。\n  15. 布隆过滤器介绍\n  16. 为什么不用布隆过滤器\n  17. .数据结构相关，图的种类，表示方法，图有哪些经典算法+描述算法\n  18. 求最大的k个数字，解法：优先队列（堆）或者快速排序\n  19. 一个大数问题，解法：转换为字符串解决，这题没写好，leetcode应该有很多类似的问题\n  20. hash解决冲突 （ 开放定址法、链地址法、再哈希法、建立公共溢出区 ），四种方式详细的过程、思路\n  21. 链地址法和再哈希法之间的关联和区别，两者分别适用场景，两者底层的数据结构，关联和区别\n  22. 链表和数组的底层结构设计、关联、区别、应用场景\n  23. 死锁的概念，进程调度算法怎么解决死锁\n\n# gdb/gcc/g++\n\n  1. 怎么debug，怎么看内存泄漏。\n  2. gdb 使用 -> 多线程程序切换到某线程栈帧 -> 如何查看寄存器值\n  3. 怎么分析C++的core文件\n  4. GDB有哪些命令\n  5. gcc和g++的区别\n  6. Linux下程序有问题，如何调试？（答GDB打开，打上Breakpoint进行调试）\n\n# 设计模式\n\n  1. 单例模式实现区别\n  2. 策略模式实现\n\n# 操作系统\n\n## 操作系统原理\n\n  1. 线程和进程的区别、应用场景。\n  2. 多线程中各种锁，读写锁，互斥锁\n  3. 内存池\n  4. 内存管理\n  5. 内存写漏\n  6. 如果频繁进行内存的分配释放会有什么问题吗？\n  7. 如果频繁分配释放的内存很大（>128k）,怎么处理？\n  8. 虚拟内存以及堆栈溢出相关的问题，堆栈溢出怎么处理等等。\n  9. 分段和分页的区别\n  10. 进程间通信原理和方式\n  11. fork()读时共享写时拷贝\n  12. 互斥锁+条件变量\n  13. 如果非堆内存一直在增长，可能哪个区域的内存出了问题（Java）\n  14. 堆和栈的区别。什么情况下会往堆里放\n  15. fork函数返回值是怎么实现的\n  16. 用户级线程和内核级线程的区别\n  17. 线程池和线程开销\n  18. 线程切换的到底是什么\n  19. 线程同步共享怎么实现\n  20. 互斥同步的方法\n  21. 信号量和自旋锁的区别\n  22. 查看磁盘、cpu 占用、内存占用命令\n  23. linux虚拟地址空间结构/动态库地址无关代码 \n  24. top命令排查高占有率进程/top命令的占用率怎么算的\n  25. 谈谈进程创建后在Linux中的内存分布？（回答内存四区，虚拟地址空间，栈内存堆内存）\n  26. 在Linux系统下，使用for循环，一直进行new操作，会发生heap-overflow吗？如果不会，原因呢？（答应该不会，Linux系统可能会对此情况进行处理，面试官追问如果不用C++而用Java呢，答Java虚拟机等，胡扯了一些）\n  27. 死锁的概念，进程调度算法怎么解决死锁\n  28. 讲讲进程管理\n\n## 系统编程\n\n  1. 除了MQ和websocket之外，你还能想到什么异步通信的办法？\n  2. 为什么要用多线程。多进程可以吗（webserver的）\n  3. 为什么要用线程池，线程池中的线程是怎么运作的?\n  4. 生产者消费者，信号量的使用\n  5. 队列空时，消费者和生产者会发生什么 线程池请求队列是用什么实现的？（链表）\n  6. .C++多线程并发问题（场景千万级数量级怎么处理）\n  7. 哪几种常见的 signal? SIGSEGV... -> 正常终止程序的信号？-> kill 进程，几号信号？\n  8. 什么情况下会使用静态变量\n  9. 多线程读写同一个静态变量你是怎么解决的\n  10. 用过无锁编程吗，知道原子量吗\n\n# 定时器\n\n  1. 小根堆定时器是怎么弄的。如果一次pop一个的话。高并发情况下会不会有问题\n  2. 心跳检测如何实现\n  3. 为什么用小根堆实现定时器\n\n# 网络\n\n## 网络原理\n\n  1. 为什么握手是三次而挥手需要四次\n  2. tcp和udp的原理、区别、应用场景。\n  3. TCP慢启动，拥塞控制实现\n  4. HTTP是在OSI模型的哪一层\n  5. HTTPS用到的是对称加密还是非对称加密？分别体现在哪里？\n  6. http2和http1的区别\n  7. http1.0 / 1.1 / 2 / 3\n  8. get和post区别\n  9. WebSockt\n  10. tcp/ip五层模型\n  11. dns服务器用的是什么协议。\n  12. ping命令 用的是什么协议。在哪一层。\n  13. 能详细讲一下有限状态机怎么解析http报文吗\n  14. 如果解析http请求的时候，用户一次性没传完数据，（如果头部都没传完，请求报文长度字段都没传完，怎么办）\n  15. 路由表说一下\n  16. 路由表为空怎么找到下一跳\n  17. 粘包拆包是什么，发生在哪一层\n  18. TCP在什么情况下会出现大量time_wait，哪个阶段出现\n  19. TCP 包头字段... 标志位-> 建立连接过程，终止连接过程-> TIME_WAIT, CLOSE_WAIT 分析，属于哪一方？\n  20. TCP 建立连接过程 -> SYN + ACK 包能不能拆开来发\n  21. 讲讲quic/听说过哪些快速重传算法/timewait状态干啥用的\n  22. 提到了TCP，黏包怎么解决？（固定包头接收，指定内存长度）\n  23. 查看网络状况（以为是netstate，其实是ping、traceroute，紧张忘记说了）\n  24. 抓包工具？（wireshark，紧张又给忘了靠）\n  25. TCP 2MSL说一下，为什么\n\n## 网络编程\n\n  1. 为什么要用epoll\n  2. epoll实现原理，epoll使用的哪种模式， 除了epoll，了解select/poll吗\n  3. 怎么理解多路复用机制的\n  4. reactor和proactor的好处和坏处。为什么要用reactor而不用proactor\n  5. select怎么用。底层原理\n  6. select为什么只能支持1024个。poll和epoll是怎么解决这个问题的。\n  7. epoll 底层为什么用红黑树不用hash\n  8. ET和LT的区别、IO多路复用\n  9. 游戏中数据传输用啥协议（有没有改进的协议，基于UDP的可靠传输）\n  10. 项目架构（webserver）两种高并发模式（问的很细）\n  11. 除了Reactor模型，还有什么模型\n\n# 数据库\n\n## MySQL\n\n  1. 有哪些引擎\n  2. 数据库的架构\n  3. 不同引擎对索引的支持\n  4. InnoDB和MyISAM的区别\n  5. 隔离级别\n  6. 最左前缀原则\n  7. MySQL的集群是用什么样的方式去增加并发量\n  8. 除了读写分离还有吗？\n  9. mysql的隔离级别和锁。\n  10. 数据库delete和trancate区别(这个trancate没用过，没说出来)\n  11. mysql索引（B+树）\n  12. B树和B+树的区别\n  13. B+树树高怎么算？树高为4能支持多少数据量\n  14. 数据库ACID怎么实现\n  15. binlog记录的是什么\n  16. mysql的ACLS（事务）\n  17. mysql的mvcc\n  18. mysql锁，每个锁的应用场景\n  19. 什么情况下会照成死锁，举个例子\n  20. 事务安全（隔离级别）\n  21. 你的项目死锁怎么检测的\n  22. 数据库三大范式（忘了）\n  23. 如何加快数据检索的效率\n  24. .注册登陆的用户名和密码存在哪里？（数据库）\n  25. 面试官灵魂4连问：乐观锁与悲观锁的概念、实现方式、场景、优缺点？\n  26. 哪几种常见的 signal? SIGSEGV... -> 正常终止程序的信号？-> kill 进程，几号信号？\n  27. 一千五百万行数据如何快速找到某一行数据，给出方案，设计数据库表结构\n  28. sql优化\n  29. 事务\n  30. 什么情况下使用读已提交\n  31. 对于脏读的理解\n  32. 慢查询怎么看，怎么优化\n  33. 联合索引(a,b,c)，where a, b, c和where b, a, c区别\n  34. 是否了解db底层\n\n## redis\n\n  1. redis有什么数据结构\n  2. 设计一个存储字符串kv对的数据结构，要考虑并发和持久化存储\n  3. redis 基本数据结构... zset-> zset 底层实现？-> skiplist 和 red-black tree 对比？\n  4. 对于redis的理解\n  5. redis在项目中进行怎么样的使用\n  6. redis 为什么读取速度那么块 （io、单线程、内存）\n  7. 为什么redis单线程会快 （完全基于内存、单线程避免不必要的上下文切换、cpu消耗、加锁问题。。。）\n  8. 对于很多文件和数据，怎么进行数据的查找、排序，使用什么样的数据结构 （类似于TopK、这个主要是让你进行优化、类似于位图、hash、过滤器之类的）\n\n# 服务器开发\n\n  1. 用户认证和鉴权（jwt）\n  2. 从url下图片10000张图片（写了想法，代码没写出来，http的api忘了），10台机器并行下载，怎么实现（主线程给子线程分配下载任务，从线程池取（给自己挖坑））。\n  3. 雪花算法原理\n  4. 分布式锁\n  5. redis和MySQL数据一致性相关设计\n  6. 长短连接的区别和应用场景\n  7. RAII实现数据库连接池，怎么实现的\n  8. http服务器，他的目标是什么，通过什么方式实现的\n  9. 负载均衡的一些场景问题\n  10. 为什么用vector实现缓冲区，有没有想过别的数据结构\n\n## rpc\n\n  1. grpc怎么用的\n  2. 为什么grpc速度快\n  3. rpc调用流程和机制，rpc超时计时器在什么位置，如果调用超时了怎么处理，当前连接还能继续使用吗\n\n# 开放性问题\n\n## 项目相关\n\n  1. 介绍自己的c++项目，遇到的难点，实现了那些功能\n  2. 看过源码嘛，轻量级服务器项目\n  3. 计算机基础知识是怎么去补滴，之后的技术/职业规划\n  4. 物联网有个简版的MQ协议叫做MQTT，你可以想一下扫码支付使用的机器，这些机器的服务器是怎么做到跟这千万级别的客户端通信的？你扫码支付完之后，服务器是怎么精准返回你这个客户端说它收到了多少钱？\n  5. 情景题。手机店。不同品牌的不同型号手机有不同的业务逻辑。怎么设计系统\n  6. 如果有两个服务器，一个服务器坏了，另一个服务器怎么判断并接手坏的服务器的用户数据（共用一个堆）\n  7. 服务器进行过压测么\n  8. 场景设计问题，UDP设计安全可靠的文件传输\n  9. 客户端资源下载到一半突然网络中断怎么办，有进行处理吗？\n  10. 有进行过压力测试吗？\n  11. 在学校里或者公司中最有成就感的事。\n  12. 井盖为什么是圆的\n\n# 音视频相关\n\n  1. 音视频的编解码和同步问题能讲一下吗\n  2. 你遇到过解码卡顿的情况吗\n\n# 参考文章\n\n部分参考文章：\n\nhttps://www.nowcoder.com/feed/main/detail/61c62b0d97974a93a77030aeb278f880\nhttps://www.nowcoder.com/discuss/501752554045308928\nhttps://www.nowcoder.com/feed/main/detail/a4bcfe4ed24247019cbdbd176c2cb0b8\nhttps://www.nowcoder.com/feed/main/detail/7b2e7b35e3ff4893aa2623b761103f15\nhttps://www.nowcoder.com/feed/main/detail/b11ab7e902324190a96bd33c79b1f8c1\n\n还有其他的文章太多了，如果侵权请告知删除。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566954051271696384?sourceSSR=users",
        "title": "游戏美术岗的面试题是怎么样的",
        "content": "应聘游戏美术岗不仅仅是看作品集，哪怕作品集过了也不代表会拿下offer\n\n还要通过游戏厂商一面二面乃至三面的重重筛选；除了专业能力以外综合素质同样重要，HR需要通过面试考察个人的工作理解、性格以及交流能力等等，所以面试阶段一定不要马虎哦\n\n学姐总和了几类美术岗面试题供大家参考\n\n  1. 你最喜欢的游戏是什么，你觉得这款游戏在美术（特定方面）做的好的地方在哪里？\n  2. 完成一个游戏xx（根据岗位划分）设计项目的工作流程大致是怎样的？\n  3. 是否有独立设计的项目，能否独立设计完成游戏的ICON、LOGO、人物？\n  4. 自身的发展路线是如何规划的呢？\n  5. 你对这个岗位的理解如何？\n  6. 专业不对口怎么提升自己的游戏美术背景呢？\n  7. 你了解的游戏美术具体有哪些细分呢\n  8. 你的测试题的绘画思路是什么？\n  9. 在之前的团队配合中有没有出现过沟通问题？当时是如何解决的？\n  10. 什么时候开始接触的板绘？\n  11. 是否了解本公司产品？说一下美术风格是什么样的？\n  12. 评价xx与xx游戏的美术风格有什么区别？\n  13. 是否了解游戏美术的整个设计流程？\n  14. 你之前有报过班学习的经历，那你平时是如何规划学习的？\n  15. 你有看过目前比较火热的xx游戏的美术设计吗？说说你的评价\n  16. 能举例几个你认为美术风格优秀的作品吗？你为什么觉得他们优秀\n  17. 如果不考虑求职，从你的爱好出发，你想做一个什么样风格的作品？\n  18. 【问作品集】说一说你目前最满意的作品是什么，当时你是如何思考设定的？\n  19. 你通常设计角色的工作流程是什么？ 大概需要多久时长？\n  20. 【问测试题】在画测试的时候有没有遇到什么困难？又是如何解决的？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566776813410582528?sourceSSR=users",
        "title": "拼多多（多多买菜运营岗）面经",
        "content": "**一面** ：时间：12.12 形式：视频 （高级职称面？） 时长：22min\n\n1）自我介绍\n\n2）时间11 11 6，工作地点在广东揭阳，问能否接受\n\n3）询问校园外联部组织过的活动\n\n4）问还有没有相关的经历？\n\n我bg是算法，实习只做过算法，说我暑假工在一家知识产权公司做过商标注册推销\n\n面试官建议把这一段经历也写上\n\n5）深挖暑假工这段经历\n\n6）问为何不投算法，手上有没有其他offer？\n\n7）谈谈对多多买菜的认识\n\n8）反问环节\n\n问了培养方式，面试官回答很详细\n\n—————————————————————————————————————————————————————\n\n**二面** ： 时间12.14 形式：电话 （hr面）时长：29min\n\n原定的面试官临时有事，hr面提前\n\n和一面内容差不过\n\n反问：有多偏僻？\n\n大概就是医院5公里那种偏僻。\n\n—————————————————————————————————————————————————————\n\n**三面** ：时间 12.15 形式：电话 （hrbp面）时长：23min\n\n1）自我介绍\n\n2）问能否接受11 11 6\n\n3）问对多多买菜的看法\n\n4）对社区团购的了解\n\n5）问生活或学习遇到比较困难的事\n\n6）问期望薪资，并为什么这样期望\n\n我是回答有的网上看到相同学历有开到这个价的，其次自己能力足以匹配\n\n7）家庭、爱情情况\n\n8）反问环节\n\n第一个：拼多多竞业协议相关问题\n\n大概就是说接触到很核心的也会才会签\n\n第二个：要不要提前实习（忘了当初是不是问这个了，因为面了很多公司，几乎都说要，如果问了就是要）\n\n—————————————————————————————————————————————————————\n\n**四面** ：时间12.19 形式：视频 （主观面）时长：16min\n\n1）自我介绍\n\n2）11 11 6 ，地区偏僻能否接受\n\n3）问相关实习\n\n4）问如何看待”卷“★★★★★★★★★★★★★★★★\n\n我是这样回答的：卷分良性竞争和恶行竞争，良性竞争可以与同时共同进步，值得提倡，遇强则强。\n\n恶行竞争会影响公司正常运作，我是说3面说过的例子：我做商标推销的时候，签的第一单，给顾客商标设计才签成的，但是上司谴责了我，因为这样的先例以后，后面的顾客都会要求推销者帮忙设计商标。\n\n接着，面试官说他觉得这样挺好的，提供额外服务签下单。我就和他说，从老板的角度，这样会增加用人成本。然后从同事的角度，增加工作，还不增加工资，会引起不满。\n\n**上面的回答和3面一样，但是面试官马上提前反问环节** ？？？？？？？？？\n\n然后我就问会有吗？有的话大概啥时候开始\n\n我听的语气是有点不耐烦的感觉，说了四个字没有实习。好像和3面回答不一样，觉得大概就是明说你没戏了。。。\n\n—————————————————————————————————————————————————————\n\n说下感受吧，第一面的面试官给出了面试意见，以及2.3面hr姐姐的态度都很好，但是4面不知道是不是压力面，居然同样的答案行不通，我是没想到一家公司居然价值观不一样。但是后面想了想，电商那三家就是这样卷生卷死卷出来的，hrbp可能是以同事的角度，主管是以高层的角度，所以一个答案，不同的面试官的态度会很不一样。\n\n最后，我只想说，如果4面是因为对这个该不该提供额外服务问题把我挂了，我觉得不进拼多多也是好事，毕竟在这样的领导手下做事，估计会特别难受，也提前知道自己不适合他们部门。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566766632136093696?sourceSSR=users",
        "title": "灵犀互娱 Java研发一面（12.18）",
        "content": "上周在工位做牛马中，然后阿里的HR打电话约面试，也没啥准备，毕竟有了满意的offer然后还在实习中，周日，周一带薪复习匆匆忙忙赶鸭子上架；昨天晚上开始面试；\n\n我很早进去到视频中，面试官看起来中年的样子，很干净；然后我还没开始说话他就说了一大堆介绍阿里灵犀互娱平台事业线的产品，什么叫专业，这就是！然后他还说自己是总监，好家伙，秋招补录一面就是总监面吗？\n\n自我介绍完成之后，面试官就开始说，我们结合项目来聊聊吧，聊项目过程中再聊技术底层然后框架啥的，先让我介绍一下自己的项目，我跟他实话说，我实习的项目是低代码，都是硬核的业务，没有所谓的高大上的技术，如果非说优化，那就是所谓的那么点设计模式了，哈哈，他也笑了；然后我主动说，可以聊聊第一个项目***的，我比较上心；然后就开始大肆聊了，说实话我对自己的项目其实已经淡忘很多了，他叫我说说流程我都没办法发说出细节，他问我有哪些表我其实都说了不是很清楚哈哈，当然也记不清楚了，只是说了个大概，但是我重点说了某块我很熟悉，可以展开聊聊；哔哩啪啦的聊了很多其实，我都是结合着八股去聊项目的，面试官很好，完全愿意跟着我走，虽然途中都会问我几个八股，我都是回答的很好，并且带有自己的思考（所谓思考就是八股结合项目去聊，理论指导，项目实践，没做过，我能说出来那就是做过了哈哈，当然本人还是做过的）；\n\n简历上的东西基本都问过了一遍，我这个简历是八月份投的，面试官说这是不是很旧的简历，我说是的，我现在都在小米秋招进去已经在这边实习了；面试官就是想问我项目做的完成度如何这样而已，面试过程很愉快；并问了我在小米的干了啥，我也坦白了，我说啥都不会，只是刚来不久；然后又问了我你最满意的项目是啥，我又拿第一个项目炒回锅肉来说了哈哈，面试官还是很满意的感觉看反应来说；\n\n到了最后，还剩下十分钟的时候，这时候就更倾向于聊天了；面试官问我喜欢的base地在哪，我说就是广州，我原本就是广东人，哈哈，我直接坦白说，如果灵犀要我，我****（这里省略哈哈哈）；面试官很愉快的笑了，然后问我，你本人更愿意做底层还是业务，比如说中间件？还是中台？还是业务开发？这里我都拿自己的经历来对比说了哈哈（不知道面试官是不是对我有意的意思）；然后后面还聊了一下北京这边的情况等等，啥时候有消息回复，总之，阿里的这次面试，让我很愉快，原本准备的算法，也不需要用上，挺好！\n\n唠嗑到最后，看了招聘进度，还在面试中，没挂，挺好，希望有一个和他一样好的二面，更希望这就是最后一个技术面，直通HR面多好哈哈哈哈，异想天开了。。。。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566737018558914560?sourceSSR=users",
        "title": "ABB 面试经验帖",
        "content": "收到offer已经一个月左右了，想记录一下面试的经过，为新人提供一些帮助。我想说我的经验不是一个典型的面试经历，几乎可以说是没什么准备，但整个流程很顺利，能感到ABB招人工作的专业和对求职者的尊重，这两点是我最终选择ABB的重要原因。\n\n  1. 第一通电话，是Hr打过来简介了工作内容和岗位的薪资范畴，很惭愧当时投ABB是在APP中海投的，已经记不清ABB是怎样的公司了，所以我没有直接接受，而是推说我想调查一下再决定是否参加面试。\n  2. 挂了电话后我去看了ABB的2023届线上宣讲会视频（可能因为招人少，今年都没有宣讲视频），并且查询了公司的风评，似乎是一个不错的欧洲外企，而且所处的行业在我看来是很有发展空间的。第二天，我在下午4点多给Hr回了电话，Hr在3分钟内就通过他们的日历软件确认了直线经理的空缺时间，为我安排了次日的线上面试。\n  3. 讲一下我的个人情况，楼主是985本硕，找工作的时候有2个竞赛国一，1个省一，另外还有4篇论文，但是我的研究方向比较小众，对口的工作机会较少。申请的岗位所要求的技能，基本是我在项目中出于实用目的自学的。此前一直在准备申请海外博士，所以完全没准备秋招八股等，自己在申请无望后把本科时候学过的数字电路的教材翻了一遍，又过了一遍自己做过的项目。\n  4. 第一次正式面试，对方一共有三人——我的直线经理和另外两名同事。由于我持有雅思7.0的证书，所以没有考察我的英语，全程是汉语交流。自我介绍后，是盘项目，对技术问的非常细致，还夹杂了一些常见问题的考察（比如跨时钟域等，后来我才知道这些都是所谓的八股，有答案）但我当时并没有准备这样的回答，所以只能从个人理解的角度出发去尝试回答。总之就是问啥答啥，挺多问题我都不清楚，但是也努力讲了自己的理解，或知晓的相关其他知识（比如面试官问我一个IC设计方面的问题，我不清楚，但我类比了一个通信上的解决思路来回答）。\n  5. 第二次面试，老实讲上次面试我觉得自己的表现不太好，因为很多技术细节我都没回答的很正确，所以我也去查了一些八股问题的答案。这一轮有两个面试官——研发总监和HRBP。项目和技术方面的问题也有，但没有第一轮那么细节。研发总监和我聊了挺多非技术问题：我过去参加比赛、项目时遇到的挑战和解决方法等。我的表达能力不错，也能和其他人流畅地合作；不过团队管理方面虽有经验，却缺乏一些管理技巧，因此也跟面试官讲了我曾经遇到的一些失败。整体上这一轮面试感觉很放松，令我印象深刻的一点是，HRBP在最后15分钟问了我手中有没有offer，但她在我回答前就提醒我这是我的个人隐私，因此可以选择不回答，这让我有很好的印象。\n  6. 最后一轮面试是部门的高管面，她先对自己做了介绍，简单讲了自己的职业生涯，然后问了我对本专业的看法。我从本科的经历（转院、换专业），讲到自己印象深刻的课程，然后讲了我对通信的整体认识——软可写代码，硬可干PCB，对电子行业有比较全面的通识化培养的一门本科专业。后来，她又问了我一些动力、人生目标之类的问题，比如我的职业规划、家庭的期许和对ABB以及自动化行业的看法。交流的最后，她对我的职涯提了一些期许（这时候我几乎很确信自己已经通过了面试）。\n  7. 在终面结束的1周后，我收到了offer call，最初联系我的那个Hr用大概30分钟主动详细地向我介绍了并回答了关于岗位的薪资福利和后续流程等方面的问题。\n\n简要的总结：\n\n找工作的过程，也是不断认识自己的过程，我在考虑读博的时候，对自己的兴趣、经历等进行过很长时间的思考，所以正式找工作的时候，并没有很针对性地准备。我很幸运，因为能在技术性问题没有答地很好地情况下，通过一面。不过对于二面、三面中问到的那些非技术问题，我基本上自己都考虑过，所以对方一问出来，我都可以知道问题背后的真实目的，所以自我感觉回答的都挺好。我觉得认清自己想要什么，自己对什么感兴趣，能接受什么样的工作，这是找工作时最重要的事情。\n\n对我来说，我最终选择这个offer就是三条原因：1. 我看好这个行业；2. 我喜欢做软硬件结合的研发；3. 面试过程让我感到同事们很好相处。\n\n以上。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566726266993287168?sourceSSR=users",
        "title": "24届蔚来（手机业务，安卓系统开发）二面+加面（下半部分）",
        "content": "**【写在前面：笔试和一面部分请参考上半部分的分享（**[**https://www.nowcoder.com/discuss/566725705069768704**](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F566725705069768704)**）】**\n\n**投递岗位：** 蔚来，手机业务，安卓系统开发（深圳/上海）\n\n**总结，吐槽与投递时间线：**\n\n我是9月4号投递蔚来的这个岗位，（投递时间应该不算太晚），投递的第二天就收到了笔试邮件。特别需要注意的是，蔚来的这个笔试，是正儿八经的技术笔试，而不是很多企业会先来一个的性格测评，9月7号完成了蔚来的笔试。那之后，众所周知的事情出现了，也就是蔚来在今年下半年进行了比较大规模的组织架构调整。蔚来的笔试本身并不困难，做完以后我就一直在等待后续。一个月都没动静了，我估计这个岗位可能已经被干掉了。所以也就没在意。\n\n10月23号，离谱的事情来了，蔚来的HR联系我，要不要参加一面。这距离投递已经过去几十天了。当然我最后还是参加了，意料之外的是，这个一面还挺水的，几乎没有问什么技术相关的问题，20来分钟就结束了。反问问的是业务，然后我得知面试的岗位是蔚来的手机业务部门时，我也觉得十分的震惊。因为蔚来手机正式上线也就是今年的事，所以这里的安卓开发更加偏向于安卓系统开发（定制化安卓镜像之类的）。面试完以后又是杳无音讯。\n\n12月4号，官网显示志愿已经过期（没想到投递还有过期这一说法的）。也就是同一天，蔚来的HR再次联系我，说蔚来内部的组织架构已经调整完毕，可以进行二面了。二面的面试官应该是部门Leader，面试内容深挖项目，然后面试的技术问题很难，是真正意义上的“深入理解”。如果时间足够，他很有可能问一些（很难的）安卓问题。本来觉得应该没有后续了，但后面HR说二面已经通过（可能是因为个人实习工作经历比较对口）。不过因为组织架构调整的原因，我投递的岗位变成了两个base，一个是上海的，一个是深圳的。如果选择上海，后面就等待HR面（之前面试的所有流程，其实都是上海的）。如果是深圳，那么需要进行一次加面。我选择了深圳的base。\n\n12月7号，进行了3面（加面），其实这一场面试的难度才是比较正常。但遗憾的是，12月19号，最终通知流程截止，收到感谢信。复盘下来，可能还是觉得应该是蔚来内部的组织架构调整（没HC了），导致我最终没有被录用（二面都通过了，加面基本上也都答上来了）。总的来说还是挺可惜的，都已经走到差不多最后一步了。\n\n**二面（约50min）：**\n\n**项目考问（约35min）：**\n“请详细的介绍一下你所参与的这些项目，你在这个过程中是怎样调研的，项目上线以后是怎么部署的”，“你的项目需要进行数据样本的采集，你是怎么做的，有编写过爬虫吗？有没有碰到一些反爬的情况？”。“你主要从事的是安全研究，说说你所参与的这个项目是否存在一些安全问题”。\n\n**JAVA考问（约15min）：**\n“Java的基础类型里面哪种基础类型是没有符号概念的。这些基础类型里面，哪种又是在规范中没有指定大小的”（boolean），“Java的lambda表达式用过吗？”，“你如何判断一个系统是LSB/MSB？”，“Java的默认编码是UTF-8还是UTF-16，为什么会这样？”，“volatile的可见性是个什么概念”，“谈谈你对JVM/编译系统的理解（理解的有多么深入）”，“Java基础类型和引用类型访问（读写）操作的是否具有原子性？”。\n\n**非技术相关问题：** “自我介绍”，“反问”。\n\n**三面（加面，50min）**\n\n**项目考问：** “谈谈你在参与的项目中，具体负责哪一个部分，你的工作是什么，这个项目最终是如何部署和运作的，你对所使用的技术是如何看待的？”。\n\n**基础知识考问（很杂）：**\n“对称加密算法有哪些，非对称加密算法有哪些。他们的区别是什么？”，“有没有做过安卓应用开发的工作？”，“安卓的四大组件知道吗？”，“哪个组件用的多（本质上谈谈这四个组件的功能和理解）”，“那么对于Activity，说说他的生命周期，到什么时候用户就可以进行交互了”，“用过Fragment吗？说说是做什么用的？”，“Java面向对象的三大特性是什么？”，“啥是重载，啥是覆写。他们体现了三大特性的哪一点？”，“Thread类都有哪些方法，说说他们的作用以及sleep和wait的区别”，“乐观锁和悲观锁知道吗？”，“解释一下并发和并行”，“进程的生命周期，是怎样工作的”。\n\n**非技术相关问题：**\n“自我介绍”，“你为什么要辞职考研？为什么选择你当前的这个学校？为什么选择这个专业？”，“实习和在学校学习的差别，有什么好处，有什么不好？”，“谈谈你做研究时都读了那些论文”。“谈谈你对未来的规划”，“反问”。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566718079179186176?sourceSSR=users",
        "title": "得物 开奖",
        "content": "断断续续面了三个月，终于开奖了，面试时间加起来可能就一个小时吧[笑cry]，分享一下时间线。\n\n## 20230912 笔试\n\n## 20230916 一面\n\n1.介绍动态规划，什么时候会使用动态规划？什么时候用回溯这些算法？\n\n2.印象最深刻的一段实习\n\n3.如何通过用户去找到平台的痛点\n\n4.如何得到比开源产品要好的结论的\n\n5.你是怎么管理团队的\n\n6.如何维护平台的稳定性的，有什么量化指标吗\n\n面试官反馈要增加qps等指标\n\n7.类加载器有调研过哪些产品，对比过哪些优劣势？\n\n8.ChatGPT应用的介绍\n\n9.设计模式的使用有哪些场景？\n\n10.工作是怎么分配的？你觉得分配的任务是感兴趣重要还是擅长重要？\n\n## 20231119 二面\n\n## 20231210 三面\n\n1.项目简单介绍\n\n2.JVM内存介绍\n\n3.MySQL为什么采用B+树\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566700959343063040?sourceSSR=users",
        "title": "山峰个数 - 华为OD统一考试",
        "content": "> OD统一考试\n>\n> 分值： 100分\n>\n> 题解： Java / Python / C++\n\n![alt](https://uploadfiles.nowcoder.com/images/20231201/644248237_1701399029315/A4F5E48572027B66E6ECFA2EF0A7C66A)\n\n## 题目描述\n\n给定一个数组，数组中的每个元素代表该位置的海拔高度。0表示平地，>=1时表示属于某个山峰，山峰的定义为当某个位置的左右海拔均小于自己的海拔时，该位置为山峰。数组起始位置计算时可只满足一边的条件。\n\n## 输入描述\n\n一个整数数组\n\n## 输出描述\n\n输出符合条件的山峰的个数\n\n## 示例1\n\n    \n    \n    输入:\n    [0,1,2,3,2,4]\n    \n    输出:\n    2\n    \n\n## 示例2\n\n    \n    \n    输入:\n    [3,0,3,4,1]\n    \n    输出:\n    2\n    \n\n## 题解\n\n> 简单模拟题。\n>\n> ### 解题思路\n>\n>   1. 使用一个计数器`cnt`记录符合条件的山峰数量。\n>   2. 遍历数组，对于每个位置，判断是否满足山峰条件，即左右两侧的海拔均小于自身。\n>   3. 如果满足条件，则增加计数器`cnt`。\n>   4. 最终返回`cnt`作为结果。\n>\n\n### C++\n\n    \n    \n    #include <bits/stdc++.h>\n    using namespace std;\n    \n    class Solution {\n    public:\n        int validMountainCount(vector<int>& arr) {\n            int n = arr.size(), cnt = 0;\n            for(int i = 0; i < n; i++) {\n                // 左右海拔均小于自己的海拔时\n                if((i == 0 || arr[i-1] < arr[i]) && (i + 1 == n || arr[i] > arr[i+1])) cnt++;\n            }\n    \n            return cnt;\n        }\n    };\n    \n    int main() {\n        Solution solution;\n        vector<int> arr1{0,1,2,3,2,4};\n        cout<< solution.validMountainCount(arr1) <<endl;\n    \n        vector<int> arr2{3,0,3,4,1};\n        cout<< solution.validMo\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566725705069768704?sourceSSR=users",
        "title": "24届蔚来（手机业务，安卓系统开发）笔试+一面（上半部分）",
        "content": "**【写在前面：具体的投递时间线，总结和吐槽请参考下半部分的分享（**[**https://www.nowcoder.com/discuss/566726266993287168**](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F566726266993287168)**）】**\n\n**投递岗位：** 蔚来，手机业务，安卓系统开发（深圳/上海）\n\n**笔试题目：**\n\n**单选题（2分20题）**\n\n**1-5：**\n1，安卓像素单位换算。2，多进程和初始信号量问题。3，IP是OSI/ISO的哪一层。4，Java语言String的初始化。5，快速排序一轮以后的结果。\n\n**6-10：**\n6，什么操作可以终止进程。7，安卓里面的dvm是什么。8，存储方法设计属于数据库设计的哪个阶段。9，数据库主表联系的问题。10，安卓程序运行的结果。\n\n**11-15：** 11，LRU情况下的缺页读取问题。12，形参的定义。13，完全二叉树的节点。14，自动重发请求的缩写。15，HTTP返回的状态码。\n\n**16-20：** 16，Intent语句的目的。17，多线程相关。18，Java类和变量的作用域以及权限。19，二分查找次数。20，二叉树的节点计算。\n\n**编程题（15/15/30，3题）**\n\n1，现在需要你实现四则运算的计算器，其实本质上考的是对编程语言的熟练程度。对输入输出，字符串转换，有效位数等要有一定的了解。\n\n2，输入n，输出长度为n的*字符串 n=int((sys.stdin.readline()) print(n*”*”)即可。\n\n3，本质上是快速求第n项斐波那契数列的项数（结果取余输出）。\n\n**一面（几乎是纯聊天，只有20分钟）：**\n\n**项目考问：**\n“请详细介绍一下你所参与的项目，包括功能模块的设计，项目的产出（最后做了个什么东西出来），项目团队的组织架构和任务分工”，“项目里面有哪些是和安卓开发相关的，说说是怎么做的”，“谈谈你对项目所涉及到技术的理解”？\n\n**非技术相关问题：**\n“自我介绍”，“在学校期间有没有参加竞赛？”，“有没有写过技术博客”，“你的兴趣爱好”，“为什么辞职考研，你认为读研有用吗？”，“反问”。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566667962883530752?sourceSSR=users",
        "title": "星环大数据开发两面面经",
        "content": "一面：boss直聘，拷打项目，无八股。面试官简单介绍了项目的情况，反问。\n\n二面：电话面，面试官一眼看出项目是网上的，我狂妄发言：“我是有自己的思考的”，然后被拷打，最后只憋出来了一条。\n\n根据我之前的回答，面试官问了\n\n1）数仓，业务系统，大数据平台的关系\n\n根据jd，问了\n\n2）py如何连接数据库，数据库游标、连接不释放会怎么样\n\n3）hive分桶表，如何分桶，如何确定分桶的数量，分桶有什么用\n\n4）怎么处理json，将其转化为结构化数据\n\n反问\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566652941868752896?sourceSSR=users",
        "title": "2024秋招—国科微电子—系统测试工程师一面",
        "content": "笔试后的3天约面\n\n  1. 自我介绍\n  2. 实习经历\n  3. 实习过程中最困难的一件事\n  4. 你的沟通能力怎么样\n  5. 项目经历\n  6. 介绍常见数据结构和算法\n  7. 介绍CS科班课程主要内容\n  8. 测试场景题\n  9. Linux相关（管道、进程）\n  10. 如果在年终评级时，你的上司给了你完全不符的负面评价，你会怎么做？\n  11. 介绍一下自己的开发能力\n  12. 业余爱好（体育、科技）\n  13. 对我们公司的了解\n  14. 反问\n\n当天约面，没怎么了解公司业务，小麻\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566617371926855680?sourceSSR=users",
        "title": "卓望测试一面技术面+HR面（等待总监面通知）",
        "content": "base南京，双非硕菜鸡选手\n\n**一面技术面**\n\n**测试相关问题**\n\n  1. 自我介绍\n  2. 个人信息和技术栈1是后端，是否投过开发岗\n  3. 测试工程师的功能和职责\n  4. 有什么手段或者方法能做到测试的全覆盖\n  5. 软件测试中的黑盒测试常用的技术和方法\n  6. 除了黑盒测试和白盒测试有没有了解过性能测试，性能测试属于黑盒测试还是白盒测试\n  7. 性能测试的概念，需要观测哪些指标\n  8. 你在项目中做过那些性能测试的行为\n  9. 性能测试的步骤或流程，需要做好哪些准备\n\n**数据库**\n\n10\\. 关系型数据库的左连接右链接和内连接\n\n11Linux操作系统用过吗？查看文件的内容（四个可能用到的命令），删除文件的命令\n\n**计算机网络**\n\n12\\. OSI的七层模型\n\n13.浏览器输入一个地址到他显示这个过程中能用到哪些协议\n\n**Java**\n\n14\\. Java中ArrayList和LinkedList的区别\n\n15.Java中HashMap和HashTable的区别\n\n**简历项目**\n\n16\\. 项目中用到过Redis，常用的Redis的数据结构\n\n17.项目中用到了WebSocket，为什么使用WebSocket，WebSocket和HTTP有什么区别\n\n反问\n\n18\\. 反问业务，培养体系\n\n19 后续面试流程\n\n20.是否需要提前实习\n\n**二面HR面**\n\n  1. 自我介绍\n  2. 简历中间隔了一年在做什么\n  3. 家是哪里人？\n  4. 为什么执着考研，考了两次\n  5. 计算机专业的大多数会考虑开发，你选择了测试，开发和测试你是怎么考虑的\n  6. 本科学校设置过软件测试相关的课程吗\n  7. 通过什么途径了解测试这个岗位的\n  8. 除了理论学习，实践上有做过哪些测试相关的项目补充吗\n  9. 没做过测试相关的内容，怎么知道自己是合适测试这个岗位的\n  10. 胜任测试这个岗位主要需要具备哪些能力\n  11. 目前找工作都会找测试岗吗，还是也会投开发岗\n  12. 为什么现在才想转测试\n  13. 关于转到测试方向，做了哪些准备\n  14. 期望的工作地点\n  15. 期望的薪资\n  16. 目前有offer吗\n  17. 目前是测试开发一起看吗？\n\n**反问**\n\n18\\. 培养体系\n\n19 晋升渠道\n\n周一问了HR小姐姐，说是二面过了在等终面的安排....\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566586861846528000?sourceSSR=users",
        "title": "汉得信息-Java-笔试",
        "content": "# 汉得信息-Java-笔试\n\n**Spring****事务传播行为**\n\nPROPAGATION_REQUIRED: 如果当前存在事务，则加入该事务；否则，创建一个新事务。\n\nPROPAGATION_SUPPORTS: 如果当前存在事务，则加入该事务；否则，不使用事务。\n\nPROPAGATION_MANDATORY: 如果当前存在事务，则加入该事务；否则，抛出异常。\n\nPROPAGATION_REQUIRES_NEW: 创建一个新事务，并挂起当前事务（如果存在）。\n\nPROPAGATION_NOT_SUPPORTED: 不使用事务；如果当前存在事务，则挂起该事务。\n\nPROPAGATION_NEVER: 不使用事务；如果当前存在事务，则抛出异常。\n\nPROPAGATION_NESTED: 如果当前存在事务，则在嵌套事务中执行；否则，创建一个新事务。\n\n事务传播机制的默认值为\nPROPAGATION_REQUIRED。这意味着如果一个方法在一个具有事务的上下文中执行，而该方法又调用另一个方法，则第二个方法将加入该事务。\n\n**Spring Boot**\n\nSpringBoot项目启动会扫描以下位置的application.properties或者application.yml文件作为SpringBoot的默认配置文件，\n\n**域的加载顺序**\n\nJava程序初始化顺序（一看就懂）\n\n顺序：父类(静态域按顺序加载)–>子类(静态域按顺序加载)\n–>父类(非静态变量,非静态代码块,构造函数)–>子类(非静态变量,非静态代码块,构造函数)静态域：\n\n类加载的几个过程：\n\n加载、验证、准备、解析、初始化。然后是使用和卸载了\n\n**类的加载顺序**\n\n父类的静态代码块\n\n子类的静态代码块\n\n父类代码块\n\n父类的构造方法\n\n子类代码块\n\n**JVM****分为栈区、堆区和方法区**\n\n初始化的对象放在堆里面，引用放在栈里面， class 类信息：常量池（static 常量）放在方法区。\n\n1\\. 栈：栈的结构是栈帧组成的，调用一个方法就压入一帧，帧上面存储局部变量，局部变量存放8大基础类型和指向引用类型的指针。\n\n2\\. 堆：初始化的对象，成员变量 （那种非 static 的变量），所有的对象实例都在堆上分配。\n\n3\\. 方法区：主要是存储类信息，常量池（static 常量），编译后的代码（字节码）等数据。\n\n2\\. 堆里面的分区：Eden，survival （from+ to）\n\n堆里面分为新生代和老生代（java8 取消了永久代，采用了 Metaspace）\n\n新生代包含 Eden+Survivor 区，survivor 区里面分为 from 和 to 区，内存回收时，如果用的是复制算法，从 from 复制到\nto，当经过一次或者多次 GC 之后，存活下来的对象会被移动到老年区，当 JVM 内存不够用的时候，会触发 Full GC，清理 JVM\n老年区。当新生区满了之后会触发 YGC,先把存活的对象放到其中一个 Survice 区，然后进行垃圾清理。\n\n3\\. GC 的两种判定方法\n\n1\\. 引用计数法：指的是如果某个地方引用了这个对象就+1，如果失效了就-1，当为 0 就会回收但是 JVM没有用这种方式，因为无法判定相互循环引用（A\n引用 B,B 引用 A） 的情况。\n\n2\\. 引用链法： 通过一种 GC ROOT 来判断，如果有一条链不能到达 GC ROOT 就说明可以回收\n\n**多线程********锁**\n\n线程的4种创建方式\n\n1\\. extend 继承Thread类\n\n2\\. implement 实现Runnable接口\n\n3\\. 使用Callable和Future创建线程\n\n4\\. 通过线程池创建。\n\n继承Thread和实现Runnable最大的区别在于数据是否容易共享. Runnable更容易实现数据共享.\n\n线程之间如何通讯\n\n1\\. 使用全局变量（共享变量）。\n\n2\\. 使用事件对象。\n\n3\\. 使用消息中间件。\n\n线程安全解决方案\n\n1\\. 同步代码块\n\n2\\. 同步方法\n\n3\\. 实现Lock锁\n\n4\\. 使用分布式锁\n\n死锁和解决方案\n\n不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了死锁。死锁的四个条件：\n\n1\\. 不可剥夺：资源被一个线程占用后，不能被另外一个线程剥夺使用权。\n\n2\\. 资源互斥：资源在某一时刻只能被一个线程使用。\n\n3\\. 请求保持：线程持有资源锁的时候，没处理完任务就不会释放锁。\n\n4\\. 循环等待：多个线程互相循环等待。\n\n解决方案：破坏四个条件中的一个或多个\n\n1\\. 超时机制。\n\n2\\. 避免嵌套同步。\n\nwait()和 sleep()方法有什么区别\n\nsleep 方法和 wait 方法都可以用来放弃 CPU 一定的时间，不同点在于如果线程持有某个对象的监视器，sleep\n方法不会放弃这个对象的监视器，wait 方法会放弃这个对象的监视器。\n\nwait需要等待被唤醒，而sleep睡眠一定时间之后自动苏醒。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566583210402930688?sourceSSR=users",
        "title": "方田医创 面经 25min",
        "content": "直接在boss面试间面试，面试官是一个HR和一个非后端的哥，所以也没问八股，纯问项目。\n\n  1. 自我介绍\n\n  2. 印象最深的项目？项目概述。 只记了项目的个人职责，整体概览差不多忘了，没说好。\n\n  3. 分表\n\n  4. sql构建，事务管理\n\n  5. 密度图，热图等数据可视化部分\n\n  6. 项目中用的多线程(数据导出，上锁)\n\n  7. 和其他人比的优势\n\n**反问**\n\n  1. 如果去了做哪些业务？ B端的平台搭建，直播相关\n  2. 表现怎么样\n\n项目感觉快忘差不多了，得重新看看。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566411378605465600?sourceSSR=users",
        "title": "滴滴服务端测开实习：OC；背书：百度网盘测开",
        "content": "（1）自我介绍；\n\n（2）讲一下百度实习服务端测试流程。这里提出来几个问题：需求评审环节，服务端测试流程，是不是需求评审阶段产出一个交互设计图？技术细节图和交互设计图？这俩啥区别？接口流程图是产品经理画的？还是rd画的？\n\n（3）你说的方案设计里面，是否包含设计测试用例的方案？数据存储校验呢？如果都有的话为什么不说呢？害怕.......\n\n（4）问一下HashMap为什么不是线程安全的？ConcurrentHashMap和Hashtable的区别？\n\n（5）了解go语言吗？协程是什么？\n\n（6）深挖我提出来的两个Bug。是测试环境的问题？还是开发环境的问题？当和前端联调时候出了问题怎样定位？然后面试官把两个Bug结合起来问我？自闭了...\n\n（7）问Linux命令：根据端口号查询进程信息？如何查询当前目录文件的大小？\n\n（8）问git命令：版本回滚什么的？我说我只会实习过程遇到的比较简单的几个问题。\n\n（9）评价还不错，说是新手可以理解。至少你说服了自己那个是Bug，而不是觉得那个是自己操作的问题....（笑死）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566377498041147392?sourceSSR=users",
        "title": "被羞辱的某度一面凉经",
        "content": "  1. 项目相关的若干问题\n  2. 重构后台项目为什么不用微前端？\n  3. 没有这个诉求，组内也没有相应实践\n  4. Vue2 和 vue3 代码如何在同一个项目中共存？\n  5. 我答得 vue-demi，可能面试官想要 composition-api\n  6. 你们埋点是怎么做的？\n  7. 两种方式，端内 bridge 上报，端外 http 上报\n  8. 埋点请求类型是什么？\n  9. 一般都是 post\n  10. 为什么不用 get？ post 会有两次握手\n  11. 跨域会有预检请求，但预检请求有有效期，也不是每一次 post 都会发两请求\n  12. 为什么要用透明视频动效？你们是怎么使用透明视频的？\n  13. 因为某些动效需要有透明图层，普通视频无法满足效果；使用方法很简单，使用内部xxx 包播放播放就好了\n  14. 透明视频有什么好处？\n  15. 相对于高帧率的序列帧动效体积更小，前端加载负担小\n  16. 前端集中状态管理工具？\n  17. 内部有统一的状态管理包（具体实现原理没看过）；也用过 pinia\n  18. Pinia 的原理是什么？底层是通过什么 api 来实现的\n  19. 会创建一个全局的 pinia 实例，初始化时在跟组件 调用 provide 注入，在子组件使用全局状态时调用 inject 获取到 pinia 实例，然后就可以拿到响应式数据了\n  20. 底层调用了什么 api\n  21. （一脸懵，上面不是说了吗）底层调用 provide 和 inject\n  22. 离线包？离线包如何发布？\n  23. 略\n  24. 你们有没有做比如说客户端版本1.0 去加载离线包1.1，客户端版本1.1 去加载离线包版本 1.2？\n  25. 没有，我们无论客户端版本是什么都去加载同一个版本的离线包 \n  26. 如果让你实现 你应该怎么办？？\n  27. 在发布离线包的时候选择对应客户端的版本？？\n  28. 客户端下载离线包的逻辑是怎样的？\n  29. 预加载（用户打开 app 空闲时）\n  30. 离线包命中率低是因为什么原因？\n  31. 不清楚，猜测是因为用户 app 停留时间短，离线包还没下载就进入 h5 了\n  32. 如果没有命中离线包会怎样\n  33. 会去请求线上资源啊\n  34. 客户端是怎么做的让没有命中离线包的请求去请求线上资源？？\n  35. 这我真不知道。。（猜是没有匹配到对应资源放开请求，去线上拉资源）\n  36. 跟客户端通信的方式？\n  37. bridge & scheme\n  38. 客户端如何主动向h5主动发消息？\n  39. H5 监听客户端的事件，客户端可以触发事件并将数据传给 h5\n  40. 你们做过客户端跟 h5 的双向通信吗？\n  41. 没有，只做过跟 server ws 通信\n  42. 有两个项目a、b，a 项目可以理解为公共项目，如果在 b 项目引用 a 项目\n  43. 使用 monorepo 组织项目，\n  44. 具体怎么配置？？\n\n  * 没实践过…\n\n为什么年底找工作，你是才开始找工作吗 **感觉你准备不充分啊** ？？？\n\n（确实刚开始，最后还被羞辱[牛泪]，也不反馈下哪里不对或不好）\n\n总结：\n\n体验很差的百度一面面经，全程拷打项目，其他问题也跟工作有关，感觉跟面试官不在一个频道，我还是太菜啦[牛泪]\n全程没有反馈，我也不知道我哪里答错了或哪里答的不好。。。\n\nfine～ 拜拜[无语子][无语子][无语子]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566373848111669248?sourceSSR=users",
        "title": "字节实习一面",
        "content": "被狠狠拷打项目了[牛泪][牛泪][牛泪]总计时1h26min![](https://uploadfiles.nowcoder.com/message_images/20231218/917796339_1702905996354/discuss_1702905995677.jpeg)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566364467764658176?sourceSSR=users",
        "title": "快手移动端开发实习一面 2023/12/18",
        "content": "一、自我介绍，项目细问（aop相关、MySQL调优）\n\n二、八股文\n\n1.https比http多了哪些流程\n\n2.mysql窗口函数知道哪些\n\n3.tcp为什么是四次挥手不是三次\n\n4.hashmap为什么不是线程安全\n\n5.equals和==的区别\n\n6.jvm一次完整的垃圾回收流程\n\n7.jvm内存结构\n\n8.hashcode相同equals相同吗\n\n9.java序列化机制\n\n10.设计模式（工厂模式、装饰器模式、代理模式）\n\n三、代码\n\n压缩字符串\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566361865815629824?sourceSSR=users",
        "title": "游戏客户端面经 快手游戏（一面）",
        "content": "# 目录/时间线\n\n  * [（返回汇总帖）](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F553531404814966784)\n  * 09261700 一面\n  * 0927 流程结束\n\n# 09261700 一面\n\n总共26min。\n\n面试官自我介绍\n\n  * 所属北京快手游戏棋牌中心（斗地主、麻将、台球、五子棋）\n  * 和杭州那边是完全独立开来的，比如不归大师管\n\n自我介绍。\n\n（问题很少，就不分类了）\n\n  * 为什么实习没有转正\n  * Lua有哪些数据类型\n  * UGUI的层级控制是怎样的，是哪个组件控制的\n  * 弹窗界面怎么屏蔽其下所有界面的点击响应\n  * 热更新细节问题\n  * 用MVC的设计模式说一下背包的实现，浏览物品和使用物品\n  * 如果背包里有上千个物品，但滚动区域同一时间最多只会展示10个，这种情况下需要做怎样的优化处理\n  * 在二维栅格面上，存在若干障碍物，给定A、B两点，要求设计寻路算法找出从A到达B的最短路径\n\n反问\n\n  * 技术栈和杭州那边不太一样吗： \n    * 仍然是Unity+ToLua，不过其他一些功能、业务框架不太一样\n    * 两边完全独立，技术上也不存在任何继承关系\n  * 和杭州那边一样有技术沉淀的文档吗：早期有尝试过但没坚持下来，没有养成习惯 \n    * 为什么不效法着改变呢：人力不够，寥寥几个人要同时维护好几个项目\n  * 主要是做运营运维，没什么在研的吗：短时间内不会开新项目\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566329714248253440?sourceSSR=users",
        "title": "理想算法测试开发工程师校招 2023/12/18",
        "content": "一、自我介绍\n\n二、实习经历问题+其他的七七八八\n\n1.在滴滴的测试流程是什么\n\n2.了不了解UI自动化\n\n3.期望薪资，手头offer\n\n4.更期望偏开发还是偏测试\n\n三、反问\n\n整个测试流程是什么\n\n用什么框架技术栈（java、python）\n\n业务是什么（车载app和手机端app测试，网络通信开发相关）\n\n四、无代码题\n\n上午11点面试，下午通知一面过，收到测评\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566306341396951040?sourceSSR=users",
        "title": "字节飞书 后端开发 日常实习 25届 面经",
        "content": "### 简历信息\n\nps：因为几乎只关注基础和代码实现，只给出技能特长。\n\n![](https://uploadfiles.nowcoder.com/images/20231218/468686332_1702889802886/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n### TimeLine\n\n\\--12/11投简历--12/12约面试--12/18一面--已终止--\n\n### 一面 1h\n\n![](https://uploadfiles.nowcoder.com/images/20231218/468686332_1702889670242/15A7ED7F9A4102987A4679A38B8D7AD0)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566302908245893120?sourceSSR=users",
        "title": "某厂外包-大数据开发",
        "content": "1.自我介绍\n\n2.描述一张表的设计流程\n\n3.针对简历提问，问的不算难\n\n4.kafka的用法及途径\n\n5.redis的几种类型（我有写，但是忘了），\n\n6.有没有bi可视化经验。\n\n\\-----------------\n\n是的，没有看错，简历上写的就会可能提问，并不会针对你。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566292182819184640?sourceSSR=users",
        "title": "百度 前端实习 一面 已offer",
        "content": "时长：35 分钟\n\n更新：晚上8点二面\n\n问题：\n\n  * 能实习多久？什么时候能到岗？\n  * 现在是在北京吗？\n  * websocket 心跳机制实现的过程\n  * 为什么一定要心跳机制？判断有无断线，在发消息时候看反馈不是也可以吗？\n  * CSS 场景题：有一个容器，其中首行中有a、a、一段文本、c、c五个节点，a和c是固定宽高的div。要求实现这一行中，随着文本宽度增加，当五个节点宽度和=容器的宽度时，文本节点宽度不变，溢出部分省略号。\n  * forEach和Map，各自功能和区别，return的话会退出来吗？\n  * 如果我要在数组中找一个元素，找到后返回并停止查找，你有哪些方法？都说一说\n  * vue3生命周期有哪些？\n  * 说一说computed、watch，用法、区别。两个都一定要return吗？如果我想进行异步操作，两个都可以吗？\n  * 你项目中写的首屏加载在处理之前最慢有1分钟，这是为什么呢？说说原因。\n  * 初次打包8MB，按照现在的网速，也不至于那么慢呀，为什么呢？\n  * 了解过跨域吗？原因和应对策略说一下。\n  * 浏览器发生跨域是出现在一次完整请求过程的哪个阶段？\n\n反问：\n\n  * 对我的建议\n  * 部门技术栈\n  * 对于深入学习前端有什么建议？\n  * 如何提高竞争力\n  * 部门技术栈\n\n  \n\n面试官挺好的，不会的会一步步引导，自己收获挺大。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566251932814188544?sourceSSR=users",
        "title": "字节抖音直播前端",
        "content": "1面:  \n分片上传原理（计算文件标识如何优化，只取头尾和中间的分片内容计算hash），整个过程中还有什么可优化的点（http2\ncdn）说一下http2有什么特点，服务器主动推送可以用在什么场景（聊天室，股票，公众号消息推送？），hpack算法说一下。  \nservice worker和webworker说一下，有没有了解过pwm，还有没有了解什么最新的前端技术（说了一下rust）  \nvite和webpack区别，vite具体做了什么事情，优缺点  \n前端攻击都了解哪些  \nflexbasis表示什么含义  \n数据类型如何检测，instanceof的原理  \n深拷贝实现，为什么用weakmap  \nts好处，type和interface区别，泛型是什么  \nvue和react区别，为什么react不做双向数据流  \nhook优点  \n全局状态管理如何实现，如果这些状态特别多，如何优化  \n算法:01背包  \n实现一个加强版[promise.all](https://gw-c.nowcoder.com/api/sparta/jump/link?link=http%3A%2F%2Fpromise.all)，要求可以限制并发数量，按顺序发送和返回结果  \n2面:  \n文件上传这个场景除了分片还可以怎么优化（http2,cdn），面试官问用websocket可以吗  \nssr原理，缺点，服务端负担大，假如服务端可以满足负载要求还有什么缺点，面试官说维护上的成本？没听懂  \n移动端适配原理，libflexible是根据宽度去计算，如果要兼容一个折叠屏手机，宽比高长，该怎么处理，图片在rem适配时会失真该怎么处理  \n假如你要开发一个后台网站，但你只有两三个人且不会前端，你该怎么做技术选型  \nhtml里有两个script标签，没有async defer，他们是下载和解析是并行还是串行  \n长耗时任务如何优化，webworker或分片，如何分片，generator。为什么webworker不常用，缺点是什么，为什么webworker不能处理dom，有多个webworker在同时计算，我不知道他们什么时候结束计算，怎么处理他们的结果  \n假如你是黑客，如何攻击，假如你是防御方，用户反馈他刚看看了一眼余额过了一会儿钱包就空了，你怎么防御。（验证码，支付密码，追踪ip或者设备，让用户设置设备和ip白名单）  \n算法:实现一个函数，每周从一群人抽两个人来汇报，这周抽到的人下周抽到的概率要下降，但不能降为0  \n3面:  \n项目难点:介绍了虚拟列表  \n假如要在虚拟列表中加入一个搜索的操作，如何实现，假如要在每个列表项加入一个选中的操作如何实现，虚拟列表快速滚动时的的闪烁如何解决  \n算法:一堆小孩想要类型的糖果，糖果各个类型有几个，得到有多少小孩能被满足  \ncomposition api好处，为什么它可以把相同逻辑的东西放在一起  \n实现一个倒计时功能的hook  \njson schema配置表单组件的好处坏处，如何实现联动效果，假如c表单要收集ab表单的信息并提交该如何实现，性能表现，样式表现如何\n\n3面完，hr表示这个组只有实习转正的offer，另一个组有校招hc，让我二选一  \n转组三面:  \n实习工作内容介绍  \n假如b表单依赖于a表单变化，怎么实现  \nvue响应式原理，defineproperty缺点，那为什么vue2不用proxy  \n说一下对cicd的理解  \nwebpack用过什么插件和loader，loader作用原理，有没有见过真正的语法树是什么样子，plugin原理，如何实现，有没有尝试从webpack转成rspack（嘴贱前面提到了rspack）  \nts理解  \n算法:螺旋数组\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566236493950246912?sourceSSR=users",
        "title": "游戏行业运营岗位高频面试题",
        "content": "  1. 以你曾经玩过或了解的游戏为例，你作为运营策划，以今年“七夕节”为噱头，针对已流失玩家设计一个运营活动（包括但不限于线上、线下的活动），简单说一下活动思路。\n  2. 请以一款你知道的游戏产品为例，如果重新为其制定上线计划，你认为需要筹备哪些事情？（假定该产品还处在未上线阶段）。\n  3. 谈谈你对游戏运营这个工作的理解，以及你最喜欢其中的哪些工作。\n  4. 请你阐述游戏社区的定义。从营销，运营，产品角度分析游戏社区的必要性。如何系统性地建设和运营一个游戏社区。\n  5. 评价一下你对米游社的看法？它和其他的平台有什么不同\n  6. 公司新引进一款游戏，上线当天，出现了严重的bug，导致部分用户出现回档、充值不到账等问题，作为运营人员你会怎么做？\n  7. 请你在端游、页游、手游、Steam游戏、Switch游戏中至少选择一种，讲一讲你对它发行或者发售的宣传方式的理解。\n  8. 你认为运营好一个游戏最重要的几点是什么？并阐述原因。\n  9. 选取一款你熟悉的游戏，请设计一下它的周年庆活动方案，请至少选择一个方向（游戏内、论坛里或市场上）。\n  10. 在以下给定的5款热门手游中选一款游戏，可以从运营、用户体验、产品玩法等角度，说说你认为该游戏的成功因素和不足：王者荣耀、恋与制作人、第五人格、旅行青蛙、INSIDE、欢乐斗地主（腾讯）。若上述游戏你都没有体验过，请例举一款你所熟悉的公司和游戏产品，说出认为该游戏的成功因素和不足，腾讯、网易产品除外。\n  11. 给你自己最喜欢的游戏设计一个社区活动。（请说明是哪个游戏，做这个活动的目的，什么样的活动以及你认为做这个活动会带来的好处）\n  12. 一个付费超过10万人民币的玩家已经7天没有登录游戏了，这时你会做些什么呢？\n  13. 游戏在上线之后，都会面临流失与召回工作，请你帮忙出一份如何召回老玩家的方案。\n  14. 阐述一下你对玩家运营的理解。\n  15. 你对明日方舟的官方运营行为怎么看。\n\n秋招还没有拿到offer的同学千万不要灰心，把握这个寒假一起冲刺上岸！题目来源于往届学姐帮助上岸的同学的面试经验分享，仅供大家参考~\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566221462357422080?sourceSSR=users",
        "title": "数字马力 秋招 后端开发 一二面（已拒offer）",
        "content": "> base长沙。主要是做tob的业务。\n\n## 一面 10.13（30min）\n\n  * 自我介绍（面试官让重点介绍获得的奖项、大学计算机课程）\n  * 课程聊到了计算机网络，问了计网\n  * TCP IP模型 分几层\n  * TCP UDP在哪层\n  * TCP UDP区别\n  * TCP UDP使用场景\n  * TCP怎么保证可靠\n  * TCP三次握手、四次挥手\n  * 面向对象三大特性\n  * 什么是多态\n  * 抽象类和接口的区别\n  * jdk1.8，接口是否可以实现default的方法 \n    * 这块只记得可以，然后面试官讲了一下为什么可以，主要是为了在后续的开发中如果扩展接口的功能，同时还可以兼容以前的实现类。\n  * error、exception区别\n  * List常用的实现\n  * ArrayList、LinkedList区别，使用场景\n  * HashMap底层原理 \n    * 拉链法\n    * 插入元素a、b，产生了哈希冲突，是怎么处理的（线程安全的情况）\n    * 什么时候树化\n    * 红黑树是什么\n    * 红黑树是怎么调整平衡的\n  * MySQL存储引擎，存储结构\n  * InnoDB、MyISAM区别\n  * B+树为什么可以提高查询效率\n  * 怎么避免回表\n  * 联合索引 (a, b, c)，where a = 1, c = 1, b = 1，能用到联合索引吗\n  * 使用了范围查找还能用到索引吗\n  * IOC、AOP\n  * JDK动态代理、CGLib动态代理区别，什么时候用\n  * Spring事务失效：a方法加了@Transactional，b方法没加，b内部调用a，会有事务产生吗\n  * Bean的生命周期\n  * @Autowired、@Resource区别\n  * 无手撕\n  * 反问\n\n## 二面 10.17（40min）\n\n  * 自我介绍\n  * 项目背景 \n    * 怎么分工的，保证高效协同\n    * 具体讲一下功能划分的边界、合作\n    * 什么情况下会出现代码冲突、怎么解决的\n  * 进程线程区别\n  * 线程几种状态\n  * JVM内存结构\n  * 堆栈区别，什么存在堆中，什么存在栈中\n  * JVM类加载、卸载步骤\n  * 垃圾回收机制\n  * 为什么会产生full GC\n  * Redis和MySQL区别，什么场景下用Redis\n  * Redis数据类型，常用方法\n  * Redis分布式锁\n  * Redis过期策略、淘汰机制\n  * 异常可以分为几类\n  * 怎么自定义异常\n  * try-catch-finally，如果在catch块中return了，finally块中的代码还会执行吗\n  * 如果日常学习遇到了一些新技术，你会怎么样去学习，制定学习计划\n  * 怎么评估你的学习成果\n  * 描述一次学习过程中的困难，怎么样解决\n  * 如果保持对技术的热情、学习的动力\n  * 反问\n\n> 10.23oc。\n\n> 11.29谈薪，已拒。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566006129646395392?sourceSSR=users",
        "title": "蔚来前端（kpi面）",
        "content": "投递渠道：牛客内推\n\n面试时间：12/15\n\n面了有三十分钟，面试官说一个问题就停好一会，一直在问项目架构啥的。\n\n  1. 自我介绍\n  2. 实习经历\n  3. 为什么要学前端\n  4. 项目经历\n  5. 登录鉴权如何做的\n  6. vue组件通信\n  7. vue监听器有哪些api（watch、computed）\n  8. 插槽有哪些\n  9. 怎么注册一个全局组件\n  10. 怎么学习前端\n  11. vue路由\n  12. 反问：对实习生的要求？（面试官说他也不知道，他只负责面试\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/565986064146391040?sourceSSR=users",
        "title": "货拉拉数据前端实习生实习一面凉经",
        "content": "### 货拉拉（一面挂）\n\n一面（30min）\n\n**经验就是要学透，不然被拷打就只因**\n\n自我介绍\n\nvue2和vue3的区别\n\nvue2响应式什么情况不能生效？\n\nvue3使用什么实现响应式？\n\n针对一个对象，添加一个不存在的属性无法发生响应式监听，如何解决？\n\n为什么vue3改用proxy就解决了？\n\n描述一下treeshaking是什么行为？\n\n了解过其他的模块化方案吗？\n\ncjs和esm的区别？\n\ncjs支持treeshaking吗？\n\n为什么不支持treeshaking？\n\n聊聊项目：\n\nform表单如何做form-item的validate？（不是我做的，都笑了）\n\n多级组件通讯问题？说说有什么通讯方式，组件库的组件通讯的你遇到了什么问题？（和大型组件库思路一样，居然）\n\n为什么引入gulp进行样式打包？\n\n对于后端返回的数据，用ts合并和排除的一些操作，讲一下？\n\n部署项目遇到了什么问题？\n\n闲聊，反问\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/565969138200358912?sourceSSR=users",
        "title": "华为12月12日一二三面面经",
        "content": "第一次写面经，给自己毕业积点德吧[笑cry]\n\n先说说自己的bg，双非本，华五硕，本硕均非科班，且本科环境跨考到硕士生科，buff点满，老板不让去实习，因此实习经验0，文章页还在投，重开型选手。好在研究生课题做的是算法和深度学习相关的项目，和生信半搭不搭的。简历上就拿着科研项目硬上，在九月份之前还一心想着读博，后来因为文章的问题，看透了这个b学术界，十一月的时候就从意向博士课题组提桶跑路，全力准备冬招，leetcode算法也就刷了一百道，约等于没准备。\n\n### 面试总结\n\n三轮面试虽然强度很高，而且中场时间很短，但是体验感还是非常好的，12号下午三点开始线上第一场面试，4点准时结束，然后十分钟后开始第二场，同样是一个小时结束，过了十分钟就开始主管面试，三位面试官都很尊重人，而且也没有很为难别人，都是抓着简历上面的内容在问，也没有出现压力面试的情况。前两轮面试结束后，很快就出结果了，主管面试结束后是第二天晚上出的结果，不说了，开泡。\n\n### 一面\n\n技术一面一开始，面试官就介绍了这次面试内容，说我们这次面试分两个部分，前面一部分会就简历上问一些问题，后面做一道简单练习题就好。u1s1，确实没太为难人。面试开始先让我做一个自我介绍，然后问了一下笔试题的思路。我在做自我介绍的时候，没从我是谁，叫啥啥啥啥的开始，我就说了一下自己的一些个人情况，包括专业啊，跨考之类的，以及为什么选择转到计算机这一块，最后说了一下自己的科研和项目情况，把问题引导到项目上来，不为别的，我怕他死磕八股[牛泪]八股我是真不会，也没背。\n\n后面也很如愿，面试官没问八股，先问我为什么跨考，我说我本科专业不喜欢，换一个试试。然后问我为什么选择考我现在这个学校，我说因为喜欢这个城市，就考了这个学校。然后他又问，你当时这么选的时候，有考虑过风险吗。我说反正当时年轻，不试一试怎么知道呢。然后开始问，你之前的专业不是计算机，那你现在的计算机知识是怎么来的？我说全靠自学。后面就一些巴拉巴拉的，就开始深挖项目了。其实也不算深挖，就围绕着项目展开。我科研项目是和计算机视觉相关的，就直接把项目最后可视化效果共享给面试官看了，他就问了一些技术上的难点，就是我认为的技术难点，以及我是怎么解决的。然后又问了这个项目是如何完成的，是合作还是独立完成。最后又问了，给你一个从未接触过的问题，你会怎么去着手解决，思路是什么样的？问完这些差不多过去了半个小时，面试官看是时间差不多了，就挑了一道算法题手撕。\n\n他们的题库是真的很多，难度不一，就在一个ppt里，我当时看他共享的屏幕就看到了，甚至还有hard的。可能因为我跨考了，算法也就那样，面试官给就我选了一道人性化的题，是leetcode上的1060题，**有序数组中的缺失元素**\n，**给出一个单调递增的有序数组****`A`****，和一个正整数K，数组中的每个数字都是****独一无二的****，找出从数组最左边开始的第****`K`****个缺失数字**\n。面试管说这道题目本身不算难，但是要求尽量使用复杂度较低的算法解决。我当时比较紧张，就想着直接查找结束了，虽然做出来了，但是面试官说可以用下标来直接计算，最后还好给我过了。\n\n### 二面\n\n二面一开始也和一面差不多，上来就介绍这次面试内容就是问简历+手撕算法。刚开始就简单问了一下项目，然后看我简历上写我主要用Python，还写了MySQL和C++，就问了Python的一些基础特性，包括像字典排序，可变和不可变数据类型，以及*args和**kwargs的区别之类的。然后还问到了aicd特性，我本身数据库就是个二把手，数据库这一块直接拉跨，就记起来了两个，说很久没用了。让我写联合查询的sql语句，我也就说出来了一些大概思路。可能面试官看我数据库确实用的不多，就没再问了，转头问c++。问我平时用c++干嘛，我说主要用来为Python写库，项目中有涉及到频繁的数值计算的地方我会用c++去写。在后面就是问一些学习方法和解决问题的思路了，没再问具体的技术问题。时间差不多到了，就给了一道手撕题，leetcode上的**18题，四数之和：****给你一个由****`n`****个整数组成的数组****`nums`****，和一个目标值****`target`****。请你找出并返回满足下述全部条件且****不重复****的四元组****`[nums[a],\nnums[b], nums[c], nums[d]]`****（若两个四元组元素一一对应，则认为两个四元组重复）。**\n\n这道题我磕磕绊绊写出来了，当时就写过三数之和，硬着头皮用O(n3)的时间复杂度暴力解出来的，面试官让我介绍思路，看了我的三重for循环就明白了，说我这是暴力思路。可能对飞科包的要求比较低吧，时间到了就结束了，也让我过了。\n\n### 三面\n\n主管面基本上就是一些拉家常的话，为什么选择这个地方，以及一些意向base地之类的，后面同样也问了遇到问题的解决思路，我就大概说了一下，先自己解决，自己解决不了找团队。巴拉一堆之后就说我有没有什么想问的，我就问了一下他们的培养体系之类的问题，后面就差不多四十分钟结束战斗了。\n\n总结起来看，这三次面试除了抓项目之外，好像很看重面试者解决问题的思路和能力，他们不提出具体问题，就想看看遇到问题的时候，面试者有什么样的选择和处理方式。也不是道是我足够幸运还是其他原因，八股好像确实不是他们考察的重点，可能是真的没什么好问的才问起八股吧。这三轮面试一天之内，花了三个小时就结束了，第一次写面经，希望对大家有所帮助，也希望能给自己攒攒人品吧[笑cry]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/566002317514809344?sourceSSR=users",
        "title": "Moka前端实习（一面）",
        "content": "投递渠道：BOSS\n\n面试时间：12/14\n\n面完半小时左右约二面\n\n  1. 自我介绍\n  2. Nestjs为什么用doctor部署？\n  3. Node项目如何保证活的？ （报错不停止运行） X\n  4. 后端负载怎么样？（项目还很小，还没考虑）\n  5. 怎么部署的？ （GitHub workflow）\n  6. Nextjs和express的区别？\n  7. RN怎么开发的（expo\n  8. RN项目中遇到什么困难？\n  9. 介绍一下EventLoop\n  10. Let var const的区别\n  11. 箭头函数和普通函数的区别\n  12. call、apply、bind\n  13. 盒模型，用那个属性\n  14. 重绘和重排的区别\n  15. vue2和vue3响应式的区别\n  16. vue样式隔离、scope的原理（通过属性选择器）\n  17. key的作用\n  18. nextTick的作用\n  19. vite为什么要比webpack快\n  20. 有配置过webpack吗（说了些简单的plugin和loader）\n  21. 怎么控制http缓存？\n  22. http2.0有什么变化 X\n  23. 手写：判断区间是否有重复\n  24. 手写：将重复的区间合并\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/565979446407081984?sourceSSR=users",
        "title": "得物、经纬恒润、万物心选实习面经",
        "content": "### 万物心选（一面挂） 60min\n\n一面\n\n  1. 聊项目\n  2. 你项目中的技术难点，和业务难点分别是什么？ (从来没思考过业务难点) 创建项目后分配金额分配金额 共用一套逻辑还要从接口方面来讲前面还要提取admin\n\n`css(手写)`\n\n  1. 你有很多div 尽可能多的方法实现他们成为一排\n  2. 接上题，如何让大小不一的div如何让div中心对齐，使用inlineblock有什么要注意的吗？\n  3. 实现一个正方形 离浏览器左右边距为50px\n  4. 一个无限长的列表，实现前两个和后两个元素设置为红色\n\n`js（手写）`\n\n  1. 防抖\n  2. 解析url\n  3. 睡眠函数\n  4. 实现事件类event()\n\n`八股`\n\n  1. http和https的区别优缺点\n  2. 你提到了ca证书ca证书是啥？\n\n`反问`\n\n### 得物 （oc） 20min\n\nvite和webpack的区别·\n\nvue的key有什么用 用什么来做\n\n问项目\n\n简历上的所有点：\n\n### 经纬恒润 （oc） 40min\n\n自我介绍 （讲的好僵硬）\n\n为什么喜欢前端 （很生硬）\n\n你平时如何学习前端\n\n介绍一下你的项目\n\n你做了哪些封装axios， 我答了拦截器， 重新发送请求做一下，没答对别的。可以补一下\n\nvue的路由模式通常会选择哪种？有什么区别？\n\n同源策略是什么，如何解决跨域问题\n\n在请求的时候有AB两个接口，先请求A接口再请求，B接口的返回数据是A接口的，如何保证B接口可以使用到A接口的数据。（promise， 还有async语法糖）\n\n一个页面上中下三个部分（如何实现上下固定，中间自适应撑满） （多想的方法）\n\n平时写页面有拆分组件的习惯吗？vue组件通信？\n\n回流和重绘\n\n数组去重\n\n对构建工具有了解吗？ 做过哪些配置吗？( 按需加载，修改路径)\n\n按需加载， 改变nginx转发的路径\n\n  * 加餐\n\n打包优化\n\nvue的原理\n\n性能优化\n\njscss兼容， 低版本高版本，不同版本对js和css兼容\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/565923421977092096?sourceSSR=users",
        "title": "面试告一段落,狠狠沉淀一下",
        "content": "以下问题来自我在面试或者笔试中被问到的问题,其他牛友发的面经,我自己突发奇想等等情况,\n\n基本上需要一定的钻研或者是我自身觉得我的理解不够深刻的问题(应该是这样的哈,如果很简单的问题,我直接gpt就得到答案了,不会被我记录下来)\n\n希望自己能抱着学习的态度好好的理解一下,不想再硬背了.\n\n这里也是我觉得一个**不错的学习方法** ,碰到问题如果当时解决不了先收集一下,然后改天再来看看\n\n改天是哪一天呢?其实可以**给自己定个计划,每天解决一个问题,出现新的问题放队列里排队** 就好了\n\n如果这个问题当天没有解决,那就把问题放到队尾接着排队,这样可以避免精神内耗,然后直接开摆的结局\n\n长期的靠自制力学习时,经常会碰到这种情况,一个问题狠狠钻研之后依然没搞懂,然后继续硬学,精力耗尽,开始精神内耗,认为我还没搞懂不能停,然后因为各种各样的原因,还是停下来了.等到第二天的时候,面对这个问题,一点都不想动,又开始精神内耗,这种情况下继续硬学,肯定还是搞不懂,最终整个学习计划终结\n\n哈哈哈,有没有世另我啊[瞅你]\n\n这种问题说实话从高中开始就困扰我了,一直不断的开始计划,精神内耗,终止计划,修改计划,又开始计划....\n\n但确实在不断折腾中我还是有所进步吧,计划也会根据自己的情况不断的调整,**主打一个能推动能进行下去的计划就是一个好计划**\n,所以如果有同样的困扰,可以考虑慢慢的调整,而不是没有计划吧\n\n我觉得大部分人需要去学习的内容真的很难让自己喜爱或者说得心应手,这样的话就没有什么自驱力,全靠意志力硬挺.**有个计划看着它慢慢推进,真的还是会有收获感的.**\n\n最后是问题列表:\n\n  1. vue3为什么用component API\n  2. 递归改成尾递归\n  3. 锁是怎么产生的。\n  4. mongodb和mysql的区别\n  5. websocket通信原理\n  6. 数据埋点\n  7. 默认插槽和 this.$children 的区别\n  8. vue2和3的diff算法区别,key的作用是什么，假如key相同会做什么操作\n  9. 觉得前端未来有什么方向有潜力\n  10. Vue 的双向绑定原理\n  11. sse和websocket区别\n  12. ajax的发送和接收过程\n  13. 虚拟列表的实现原理\n  14. rem 怎么实现多端字体大小适配(面试官最后说可以用淘宝的一个库)\n  15. css动画 区别\n  16. react fiber架构\n  17. pnpm优势，如何减少磁盘空间占用，符号链接在里面发生什么作用\n  18. webpack和vite的区别,vite开发环境首屏速度如何加快（面试官说和http2差不多？并发？），vite构建有哪些阶段，cjs的依赖如何处理。\n  19. loader的处理顺序\n  20. complier和complation区别，\n  21. 知道splitchunk的有哪些规则吗\n  22. https，4次握手过程，3个密钥前2个是干嘛的，后一个是干啥（面试官说前2个握手，后一个加密）。\n  23. http2和1.1区别，http2这些都为了什么,为什么可以多路复用\n  24. nodejs和其他语言相比有什么优势（高并发适合io密集，不适合cpu密集）\n  25. 你要怎么封装虚拟列表，封装成一个通用组件或者hooks\n  26. 怎么获取海内外用户的打开页面的时间，埋点，怎么发送埋点数据，sendBeacon\n  27. token登录怎么实现的\n  28. Vue路由中我想用前进和后退怎么实现\n  29. Vue为什么要有虚拟DOM？好处和工作流程？\n  30. Vue从DOM树建立完成到页面上呈现做了哪些工作？\n  31. Vue的渲染机制能详细说一下吗？\n  32. 浏览器的渲染线程是怎么工作的？\n  33. 浏览器渲染线程和js线程冲突吗？是一起同时工作的？\n  34. 代码题：异步实现加法。\n  35. DOM原生操作\n  36. 哈夫曼树,带权路径长度\n  37. 瀑布流布局怎么实现\n  38. 哈弗曼编码的贪心算法\n  39. 动画相关的css\n  40. canvs相关方法\n  41. IPV6的双冒号表示法\n  42. pop3协议,SMTP邮件服务器,端到端连接协议,ICMP\n  43. 桶排序\n  44. 二级封锁\n  45. Linux模拟发送http请求,查看文件内容\n  46. 音视频相关API\n  47. IPV6特有的地址类型\n  48. cookie相关内容总结,secure,个数限制,是否能被浏览器清除\n  49. 常用loader了解,file,style,css,url\n  50. 路由的作用\n  51. 说一下对Vue的理解\n  52. webpack性能优化\n  53. vue和原生js相比优缺点\n  54. ts和js区别\n  55. 前端职业规划\n  56. csrf,xss的防范\n  57. 外边距重叠的不同情况,负数,一正一负\n  58. css画三角形\n  59. 判断两个数组是否相等,考虑数组,对象,NaN等情况\n  60. 节流立即执行版),注意第一次执行时不能开启定时器,导致默认的第二次执行\n  61. vue3 不同API是浅层监听还是深层监听\n  62. position 设置为0, margin设置auto,为什么能实现垂直水平居中\n  63. 若将网络21.3.0.0/16划分为128个规模相同的子网，则每个子网可分配的最大可用1P地址个数是()\n  64. 作为前端参加需求评审时应该关注哪些内容\n  65. vue2数组\n  66. 图片懒加载完善\n  67. 拖拽效果实现\n  68. next服务端渲染和以前服务端渲染之间有没有区别\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/565998838427705344?sourceSSR=users",
        "title": "EMQ前端实习（排序挂）",
        "content": "投递渠道：BOSS\n\n面试时间：12/12\n\n# 一面\n\n说说this是什么？\n\n常见的es6有哪些？\n\n说说cookie，localstorage，sessionstorage\n\n了解过cookie的一些字段吗？（expries max-age）\n\n如何理解spa的？（只会请求一次html\n\n如何实现路由的（两种模式）\n\nspa的缺点（seo，白屏问题）\n\nvue中的key的作用？（复用之前的vdom）\n\nvue响应式丢失的问题（vue2 初始化时才会进行依赖收集）\n\n如何解决这个问题（set方法）\n\n如果说修改数据但是页面上没有改变，你想要强制的刷新（$forceUpdate或者上面提到的修改key值）\n\n知道什么是按需加载吗？说说你知道的按需加载（需要的时候才加载，图片懒加载，路由懒加载，虚拟列表）\n\n虚拟列表是怎么优化的呢？（根据用户滚动的区域，只用加载）\n\n简单说说url从输入的过程？\n\nDNS解析的顺序\n\n强缓存和协商缓存\n\ncss渲染问题，js为什么放在最下面（引出async，defer的区别，执行时机不一样）\n\ncss放在最下面有什么影响？（dom树需要和cssom树一起结合起来，然后会造成有些样式抖动）\n\n使用过了解过原理吗？\n\nwebpack和vite的区别？\n\nbabel有什么用？了解过原理吗？\n\n你用过nuxt的ssr吗？（没有）\n\n那你知道nuxt的服务端渲染的原理吗？（只知道服务端去渲染html，然后返回给前端）\n\n讲一下npm，yarn，pnpm的区别（主要说了下载速度，并行下载，软硬链接）\n\nJWT的组成部分（面试官：你知道Jwt吗？我：知道，面试官：那你说说JWT的组成部分。我：头部中间部分和尾部，哈哈哈忘求了）（下去再去了解一下中间加密流程）\n\n# 二面\n\nvue和react的区别\n\nreact响应式原理（不会）\n\n问了些简单的八股就开始写题一到非常简单的语法题，结果我做了有15分钟（\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/565878528734961664?sourceSSR=users",
        "title": "阿里 P7 三面，kafka Borker 日志持久化没答上",
        "content": "> 👏作者简介：大家好，我是爱敲代码的小黄，阿里巴巴淘天Java开发工程师\n>\n> 📕系列专栏：Spring源码、Netty源码、Kafka源码、JUC源码、dubbo源码系列\n>\n> 🔥如果感觉博主的文章还不错的话，请👍三连支持👍一下博主哦\n>\n>\n> 🍂博主正在努力完成2023计划中：[以梦为马，扬帆起航，2023追梦人](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjuejin.cn%2Fpost%2F7184081730767159356)\n\n# 阿里 P7 三面凉凉，kafka Borker 日志持久化没答上来\n\n# 一、引言\n\n前段时间有个朋友，去面了阿里集团的P7岗位，很遗憾的是三面没有过\n\n其中有一个 `kafka``Borker` 日志如何持久化的问题没有答上来\n\n今天正好写一篇源码文章给朋友复盘一下\n\n**虽然现在是互联网寒冬，但乾坤未定，你我皆是黑马！**\n\n废话不多说，发车！\n\n# 二、日志原理介绍\n\n在讲 `Kafka` 日志源码之前，我们要先对 `Kafka` 日志有一个大体的认识\n\n这也是阅读源码的关键，一步一步来\n\n前面我们聊到了 `Kafka` 的生产端的整体架构\n\n可以看到，我们每一个 `Topic` 都可以分为多个 `Partition` ，而每一个 `Partition` 对应着一个 `Log`\n\n但这里会存在两个问题，如果我们的数据过大\n\n  * 一个 `Log` 能装下吗？\n  * 就算能装下，插入/查询速度怎么保证？\n\n所以，`Kafka` 在这里引入了日志分段（`LogSegment` ）的概念，将一个 `Log` 切割成多个 `LogSegment` 进行存储\n\n实际上，这里的 `Log` 和 `LogSegment` 并不是纯粹的物理意义上的概念\n\n  * `Log` 对应的文件夹\n  * `LogSegment` 对应磁盘上的一个日志文件和两个索引文件 日志文件：以 .log 为文件后缀两个索引文件： 偏移量索引文件（以 .index为文件后缀）时间戳索引文件（以.timeindex为文件后缀）\n\n这里有个重点要记一下：**每个****`LogSegment`****都有一个基准偏移量****`baseOffset`****，用来表示当前****`LogSegment`****第一条消息的****`offset`**\n\n日志和索引文件命名都是按照基准偏移量进行命名，所以日志整体架构如下：\n\n这里我们简单介绍下这个日志是怎么搜索的，后面会深入源码细聊\n\n# 二、日志源码\n\n我们回顾一下上篇文章的整体流程图：\n\n我们可以看到，消息的处理是通过 `KafkaApis` 来进行的，日志持久化通过 `case ApiKeys.PRODUCE =>\nhandleProduceRequest(request)`\n\n本篇我们也围绕这个方法展开\n\n## 1、授权校验\n\n    \n    \n    def handleProduceRequest(request: RequestChannel.Request) {\n    \n      // authorizedRequestInfo：存储通过授权验证的主题分区和对应的内存记录。\n      val authorizedRequestInfo = mutable.Map[TopicPartition, MemoryRecords]()\n      for ((topicPartition, memoryRecords) <- produceRequest.partitionRecordsOrFail.asScala) {\n          if (!authorize(request.session, Write, Resource(Topic, topicPartition.topic, LITERAL)))\n        \t\t// 未授权的\n            unauthorizedTopicResponses += topicPartition -> new PartitionResponse(Errors.TOPIC_AUTHORIZATION_FAILED)\n          else if (!metadataCache.contains(topicPartition))\n            nonExistingTopicResponses += topicPartition -> new PartitionResponse(Errors.UNKNOWN_TOPIC_OR_PARTITION)\n          else\n            try {\n              // 授权的\n              ProduceRequest.validateRecords(request.header.apiVersion(), memoryRecords)\n              authorizedRequestInfo += (topicPartition -> memoryRecords)\n            } catch {\n              case e: ApiException =>\n                invalidRequestResponses += topicPartition -> new PartitionResponse(Errors.forException(e))\n            }\n        }\n    }\n    \n    \n\n## 2、消息添加\n\n  * 【重点】timeout：超时时间\n  * 【重点】requiredAcks：指定了在记录追加到副本后需要多少个副本进行确认，才认为写操作成功 0: 不需要任何副本的确认1: 只需要主副本确认-1 或 all: 需要所有副本的确认\n  * `internalTopicsAllowed`：是否允许将记录追加到内部主题\n  * `isFromClient`：请求是否来自客户端\n  * 【重点】`entriesPerPartition`：包含了通过授权验证的主题分区和对应的内存记录\n  * `responseCallback`：回调函数，在记录追加完成后，会调用该回调函数发送响应给客户端。\n  * `recordConversionStatsCallback`：处理记录转换统计信息的逻辑\n\n    \n    \n    replicaManager.appendRecords(\n            timeout = produceRequest.timeout.toLong,\n            requiredAcks = produceRequest.acks,\n            internalTopicsAllowed = internalTopicsAllowed,\n            isFromClient = true,\n            entriesPerPartition = authorizedRequestInfo,\n            responseCallback = sendResponseCallback,\n            recordConversionStatsCallback = processingStatsCallback)\n    \n    \n\n我们主要关心这三个参数即可：`timeout`、`requiredAcks`、`entriesPerPartition`，其余的目前不太重要\n\n    \n    \n    def appendRecords(timeout: Long,\n                      requiredAcks: Short,\n                      internalTopicsAllowed: Boolean,\n                      isFromClient: Boolean,\n                      entriesPerPartition: Map[TopicPartition, MemoryRecords],\n                      responseCallback: Map[TopicPartition, PartitionResponse] => Unit,\n                      delayedProduceLock: Option[Lock] = None,\n                      recordConversionStatsCallback: Map[TopicPartition, RecordConversionStats] => Unit = _ => ()) {\n       // 校验当前的ACK\n       if (isValidRequiredAcks(requiredAcks)) {\n          // 记录起始时间\n          val sTime = time.milliseconds\n          // 追加本地日志\n          val localProduceResults = appendToLocalLog(internalTopicsAllowed = internalTopicsAllowed,\n            isFromClient = isFromClient, entriesPerPartition, requiredAcks)\n       }\n    }\n    \n    // 允许当前的ACK为1、0、-1\n    private def isValidRequiredAcks(requiredAcks: Short): Boolean = {\n      requiredAcks == -1 || requiredAcks == 1 || requiredAcks == 0\n    }\n    \n    \n\n这里的追加本地日志就是我们本篇的重点\n\n### 2.1 获取 Partition\n\n    \n    \n    private def appendToLocalLog(internalTopicsAllowed: Boolean,\n                                 isFromClient: Boolean,\n                                 entriesPerPartition: Map[TopicPartition, MemoryRecords],\n                                 requiredAcks: Short): Map[TopicPartition, LogAppendResult] = {\n      val partition = getPartitionOrException(topicPartition, expectLeader = true)\n    }\n    \n    // 根据给定的主题分区获取对应的分区对象\n    def getPartitionOrException(topicPartition: TopicPartition, expectLeader: Boolean): Partition = {\n       \t// 获取Partition并匹配\n        getPartition(topicPartition) match {\n          case Some(partition) =>\n            if (partition eq ReplicaManager.OfflinePartition)\n              throw new KafkaStorageException()\n            else\n              partition\n          case None if metadataCache.contains(topicPartition) =>\n            if (expectLeader) {\n              throw new NotLeaderForPartitionException()\n            } else {\n              throw new ReplicaNotAvailableException()\n            }\n        }\n      }\n    \n    \n\n### 2.2 向 Leader 追加日志\n\n    \n    \n    val info = partition.appendRecordsToLeader(records, isFromClient, requiredAcks);\n    \n    def appendRecordsToLeader(records: MemoryRecords, isFromClient: Boolean, requiredAcks: Int = 0): LogAppendInfo = {\n         val info = log.appendAsLeader(records, leaderEpoch = this.leaderEpoch, isFromClient,\n                interBrokerProtocolVersion)\n    }\n    \n    def appendAsLeader(records: MemoryRecords, leaderEpoch: Int, isFromClient: Boolean = true,\n                         interBrokerProtocolVersion: ApiVersion = ApiVersion.latestVersion): LogAppendInfo = {\n        append(records, isFromClient, interBrokerProtocolVersion, assignOffsets = true, leaderEpoch)\n      }\n    \n    \n\n#### 2.2.1 是否创建 segment\n\n这里就到了我们一开始图中的 `LogSegment`\n\n    \n    \n     val segment = maybeRoll(validRecords.sizeInBytes, appendInfo);\n    \n     private def maybeRoll(messagesSize: Int, appendInfo: LogAppendInfo): LogSegment = {\n       \t// 如果应该滚动，创建一个新的segment\n        // 反之，则返回当前的segment\n        if (segment.shouldRoll(RollParams(config, appendInfo, messagesSize, now))) {\n          appendInfo.firstOffset match {\n            case Some(firstOffset) => roll(Some(firstOffset))\n            case None => roll(Some(maxOffsetInMessages - Integer.MAX_VALUE))\n          }\n        } else {\n          segment\n        }\n     }\n    \n    \n\n一共有六个条件，触发这六个条件，就会重新创建一个 `segment`\n\n  * `timeWaitedForRoll(rollParams.now, rollParams.maxTimestampInMessages) > rollParams.maxSegmentMs - rollJitterMs` ：判断时间等待是不是超时\n  * `size > rollParams.maxSegmentBytes - rollParams.messagesSize`：当前 `segment` 是否有充足的空间存储当前信息\n  * `size > 0 && reachedRollMs` ：当前日志段的大小大于0，并且达到了进行日志分段的时间条件`reachedRollMs`\n  * `offsetIndex.isFull` ：偏移索引满了\n  * `timeIndex.isFull`：时间戳索引满了\n  * `!canConvertToRelativeOffset(rollParams.maxOffsetInMessages)`：无法进行相对偏移的转换操作\n\n    \n    \n    class LogSegment private[log] (val log: FileRecords,\n                                   val offsetIndex: OffsetIndex,\n                                   val timeIndex: TimeIndex,\n                                   val txnIndex: TransactionIndex,\n                                   val baseOffset: Long,\n                                   val indexIntervalBytes: Int,\n                                   val rollJitterMs: Long,\n                                   val time: Time) extends Logging {\n    \n      def shouldRoll(rollParams: RollParams): Boolean = {\n        val reachedRollMs = \n        timeWaitedForRoll(rollParams.now, rollParams.maxTimestampInMessages) >    rollParams.maxSegmentMs - rollJitterMs\n        size > rollParams.maxSegmentBytes - rollParams.messagesSize ||\n          (size > 0 && reachedRollMs) ||\n          offsetIndex.isFull || timeIndex.isFull || !canConvertToRelativeOffset(rollParams.maxOffsetInMessages)\n    }\n    \n    \n\n整体来看，六个条件也比较简单，我们继续往后看\n\n#### 2.2.2 创建 segment\n\n    \n    \n    appendInfo.firstOffset match {\n      // 存在第一个偏移量\n      case Some(firstOffset) => roll(Some(firstOffset))\n      // 不存在第一个偏移量\n      case None => roll(Some(maxOffsetInMessages - Integer.MAX_VALUE))\n    }\n    \n    \n\n##### 2.2.2.1 文件路径校验\n\n    \n    \n    def roll(expectedNextOffset: Option[Long] = None): LogSegment = {\n      \n      // 获取最新的offset\n      val newOffset = math.max(expectedNextOffset.getOrElse(0L), logEndOffset)\n      // 获取日志文件路径\n      val logFile = Log.logFile(dir, newOffset)\n      // 获取偏移量索引文件路径\n      val offsetIdxFile = offsetIndexFile(dir, newOffset)\n      // 获取时间戳索引文件路径\n      val timeIdxFile = timeIndexFile(dir, newOffset)\n      // 获取事务索引文件路径\n      val txnIdxFile = transactionIndexFile(dir, newOffset)\n      \n      // 对路径列表进行遍历，如果文件存在，则将其删除。\n      for (file <- List(logFile, offsetIdxFile, timeIdxFile, txnIdxFile) if file.exists) {\n        Files.delete(file.toPath)\n      }\n    }\n    \n    \n\n##### 2.2.2.2 segment 参数\n\n  * dir：日志段所在的目录\n  * baseOffset：日志段的基准偏移量\n  * config：日志的配置信息\n  * time：时间对象，用于处理时间相关的操作。\n  * fileAlreadyExists：指示日志文件是否已经存在\n  * initFileSize：初始文件大小\n  * preallocate：是否预分配文件空间\n  * fileSuffix：文件后缀\n\n    \n    \n    val segment = LogSegment.open(dir,\n      baseOffset = newOffset,\n      config,\n      time = time,\n      fileAlreadyExists = false,\n      initFileSize = initFileSize,\n      preallocate = config.preallocate)\n    \n    \n\n##### 2.2.2.3 生成 segment\n\n    \n    \n    new LogSegment(\n      // 生成日志文件\n      FileRecords.open(Log.logFile(dir, baseOffset, fileSuffix), fileAlreadyExists, initFileSize, preallocate),\n      // 生成偏移量索引\n      new OffsetIndex(Log.offsetIndexFile(dir, baseOffset, fileSuffix), baseOffset = baseOffset, maxIndexSize = maxIndexSize),\n      // 生成时间戳索引\n      new TimeIndex(Log.timeIndexFile(dir, baseOffset, fileSuffix), baseOffset = baseOffset, maxIndexSize = maxIndexSize),\n      // 生成事务索引\n      new TransactionIndex(baseOffset, Log.transactionIndexFile(dir, baseOffset, fileSuffix)),\n      // 基准偏移量\n      baseOffset,\n      indexIntervalBytes = config.indexInterval,\n      rollJitterMs = config.randomSegmentJitter,\n      time)\n    \n    \n\n这里有一个重点需要关注一下，那就是 `mmap` 的零拷贝\n\n`OffsetIndex` 和 `TimeIndex` 他们继承 `AbstractIndex` ，而 `AbstractIndex` 中使用 `mmp`\n作为 `buffer `\n\n    \n    \n    class OffsetIndex(_file: File, baseOffset: Long, maxIndexSize: Int = -1, writable: Boolean = true) extends AbstractIndex[Long, Int](_file, baseOffset, maxIndexSize, writable) \n        \n    \n    abstract class AbstractIndex{\n       protected var mmap: MappedByteBuffer = {};\n    }\n    \n    \n\n另外，这里先提一个知识点，后面会专门写一篇文章来分析一下\n\n**我们索引在查询的时候，采用的是二分查找的方式，这会导致 缺页中断，于是****`kafka`****将二分查找进行改进，将索引区分为 冷区 和\n热区，分别搜索，尽可能保证热区的页在****`Page Cache`****里面，从而避免缺页中断。**\n\n当我们的 `segment` 生成完之后，就返回了\n\n#### 2.2.3 向 segment 添加日志\n\n    \n    \n    segment.append(largestOffset = appendInfo.lastOffset,\n              largestTimestamp = appendInfo.maxTimestamp,\n              shallowOffsetOfMaxTimestamp = appendInfo.offsetOfMaxTimestamp,\n              records = validRecords)\n    \n    def append(largestOffset: Long,\n                 largestTimestamp: Long,\n                 shallowOffsetOfMaxTimestamp: Long,\n                 records: MemoryRecords): Unit = {\n      if (records.sizeInBytes > 0) {\n        \t// 添加日志\n          val appendedBytes = log.append(records)\n      }\n      // 当累加超过多少时，才会进行索引的写入\n      // indexIntervalBytes 默认 1048576 字节（1MB）\n      if (bytesSinceLastIndexEntry > indexIntervalBytes) {\n        // 添加偏移量索引\n        offsetIndex.append(largestOffset, physicalPosition)\n        // 添加时间戳索引\n        timeIndex.maybeAppend(maxTimestampSoFar, offsetOfMaxTimestamp)\n        // 归0\n        bytesSinceLastIndexEntry = 0\n      }\n      // 累加\n      bytesSinceLastIndexEntry += records.sizeInBytes\n    }\n    \n    // lastOffset + 1\n    updateLogEndOffset(appendInfo.lastOffset + 1)\n    \n    \n\n##### 2.2.3.1 稀疏索引\n\n`kafka` 中的偏移量索引和时间戳索引都属于稀疏索引\n\n何为稀疏索引？\n\n正常来说，我们会为每一个日志都创建一个索引，比如：\n\n    \n    \n    日志  索引\n    1     1\n    2     2\n    3     3\n    4     4\n    \n    \n\n但这种方式比较浪费，于是采用稀疏索引，如下：\n\n    \n    \n    日志  索引\n    1     1\n    2\t\t\t\n    3\t\t\t\n    4\t\t\t\n    5     2\n    6\n    7\n    8\n    \n    \n\n当我们根据偏移量索引查询 `1` 时，可以查询到日志为 `1` 的，然后往下遍历搜索想要的即可。\n\n##### 2.2.3.2 偏移量索引\n\n    \n    \n    offsetIndex.append(largestOffset, physicalPosition)\n     \n    def append(offset: Long, position: Int) {\n      inLock(lock) {\n        // 索引位置\n        mmap.putInt(relativeOffset(offset))\n        // 日志位置\n        mmap.putInt(position)\n        _entries += 1\n        _lastOffset = offset\n      }\n    }\n    \n    // 用当前offset减去基准offset\n    def relativeOffset(offset: Long): Int = {\n      val relativeOffset = offset - baseOffset\n    }\n    \n    \n\n##### 2.2.3.3 时间戳索引\n\n    \n    \n    timeIndex.maybeAppend(maxTimestampSoFar, offsetOfMaxTimestamp)\n    \n    def maybeAppend(timestamp: Long, offset: Long, skipFullCheck: Boolean = false) {\n        inLock(lock) {\n          if (timestamp > lastEntry.timestamp) {\n            // 添加时间戳\n            mmap.putLong(timestamp)\n            // 添加相对位移(偏移量索引)\n            mmap.putInt(relativeOffset(offset))\n            _entries += 1\n            _lastEntry = TimestampOffset(timestamp, offset)\n          }\n        }\n    }\n    \n    \n\n##### 2.2.3.4 索引总结\n\n我们的偏移量索引如图下所示：\n\n  * 当我们查询一个消息时，比如消息位移为 `23` 的 根据二分查找找到偏移量索引下标 22利用上述我们偏移量 Map 的存储，得到其日志位置 RecordBatch:firstOffset=23 position=762再根据日志位置，找到真正存储日志的地方\n\n我们的时间戳索引如图下所示：\n\n  * 基本和我们的偏移量索引类似，只是增加了一层二分查找\n\n#### 2.2.4 flush刷新\n\n在我们前面添加完之后，我们的数据仅仅是写到 `PageCache` 里面，需要进行 `flush` 将其刷新到磁盘中\n\n    \n    \n    // 未刷新消息数（unflushedMessages）超过配置的刷新间隔（flushInterval）\n    if (unflushedMessages >= config.flushInterval){\n      flush()\n    }\n    \n    def flush() {\n        LogFlushStats.logFlushTimer.time {\n          // 日志刷新\n          log.flush()\n          // 偏移量索引刷新\n          offsetIndex.flush()\n          // 时间戳索引刷新\n          timeIndex.flush()\n          // 事务索引刷新\n          txnIndex.flush()\n        }\n      }\n    \n    \n\n### 2.3 Follow 获取日志\n\n同样，我们的 `Follow` 在获取日志时，和我们 `Leader` 添加日志时一样的方法\n\n## 三、流程图\n\n## 四、总结\n\n这一篇我们介绍了 `Kafka` 中日志时如何持久化的以及 `Kafka` 日志中包括什么数据\n\n鲁迅先生曾说：独行难，众行易，和志同道合的人一起进步。彼此毫无保留的分享经验，才是对抗互联网寒冬的最佳选择。\n\n其实很多时候，并不是我们不够努力，很可能就是自己努力的方向不对，如果有一个人能稍微指点你一下，你真的可能会少走几年弯路。\n\n我是爱敲代码的小黄，阿里巴巴淘天集团Java开发工程师，双非二本，培训班出身\n\n通过两年努力，成功拿下阿里、百度、美团、滴滴等大厂，想通过自己的事迹告诉大家，努力是会有收获的！\n\n[双非本两年经验，我是如何拿下阿里、百度、美团、滴滴、快手、拼多多等大厂offer的？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjuejin.cn%2Fpost%2F7291193866132275254)\n\n我们下期再见。\n\n> 从清晨走过，也拥抱夜晚的星辰，人生没有捷径，你我皆平凡，你好，陌生人，一起共勉。\n\n"
    }
]