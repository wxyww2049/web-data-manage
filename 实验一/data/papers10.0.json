[
    {
        "url": "https://www.nowcoder.com/discuss/597844256308457472?sourceSSR=users",
        "title": "深圳华云信息面经(社招)",
        "content": "1.自我介绍\n\n2.最近的一个项目\n\n3.公司项目\n\n4.能不能说说aop\n\n5.能不能说说ioc\n\n6.能不能说说依赖注入有哪些方式\n\n7.spring的注入方式有那些\n\n8.数据库隔离级别\n\n9.springboot是怎么读取配置文件的\n\n10.list和map有什么区别\n\n11.能不能说说hashmap\n\n12.使用什么类型作为hashmap的key比较合适？为什么？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597841494371844096?sourceSSR=users",
        "title": "盛趣游戏 校招 面经/时间线",
        "content": "8.1开\n\n8.17投 java\n\n##### 9.7 一面\n\n50min\n\n  * 容器类\n  * arraylist linkedlist\n  * Hashmap Concurrentmap\n  * 线程通信有哪些方式\n  * 保证静态变量线程安全的关键字\n  * volatile的作用\n  * Java的内存模型\n  * 锁总线会影响性能，有什么解决方法（答的不好）\n  * Ioc\n  * spring怎么解决循环依赖\n  * springboot在run的时候做了什么事情\n  * 对比一下常用的微服务框架（不会）\n  * 应用层协议有哪些\n  * http各版本区别\n  * 项目里怎么解决负载均衡\n  * Xts server架构了解吗（不会）\n  * k8s有哪些组件（忘了）\n  * linux查看日志的常用命令（答的不好）\n  * 树状从属结构怎么设计表\n  * 设计模式常用有哪些\n  * 手撕：遍历一棵二叉树的最长路径\n  * 手上的offer情况\n  * 职业规划\n  * 兴趣爱好\n  * 反问：支付中心（账号系统及周边的购买计费等等周边功能、中台、游戏商城）都用java（介绍的很仔细 好评）\n\n##### 9.11 二面\n\n35min\n\n  * 实习\n  * 项目背景\n  * 说说你对我们公司的了解\n  * 平时玩游戏吗\n\n反问\n\n  * 支撑游戏商业化的支付中心，包括商城、周边、代理、风控\n  * 985\n\n面试官很热情，对公司业务介绍很充分（上面省略了）\n\n##### 9.15 hr面\n\n20min\n\n  * 现在实习不考虑留用吗\n  * 城市\n  * 岗位期望 职业规划\n  * 现在实习做的工作 团队，上手速度怎么样\n  * 可以提前来实习吗 大概什么时候能来（回答三四月才方便） 我们要求入职前来实习一段时间 具体时间录用的时候会沟通\n  * 小公司吸引你的点在哪\n  * offer情况 上海还在看哪些机会\n  * 能接受多大程度的加班\n  * 学校项目的背景\n  * 期望薪资（说至少要年包30 估计要高了）\n  * 你们学院这两年就业情况怎么样\n\n反问\n\n  * 995\n  * 前面两位技术面试官都对你的专业能力比较认可\n  * 双向选择 综合考虑 十月再谈（看得出犹豫了哈哈）\n\n后面再无消息 估计不匹配\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597836020079468544?sourceSSR=users",
        "title": "杭州端点 一面 70min",
        "content": "1.上来手写hashset 直接秒  \n2.聊实习  \n3.聊技术  \n4.聊项目  \n5.打趣的方式让我用英语自我介绍一下  \n6.可爱捏😋  \n  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597835452506284032?sourceSSR=users",
        "title": "【怒怼大厂面试官】你先说说知道哪些MySQL的高级特性",
        "content": "![alt](https://uploadfiles.nowcoder.com/images/20240314/300233579_1710406911490/31EBC4370166F179D3BFDC3E4FCEB5B0)\n\n> _面试官：上一期博客问了你MySQL主从复制，现在考考你高级特性吧_\n>\n>  \n>\n>\n> _面试官：不用慌尽管说，错了也没关系😊。。。_\n>\n>  \n>\n>\n> 以【**面试官面试** 】的形式来分享技术。**整理分类专栏、首发博客**\n> 在[CSDN](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2Fhdgaadd)（戳这），本期是《MySQL系列》，期待观众老爷的关注❤️\n\n## 面试官：你先说说知道哪些MySQL的高级特性吧\n\n嗯嗯好的。\n\n我了解到的主要有：分区表、视图、存储过程、触发器、事件...这些。\n\n>  \n>\n>\n> _面试官思考中…_\n>\n>  \n>\n\n## 面试官：你挑一个讲一讲你对他的理解\n\nok，那我讲讲分区表吧。\n\n分区的一个主要目的是将数据按照一个较粗的粒度**分在不同的区域** ，这样的话就有很多好处。\n\n  1. 在执行查询的时候，优化器会根据分区定义过滤不需要查询的分区，这样的话就**不需要扫描所有数据**\n  2. 可以把数据分布在**不同的物理设备** 上，高效利用多个硬件设备\n\n>  \n>\n>\n> _面试官思考中…_\n>\n>  \n>\n\n## 面试官：那分区表是银弹？不会有什么问题吗\n\n它也有很多不足的，像这些：\n\n  1. 分区表是根据**列进行分区** 的话，查询那些和分区列无关的数据，需要扫描所有分区表\n  2. 分区列和SQL的**索引列不匹配** ，也需要扫描所有分区表\n  3. 当对分区表增删改查时，MySQL需要**打开并锁住** 所有的底层表，这是分区表的另一个开销\n\n    \n    \n    CREATE TABLE sales (\n        order_date DATETIME NOT NULL,\n        -- Other columns omitted\n    ) ENGINE=InnODB PARTITION BY RANGE(YEAR(order_date)) (\n        PARTITION P2010 VALUES LESS THAN(2010),\n        PARTITION P2011 VALUES LESS THAN(2011),\n        PARTITION P2012 VALUES LESS THAN(2012),\n        PARTITION pCatchall VALUES LESS THAN MAXVALUE);\n    \n\n>  \n>\n>\n> _面试官思考中…_\n>\n>  \n>\n\n## 面试官：视图你也讲一下\n\nOk，视图本身是一个虚拟表不存放数据，其实就相当于保存了一条Select语句，把这条Select语句封装成视图。\n\n我举个例子吧。在业务开发中，如果不得不改变MySQL表名，而不想改动代码的表名。可以用视图查询新表名的内容，然后把视图命名为旧表名，这样查询视图也能查询出数据。\n\n    \n    \n    CREATE VIEW 新表名 AS\n    \tSELECT * FROM 旧表名\n    \n\n>  \n>\n>\n> _面试官思考中…_\n>\n>  \n>\n\n## 面试官：剩下还有那两个什么什么，你也讲一讲\n\n嗯嗯好的，最后三个是存储过程、触发器和事件。\n\n  1. 存储过程其实就是在MySQL里写**方法函数**\n\n> 例如可以让MySQL执行函数来插入1万条数据\n\n  2. 触发器可以让你在SQL语句**操作表数据** 的时候，在SQL语句执行前、执行后触发一些特定操作\n\n> 例如可以编写触发器，在插入A表数据时，给日志记录B表插入一条日志\n\n  3. 事件类似于**Linux的定时任务** ，可以是在某个时候、每隔一个时间间隔执行一段SQL代码。\n\n> 例如可以创建一个事件每隔一段时间调用下我们定义的一个**存储过程**\n\n大概是这些。\n\n>  \n>\n>\n> _面试官思考中…_\n>\n>  \n>\n\n## 面试官：有没听说过全文索引\n\n有的，其实类似于ElasticSearch的全文索引。\n\n主要是针对文本内容这种格式的数据，MySQL全文索引会对字段进行分词处理，返回匹配相关的文本内容。\n\n![alt](https://uploadfiles.nowcoder.com/images/20240314/300233579_1710406921504/D5BF4E8ABFA188352C92A5B3FA3169C4)\n\n> _面试官抓抓脑袋，继续看你的简历......_\n>\n>  \n>\n>\n> _得想想考点你不懂的😰_\n\n## 未完待续。。。。。。\n\n好了，今天的分享就先到这，我们下期**大厂面试演练** 继续。\n\n> **整理分类专栏、首发博客在**\n> ：[CSDN](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2Fhdgaadd)\n>\n>  \n>\n>\n>\n> [GitHub](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgithub.com%2Fhdgaadd)，你的\n> ⭐️ Star ⭐️，是作者的动力！\n>\n>  \n>\n>\n> **创作不易，不妨点赞、收藏、关注支持一下，各位的支持就是我创作的最大动力** ❤️\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597832239463899136?sourceSSR=users",
        "title": "前端面试 校招 浩鲸云",
        "content": "1.Vue是怎么操作DOM的？ 虚拟DOM、diff算法\n\n2.浏览器可以直接读懂Vue吗？\n\n当浏览器加载一个Vue应用时，浏览器本身不会直接理解和读懂Vue的代码。Vue是一种用于构建用户界面的JavaScript框架，它通过一系列的编译和转换过程将Vue的代码转换为浏览器能够理解和执行的代码。下面是浏览器在读懂Vue应用时所做的一些工作：\n\n  * 解析HTML：浏览器首先解析Vue应用的HTML模板，识别其中的Vue指令和标记。Vue使用特定的语法和标记，如{{}}和v-开头的指令，用于描述数据和视图之间的关系。\n  * 构建虚拟DOM：Vue将HTML模板解析后，会构建一个虚拟DOM（Virtual DOM），它是一个以JavaScript对象的形式表示整个应用的内存中的副本。虚拟DOM是Vue用于跟踪应用状态和管理视图更新的核心机制。\n  * 数据绑定：Vue通过数据绑定机制将Vue实例中的数据与虚拟DOM中的对应节点关联起来。当数据发生变化时，Vue会更新虚拟DOM中的数据，并触发视图的重新渲染。\n  * 渲染视图：Vue通过对比前后两个虚拟DOM的差异，只对需要更新的部分进行实际的DOM操作。这种高效的更新机制可以显著提升性能。\n  * 响应用户交互：当用户与Vue应用进行交互时，浏览器会监听用户的事件（如点击、输入等），并触发相应的事件处理函数。Vue提供了一套响应式系统，使得数据的变化可以自动更新视图，从而实现了数据驱动的用户界面。\n\n总结起来，浏览器不能直接读懂Vue代码，但通过Vue的编译和转换过程，浏览器可以理解和执行由Vue生成的JavaScript代码，并通过虚拟DOM和数据绑定机制实现数据驱动的视图更新。这种方式使得开发者可以使用Vue的高级特性和抽象概念来构建复杂的用户界面，同时享受到性能优化和开发效率提升带来的好处.\n\n3.get post的区别（从http角度谈）\n\n4.重定向的地址怎么返回给前端？（http中header的location字段，状态码302）\n\n5.ES6新特性\n\n6.vue中的组件怎么在浏览器中展现的，结合Vue Router\n\n7.html文档结构\n\n8.前端如何实现与用户交互\n\nHTML与JavaScript的交互是实现动态网页效果的关键。通过DOM\nAPI和事件监听机制，我们可以轻松地访问和修改HTML元素，实现各种复杂的交互逻辑。在实际开发中，我们应该根据具体需求选择合适的交互方式，并结合CSS样式和动画效果，打造出令人惊艳的网页应用。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597826651916988416?sourceSSR=users",
        "title": "掌上先机一面(过)",
        "content": "一个小时\n\n## 自我介绍\n\n## 提问\n\n引导很多，而且一直往深了说。\n\n  1. 什么时候开始系统地学习 Java 的？\n  2. 为什么选择学习 Java 作为求职方向(业务比较广)？\n  3. Leetcode 刷了多少题？\n  4. 数组和链表的区别？(我答了读、增删的时间复杂度不同，他一直引导着让我说扩容的时候数组会导致空间碎片化、链表不会)数组和链表在回收上有什么区别？\n  5. 做项目用的是 JDK 几？JDK 17 用的什么回收器？G1 回收器的缩写是什么？特点是什么？\n  6. 垃圾回收算法你知道有哪些？标记清理和标记整理的区别是什么？不同的代适用什么垃圾回收算法（新生代适用于标记复制、老年代适用于标记整理）？\n  7. 你用过什么 SpringBoot 里的什么注解？\n  8. 逻辑有 Dao、Service、Controller 这些层，那如果是一些关于 Redis 操作的一些封装，应该放在哪一层（他说应该再加一层在 Dao 和 Service 之间）？\n  9. SpringBoot（你的项目里）事务怎么实现的？如果先调rpc服务再修改多个表再改 redis 那这个事务很大，该怎么做（事务需要拆分，但是拆分了之后怎么样还能保证事务的功能（这个我不懂））？\n  10. Redis 的高可用怎么保证的？（我说从两个地方来保证：一个是持久化、一个是主从服务器，他说主要是主从服务器）\n  11. Redis 的集群的三个模式？Cluster 和 哨兵的区别？哨兵主节点是怎么选举出来的？如果主节点宕机了，客户端发来的请求怎么知道自己要请求的新的主节点是哪个端口？Cluster 的主节点是怎么选举出来的？\n  12. 你写的消息队列的持久化是怎么实现的？（我发现我可用性、持久化、消息不丢失几个名词没有区分过）\n  13. 了解过什么大数据处理的工具么（我说了解过 Flink，他说 Java 开发和大数据开发界限不明显，让我下去了解一下）？\n\n## 反问\n\n  1. 项目是做什么的？（公司是做电商erp的，项目组是给大客户做数据可视化报表的）\n  2. 如果过了下一面快不快？（快）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597824056431329280?sourceSSR=users",
        "title": "oppo笔试 oppo笔试题 0309",
        "content": "笔试时间：2024年03月09日 春招实习\n\n**备注：题解待更新**\n\n历史笔试传送门：[2023秋招笔试合集](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fmanager%2FcolumnDetail%2F0ODrNm)\n\n# 第一题\n\n### 题目：小欧新建文件夹\n\n小欧在创建文件夹，需要输入文件夹的名字。比如先创建名字为“abc”的文件夹，那么此时就有一个文件夹名字为“abc”。如果存在相同名字的文件夹，则在名字后面加上一个正整数，比如“abc”已经存在，那么此时创建的文件夹名字为“abc(1)”。如果“abc(1)”也存在，那么此时创建的文件夹名字为“abc(2)”。以此类推。请你帮助小欧创建文件夹。\n\n### 输入描述\n\n第一行输入一个正整数n，表示创建文件夹的数量。\n\n接下来n行，每行输入一个仅包含小写字母的字符串，表示要创建的文件夹名字，字符串长度不超过 10。\n\n1<=n<=10^4\n\n### 输出描述\n\n输出n行，每行输出一个字符串，表示创建的文件夹名字。\n\n### 样例输入\n\n> 5\n>\n> abc\n>\n> abc\n>\n> abc\n>\n> vfd\n>\n> dsf\n\n### 样例输出\n\n> 5\n>\n> abc\n>\n> abc\n>\n> abc\n>\n> vfd\n>\n> dsf\n\n### 参考题解\n\nC++：[此代码未进行大量数据的测试，仅供参考]\n\nJava：[此代码未进行大量数据的测试，仅供参考]\n\nPython：[此代码未进行大量数据的测试，仅供参考]\n\n# 第二题\n\n### 题目：小欧的等差数列\n\n小欧有一个长度为n，首项为a，公差为d的等差数列。即a,a+d,a+2d,...,a+(n-1)d。现在，小欧把这n个数看作\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597823545711902720?sourceSSR=users",
        "title": "OPPO 一二+HR面 面经 24春招 已offer",
        "content": "个人背景：本9海硕，一段本硕之间的一年工作经验，一段老外研究所实习\n\n岗位：系统工程师（原来投的底层开发，后来说没hc了转的）\n\nTL：3/6投递，3/8行测，3/9笔试，3/14一面，3/15二面，3/19HR面，3/22排序，3/26座谈会\n\n**一面：**\n\n时间：3/14，长度30分钟\n\n内容：\n\n  1. 自我介绍，让我在自我介绍的同时介绍一下一两个项目\n  2. 问项目相关的细节，占用了最长的时间\n  3. 问项目遇到的最大的难点是什么（有点hr面的意思）\n  4. C++多态，详细说一下运行时多态\n  5. 进程间通信是怎么做的，共享内存有什么优缺点\n  6. 其他小问题\n  7. 无手撕\n  8. 反问岗位工作内容\n\n感受：OPPO把面试链接发到短信里去了，我说怎么邮箱里找了半天找不到，最后迟到了几分钟。面试官全程没开摄像头，听声音是个很年轻的小哥，挺温柔的，我感觉面试氛围还是挺好的，我全程叭叭叭说个不停。\n\n结语：一面体验良好，希望能进二面\n\n**二面：**\n\n时间：3/15，长度40分钟\n\n内容：\n\n  1. 自我介绍\n  2. 问项目相关的问题，问的比较宽泛，例如项目推进时最大的难点这种，偏行为面\n  3. 问工作经历相关的问题，和2差不多\n  4. 问一些个人情况，例如为什么留学中间有一年工作这种\n  5. 全程无八股无手撕\n\n感受：二面更像是带点技术性质的HR面，全程都在聊天，面试官也很和气，感觉就像平时两个朋友聊天一样，目前为止OPPO的面试体验一直是最好的，听面试官说是统招统分，如果未来真有机会去OPPO的话，希望能和这两个面试官共事。\n\n结语：一切都很好，很舒服\n\n**HR面：**\n\n时间：3/19，长度30分钟\n\n内容：\n\n  1. 自我介绍\n  2. 常规HR面内容，用三个词形容自己，说说自己的不足这种\n  3. 反问base，出结果要多久\n\n感受：HR面和之前技术面的体验差距有点大，对面的HR感觉全程都比较冷淡，我话里故意抖的几个包袱都没能让对方会心一笑。问的内容也很模版，没有特别根据我的经历来问。我现在就怕被HR面给KPI了。\n\n**3/22更新：**\n\n今天上去一看进排序了，不知道还要被泡多久池子\n\n**3/26更新：**\n\n排序没几天就座谈会了，就是简单讲讲薪酬福利这种，会开完过一阵就发意向了，大白菜一个。看上去oppo系统开发这个岗位今年在大量招人，流程很快，比起其他公司笔试完不动，一面完不动强多了。虽然包给的不大，但考虑是在二线，其实也还行，目前没有更好的offer，可能真的要去。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597822326180278272?sourceSSR=users",
        "title": "腾讯IEG部门 前端日常实习二面3.14",
        "content": "![](https://uploadfiles.nowcoder.com/images/20240314/335948961_1710400507872/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n上次还说人家是kpi，结果人家给我过了，感谢一面面试官[笑cry]\n\n上周三面完一面，第二周周一下午突然给我发了二面邮件，约的周四，二面和一面相差时间八天。\n\n一下子紧张起来了，不得不说今天真的紧张到不行，因为一面面试官都有点kpi摆烂的，搞得我都觉得必挂的，面完就不在乎了，结果能有二面就搞得我好认真好紧张\n\n话说二面，是牛客网面试？？它们竟然还有合作，我一进去看到都是code页面以为要全程手撕代码了\n\n![](https://uploadfiles.nowcoder.com/images/20240314/335948961_1710403640702/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n**二面**\n\n面试官开了摄像头，狠狠好评，是个三十多岁的人，感觉比百度二面的那个面试官看着友善一点\n\n上来先是自我介绍，然后直接问我三道业务题（感觉又有点小kpi风格），没让我写，直接口述\n\n第一道是，爬楼梯，问我到十级楼梯有多少方案，我直接就说斐波那契数列1 1 2 3 5 8 ...\n，然后问我不是10而是n的话要注意什么，我说要弄个备忘录，以免重复计算。然后又问我n非常大会不会溢出，我想了想会，假如当n-1 + n-2\n的值已经大于2^51\n-1，那此时就会发生溢出等等问题，我说可以用大数相加解决，转为字符串形式，不会有number的限制，或者使用bigInt。不知道答得咋样这个\n\n第二道是，一千万人，怎么选出前十个成绩最高的。我满脑子都是快排，但是时间复杂度O(nlogn)，一千万已经很夸张了，又说了堆，但感觉都不太好，面试官问能不能一次遍历搞定，我的想法就是维护一个数组，里面存放最大的十个数，不过其实在数组里面选个合适的位置插入也都做不到O(n)。答得挺差的，确实没什么思路\n\n第三道是，做个抽奖系统，一等奖一个概率1%，二等奖两个概率2%，三等奖三个概率3%，问我怎么做。我的想法是用random()来做，0~1一共100个数，random()\n- 0.99大于0就说明是1，此时为一等奖，同理二三等奖也可以这么获得，就是得用三个random()**，**\n或者用一个的话得处理一些case。然后面试官问我，random()真的是0~1一共100个数吗，我突然发现不是哦[笑cry]就说用random() *\n100 再用floor()向下取整，这就获得的就是0~100共100个整数。然后面试官也没说啥就过了\n\n感觉上面三道题都没有回答的特别好，评论区的uu们可以讲下有什么好的解决办法，我只是个菜鸡[牛泪]\n\n然后就开始问前端方面的问题，他问的都很基础基本也很深，会顺着我的回答继续问下去，感觉面试官的专业水平很高\n\n问我对前端的理解，回答的是我自学的路程\n\n问我vue的核心，回答是数据驱动，然后又是经典背八股的数据劫持那些东西\n\n问我长连接有哪些方式，我回答http请求头中的connect: keep-\nalive。他说不是这个长连接[笑cry][笑cry][笑cry]又问了我keep-\nalive的意思，然后问我长连接的意思，我回答是客户端不断向服务端发送信息，其实我是不知道的，但总得蒙一蒙吧[笑cry]然后面试官没说啥就换了下一题，估计看我也不知道\n\n问我向后端请求有什么方式，回答了fetch和ajax，问我还有吗，我知识储备真的不够，真的想不到别的，他问我有没有用过websocket，我说我只听过没有用过，又问我什么是socket，我回答是套接字，但我确实不知道更多了[牛泪]然后也跳过了\n\n问我http和https用了什么协议，http和https有什么不同，简单的讲了下\n\n其它的暂时想不到了\n\n总体面试下来，感觉面试官很专业，也很尊重人，等会面试评价问卷下来给他一个大大的好评[诶嘿]，虽然感觉也有一点点点点的kpi，不过感觉从这次面试来说我也学到很多，我还是太菜了，继续努力朋友们[牛泪]\n\n许愿伟大的鹅收留我吧[牛泪]一个大厂对于双非一本的小弱鸡来说吸引力太大了[牛泪]\n\n****\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597813478572793856?sourceSSR=users",
        "title": "腾讯一面-腾讯安全后台开发实习base上海",
        "content": "### 拷打后端项目\n\n  * mysql查询去重\n  * 怎么建表的\n  * 项目中一些接口的实现\n  * 设计场景：抖音有个搜索功能，要搜索并展示用户和视频的信息，你要怎么实现\n  * 用户的鉴权是怎么设计的\n  * 设置mysql连接池的参数的依据\n  * gorm怎么防止sql注入\n  * get和post的区别，为什么这种情况要用get，...为什么要用post\n  * gin的优势\n  * 设置redis的key失效时间的依据\n  * 设置缓存双删策略的删除时间的依据\n  * 对CICD的了解\n  * 服务器的内存如果缓缓提高，要怎么排查\n  * 怎么做的压测\n  * 对docker和docker-compose的理解\n  * docker的挂载和端口映射\n  * docker-compose如何指定容器启动顺序\n\n### 拷打xv6,pa项目\n\n  * 系统调用\n  * 页表\n\n### 反问\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597809464145735680?sourceSSR=users",
        "title": "无锡朗新科技 商业分析/数据分析 实习生 面经",
        "content": "无锡的朗新科技，总体而言是垂类领域（能源、电网）的上市外包大厂，主要客户是电网，因此相比其他外包应该会比较稳定，当然外包的待遇很大程度取决于部门而非公司。\n\n个人BG：双非本，211经济硕，有代码能力。\n\n总体：无笔试，实习生只有一面，不过一共有三个面试官，部门是咨询部，其中一个是部门老大，另外两个应该是小组老大和技术官。面试时间40分钟左右，总体体验很好，都很客气。部门老大一会就走了（盲猜不是特别缺人）\n\n待遇：看JD介绍是实习生3500，转正10-12K，有结果会更新。\n\n\\---流程---\n\n1、自我介绍\n\n2、对项目和经历提问：主要就是询问之前的工作流程，遇到问题的解决思路等。\n\n技术方面：和传统的BI分析不一样，这边并不看重SQL和BI看板能力，更关注Python处理数据的能力，为了解决特定问题也涉及到一些外部爬虫（但不是主要业务）。还仔细问了机器学习的建模流程，怎么选取特征等等。\n\n能力方面：看中文档输出能力，这边分析师输出的主要是数据分析报告（比如为了解决客户某个问题，用什么工具怎么解决的）而不是BI看板监测，ABtest这种。\n\n3、向对方提问：\n\n主要问了部门的主要业务（电网的分析和支持工作），部门的规模（总共约80人，有4个小组），加班情况（偶尔有，实习生完全不用）\n\n有结果再更新#攒人品#\n\n\\---3.15更新---\n\n第二天下午HR给了oc，但是真的统一价3500……，然后公司没有班车，附近无地铁。。。交通极其不方便，除非住附近，但是住附近房租一扣这……\n\n但侧面也说明转正确实是12K左右，实习性价比低，转正在无锡还可以。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597803993657614336?sourceSSR=users",
        "title": "XKL面试",
        "content": "2-29hr就加了微信，虽然我从来没投过\n\n之后发了保证书和测试题\n\n3-6发面试链接\n\n3-7晚上技术面试，预计1小时，实际40分钟，详细问了项目，和数模电基础，问的很简单\n\n3-8早上，hr通知过了技术面，还在想为什么这么水，发了四级成绩，跟他说没有签三方和offer\n\n之后hr放假两天\n\n3-11周一hr上班立马安排了二面，原本说周末下午又说周一，也就是说下午通知晚上面试，预计半小时，实际面了40分钟，我以为问这么多是看上我了？其实是想多了\n\n3-14毕设中期完成，已经三天了hr没通知，我估计是凉了，一问说是面试不太理想，hc缩减，没hc还问这么多干什么，浪费时间\n\n总体来讲，比较水，面试简单，hc没有，呵呵\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597812504986722304?sourceSSR=users",
        "title": "百度一面-AI产业部后端研发实习base上海",
        "content": "### GO篇\n\n  * 了解GO的切片吗\n  * 切片的扩容机制\n  * 如果实现切片的深拷贝\n  * 切片线程不安全的原因\n  * 介绍goroutine，以及它的优势\n  * GMP模型\n  * 携程间的通信\n  * 有无缓冲的channel的底层实现\n  * 读写已经关闭的channel分别会发生什么\n  * 知道sync.once吗\n\n### 数据库\n\n  * redis的常见数据结构\n  * list的底层是什么结构\n  * redis支持高并发，速度快的原因\n  * redis怎么实现持久化以及原理\n  * SQL语句的执行顺序(先from再where...)\n  * MYSQL怎么联合查询\n  * 用过索引吗，非聚集索引和聚集索引的区别\n  * 哪些场景不适合使用索引\n\n### 容器\n\n  * docker怎么搜索镜像\n  * 容器的状态\n  * 拉取镜像\n\n### 计网\n\n  * http请求的状态码\n\n### 算法\n\n  * 整数反转(力扣07)\n\n### 拷打项目\n\n  * 项目的背景，开发步骤，怎么建表的\n  * 外键怎么设计的\n  * GIN框架的路由的原理\n\n### 反问\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597789574483525632?sourceSSR=users",
        "title": "2023秋招-大数据开发面试-阿里淘天-二面",
        "content": "1、 在XX实习，目前没有offer吗？\n\n2、 实习和你项目的区别、实习项目主要做的内容？\n\n3、 实习的难点？\n\n4、 系统主要做的什么？\n\n5、 讲讲MR？\n\n6、 数据倾斜遇到过吗？\n\n7、 除了null值呢？\n\n8、 除了随机打散还有别的方案解决吗？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597775066637606912?sourceSSR=users",
        "title": "ARM/Linux嵌入式面经（四）：浙江大华",
        "content": "> 大华一面 嵌入式 主要是问的项目相关 标准的十五分钟 电话面 这个面试官主要问项目，我同门面的全问八股，可能面试官不一样吧\n\n@[toc]\n\n> 话说很多硬件终端、军工研究所都很喜欢考通信协议相关的知识。\n\n往期内容：[ARM/Linux嵌入式面经z专栏](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fbv_UXVChr5NbrDk5WgE2Nw)\n\n# UART串口通信的波特率，常用波特率有哪些\n\nUART（Universal Asynchronous Receiver /\nTransmitter）是一种异步数据传输技术，它使用特定的波特率来传输数据。UART波特率是指每秒传输的数据位数，也称为波特率或传输速率。\n\nUART波特率有多种，其中最常用的是2400、4800、9600、19200、38400、57600、115200。\n\n# 串口通信校验方式是什么，有什么区别\n\n利用串口传输数据时，近距离传输还好，远距离传输由于线路长度影响，可能会使信号在传输过程中出现不可预知的错误，为了达到通信的稳定性，在远距离通信时一般要引入一种校验方式来去除干扰。\n\n这里主要介绍几种常见的校验方式，也是我们串口通讯板子上需要添加的几种校验方式。\n\n即奇校验ODD，偶校验EVEN，累加和校验，CRC循环码冗余码校验\n\n## 方便简单的奇偶校验\n\n奇偶校验需要一位校验位，即使用串口通信的方式2或方式3（8位数据位+1位校验位）。\n\n奇校验（odd parity）：让传输的数据（包含校验位）中1的个数为奇数。\n\n即：如果传输字节中1的个数是偶数，则校验位为“1”，奇数相反。\n\n以发送字符：10101010为例\n\n![](https://img-\nblog.csdnimg.cn/img_convert/6dfdac41b4b48c2da85fd9c331bebcb8.png)\n\n## 偶校验（even parity）\n\n让传输的数据（包含校验位）中1的个数为偶数。\n\n即：如果传输字节中1的个数是偶数，则校验位为“0”，奇数相反。\n\n还是以发送字符：10101010为例\n\n![](https://img-\nblog.csdnimg.cn/img_convert/b496a4fb9e4e25bc0935680392998ac0.png)\n\n数据和校验位发送给接受方后，接收方再次对数据中1的个数进行计算，如果为奇数则校验通过，表示此次传输过程未发生错误。如果不是奇数，则表示有错误发生，此时接收方可以向发送方发送请求，要求重新发送一遍数据。\n\n优缺点：\n\n  * 奇偶校验的检错率只有50%，因为只有奇数个数据位发生变化能检测到，如果偶数个数据位发生变化则无能为力了╮(╯﹏╰）╭\n  * 奇偶校验每传输一个字节都需要加一位校验位，对传输效率影响很大。\n  * 奇偶校验只能发现错误，但不能纠正错误，也就是说它只能告诉你出错了，但不能告诉你怎么出错了，一旦发现错误，只好重发。\n  * 虽然奇偶校验有很多缺点，但因为其使用起来十分简单，故目前仍被广泛使用。\n\n应用：\n\n如何用编程确定一个字节中“1”个数的奇偶性？我们可以利用二进制数相加的特点：\n\n0+0=0、1+0=1、1+1=0\n\n可以看出，如果我们将一个字节的所有位相加\n\n  * 有奇数个“1”的字节的和为1 +有偶数个“1”的字节的和为0 由此即可通过编程完成判断。实际应用中，实现方法很多，但这是相对简单的一种，这里不再赘述。\n\n## 累加和校验\n\n所谓的累加和校验有很多种，最常见的一种是在每次通信数据包最后都加一个字节的校验数据，**这个校验字节里的数据是通信数据包里所有数据的不进位累加和**\n。例如：\n\n![](https://img-\nblog.csdnimg.cn/img_convert/c5153d5fef664e2c4a7cc9368599811e.png)\n接收方接收到数据后同样对一个数据包的数据进行不进位累加和计算，如果累加出的结果与校验位相同的话就认为传输的数据没有错误。\n\n优缺点：\n\n  * 实现起来方便简单，被广泛运用。\n  * 检错率一般，例如一个字节多1，一个字节少1，则会出现误判。\n  * 和奇偶校验一样，只能发现错误，但不能纠正错误。\n\n另外，累加和校验的数据传输格式可以表示为：通讯数据+校验数据。这与我们之后要说的CRC循环冗余码校验是相同的。\n\n虽然奇偶校验和累加和校验使用方便，应用广泛，但由于其存在许多缺点，在一些使用场合下很难满足要求，于是就有了更稳定更强大的校验方式，它就是……CRC循环冗余码校验！\n\n## CRC循环冗余码校验\n\n  * CRC 即 Cyclic Redundancy Check 的缩写\n  * CRC 循环冗余校验属于检错码，只能检测出现了错误，但无法纠正错误。\n  * 与CRC循环冗余校验类似的，还有奇/偶校验，但是 CRC 漏检率更低，因此在实际应用中更为重要\n\n### 发送方对原始数据追加校验码\n\n  * 假设原始数据是：101001\n  * 生成待追加的校验码，需要使用一个生成多项式，G(x)(收发双方事先约定)，例如 G(x) = x3 + x2 + 1\n  * 构造被除数：原始数据 + 生成多项式最高次项个0，即：101001000\n  * 除数：除数实际上就是生成多项式的系数，G(x) 展开得到: G(x) = 1 * x3 + 1 * x2 + 0 * x1 + 1 * x0，即 1101\n  * 两数相除得余数，并进行补位(补到与生成多项式最高次项一致)，即得到校验码。但是，这里的除法跟常规除法并不相同\n  * 常规除法在上下两行数进行运算时，使用的是减法运算，而这里使用的是异或\n\n![](https://img-\nblog.csdnimg.cn/2021021213262352.png?type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RMMTgzODI5NTA0OTc=,size_16,color_FFFFFF,t_70)\n\n### 接收方对收到的数据进行校验\n\n  * 继续接前文，假设收到的数据为 101001001\n\n  * 接收方对该数据做除法，除数仍然是之前使用的多项式的系数 1101\n\n  * 过程如下\n\n![](https://img-\nblog.csdnimg.cn/20210212134841902.png?type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RMMTgzODI5NTA0OTc=,size_16,color_FFFFFF,t_70)\n\n  * 若余数为0，则表示未出错\n  * 假设，接收方收到的数据出现了错误： 101101001，校验过程如下：\n\n![](https://img-\nblog.csdnimg.cn/20210212135042983.png?type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RMMTgzODI5NTA0OTc=,size_16,color_FFFFFF,t_70)\n\n  * 余数不为0，则表示传输过程中出现了错误\n\n### 结语\n\n  * 计算CRC校验码时，用到的除法运算，内部使用的是异或运算而非减法运算\n\n  * 计算出余数后，还要对其进行补位，才能得到最终使用的校验码\n\n  * 在计算机网络中，数据链路层将数据封装成帧时，会在帧尾添加校验码，从而判断数据在传输过程中是否发生错误\n\n  * 在实际使用CRC时，采用的生成多项式更为复杂，从而确保较低的漏检率\n\n![](https://img-blog.csdnimg.cn/20210212140304184.png)\n\n  * 另外，生成多项式的常数项必须是1\n\n> 参考资料：\n>\n>   *\n> [https://blog.csdn.net/TL18382950497/article/details/113794438](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2FTL18382950497%2Farticle%2Fdetails%2F113794438)\n>   *\n> [https://zhuanlan.zhihu.com/p/29693940](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F29693940)\n>\n\n# 有校验位和无校验位的区别\n\n# iic收发数据的流程\n\nIIC 即 inter-integrated-circuit，又称 I2C 一种总线结构，具体接受请度娘。\n\nI2C串行总线一般有两根信号线，一根是双向的数据线SDA，另一根是时钟线SCL。所有接到I2C总线设备上的串行数据SDA都接到总线的SDA上，各设备的时钟线SCL接到总线的SCL上。\n\n以下为mini2440的IIC设备：AT24C08\n\n![](https://img-\nblog.csdnimg.cn/img_convert/6b708db4db705a40adf1060632ab27f4.jpeg)\n\nIIC遵从 主/从结构，通信由主机发起，并且由主机结束。\n\n开始信号（s）：当时钟信号处于高电平，向数据信号线发送下降沿。\n\n结束信号（p）：当时钟信号处于高电平，向数据信号线发送上升沿。\n\n![](https://img-\nblog.csdnimg.cn/img_convert/99cc5abc4744f810d7e03a2e9758d476.jpeg)\n\n由于IIC总线上可能连有多个设备，因此我们应该在开始信号后进行设备选择，也就是发送地址信号，当设备收到符合自己地址的信号后会返回响应。\n\n一般地址位宽为7位，而发送的数据位为8位，除了7位地址，剩下的一位为读写位。\n\n如果为写，则在设备返回ack信号后，接着主机发送8位数据，当设备收到数据后，设备返回ack信号。\n\n![](https://img-\nblog.csdnimg.cn/img_convert/0764e53f7d7a3847b44e89ab3a74c21d.jpeg)\n\n如果为读，则在设备返回ack信号后，接着设备返回8位数据，当主机接收到信号后，接下来的ack信号就由主机发送。\n\n![](https://img-\nblog.csdnimg.cn/img_convert/327257b586ad0e672c22a40055a223e9.jpeg)\n\nData Transferred段周而复始，直到数据传输完成。\n\n而在主机发送（R）或者接受（W）到ack信号后，会产生中断，我们可以在中断处理程序中对数据进行进一步处理，或者在中断处理程序内继续发送/接收数据。\n\n当传输完成后，\n\n如果主机作为数据发送方，可以发送停止信号，终止IIC传输过程。\n\n如果主机作为数据接收方，可以不发送响应信号ack，终止传输过程。\n\n寄存器配置：\n\n根据芯片手册，IICCON用于初始化，其余用于数据传输的相关操作。\n\nIICCON： IIC控制寄存器\n\nIICDS： IIC数据移位寄存器\n\nIICSTAT： IIC状态寄存器\n\nIICADD： IIC地址寄存器\n\n流程如下\n\n## 主机发送流程：\n\n![](https://img-\nblog.csdnimg.cn/img_convert/a49a7de743792d4decfb8938e870d7a1.jpeg)\n\n## 主机接收流程：\n\n![](https://img-\nblog.csdnimg.cn/img_convert/ce5ff4f6e3833fcf25617405e0af6cea.jpeg)\n\n## 设备发送流程：\n\n![](https://img-\nblog.csdnimg.cn/img_convert/e3e6105bf8d394797df59926cc4df4d3.jpeg)\n\n## 设备接收流程：\n\n![](https://img-\nblog.csdnimg.cn/img_convert/6f308b039ecc3d4a08de8968793178c6.jpeg)\n\n另外，对于AT24C08，值得注意的是，该设备是先进行地址选择（非IIC设备的地址选择，而是AT24C08内部的地址选择），然后进行数据读写。\n\n因此，AT24C08来说，当该设备被选择后（IIC地址匹配），然后对收到的第一个数据进行片内地址选择（写地址），然后：\n\n如果需要写数据，因为同为写模式，所以可以直接进行\n\n![](https://img-\nblog.csdnimg.cn/img_convert/8eae0fbaf309d7c0e3a55e289ebd012c.jpeg)\n如果需要读数据，因为要转换为读模式，所以需要重新发送开始信号，在当前地址读数据\n\n![](https://img-\nblog.csdnimg.cn/img_convert/221d0df57e72762919f5f40023f480b8.jpeg)\n\nAT24C08是10位地址，所以8位的word address根本不够进行地址选择，因此以device address的最后两位，加上word\naddress 的8位，一共10位数据进行地址选择。\n\n![](https://img-\nblog.csdnimg.cn/img_convert/041b94aa4f00fb5c107b3eeda035c074.jpeg)\n\n>\n> 到这里我们就对IIC原理及简单流程有了一定的了解了，和面试官battle一下完全够了，我为什么找了带一个具体的型号的元件，这是因为在面试的时候，一般面试官会问关于IIC的基础知识，再问你选型的器件用的是什么？为什么用这个器件。\n\n如果你有时间的话，想稳中稳，那么你可以再看一下：[IIC详解，包括原理、过程，最后一步步教你实现IIC\n](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.cnblogs.com%2Ffire909090%2Fp%2F11594532.html)\n\n很多硬件终端、研究所很喜欢考协议相关的。\n\n>\n> 参考资料：[https://www.cnblogs.com/TaigaCon/archive/2012/11/22/2782584.html](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.cnblogs.com%2FTaigaCon%2Farchive%2F2012%2F11%2F22%2F2782584.html)\n\n# 当通信出现异常，可能是什么原因导致的\n\n通信出现异常时，可能由多种原因导致。以下是一些常见的原因：\n\n串口连接问题：\n\n  * 串口线可能没有正确连接，或者接线松动、损坏。\n  * 发送端与接收端的串口配置参数，如波特率、数据位、停止位和校验位不一致，导致通信失败。\n\n数据问题：\n\n  * 数据丢失或错位，可能是由于数据传输速率过快或缓冲区溢出引起的。\n  * 数据乱码，这可能是由于波特率不匹配、数据格式错误或受到干扰导致的。\n\n硬件问题：\n\n  * 电源供应不稳定，供电电压和电流不满足要求。\n  * 串口线损坏，如焊接不良、短路等。\n  * 串口芯片或模块损坏，需要替换或修复。\n  * USB转串口工具有问题，长时间使用可能导致损坏。\n  * 外部晶振或内部时钟计算的波特率存在误差。\n\n软件问题：\n\n  * 串口助手、单片机和外设三者之间的波特率设置不一致。\n  * 波特率配置错误，或者计算公式中的单片机频率不正确。\n  * 外部晶振和单片机启动代码设置的频率不一致。\n\n网络问题：\n\n  * 防病毒软件或防火墙可能阻挡了UDP请求，导致设备无法找到。\n  * 串口服务器设置的IP地址与局域网内的电脑IP地址冲突。\n  * 网络管理员对局域网进行管理，不允许未注册的IP地址或MAC地址在局域网内运行。\n\n电磁干扰问题：\n\n  * 信号容易受到干扰，建议使用带屏蔽线的电缆，并且确保接线严格，需要接地的要接地。\n  * 排查潜在的干扰源，如电磁干扰、共地问题等。\n\n当通信出现异常时，可以根据上述可能的原因逐一排查，定位问题所在，并进行相应的修复。同时，确保所有硬件和软件的配置正确，并遵循相应的通信协议和标准。\n\n# Linux的iic驱动组成\n\n在 Linux 系统中，I2C 驱动由 3 部分组成，即 **I2C 核心、I2C 总线驱动和 I2C 设备驱动。**\n\n今天就从这三个部分来给大家讲解一下Linux中的I2C驱动，以及我们应该如何为我们的开发板添加一个I2C设备。\n\n## Linux 的 I2C 体系结构\n\nLinux驱动分为三部分：I2C 核心、I2C 总线驱动和 I2C 设备驱动\n\nI2C（也写做IIC）总线支持设备之间的短距离通信，用于处理器和一些外围设备之间数据传输，它只需要两根信号线来就能完成数据传输，极大地简化了对硬件资源和PCB板布线空间的占用，**所以它被EEPROM、时钟等设备与主控的接口中。**\n\n> 先上三幅图，心中有个体系结构\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/7d0bdf7fd2bd4c859c67033ad5006b23.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/7a1e0d12f7b04c27b2e86a622d25341f.png)\n\n![](https://img-\nblog.csdnimg.cn/img_convert/fe3a571a76f21219d29298e47d1d655a.webp?x-oss-\nprocess=image/format,png)\n\n### 1 Linux I2C 核心\n\nI2C 核心提供了 **I2C 总线驱动和设备驱动的注册、注销方法**\n，这部分主要是一些与硬件无关的的接口函数，这部分的代码一般不用我们普通开发者进行开发和修改，但是理解这部分的代码逻辑和接口还是非常必要的。\n\n### 2 Linux I2C 适配器驱动\n\n通过上面的介绍我们知道了I2C驱动主要分为三个部分，上面我们已经介绍了I2C核心这一部分，现在我们来介绍一下I2C\n适配器驱动，我们知道I2C驱动和其他的那些字符设备驱动有所不同，**I2C驱动中维持着一套自己的总线。**\n\n**I2C 适配器驱动是Linux内核中的一个核心模块** ，总线层负责管理所有注册到系统的I2C总线适配器和设备，并提供与设备通信的API函数。\n\n**它提供了一些基本的操作函数，如启动总线、停止总线、发送起始信号、发送停止信号等**\n。但是这部分是由Linux内核完成的，并不需要我们开发者进行修改或添加，所以了解即可。\n\n### 3 Linux I2C 设备驱动\n\nI2C 设备驱动要使用 i2c_driver 和 i2c_client 数据结构并填充其中的成员函数。 i2c_client\n一般被包含在设备的私有信息结构体 yyy_data 中，而 i2c_driver 则适合被定义为全局变量并初始化。\n\n看到I2C设备驱动的这两个结构体大家是不是很熟悉了，I2C设备驱动是针对特定类型的I2C设备编写的驱动程序。它包含了对具体设备的操作和控制逻辑，通过调用I2C总线核心驱动提供的API函数与设备进行通信。设备驱动的主要任务包括初始化设备、读写数据、配置设备参数等。\n\n因为这部分是针对特定类型的I2C设备编写的驱动程序，所以这部分才是要我们开发人员来完成编写的，我们如果需要在自己的开发板上添加一个新的I2C模块，我们就要首先编写I2C设备驱动这部分，这部分的编写需要调用上面我们介绍的I2C核心和I2C总线中接口函数来完成模块的初始化。\n\n### 4 Linux I2C驱动总结\n\n  * I2C总线核心驱动（I2C Core Driver）：**【系统厂编写】** I2C总线核心驱动是Linux内核中的一个核心模块，负责管理所有注册到系统的I2C总线适配器和设备，并提供与设备通信的API函数。**它提供了一些基本的操作函数，如启动总线、停止总线、发送起始信号、发送停止信号等。**\n\n  * I2C适配器驱动（I2C Adapter Driver）：**【芯片厂提供】** I2C适配器驱动负责与硬件的I2C控制器进行交互，完成硬件层面的初始化、配置和操作。**它将底层硬件的特定接口与I2C总线核心驱动进行连接，使得核心驱动能够通过适配器驱动来访问硬件。**\n\n  * I2C设备驱动（I2C Device Driver）：**【开发者编写】** I2C设备驱动是针对特定类型的I2C设备编写的驱动程序。它包含了对具体设备的操作和控制逻辑，通过调用I2C总线核心驱动提供的API函数与设备进行通信。**设备驱动的主要任务包括初始化设备、读写数据、配置设备参数等。**\n\n三部分之间的关系如下：\n\n  * I2C核心层驱动作为顶层驱动，管理整个I2C子系统，并提供了基本的I2C操作接口。\n\n  * I2C适配器驱动负责与底层硬件的I2C控制器进行交互，通过适配器驱动，I2C总线核心驱动能够与硬件进行通信。\n\n  * I2C设备驱动则针对具体的I2C设备编写，实现了对设备的初始化、读写数据等操作。\n\n> 参考资料\n>\n>   * 体系学习看这个：[https://www.eet-\n> china.com/mp/a228520.html](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.eet-\n> china.com%2Fmp%2Fa228520.html)\n>   *\n> 详细实现代码看这个：[《Linux驱动：I2C驱动看这一篇就够了》](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F575318033)\n>\n\n> 你就说贴心不贴心吧~~~ 这还不点赞关注~~~\n\n# 然后问了WIFI（简历项目有）\n\nWIFI，全称Wireless Fidelity，是一种基于IEEE\n802.11系列标准的无线网络通信技术。WIFI技术使用2.4GHz或5GHz的无线频段进行数据传输，具有速度快、可靠性高、覆盖范围广等特点，是现代社会中无线局域网（WLAN）的重要实现方式之一。\n\nWIFI的工作原理主要是基于无线信号传输和接收。在一个WIFI网络中，通常包含一个或多个接入点（AP）和多个终端设备（STA）。接入点负责提供无线信号的发射和接收，并与有线网络相连，将无线信号转化为有线信号进行传输。终端设备则通过无线网卡等设备，与接入点建立无线连接，实现数据的传输和接收。\n\nWIFI的覆盖范围通常可达几十米至上百米，具体取决于接入点的发射功率和周围环境。在覆盖范围内，多个终端设备可以同时接入同一个WIFI网络，实现数据的共享和传输。此外，WIFI还支持多种加密方式，如WPA/WPA2等，确保数据传输的安全性。\n\nWIFI技术具有广泛的应用场景，如家庭、办公室、公共场所等。在家庭场景中，WIFI可以实现多台设备之间的无线连接，方便用户进行上网、文件传输等操作。在办公室场景中，WIFI可以提供更加灵活的网络接入方式，方便员工进行移动办公和协作。在公共场所中，WIFI则可以为用户提供免费的网络接入服务，提高用户体验。\n\n需要注意的是，WIFI技术也存在一些局限性，如信号衰减、干扰等问题。为了获得更好的WIFI体验，用户需要注意选择合适的接入点和终端设备，并合理布置网络布局，避免信号干扰和衰减。同时，也需要注意保护个人隐私和网络安全，避免使用不安全的网络或泄露个人信息。\n\n总之，WIFI技术已经成为现代社会中不可或缺的一部分，它为我们提供了更加便捷、高效的网络接入方式，也促进了信息的共享和交流。随着技术的不断发展，WIFI的性能和应用场景也将不断拓展和完善。\n\n**以下是一些常见的WIFI面试问题及其答案：**\n\n问题1：请简述WIFI的工作原理是什么？ **答案1：** WIFI工作原理主要是基于IEEE\n802.11系列标准，通过无线信号传输和接收实现数据通信。在一个WIFI网络中，接入点负责提供无线信号的发射和接收，并与有线网络相连，将无线信号转化为有线信号进行传输。终端设备则通过无线网卡等设备，与接入点建立无线连接，实现数据的传输和接收。\n\n问题2：WIFI的覆盖范围通常有多大？ **答案2：**\nWIFI的覆盖范围通常取决于接入点的发射功率和周围环境。一般来说，在家庭或办公室环境中，WIFI的覆盖范围可以达到几十米至上百米。但在实际使用中，可能会受到障碍物、其他无线设备干扰等因素的影响，导致覆盖范围有所减小。\n\n问题3：WIFI常见的加密方式有哪些？ **答案3：** WIFI常见的加密方式包括WEP（有线等效加密）、WPA（Wi-\nFi保护访问）和WPA2等。其中，WEP由于存在安全漏洞，现已较少使用；WPA和WPA2则提供了更高的安全性，被广泛应用于现代WIFI网络中。\n\n问题4：WIFI信号为什么会衰减？ **答案4：**\nWIFI信号衰减可能由多种原因导致，如传输距离过远、障碍物阻挡、其他无线设备的干扰等。信号在传输过程中会受到环境因素的影响，导致信号强度逐渐减弱，从而影响WIFI网络的性能。\n\n问题5：在部署WIFI网络时，需要注意哪些因素？ **答案5：**\n在部署WIFI网络时，需要注意以下因素：选择合适的接入点位置和数量，以确保网络覆盖范围和信号质量；合理规划网络布局，避免信号干扰和衰减；考虑网络的安全性和稳定性，采用合适的加密方式和安全措施；以及根据实际需求选择合适的网络设备和配置参数。\n\n问题6：WIFI与蓝牙有何区别？ **答案6：**\nWIFI和蓝牙都是无线通信技术，但它们在应用场景、传输速度和距离等方面有所不同。WIFI主要用于局域网内的设备连接和数据传输，传输速度快，覆盖范围广；而蓝牙则主要用于短距离无线通信，如耳机、手环等设备与手机的连接，传输速度相对较慢，但功耗更低。\n\n请注意，这些问题和答案是基于一般性的WIFI知识。在实际面试中，面试官可能会根据具体职位和行业要求提出更深入或专业的问题。因此，建议面试者提前准备，对WIFI技术有较为全面和深入的了解。\n\n> 面试问题来源作者：JTMJ\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597757890476187648?sourceSSR=users",
        "title": "数字马力（郑州）社招测试开发岗 一面",
        "content": "面试岗位：测试开发\n\n面试时长：30min\n\n面试感受：面试官人挺好的，虽然不是其他面经提到的会有循序渐进的引导或者如沐春风的感觉，不是聊天式，是问答式，只是是我的回答往往过于简单，所以中间的停顿时间就稍有尴尬。\n\n面试评价：个人表现有点拉垮，不知道能不能等到二面[牛泪]\n\n①首先是经典开场，自我介绍\n\n②然后让讲了两个项目的业务\n\n③然后问了一些Python相关的基础内容（因为我会的是Python）\n\nPython2和Python3中某些方法的区别（range）\n\nPython中的常见数据类型（6种）\n\nPython中的数据结构有没有了解（队列、堆栈、hashmap之类的）\n\n一些数据类型的操作\n\n比如字典的删除键、合并字典\n\n列表的合并、去重之类的\n\n问题是挺基础的，但因为不常用，所以有些回答模棱两可，回答了，又不知道回答的对不对[叹息]\n\n④一个场景题，购物车，设计用例\n\n购物车嘛倒是用过，但是也没关注过它都有哪些功能啊。。。一般都是按需求设计用例的，太宽泛了有点难搞，只能是按自己了解的一点儿东西简短的回答了几点。。。又很拉\n\n⑤工作流程相关的\n\n要上线的但是bug还没处理完咋整；\n\n工作中有没有遇到什么风险\n\n⑥反问\n\n了解到测开有些开发工作（写工具、自动化等）是用java的\n\n了解到我的面试表现亮点是python基础还行（可他们是用java呀，这亮了又好像没亮[掉小珍珠了]），不足是对需求的分析弱（就是设计用例考虑太少啦，这很致命啊[栓Q]）\n\n以上就是这次简短的面试[好无辜]\n\n也难为面试官想问题了。。。\n\n不知道是否有幸能二面，等待\n\n==============================================================================\n\n结果更新：\n\nGG了，没有通过[拜拜]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597789294715060224?sourceSSR=users",
        "title": "2023秋招-大数据开发面试-阿里淘天-一面",
        "content": "1、 是找大数据还是算法？\n\n2、 对大数据领域的了解？\n\n3、 从0-1建设数仓，你怎么做？\n\n4、 数仓建设规范，依据？\n\n5、 没想一块去，他想问建模思想之类的。维度、范式\n\n6、 会哪些技术栈？\n\n7、 Hadoop讲讲吧？\n\n8、 为什么要有Hive，Hive作用？\n\n9、 详细讲讲MR？\n\n10、 数据倾斜发生的位置？\n\n11、 Combiner了解吗？\n\n12、 什么情况下不能用Combiner？\n\n13、 Sum、Count、Count(distinct)哪些能用、哪些不能用Combiner？\n\n14、 理由呢？\n\n15、 MR中几次排序？\n\n16、 开窗函数用过哪些？\n\n17、 row_number()在MR怎么发生的？\n\n18、 Spark和MR都计算超过内存的数据，谁更快？\n\n19、 掌握的还不错。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597788400531390464?sourceSSR=users",
        "title": "2023秋招-大数据开发面试-阿里控股-主管+HR面",
        "content": "1、 高中、大学、研究生专业的选择\n\n2、 实习的收获，相比于自己在校有什么不同？\n\n3、 实习项目整体情况，个人负责内容？\n\n4、 技术提升和沟通、总结能力提升说的太笼统，能展开讲讲吗？\n\n5、 研究方向的问题？\n\n6、 你的和业界的区别？\n\n7、 创新点？\n\n8、 实习项目你觉得7天周期如何？\n\n9、 你自己项目的难点？\n\n10、 那你为什么还会考虑继续秋招？\n\n11、 目前还报了哪些公司，在什么阶段？\n\n12、 阿里这面你还有哪个？\n\n13、 你对前两轮面试做个评价？\n\n14、 对我们有什么建议吗？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597787633867137024?sourceSSR=users",
        "title": "2023秋招-大数据开发面试-阿里控股-二面",
        "content": "1、 对上一轮的面试做一个复盘，哪里回答的好，哪里回答的不好？\n\n2、 对于回答的不好方面，有做调整吗？\n\n3、 在实习或项目中印象最深的是哪个，我们基于它展开聊聊？\n\n4、 哪里认为是印象深刻的？\n\n5、 在技术实现上比较满意的点？\n\n6、 Doris查询返回速度？\n\n7、 Doris数据库优势和你对Doris数据库的理解？\n\n8、 我没有用过Doris数据库，你用过CK吗？\n\n9、 CK的优势？\n\n10、\n场景题，银行客服窗口和用户，存在用户突然很多的情况，怎么处理？而且，用户是具有VIP权限的，优先级比较高先处理的，这是微观层面。对于宏观层面呢，考虑用分布式思想怎么解决呢？展开式随便回答。\n\n11、 对于这种微观层面的问题，考虑成本情况，具体怎么做呢？\n\n12、 那对于你说的操作系统内核优先级调度思想，应该用什么数据结构解决这个问题呢？\n\n13、 堆排序的思想是什么呢？\n\n14、 平常的时候你用堆排序解决什么问题呢？\n\n15、 对算法了解吗？\n\n16、 你对大模型了解多少？\n\n17、 谈谈你对大模型的理解？\n\n18、 GPT的原理你能聊聊吗？\n\n19、 你对现在工作的定位？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597786786491920384?sourceSSR=users",
        "title": "2023秋招-大数据开发面试-阿里控股-一面",
        "content": "1、 你在XX实习，拿到XXoffer了吗？\n\n2、 如果阿里给你offer了，你选择阿里还是XX？\n\n3、 对于工作地点的选择？\n\n4、 笔试你觉得做的怎么样？\n\n5、 实习或生活中啃骨头问题，就是难点，怎么解决的？\n\n6、 在你的班级同学有矛盾任何解决？\n\n7、 你是个外向还是内向？\n\n8、 问大数据相关内容，Hadoop的四大组件？\n\n9、 讲讲MapReduce、和Spark的区别？\n\n10、 了解Shuffle吗？\n\n11、 数据倾斜如何处理？\n\n12、 还有其他情况吗？\n\n13、 Java的String可以继承吗？\n\n14、 Java的抽象类和接口有什么区别和联系？\n\n15、 接口中的方法可以定义？\n\n16、 Python的*args和**kwargs有什么区别？\n\n17、 了解机器学习算法吗？Boosting和Adaboost之类的？\n\n18、 那你平常都会用什么模型？\n\n19、 那你遇到过过拟合现象吗？如何解决？\n\n20、 你有论文或者专利吗？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597751568288555008?sourceSSR=users",
        "title": "3.9美团笔试第4题【java】前缀和滑动窗口加二分优化",
        "content": "\n    \n    import java.io.*;\n    \n    public class Main {\n        public static void main(String[] args) throws Exception {\n            StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n            PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));\n            st.nextToken();\n            int n= (int) st.nval;\n            st.nextToken();\n            int k= (int) st.nval;\n            int[] a=new int[n+1];\n            long[] a2=new long[n+1];\n            long[] a5=new long[n+1];\n            for (int i = 1; i < n + 1; i++) {\n                st.nextToken();\n                a[i]= (int) st.nval;\n                a2[i]=a2[i-1]+cal(a[i],5);\n                a5[i]=a5[i-1]+cal(a[i],2);\n            }\n            long tot2=a2[n],tot5=a5[n];\n            long res=0L;\n            for(int l=0;l<n;l++){ //删除区间必须得存在\n                long zuo2 =tot2-k+a2[l];\n                long zuo5 =tot5-k+a5[l];\n                int findzuo2=findrm(zuo2,a2);\n                int findzuo5=findrm(zuo5,a5);\n                res+=Math.max(Math.min(findzuo2,findzuo5)-l,0);\n            }\n            System.out.println(res);\n        }\n    \n        private static long cal(int shu, int yinzi) {\n            long cnt=0;\n            while(shu!=0&&shu%yinzi==0){\n                cnt++;\n                shu/=yinzi;\n            }\n            return cnt;\n        }\n        private static int findrm(long key, long[] arr) {\n            int l=0,r=arr.length-1;\n            while(l<=r){\n                int mid=l+r>>>1;\n                if(arr[mid]<=key)l=mid+1;\n                else r=mid-1;\n            }\n            return r;\n        }\n    }\n    \n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597748992906215424?sourceSSR=users",
        "title": "北京智源ai芯片",
        "content": "偏硬件，从Python高级语言到二进制文件编译的一个系统开发的一个公司。  \n介绍项目和自己在项目中遇到的问题，怎么解决的。  \n可以不是个人解决的。比如编码问题，pytorch的框架问题。我确实没遇到过特别困难的问题，就说只遇到版本不匹配的问题。  \n问了很多内存，CPU，GPU数据怎么流通和处理的问题。相当于复习了一下计组。  \n考了一道矩阵最长递增路径，用的dfs，感觉没做错。  \n面试官好像想让我用bfs。  \n然后分析了一下dfs和bfs的局部性和并行性。  \n我说bfs都更优，好像说错了。  \n最后提问环节，问了一下ai芯片和一般芯片的区别。  \n  \n总体来说面试氛围很好，自己还是太菜了。项目都没介绍完。![](https://uploadfiles.nowcoder.com/message_images/20240314/195230267_1710386459438/discuss_1710386458161.jpeg)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597745427051520000?sourceSSR=users",
        "title": "春招处女面-京东",
        "content": "1、自我介绍\n\n2、实习项目\n\n3、实习项目分库分表怎么做的？\n\n4、分布式主键用的是什么？雪花ID是怎么样的，有什么问题？\n\n5、实习业务具体是干嘛\n\n6、你们这个业务为啥不用es，如果用es你准备怎么做？（不会es）\n\n7、个人项目\n\n8、redis分布式锁实现，你们项目优化了锁粒度，怎么做的。\n\n9、限流算法，时间片和令牌桶的区别\n\n10、sentinel集群怎么部署的，谁来计数（给我问懵了，我问他sentinel还要做集群吗？给我两整笑场了）\n\n11、SpringSchedule任务如果执行到下一时间片，会怎么样？（不清楚）\n\n12、消息队列解耦的业务逻辑\n\n13、RocketMQ延时消息怎么实现的\n\n14、线程池参数，拒绝策略有哪些，什么时候生效。\n\n15、HashMap数据结构，扩容机制\n\n16、JVM方法区作用\n\n八股文全忘了，不过好在没有啥八股文。不过问的挺细的，问es和sentinel给我干破防了。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597712842439127040?sourceSSR=users",
        "title": "3.9美团笔试【java】第五题倒序并查集离散化",
        "content": "\n    \n    import java.util.*;\n    import java.io.*;\n    \n    public class Main {\n        public static class Pair{\n            public int op;\n            public int u;\n            public int v;\n            public Pair(int s,int l){\n                u=s<l?s:l;\n                v=u==s?l:s;\n            }\n            public Pair(int op, int s, int l) {\n                this(s,l);\n                this.op = op;\n            }\n    \n            @Override\n            public boolean equals(Object o) {\n                if (this == o) return true;\n                if (o == null || getClass() != o.getClass()) return false;\n                Pair pair = (Pair) o;\n                return op == pair.op && u == pair.u && v == pair.v;\n            }\n    \n            @Override\n            public int hashCode() {\n                return Objects.hash(op, u, v);\n            }\n        }\n        static HashSet<Pair> fr=new HashSet<>();\n        static ArrayList<Pair> qs=new ArrayList<>(1<<20);\n        static ArrayList<String> ans=new ArrayList<>(1<<20);\n        static HashMap<Integer,Integer> map_ren=new HashMap<>();\n        static int[] f=new int[200010];\n        static int[] size=new int[200010];\n        static int[] help=new int[200010];\n        public static  void init(){\n            for (int i = 0; i < 200010; i++) {\n                f[i]=i;\n                size[i]=1;\n            }\n        }\n        public static void main(String[] args) throws Exception {\n            init();\n            StreamTokenizer st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n            PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));\n            st.nextToken();\n            int n = (int) st.nval;\n            st.nextToken();\n            int m = (int) st.nval;\n            st.nextToken();\n            int q = (int) st.nval;\n            int id=1;\n            while(m--!=0){\n                st.nextToken();\n                int u = (int) st.nval;\n                if(map_ren.get(u)==null)map_ren.put(u,id++);\n                st.nextToken();\n                int v = (int) st.nval;\n                if(map_ren.get(v)==null)map_ren.put(v,id++);\n                Integer mu=map_ren.get(u);\n                Integer mv=map_ren.get(v);\n                fr.add(new Pair(mu,mv));\n            }\n            while(q--!=0){\n                st.nextToken();\n                int op = (int) st.nval;\n                st.nextToken();\n                int u = (int) st.nval;\n                st.nextToken();\n                int v = (int) st.nval;\n                if(map_ren.get(u)==null)map_ren.put(u,id++);\n                if(map_ren.get(v)==null)map_ren.put(v,id++);\n                Integer mu=map_ren.get(u);\n                Integer mv=map_ren.get(v);\n                f[mu]=mu;\n                f[mv]=mv;\n                if(op==1){\n                        if(fr.remove(new Pair(mu,mv)))\n                            qs.add(new Pair(op,mu,mv));\n                } else{\n                    qs.add(new Pair(op,mu,mv));\n                }\n            }\n            for (Pair pair : fr) {\n                union(pair);\n            }\n            for (int i = qs.size() - 1; i >= 0; i--) {\n                Pair pair=qs.get(i);\n                if(pair.op==2){\n                    if(find(pair.u)!=find(pair.v))\n                        ans.add(\"No\");\n                    else\n                        ans.add(\"Yes\");\n                }else{\n                    union(pair);\n                }\n            }\n            for (int i = ans.size() - 1; i >= 0; i--) {\n                pw.println(ans.get(i));\n            }\n            pw.close();\n        }\n    \n        private static void union(Pair pair) {\n            int u= pair.u,v= pair.v;\n            int fu=find(u),fv=find(v);\n            if(fu!=fv){\n                int sfu=size[fu];\n                int sfv=size[fv];\n                if(sfu<=sfv){\n                    f[fu]=fv;\n                    size[fv]=sfv+sfu;\n                } else{\n                    f[fv]=fu;\n                    size[fu]=sfv+sfu;\n                }\n            }\n        }\n    \n        private static int find(int u) {\n            int top=0;\n            while(f[u]!=u){\n                help[top++]=u;\n                u=f[u];\n            }\n            while(top!=0){\n                f[help[--top]]=u;\n            }\n            return u;\n        }\n    }\n    \n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597708664237006848?sourceSSR=users",
        "title": "2024.3.13 携程第一批笔试",
        "content": "图片转自小红书：[https://www.xiaohongshu.com/explore/65f1c79c000000001203e277](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.xiaohongshu.com%2Fexplore%2F65f1c79c000000001203e277)\n\n# 第一题\n\n![](https://uploadfiles.nowcoder.com/images/20240314/235802090_1710376584773/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n100%\n\n# 第二题\n\n![](https://uploadfiles.nowcoder.com/images/20240314/235802090_1710376706429/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n33.33%\n\n# 第三题\n\n![](https://uploadfiles.nowcoder.com/images/20240314/235802090_1710376761488/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n0%\n\n# 第四题\n\n![](https://uploadfiles.nowcoder.com/images/20240314/235802090_1710376817220/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n![](https://uploadfiles.nowcoder.com/images/20240314/235802090_1710376836796/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n0%\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597706129619132416?sourceSSR=users",
        "title": "字节跳动后端一面解析：疯狂拷打计算机基础",
        "content": "嗨～我是可拟雀，一个后端开发工程师，毕业于某985大学，目前供职于bat某大厂核心部门后端。每天分享最新面经答案，希望在大环境不好的当下能帮到你，让你多积累面试经验。免费分享个人学习2个月速通大厂路线和面经解析合集，需要请私信\n\n1.问项目\n\n2.Redis数据类型相关：sortedSet的实现；五种数据类型？\n\n答：String（字符串）：这是Redis最基本的数据类型。你可以将String视为与Memcached相似的类型，每个key对应一个value。String类型是二进制安全的，可以存储字符串、整数或浮点数，其值的最大存储限制为512MB。String类型支持的操作包括设置值、获取值、增减操作等。\n\nHash（哈希）：Redis的Hash是一个键值对集合，其中每个键都对应一个值。Hash实际上是一个string类型的field和value的映射表，因此它特别适合用于存储对象。\n\nList（列表）：Redis的List是简单的字符串列表，它按照插入顺序进行排序。你可以在其头部或尾部添加新的元素。\n\n除了上述三种基本数据类型外，Redis还支持一些更高级的数据类型：\n\nSet（集合）：Set是string类型元素的集合，并且集合中的元素是唯一的，没有重复值。\n\nZset（Sorted\nSet：有序集合）：这是string类型元素的集合，并且每个元素都会关联一个double类型的分数。Redis正是通过分数来为集合中的元素进行从小到大的排序。Zset的成员是唯一的，但分数可以重复。\n\n此外，Redis还有一些特殊的数据类型或功能：\n\nBitmaps（位图）：这是一种位数组，其中每个二进制位代表一个布尔值。\n\nHyperLogLog：这是一种基数算法，用于估计一个集合中不同元素的数量。\n\nGeospatial（地理位置）：这是一种地理位置数据类型，用于存储地理位置信息和坐标。\n\nStreams（流）：这是一种持久化的消息队列，用于存储和处理消息。\n\nModules（模块）：Redis支持动态加载模块，通过加载模块可以扩展Redis的功能，如添加新的数据类型、命令等。\n\n关于 Sorted Set（有序集合），它实际上是 String 类型元素的集合，并且每个元素都会关联一个 Double 类型的分数。Redis\n正是通过分数来为集合中的元素从小到大进行从小到大的排序。Sorted Set 的成员是唯一的，但分数(score)可以重复。\n\nSorted Set 的底层实现主要是利用了两种数据结构：跳表(Skip\nList)和哈希表(Hash)。其中哈希表是为了快速定位某个元素的分数，而跳表则是为了快速获取排序后的元素列表。\n\n跳表(Skip List)：\n\n跳表是一种可以随机化的数据结构，实质就是一种可以进行二分查找的有序链表。在链表的基础上，增加了多级索引，以提高查找的速度。跳表在 Redis 中主要用于实现\nSorted Set 数据类型，以支持快速的插入、删除和查找操作。\n\n跳表的主要特点包括：\n\n搜索效率高：跳表在查找、插入和删除操作上的时间复杂度都是 O(log n)，与平衡树相当。\n\n实现简单：跳表相对于平衡树来说，实现起来要简单得多，而且其性能也不会因为数据的变化而发生退化。\n\n空间复杂度低：相对于其他平衡树，跳表的空间复杂度较低。\n\n在 Redis 中，Sorted Set\n的实现结合了跳表和哈希表，其中哈希表用于存储每个元素和对应分数的映射关系，而跳表则用于存储元素的排序信息。这种组合方式使得 Redis 的 Sorted\nSet 在保证数据有序性的同时，也提供了高效的查找、插入和删除操作。\n\n3.HashMap为什么不安全，如何改进，以及concurrentHashMap？\n\n答：HashMap在Java中是一个非线程安全的哈希表实现。它不安全的主要原因在于其内部状态在并发修改时可能会变得不一致。具体来说，当多个线程同时对HashMap进行读写操作时，可能会出现以下问题：\n\n数据不一致：在HashMap的扩容或重新哈希过程中，如果多个线程同时修改HashMap的状态，可能会导致元素丢失或数据错位。\n\n死循环：在HashMap的某些实现版本中（例如JDK\n1.7及之前），如果并发修改导致了HashMap的结构发生变化（如扩容），那么在迭代HashMap时可能会出现死循环。\n\n为了改进HashMap的线程安全性，可以采取以下措施：\n\n外部同步：通过在访问HashMap的代码块外部添加同步锁，可以确保同一时间只有一个线程能够修改HashMap。这种方法简单但效率较低，因为它会阻塞其他线程的访问，即使它们只是进行读操作。\n\nMap<K, V> map = Collections.synchronizedMap(new HashMap<K, V>());\n\n// 或者使用synchronized块\n\nsynchronized(map) {\n\n// 访问map的代码\n\n}\n\n使用线程安全的替代方案：Java提供了Hashtable和Collections.synchronizedMap等线程安全的Map实现，但这些实现通常性能较低，因为它们在每次访问时都需要获取锁。\n\n更好的解决方案是使用ConcurrentHashMap，它是Java并发包（java.util.concurrent）中的一个线程安全的哈希表实现。ConcurrentHashMap通过分段锁（在JDK\n1.7及之前）或CAS（Compare-and-Swap）操作和同步控制（在JDK\n1.8及之后）来实现高效的并发读写。它允许多个线程同时读写ConcurrentHashMap的不同部分，从而大大提高了并发性能。\n\nConcurrentHashMap的主要改进点包括：\n\n分段锁（在JDK\n1.7及之前）：将HashMap内部划分为多个段（Segment），每个段都有自己的锁。这样，当多个线程访问不同的段时，它们可以并行执行，而不会产生锁竞争。\n\nCAS操作和同步控制（在JDK\n1.8及之后）：利用无锁算法和CAS操作来减少锁的使用，同时保持了线程安全性。在扩容或重新哈希时，采用了一种更加复杂的算法来确保并发修改的正确性。\n\n4.TCP报文的结构?\n\n答：\n\nTCP报文主要由两部分组成：TCP报头和TCP数据。TCP报文是TCP传输的数据单元。以下是TCP报文结构的一些关键组件：\n\n源端口（Source Port）：16 bits，标识数据发送端的应用层程序。源端口和IP层解析出来的IP地址标识报文的发送地，同时也确定了报文的返回地址。\n\n目的端口（Destination Port）：16\nbits，标识数据接收方的应用层程序。这个对端端口号表明了该数据报是发送给接收方计算机的具体的一个应用程序。\n\n序列号（Sequence Number）：32\nbits，标识数据发送方所发出数据的编号。在TCP传送的流中，每一个字节都有一个序号，这个序号确保了TCP传输的有序性。例如，一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。\n\n确认序号（ACK）：指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误地收到。确认号只有当ACK标志为1时才有效。\n\n报头长度（Header Length）：4\nbits，标识TCP报头的长度，单位是4字节。TCP报文的固定长度与IP报文一致，都是20字节，但TCP的报头长度范围为20~60字节。\n\n此外，TCP报文还可能包含其他字段，如窗口大小（一个16比特位的字段）等，这些字段有助于TCP实现其可靠传输和流量控制的功能。\n\n总的来说，TCP报文结构的设计使得TCP协议能够可靠地、有序地传输数据，同时支持各种网络环境和应用需求。\n\n5.输入URL会发生什么？\n\n答：从后端开发工程师的角度来看，有以下的过程：\n\nDNS解析：\n\n首先，浏览器会向DNS服务器发送请求，将输入的URL解析为对应的IP地址。这是因为网络中的设备通常是通过IP地址进行通信的，而URL中的域名则是一种更便于人类记忆和使用的形式。\n\n建立TCP连接：\n\n一旦获得了IP地址，浏览器就会尝试与服务器建立TCP连接。TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议。通过三次握手过程，浏览器和服务器之间建立起一个可靠的通信通道。\n\n发送HTTP请求：\n\n在TCP连接建立后，浏览器会构造一个HTTP请求报文，并通过TCP连接发送给服务器。这个HTTP请求报文包含了请求的方法（如GET、POST等）、请求的URL路径、请求头（包含了各种元数据，如浏览器类型、用户代理等）以及请求体（对于POST请求来说）。\n\n服务器接收并处理请求：\n\n服务器在接收到HTTP请求后，会由其后端应用（通常是Web服务器软件，如Nginx、Apache等）来处理这个请求。后端应用会根据请求的URL路径来查找对应的处理程序或资源。这通常涉及到路由处理，即根据URL的不同部分来调用不同的代码或模块。\n\n执行后端逻辑：\n\n一旦找到了对应的处理程序，后端应用就会执行相应的逻辑代码。这可能包括从数据库中查询数据、执行计算任务、调用其他服务或API等。这些操作可能会根据请求的具体内容而有所不同。\n\n构造HTTP响应：\n\n后端应用在处理完请求后，会构造一个HTTP响应报文。这个响应报文包含了状态码（表示请求的处理结果，如200表示成功，404表示未找到等）、响应头（包含了各种元数据，如内容类型、缓存控制等）以及响应体（包含了实际返回给浏览器的数据，如HTML页面、JSON数据等）。\n\n发送HTTP响应并关闭连接：\n\n后端应用通过TCP连接将HTTP响应报文发送回浏览器。发送完成后，TCP连接可能会被关闭（对于短连接来说），或者保持打开状态以便后续的请求（对于长连接或HTTP/2的流连接来说）。\n\n浏览器解析并渲染响应：\n\n浏览器在接收到HTTP响应后，会解析响应报文中的HTML、CSS和JavaScript等内容，并根据这些内容来渲染页面。如果响应中包含了图片、视频等其他资源，浏览器还会发送额外的HTTP请求来获取这些资源。\n\n在整个过程中，后端开发工程师主要负责编写和维护后端应用代码，确保它能够正确地处理各种HTTP请求并返回合适的响应。同时，他们还需要关注性能优化、安全性、可扩展性等方面的问题，以确保后端系统的稳定性和高效性。\n\n6.TCP为什么要三次握手？\n\n答：\n\n确认通信双方的可达性：客户端和服务器可以通过握手过程验证对方的IP地址和端口是否可达，从而确保双方之间的网络连接正常。\n\n确认对方的接收能力：通过握手过程，客户端和服务器可以交换彼此的初始序列号。这样，每个数据包都可以按序发送和接收。这种确认和同步机制保证了数据的可靠传输。\n\n避免过期的连接请求：在网络状况复杂或较差的情况下，发送方可能会连续发送多次建立连接的请求。三次握手的过程可以防止过期的连接请求被错误地接受。只有在握手过程中完成了三次确认，才能建立有效的连接。\n\n具体来说，三次握手的过程如下：\n\nSYN：客户端发送一个SYN包到服务器，并进入SYN_SEND状态，等待服务器确认。\n\nSYN+ACK：服务器收到SYN包，必须确认客户的SYN（ACK=客户序列号+1），同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入SYN_RECV状态。\n\nACK：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ACK=服务器序列号+1），此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。\n\n完成三次握手后，客户端与服务器开始传送数据。这样，TCP就建立了一个可靠的连接，确保了数据的可靠传输，避免了不必要的数据丢失和错误。\n\n7.操作系统缺页中断，页面置换算法有哪些？\n\n答：操作系统缺页中断：\n\n缺页中断是一种特殊的中断，当程序试图访问已映射在虚拟地址空间中，但是并未加载到物理内存中的一个分页时，由硬件产生的中断。简单来说，当要访问的页面不在主存（物理内存）中，操作系统需要将其调入主存后再进行访问，这一过程就称为缺页中断。\n\n页面置换算法：\n\n在地址映射过程中，若在页面中发现所要访问的页面不在内存中，则会产生缺页中断。当发生缺页中断时，如果操作系统内存中没有空闲页面，则操作系统必须在内存中选择一个页面将其移出内存，以便为即将调入的页面让出空间。用来选择淘汰哪一页的规则就叫做页面置换算法。\n\n页面置换算法有多种，其中一些常见的包括：\n\n最佳置换算法（OPT）：\n\n原理：每次选择淘汰的页面将是以后不再使用，或者在最长时间内不再被访问的页面。\n\n问题：实际上，只有在进程的执行过程中才可以知道接下来会访问的页面，操作系统对接下来要访问的页面是不能进行预判的，因此该算法是不能被实现的。但最佳页面置换算法可以用于对可实现算法的性能进行衡量比较。\n\n先进先出置换算法（FIFO）：\n\n原理：每次选择淘汰的页面是最早进入内存的页面。\n\n实现：把调入内存的页面按照先后顺序放入队列，当需要进行换出页面时，将队头页面换出。\n\n除了上述两种算法外，还有最近最少使用（LRU）置换算法、时钟（CLOCK）置换算法等多种算法，它们各自有不同的实现原理和应用场景。选择哪种页面置换算法取决于具体的应用需求和系统环境。\n\n8.手撕二叉搜索树的删除。较为简单的题目。\n\n总的来说，面试很注重基础知识的考察。\n\n[原文传送门](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fshare%2Fjump%2F566343146417252383)\n\n[免费专栏地址，每日更新，欢迎订阅](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fmanager%2FcolumnDetail%2FMJ4LAm)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597564549524484096?sourceSSR=users",
        "title": "WXG后台开发实习-一二三面凉经",
        "content": "# 一面 3.7\n\n### 做题两道**(做题+讲思路 共 50min 整)**\n\n  1. 从下到上层序遍历二叉树；ac了\n  2. 力扣378，有序数组第k小；没写出来，讲了讲思路，面试官说思路也错了，尬。❌\n\n### **项目(40min)**\n\n#### **SaaS短链接项目（20min）**\n\n  1. 介绍项目的思路和功能\n  2. 我看项目时间并不长？怎么回事呢？（我只实现了核心逻辑）\n  3. 我看你用到了分库分表，讲讲你的数据库表怎么设计的？怎么做分片的？（整整扯了4min）\n  4. 用布隆过滤器的目的是什么？布隆过滤器在你的代码里具体是怎么实现的？\n  5. 什么是恶意请求？你的项目怎么处理恶意请求的？（其实就缓存三兄弟）\n  6. 你用到缓存，那你是怎么控制数据库暂存到缓存的时机呢？\n  7. 缓存预热在你的项目里具体怎么做的？\n  8. 分布式锁在项目里是怎么实现？你知道内部实现细节吗？（扯了一下Redisson看门狗、重试等等）\n  9. “分布式锁保证同时只有一个线程访问数据库重建缓存”，那其他线程呢？直接sleep吗？有没有考虑更安全更高效的方式？（❌，我只会sleep）\n\n#### **网页音视频项目（20min）**\n\n  1. 介绍项目思路与过程\n  2. 我看你这项目时间也不长，为什么呢？（比赛项目，官方限时）\n  3. 怎么进行服务拆分的？依据呢？\n  4. 你们的视频播放怎么做的？（直接对象存储）\n  5. 点赞功能怎么设计的？（整整扯了3min）\n  6. Redis里保存有哪些数据？底层数据结构了解吗？（八股吟唱）\n  7. 写数据库和写缓存是怎么保证一致性的？MQ在这里面起到了怎么作用？\n  8. 点赞和关注的表结构怎么设计的？索引怎么设计的？\n  9. 讲讲Elasticsearch的原理和查询流程？\n  10. 你的项目怎么应对并发注册的？分布式锁一定能保证没有重复注册吗？有兜底策略吗？（唯一索引兜底）\n  11. 你了解Redis处理请求的过程吗？（第一时间想到IO多路复用，面试官说对对他就是想问这个，八股吟唱）\n  12. 我看你好像很了解Redis，那你讲讲Redis的主从集群呢？（ 八股吟唱：RDB、全量同步、增量同步....）\n  13. 那你再讲讲Redis的分片集群？（八股吟唱：一致性哈希、虚拟节点、槽位...）\n  14. cluster模式下最多多少个分片？\n  15. 你刚刚讲的只解决了多key问题，那假设一个key非常热放到哪个实例都会被打垮怎么办？\n\n### **反问**\n\n  1. 技术栈是C++吗？Java转快不快？\n  2. 有转正机会吗？\n  3. 具体什么组？\n  4. 有几轮面试？（面试官说至少三轮，寄了）\n\n### **总结**\n\n实习快2个月没碰八股文和算法了，想着tx也不看面评，就当积累经验了。没想到面试官人挺好，全程项目以及引申八股文，而且一直在和我讨论而不是质问，我甚至感觉他问得太简单了，不符合wxg的一贯作风。总之是我这么多次面试里面试体验最好的一次，其次是快手。\n\n# 二面 3.11\n\n### 做题三道（做题 + 讲解+ 设计题拷打 共 75min）\n\n  1. A = 1， B = 2，....，AA = 27，以此类推，实现一个将字符串转换成数字的方法，**需要注意输入异常处理和栈溢出处理** 。（其实就是26进制转换，但是实际写的时候没注意异常处理，从来没碰到过算法题需要处理异常...）\n  2. 有两棵二叉搜索树，找到最大重叠部分的节点个数，1）重叠部分节点结构需要相同 2）重叠部分对应节点值需要相同 3）最大重叠部分有多个，输出其中一个即可。（开始没思路，后面想到二叉搜索树特点的时候五分钟就写出来了）\n  3. 系统设计题，大意如下 \n  4. 员工可以付费发送特殊消息，即发送特殊消息前需要扣除企业余额，现在需要设计一个商城系统，用于调用支付平台提供的两个接口 checkBalance() 查询企业账户余额以及 pay(orderid, price)支付金额，有如下两个问题 1）支付金额接口耗时很久，用户需要很长时间才能发送消息成功，体验不好 2）支付平台很不稳定，会不定时宕机或者拒绝服务或者小波动，宕机时有可能持续几个小时；请说明你的设计思路，如果可以的话可以写出核心代码（这个部分拷打时间最长，接近15分钟，面试官一直提出新的问题以及否定我的思路，不过我最后也提出来很多不错的方案见招拆招，最后面试官好像还挺满意）\n\n### 八股文（共 25 min）\n\n  1. 出勤几天？什么时候到岗？...\n  2. 什么专业课学得最差？（我说编译原理，他就过了没细问😂）\n  3. LRUcache的内部数据结构\n  4. HTTPS了解吗，CA证书是怎么获得的？一定安全吗？能有中间人吗？...（问得巨细，我最后直接说不了解）\n  5. 又一道场景设计题：现在需要实现想B站那样多端同步最近观看视频以及空降到具体的分秒，假设有1000w人，需要精确到1s，你的系统只能承载500w的QPS，怎么设计？（中间我说假设是同一台设备可以用浏览器缓存，面试官直接打断我让我不要绕开问题...）\n  6. Redis高可用如何保证？持久化机制？\n  7. 了解分布式组件吗？了解Raft、paxos吗？\n  8. 了解leveldb吗？\n  9. MySQL索引\n  10. 网络框架用过哪些？RPC用过哪些？\n  11. 协程、线程、进程\n  12. 是否有过实际项目开发经验，实习项目除外？\n\n### 反问\n\n答得太差，不敢反问\n\n### 总结\n\n很压力，面试官气场强大甚至有些咄咄逼人，中间快崩溃了，答得一塌糊涂，不过面完几个小时就收到三面邀请了，腾讯这是有多缺人啊，你是真饿了，我这样的fw都敢让我进三面。\n\n# 三面 3.12\n\n### 做题三道（90min，其实60min就写完了，但是面试官好像在开会，让我等）\n\n  1. 某个直播平台计划开发一个高热直播间监控系统，具体需求是： \n  2. 可以管理所有直播，新开播就要加入到系统里面，直播结束就要从系统去掉 \n  3. 直播间热度是会不断变化（例如不断有人加入、点赞、送礼物、退出等因素），热度出现变化时往高热系统更新这个直播当前热度值（高频,时间复杂度希望尽量低） \n  4. 运营人员日常巡查希望可以在任何时刻都知道当前热度最高的100个直播间（低频） \n  5. 30万个员工，其工卡号码分别是1~30万，抽10万个员工发奖品。有一个随机数生成函数rand()能够生成(0~65535]的整数，请写一个公平的抽奖程序，输出这10万个员工的工卡号码。\n  6. 给你一个正整数k和一个有三个元素的数组，求这在 k 层的满二叉搜索树（1 - 2^k）中这三个元素的最小公共祖先\n\n### 八股文（10 min）\n\n  1. HTTPS（这次流程无比，对答如流）\n  2. 分库分表\n  3. ES原理\n  4. Kafka架构\n\n### 总结\n\n面试官很忙，前面一直文字交流，还让我干等了半个小时。看到题目的时候心里咯噔一下，这个面经看过一模一样的，但是我当时没有仔细研究，最后第二道随机概率题没做出来。八股文环节已经很晚了，面试官好像不想问太多，随便问了几个问题就匆匆结束了，第二天秒挂。哎，收收心准备海投暑期了。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597562781130366976?sourceSSR=users",
        "title": "小丑面试记录：玄武云 & 海康威视 & 三维家",
        "content": "##### 玄武云（88min OC，为神马会过捏[疑惑][疑惑][疑惑]）\n\n1\\. 自我介绍... 没想好，沉默一分钟... 尴尬 😅😅😅\n\n2\\. 实习做了哪些性能优化 -> 组件、路由、图片懒加载，预加载，WebP 图片格式 -> 解决兼容问题，Vue3 重构 Vue2\n\n3\\. 实习封装了哪些组件 -> 沉默 尴尬\n\n4\\. TypeScript Type & Interface\n\n5\\. Lighthouse 的指标有哪些 -> 答的很烂沉默 尴尬\n\n6\\. React18 -> 沉默 尴尬\n\n7\\. 强缓存 & 协商缓存\n\n8\\. Promise -> 组合拳 -> Promise.all 为什么是并行的 -> 不到沉默\n\n9\\. 宏任务 & 微任务 -> 事件循环\n\n10\\. Vue2 & Vue3 的最大区别 -> 没说完就结束了\n\n##### 海康威视（11min 秒挂，俺针铁绯雾[掉小珍珠了][掉小珍珠了][掉小珍珠了]）\n\n1\\. 做过哪些完整页面\n\n2\\. 前后端沟通联调\n\n3\\. WebPack 的构建流程\n\n4\\. 左右固定，中间自适应\n\n5\\. Vue 自定义组件\n\n6\\. 清除浮动\n\n7\\. require & import\n\n8\\. 查询参数 & 路由参数\n\n##### 三维家（61min OC，二进宫谁懂[老人手机][老人手机][老人手机]）\n\n1\\. 自我介绍（讲的太啰嗦）\n\n2\\. 项目杀手锏（讲了至少 30min 下次至少这么讲，谨遵@新宿站不停(522964838) [爱慕] [爱慕] [爱慕]指示，现在讲的很烂 [牛泪]\n[牛泪] [牛泪]）\n\n3\\. Webpack（往底层原理挖）\n\n4\\. Tree-shaking\n\n5\\. Vue2 & Vue3\n\n6\\. TS vs JS\n\n7\\. 水平垂直居中\n\n8\\. 快排\n\n9\\. 技术栈 & 有没有做前端埋点监控 SDK、RN 跨端的业务 & 部门业务 & 公司开源 & 开源 & 对我的建议\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597559377226219520?sourceSSR=users",
        "title": "腾讯wxg实习一面（80min拷打，已过）",
        "content": "bg：3.13 今天两场面试，人已经被问麻了。。。\n\n开场白：先做几道题吧\n\n一道哈希表，一道股票买卖时机。其实都不算难，但我算法太菜了，也没刷几道题，第二道就没写出来。。。然后讲了讲思路\n\n### 拷打环节\n\n  * 问我虚拟滚动是怎么实现的？答了定高的，又问我如果不定高呢？讲了几种方法，又深入问了一些细节问题和对应的优化方案\n  * 问我项目中lru缓存具体怎么做的？我讲了我的方案，然后他说我这个还能优化，我。。。。他直接给我提了一些优化点（面试官水平确实高\n  * 描述一下双token的流程，具体怎么去做的？如何验证token的有效性？jwt的验证机制描述一下？再讲讲cookie+session机制是怎么实现的？两者怎么协作的？服务段是怎样通知客户端要写那些字段的？ 一开始没听懂什么意思，其实就是问set-cookie的字段内容有哪些？\n\n然后面试官说接下来问你点基础的\n\n  * 我看你熟悉vue，也知道xss，那你知道vue里面是怎么防止xss的吗？（好好好，这样子基础是吧）答了转义敏感字符，问什么时候转义的？这么多变量vue怎么知道要转义哪些呢？汗流浃背了。。。提示了虚拟dom。接着问xss是怎么发生的？dom型、存储型\n  * proxy比object.defineProperty()好在娜？答了常见八股的那一套，又问除了这些还有什么呢？（问懵了。。。然后转移问这个问题的子问题\n  * 问vue3的深响应和浅响应，再问vue2是如何实现深响应的？答了reactive函数的具体实现，深层对象懒代理等等，和vue2创建响应式数据的过程\n  * vue3的effect()是怎么做到的？这问题有点抽象。。不知道在问什么，然后面试官补充想看我熟悉vue熟悉到多少？好吧，那就把整个响应式系统的原理详细讲了下\n  * 问我除了用框架之外，用原生js开发过什么吗？我说我这个项目就是原生js/ts写的，面试官挺惊讶，又确定了一遍\n  * 问我vite和webpack哪个用的多，答vite。问我vite为什么快？依赖预构建做了哪些事情？esbuild是怎么把非esm模块转换为esm的？\n  * 用我用过esbuild吗？答只玩过一两次，问esbuild为什么打包快？答了golong，机器码，多核cpu并行处理，共享ast，接着又问esbuild有哪些缺点吗？\n  * 问为什么js是单线程了？讲讲你的理解？于时先把八股背一遍，然后又问我除了这些呢？（啊？）又答了竞态问题，面试官说这个不是问题，现在也能解决。还有其他原因吗？然后答了状态一致性难以保证（看来八股还是背的不行\n  * 浏览器多个tab，其中一个卡死了会影响其他的tab吗？浏览器有哪些进程？\n  * 问了babel关于polyfill的配置，按需pollyfill\n  * 后面还有一些问题，具体记不清了\n\n### 反问\n\n  * 技术栈？\n  * 工作日的作息时刻表是怎么样的？\n  * 给我一些学习的建议吧\n\n后续过了20分钟官网状态更新为复试，也不知道这到底有几面。（害 其实是不抱啥希望能进鹅的[牛泪]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597554463120891904?sourceSSR=users",
        "title": "苏州达梦一面",
        "content": "1h30min  \n  \n*自我介绍  \n*手撕hash表，要求实现增删查，自动扩缩  \n*std::memory_order  \n*无锁队列  \n*std::compare_exchange_weak  \n*线程执行有顺序吗？  \n*std::conditional_variable  \n*字典树怎么删除  \n*并发字典树  \n*介绍了15445这个项目  \n*innodb B+树锁  \n*LRU、LRU-k，冷热区间  \n*redo、undo  \n*大事务undo  \n*事务有哪几个隔离级别？innodb在哪个级别？  \n*继承使用STL容器好吗  \n  \n之前嫌八股太多了，现在又觉得问题太硬了。人麻了[牛泪]  \n  \n搜不到岗位了。问HR已凉[牛泪]  \n双非本太难了[牛泪]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597552687844028416?sourceSSR=users",
        "title": "运维实习生 - 面经 - 游族网络",
        "content": "**2024.3.5 Boss投递**\n\n**2024.3.6 回复**\n\n**2024.3.8过初筛**\n\n**2024.3.13面试**\n\n确认候选人姓名\n\n自我介绍\n\n我看你更多是做数据分析的？\n\n你是实习的时候才接触Linux？\n\n软件工程不应该是往开发方面发展的吗？\n\n你最近有做运维方面的工作吗，技术之类的\n\nLinux这块没有继续做了是吧\n\nLinux这块，MySQL有了解过吗\n\n监控的话有接触过吗？一些工具之类的\n\n主流的监控工具接触过吗，都有那几款\n\n你成绩在班里和年级怎么样\n\nPython怎么样？\n\nk8s，docker有了解过吗？有自己使用过吗\n\n实习时服务器有多少台\n\n如何看当时服务器的问题\n\n当时就实习了一个月么，为什么没有继续实习呢\n\n当时没有请假吗，一般这种情况是可以请假的\n\n你们现在大三就是已经可以几乎不怎么呆在学校了是吧\n\n**反问环节**\n\n主要工作是游戏相关服务器搭建，部署，监控，问题处理排查，架构之类的，写一些小工具，做一些开发，写一些自动化脚本\n\n加班情况，正常现在加班情况不是特别多\n\n你Shell脚本有写过吗\n\n评估通过的话会有下一轮面试\n\n感觉他这个Boss上面的JD写的挺好的，放个图，以后万一自己就真干运维了，还得按着这上面的要求学习了，唉😔\n\n![](https://uploadfiles.nowcoder.com/files/20240313/100957974_1710339658726/1710339627714-f7c32fa5-0e5e-41c3-8eb1-faab52078b7d.png)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597547013965737984?sourceSSR=users",
        "title": "美团 校招 面经/时间线",
        "content": "7.31开\n\n8.30内推投 java后端-到店餐饮saas\n\n9.2笔试\n\n##### 9.8 一面\n\n1h\n\n  * Tcp udp 差别（面试官：回答要有层次感，差别、可靠传输、应用场景）\n  * 三次握手可以携带数据吗\n  * 并发和并行的区别（面试官：答的不对，本质区别在有没有资源竞争）\n  * java语言特点\n  * 面向过程和面向对象的区别、应用场景的区别\n  * java支持哪些数据结构\n  * arraylist源码看过吗 有哪些核心属性和方法\n  * hashmap什么时候用红黑树\n  * 深拷贝 浅拷贝\n  * 序列化的原理，序列化协议的核心要素有哪些\n  * 线程有哪些状态\n  * 终止线程有哪些方式\n  * jvm的内存结构\n  * 可达性分析\n  * 类加载器\n  * 如何计算mysql一张表能存多少数据，最大值受什么限制\n  * 实习（价值、挑战）\n\n反问\n\n##### 9.14 二面\n\n1h\n\n  * 挑一个项目讲 怎么发现和解决难题 这个技术是业界最佳实践吗 有哪些可以优化的地方\n  * 举一个幂等性的场景 怎么解决（口胡了）\n  * 消费的可靠性怎么保证\n  * 为什么要用死信队列\n  * 近期学了什么新技术 它的应用场景 优缺点（说docker是跨操作系统被面试官纠正了 是跨平台 底层用的是linux）\n  * 操作系统对内存的分配和回收 分页和分段（忘的差不多了）\n  * 栈和队列\n  * 两个栈模拟队列 扩展：容量m和n的两个栈模拟出的队列容量是多少（没推出来 尴尬）\n  * 手撕：求二叉树k层上的节点个数 扩展：不是树是森林怎么办\n  * 反馈：优化意识和动手能力挺好，广度还行深度差一点，建议找一两个感兴趣的技术栈深扎\n\n灾难级表现 感谢宽容\n\n##### 9.19 hr面\n\n20min\n\n  * 实习经历、项目经历\n  * 前面的面试有什么答的不好的需要补充的地方\n  * 自身亮点\n  * 关注什么新技术 什么渠道\n  * 实习有符合你的期待吗 有什么差距\n  * 跟mentor怎么沟通 有哪些帮助\n  * 不考虑实习留用吗\n  * 不考研吗\n  * 实习美团面试没过是什么原因\n  * 城市怎么考虑\n\n反问\n\n  * 考查：沟通能力、学习主动性、主人翁精神\n  * 1095\n  * 在缩招、把hc更多给实习留用的同学\n\n##### 10.9 意向\n\n##### 10.20 offer 白菜\n\n已拒\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597543694291542016?sourceSSR=users",
        "title": "深圳佰维二面 助理软件工程师",
        "content": "周一进行的一面，之前一面表现得不错，到周三就是二面了\n\nhr挺耐心的，说要调时间响应速度也很快给我放到我要的时间了。\n\n先是进行自我介绍，然后就开始拷打了，面试官挺好的，会及时指出我的回答所展现出的一些问题。\n\n为了让我能多答几个问题，就选择我擅长的科目开始考察了。\n\n**拷打项目：**\n\n1.**QT项目聊天系统** ：聊天系统是怎样实现的\n\n2.聊天系统的群聊功能是怎么做的\n\n3.聊天使用了TCP/IP协议，简单解释下为什么它比UDP更安全\n\n4.TCP/IP的三次握手和四次挥手是怎样实现的\n\n4.**C++项目webserver** ：解释下Epoll是如何实现IO复用的，以及它的具体实现过程（这个问题上次面试也有问过）\n\n5.红黑树是什么，怎么去创建红黑树\n\n6.问了下在校相关经历，尤其是计算机方面的\n\n面试官问的问题都很具体而且很细节，还是有感觉到自己的不足之处。他说让我一定要把这些东西的基本原理要理解透彻。\n\n**八股文：**\n\n7.说说C++的面向对象是怎么样的，我回答了它和面向过程编程的区别\n\n8.简单介绍下封装，继承，多态都是怎么实现的。\n\n9.多态分为哪两种，具体都是怎么实现的（回答动态多态和静态多态）\n\n9.1.动态多态里面的虚函数表是起什么作用\n\n9.2.静态多态是怎么样实现的，举个例子\n\n10.函数重载是怎么样实现的\n\n11.操作系统中的进程是怎么样调度的\n\n12.介绍下原语是怎么样的\n\n13.线程调度的算法有哪些（先来先服务，短作业优先，优先级调度，高响应比优先）\n\n反问：**具体工作地点，加班情况（经理说像我这种软件开发就加班一个小时真的很轻松了），五险一金**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597539886261968896?sourceSSR=users",
        "title": "腾讯健康-前端-一面",
        "content": "面试一个小时20分钟，部分问题记忆模糊，把主要问的问题记录一下，答案各位自行搜索，都不难，考验记忆力\n\n  1. 自我介绍\n  2. 如何学习前端的\n  3. 看过那些关于前端的的\n  4. 有看过前端红宝书吗\n  5. 你有关注过那些新技术吗\n  6. 你有关注那些开源社区吗\n  7. 你有自己的博客吗\n  8. 你的实验室是主要研究方向是什么\n  9. webpack使用说明\n  10. vite为什么比webpack更快\n  11. http协议中content type 常用类型\n  12. 浏览器缓存\n  13. nginx 配置\n  14. nginx 解决项目白屏\n  15. http状态码有哪些，具体表示什么\n  16. Electron 有那几部分\n  17. 服务端渲染的实现\n  18. 你有做过什么优化吗\n  19. 懒加载的实现\n  20. Vue3对比Vue2有什么优点\n  21. 你为什么学习Vue3\n  22. Vue3相应式处理优化，为什么要进行优化\n  23. 选一个对项目进行介绍\n  24. 一道关于闭包输出this的题目\n  25. 一道关于Promise 和setTimeOut的题目\n  26. 一道关于输入ab12c23d4，输出最大值23\n  27. 一道关于输入对象const obj={a[{d:'4',e:5}],c:6},通过输入'a[1].[d]','c'获取对象对应值，获取不到输出\"undefined\"\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597538651026866176?sourceSSR=users",
        "title": "美团2024年春招第一场笔试解析",
        "content": "嗨～我是可拟雀，一个全栈开发工程师，毕业于某985大学，目前供职于bat某大厂核心部门后端。每天分享最新面经答案，希望在大环境不好的当下能帮到你，让你多积累面试经验。免费分享个人学习2个月速通大厂路线（请看认证标）\n\n其他群友有补充Java等语言版本请私信我加上去\n\n![](https://uploadfiles.nowcoder.com/files/20240313/566343146_1710335660424/.jpg)\n\n先对输入字符串进行处理，然后再使用二维前缀和去统计子区域中1的个数，然后再逐步遍历k大小的子区域进行判断即可。\n\n    \n    \n    #include<bits/stdc++.h>\n    using namespace std;\n    \n    const int N = 1000;\n    int n;\n    char str[N][N];\n    int m[N][N], s[N][N];\n    \n    int ans[N];\n    \n    int GetPreSub(int x1, int y1, int x2, int y2) {\n        return s[x2 + 1][y2 + 1] - s[x1][y2 + 1] - s[x2 + 1][y1] + s[x1][y1];\n    }\n    \n    int main() {\n        cin >> n;\n        for (int i = 0; i < n; i++) cin >> str[i];\n        \n        for (int i = 0; i < n; i ++) {\n            for (int j = 0; j < n; j ++) {\n                if (str[i][j] == '1') {\n                    m[i + 1][j + 1] = 1;\n                } else {\n                    m[i + 1][j + 1] = 0;\n                }\n            }\n        }\n        \n        for (int i = 1; i <= n; i ++) {\n            for (int j = 1; j <= n; j  ++) {\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + m[i][j];\n            }\n        }\n        for (int i = 0; i < n; i ++) { \n            for (int j = 0; j < n; j ++) {\n                for (int k = 0; k < n; k ++) {\n                    if(i + k >= n || j + k >= n) {\n                        break;\n                    }\n                    int sub = GetPreSub(i, j, i + k, j + k);\n                    if (sub * 2 == (k + 1) * (k + 1)) {\n                        ans[k] ++;\n                    }\n                }\n            }\n        }\n    \n    \n        for (int i = 0; i < n; i ++) cout << ans[i] << endl;\n        return 0;\n    }\n    \n\n# T2\n\n![](https://uploadfiles.nowcoder.com/files/20240313/566343146_1710335660447/.jpg)\n\n最大最小理所应当的是当未知数分别取l和r时成立。\n\n    \n    \n    #include <bits/stdc++.h>\n    using namespace std;\n    \n    int main() {\n        int n, q;\n        cin >> n >> q;\n        vector<int> a(n);\n        long long tot = 0; \n        int numa = 0; \n    \n        for (int i = 0; i < n; i++) {\n            cin >> a[i];\n            tot += a[i];\n            if (a[i] == 0) numa++;\n        }\n    \n        while (q--) { \n            int l, r;\n            cin >> l >> r;\n            cout << numa * (long long)l + tot << \" \" << numa * (long long)r + tot << \"\\n\";\n        }\n    \n        return 0;\n    }\n    \n    \n\n# T3\n\n![](https://uploadfiles.nowcoder.com/files/20240313/566343146_1710335660358/.jpg)\n\n先扫描一遍原本有n个M和T，然后总数减一下，剩下m个，再看可以添加k个，返回n+min(m,k)\n\n    \n    \n    #include <bits/stdc++.h>\n    using namespace std;\n    int main() {\n        int n, k;\n        cin >> n >> k;\n        string s;\n        cin >> s;\n        int ans = 0;\n        int tot = 0;\n    \n        for(int i = 0; i < n; i++) {\n            char c = s[i];\n            if(c != 'M' && c != 'T') {\n                tot++;\n            }\n        }\n    \n        if(k >= tot) {\n            cout << n << \"\\n\";\n        } else {\n            cout << n - tot + k << \"\\n\";\n        }\n    \n        return 0;\n    }\n    \n\n# T4\n\n![](https://uploadfiles.nowcoder.com/files/20240313/566343146_1710335660401/.jpg)\n\n我们可以使用并查集（Union-\nFind）数据结构。并查集是处理不相交集合合并及查询问题的一种有效数据结构，非常适合用于解决动态连通性问题。在这个场景中，每个人可以看作一个节点，朋友关系可以看作是节点间的边。当两个人淡忘了他们的朋友关系时，我们就移除这条边；查询两个人是否能通过朋友介绍互相认识，实际上就是查询这两个节点是否在同一个连通分量中。\n\n    \n    \n    #include <iostream>\n    #include <vector>\n    #include <unordered_map>\n    using namespace std;\n    \n    // 并查集类\n    class UnionFind {\n    private:\n        unordered_map<int, int> parent; // 存储每个节点的父节点\n        unordered_map<int, int> rank;   // 存储每个根节点的秩（用于优化）\n    \n    public:\n        // 查找节点x的根节点\n        int find(int x) {\n            if (parent.find(x) == parent.end()) parent[x] = x, rank[x] = 0; // 如果节点未出现过，初始化\n            if (x != parent[x]) parent[x] = find(parent[x]); // 路径压缩\n            return parent[x];\n        }\n    \n        // 将节点x和节点y所在的集合合并\n        void unite(int x, int y) {\n            int rootX = find(x);\n            int rootY = find(y);\n            if (rootX != rootY) {\n                // 按秩合并，保持树的平衡\n                if (rank[rootX] < rank[rootY]) {\n                    parent[rootX] = rootY;\n                } else {\n                    parent[rootY] = rootX;\n                    if (rank[rootX] == rank[rootY]) rank[rootX]++;\n                }\n            }\n        }\n    \n        // 检查节点x和节点y是否连通\n        bool connected(int x, int y) {\n            return find(x) == find(y);\n        }\n    };\n    \n    int main() {\n        ios::sync_with_stdio(false);\n        cin.tie(nullptr);\n    \n        int n, m, q;\n        cin >> n >> m >> q;\n        UnionFind uf;\n    \n        // 处理初始的朋友关系\n        for (int i = 0; i < m; ++i) {\n            int u, v;\n            cin >> u >> v;\n            uf.unite(u, v);\n        }\n    \n        // 处理事件\n        for (int i = 0; i < q; ++i) {\n            int op, u, v;\n            cin >> op >> u >> v;\n            if (op == 1) {\n                // 如果是淡忘关系事件，由于题目要求仅在查询中使用，并查集操作不涉及“删除”操作，因此忽略\n            } else if (op == 2) {\n                // 如果是查询事件，输出查询结果\n                cout << (uf.connected(u, v) ? \"Yes\" : \"No\") << '\\n';\n            }\n        }\n    \n        return 0;\n    }\n    \n    \n\n# T5\n\n![](https://uploadfiles.nowcoder.com/files/20240313/566343146_1710335660341/.jpg)\n\n首先，想要得到末尾是0就必须有一对2和5，简单的数学知识。使用前缀和+双指针，可以优化到O(n)复杂度。\n\n    \n    \n    #include <iostream>\n    #include <vector>\n    using namespace std;\n    \n    // 寻找有多少个2\n    long long getTwoNum(long long x) {\n        long long ct = 0;\n        while (x % 2 == 0) {\n            ct++;\n            x /= 2;\n        }\n        return ct;\n    }\n    \n    // 寻找有多少个5\n    long long getFiveNum(long long x) {\n        long long ct = 0;\n        while (x % 5 == 0) {\n            ct++;\n            x /= 5;\n        }\n        return ct;\n    }\n    \n    int main() {\n        long long n, k;\n        while (cin >> n >> k) {\n            vector<long long> arrsTwoNum(n, 0), arrsFiveNum(n, 0);\n            long long totTwoNum = 0, totFiveNum = 0;\n            for (long long i = 0; i < n; ++i) {\n                long long x;\n                cin >> x;\n                arrsTwoNum[i] = getTwoNum(x);\n                arrsFiveNum[i] = getFiveNum(x);\n                totTwoNum += arrsTwoNum[i];\n                totFiveNum += arrsFiveNum[i];\n            }\n            if (totTwoNum < k || totFiveNum < k) {\n                cout << 0 << endl;\n                return 0;\n            }\n            long long rangeMaxTwoNum = totTwoNum - k; // 最大可用删除的2的数量\n            long long rangeMaxFiveNum = totFiveNum - k; // 最大可用删除的5的数量\n            long long ans = 0;\n            // 前缀和，统计到i为止2和5的数量\n            for (long long i = 1; i < n; ++i) {\n                arrsTwoNum[i] += arrsTwoNum[i - 1];\n                arrsFiveNum[i] += arrsFiveNum[i - 1];\n            }\n            long long j = 0; // 快指针\n            while (j < n && arrsTwoNum[j] <= rangeMaxTwoNum && arrsFiveNum[j] <= rangeMaxFiveNum) {\n                j++;\n            }\n            ans += j; // 每次快指针使得段内2和5超标，更新一次ans\n            for (long long i = 0; i < n; i++) {\n                while (j < n && arrsTwoNum[j] - arrsTwoNum[i] <= rangeMaxTwoNum && arrsFiveNum[j] - arrsFiveNum[i] <= rangeMaxFiveNum) {\n                    j++;\n                }\n                ans += (j - i - 1);\n            }\n            cout << ans << endl;\n        }\n        return 0;\n    }\n    \n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597535836057497600?sourceSSR=users",
        "title": "腾讯 PCG 暑期实习 后台 一面",
        "content": "自我介绍\n\n- 计网\n\n在浏览器输入一个网址的全过程\n\nHTTPS和HTTP的区别\n\nHTTPS的证书是什么加密方式（非对称加密）\n\n讲一下非对称加密\n\nJson Web Token的原理，为什么需要JWT\n\nJWT可不可以让它Reroot掉，就是可不可以在超时时间之前让它失效\n\n如果你强行让JWT失效会发生什么事情（需要用数据库存储才可以，无状态机制变成有状态，违背初衷了）\n\nHTTP1.0,2.0,3.0的区别\n\nHTTP协议的内容是怎么组织的（不太清楚）\n\n就是HTTP里面有几种请求方法（GET，POST，PUT，DELETE）\n\nGET请求可以携带BODY吗\n\nHTTP的返回码\n\nHTTP组织完后，是往哪里发，它的底层是通过什么去做的（答了TCP）\n\n简单描述一下TCP的建立和断开\n\nSYN，ACK分别代表什么意思\n\n在四次挥手中，Client发起FIN包后，Socket进入什么状态（TIME-WAIT）\n\nTCP请求流量比较大会发生什么事情，超过它的承载能力\n\n除了Server端可能丢包，还有什么其他地方可能丢包\n\n发生丢包的时候，TCP要怎么处理\n\n把TCP的拥塞控制说一下\n\n怎么知道它丢包了，要重传呢\n\n这个是超时重传对吧，还有个快速重传讲一下\n\n快速重传为什么是三次，而不是两次\n\n了解Socket里面的阻塞和非阻塞\n\n讲一下Epoll，还有Epoll怎么用\n\nEpoll的触发方式\n\n如果边缘出发，我只从Epoll的FD里读了一半数据就放回去了，那么下一次触发是什么时候，可不可以把之前没读到的数据再读回来\n\n下一次触发的时候再去读它，读到的是什么数据\n\n- OS\n\n怎么看Linux一个进程的内存使用大小\n\n你用Top看内存的时候，看的是哪一列\n\n有没有注意到它是有三列内存的显示的，那三列代表什么意思\n\n讲一下Virtual、RES、SHARE这三列有什么区别\n\n了解过虚拟内存的工作原理吗，你知道虚拟内存和Resource之间的区别是什么吗\n\n为什么要设计虚拟内存这么一个东西呢，我直接用物理内存有什么问题吗\n\n我的程序的实际内存大于我的物理内存会发生什么事情\n\n除了OOM必然发生，还会发生什么（SWAP）\n\n讲一下SWAP\n\nOOM的时候是哪个进程会被kill，有没有了解过\n\n进程之间哪些东西是可以共享的，哪些是不共享的\n\n不同进程共享用户空间的具体什么东西\n\n静态链接库和动态链接库的区别（TOP里的SHARE就包含动态链接库的东西）\n\n进程之间的通信方式\n\n线程之间呢\n\n线程之间是可以直接共享变量地址的，但这么直接去访问会有什么问题\n\n- Go\n\nSlice的Size和它的Capacity有什么区别\n\n我有一个slice1，大小为1，然后去和slice2 append，我再去改s1[0]，s2会受影响吗\n\n现在再拓展一下，我现在再append一个s3，s4，现在大小为4，现在去修改s3的第一个位置，会影响s4吗\n\n关闭Channel要注意什么事项\n\n假如Channel还有数据可以关闭吗\n\n怎么判断一个Channel是否关闭\n\n直接从一个已经关闭的Channel读数据，不带那个ok，读出来的是什么\n\nInterface有用过吗，你一般用它来做什么呢\n\n写过单元测试吗\n\nContext了解过吗，有看过标准库Context的注释吗\n\n了解过GMP调度模型吗\n\n讲一下GC\n\n知道GC的Write Barrier吗\n\n- 项目\n\n简单描述一下你的令牌桶的实现原理\n\n你的桶和JWT有什么关系\n\n- 手撕\n\n求解两个字符串的最长公共子串\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597533642377785344?sourceSSR=users",
        "title": "24校招，快手测试开发工程师三面（上）",
        "content": "**大家好，我是chowley，回顾一下之前参加的技术面试**\n\n部门：商业化\n\n时间：50min\n\n平台：轻雀，这平台纯nt，用Mac面试，老连我iPhone的麦克风\n\n## 过程\n\n  1. 自我介绍\n  2. 实习经历-软件测试\n  3. 测出过哪些重要bug？协作文档的权限问题\n  4. 实习经历-游戏测试\n  5. 负责产品的哪些方面？新关卡上线、活动管理、业务测试、UI自动化脚本、性能测试\n  6. 有哪些地方比较重要？进度管理、订阅管理、活动上线、高峰期管理、自动化测试、性能测试\n  7. 发现了什么比较重要的bug吗？ANR\n  8. 什么原因导致的？网络请求中断，请求资源无法加载，反复重试，导致无法操作\n  9. 游戏稳定性如何保证？提前进行稳定性测试，多方面测试+大量频繁点击\n  10. 游戏关卡的难度是如何变化的？怎么测试？\n  11. 有用到覆盖率之类的工具吗？\n  12. 上线之后问题多吗？\n  13. 收费是咋做的？平台自己收，我测一下是否到账，物品是否发送\n  14. 计费流程测过吗？测过，边界值检测\n  15. 卡bug刷金币的用户见过吗？见过，影响小不管他\n  16. 资损类的问题呢？内购、会员，有效期、账号绑定、资源管理等\n  17. 如何给用户补充奖励？核实遗失内容，把缺失进度放在邮件里发给他\n  18. 别人可以领吗？当然不行，做身份信息核验\n\n## 总结\n\n难度：3.5/5\n\n面试官专业程度：还行，但他一直在那回消息，还频繁莫名其妙的笑\n\n体验打分：3/5，体验一般，反问他说我表现的还行，不知真假\n\n**好了，以上就是本文的全部内容，如有问题可留言讨论。**\n\n**本人正在组建校招测试开发方向的交流社区，如果您对测试求职方面感兴趣，欢迎加入了解。**\n\n**我是chowley，一个专注互联网技术和产品质量保障领域的博主，我们下次再见！**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**Searching for QALog.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597533001316167680?sourceSSR=users",
        "title": "最有含金量的一场！字节跳动测试开发工程师一面",
        "content": "**大家好，我是chowley，今天来回顾一下之前参加的字节一面**\n\n部门：番茄小说\n\n时间：85分钟，目前为止历史最长单次面试了\n\n平台：飞书\n\n### 过程\n\n  1. 自我介绍\n  2. 介绍一下你对测试的了解\n  3. 场景题：微信两人视频通话，你会从哪些维度进行测试？会考虑哪些关键的测试内容？\n  4. 说一下服务端测试都做了什么？\n  5. 接口压力测试？\n  6. 在过程中发现了什么问题吗？\n  7. 怎么减轻高QPS接口的压力？\n  8. 介绍一下集成测试\n  9. 算法研究咋做的？\n  10. 介绍一下缓存中间件\n  11. 开发和测试你咋选？\n  12. 你遇到过哪些困难？举具体例子，怎么解决？\n  13. 你有学过哪些沟通表达相关的内容吗？\n  14. 被批评，你会怎么处理？\n  15. 如果在沟通中，对方比较情绪化，怎么处理？\n  16. 介绍一下CI/CD的流程\n  17. 说一下python的引用计数\n  18. python的垃圾回收，深入一点\n  19. 浏览器打开网站的过程\n  20. 为啥要四次挥手？\n  21. 手撕：二叉树+写测试用例验证\n  22. 手撕2：hard题，给哥们分析麻了\n  23. 怎么学习新的东西？\n  24. 你主动学过哪些东西吗？\n  25. 你有用过哪些app吗？\n  26. 刷抖音时，视频提示加载中，有可能是哪方面的问题？\n  27. 反问\n\n### 总结\n\n难度：4/5，无法描述的难，主要是时间太长，需要保证自己的思路一直没断，手撕完一道二叉树继续撕hard，讲完继续开放性提问\n\n面试官专业程度：专业，小姐姐人美心善，提问跟着面试节奏走，没有生硬问题\n\n体验打分：4/5，希望继续流程，下次还来～。～\n\n**好了，以上就是本文的全部内容，如有问题可留言讨论。**\n\n**本人正在组建校招测试开发方向的交流社区，如果您对测试求职方面感兴趣，欢迎加入了解。**\n\n**我是chowley，一个专注互联网技术和产品质量保障领域的博主，我们下次再见！**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**Searching for QALog.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597532515263389696?sourceSSR=users",
        "title": "24校招，经纬恒润软件测试工程师一面",
        "content": "## 前言\n\n大家好，我是Chowley\n\n记录一下面试过程，这个企业我之前没咋听说过，偏硬件\n\n### 时间：30min\n\n### 平台：腾讯会议\n\n## 过程\n\n  1. 自我介绍\n  2. 学习排名\n  3. 英语咋样\n  4. 介绍一下你的两段实习\n  5. 软件测试实习经历，业务介绍\n  6. 测试中用的工具和软件是什么？\n  7. 代码提测、测试执行用的什么？\n  8. 游戏测试实习经历\n  9. 工具和软件？ 不知道为啥老问我用的啥工具..\n  10. 性能测试是怎么做的？\n  11. 异常性测试？ 数值边界值，UI超框，订阅场景，账号进度\n  12. jira是怎么提交的，需要哪些信息？ name、紧急程度、复现步骤、对应的创建者、处理人、时间、附件、来源、影响范围\n  13. 团队赛介绍\n  14. web端吗？ 电脑程序，窗口布局\n  15. 做了几版？测了几轮？\n  16. 接触过嵌入式吗？ 课设，设计了一个计频器\n  17. C/C++熟悉吗？\n  18. 数电、模电呢？ 与门、或门、非门，PN节，放大、转换电路啥的\n  19. 涉及到原理图吗？\n  20. 职业规划\n  21. 了解过Python自动化测试框架吗？ pytest、selenium\n  22. 做过什么工作吗？\n  23. Python用过什么库？ pytorch、math、functools\n  24. Python异常处理 try-except\n  25. C/C++呢？\n  26. 了解我们公司吗？ 汽车电子服务商，咨询和配套，嵌入式软件测试\n  27. 反问\n  28. base地、薪酬\n  29. 两轮技术面\n\n## 总结\n\n### 难度：3/5\n\n### 面试官专业程度：3/5\n\n### 体验打分：一般\n\n感觉面试官不是计算机的，没问我啥专业问题，一直问用的啥工具，使用的语言，也没细问八股\n\n二面让我做个PPT，汇报15分钟以上...真把我当PPT工程师了\n\n**以上就是本文的全部内容，如有问题可留言讨论或分享给您的朋友一起学习！**\n\n**我们正在组建测试开发方向的求职交流社区，如果您对软件质量管理、团队效率提高内容感兴趣，欢迎关注我。**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**Searching for QALog**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597529063015694336?sourceSSR=users",
        "title": "携程笔试",
        "content": "\n    import sys\n    from collections import Counter\n    string = input()\n    cnt = Counter(string)\n    new = {\n        'y': cnt['y'],\n        'o': cnt['o'],\n        'u': cnt['u']\n    }\n    nums = min(new.values())\n    res = 'you' * nums\n    for k, v in cnt.items():\n        if k in 'you' and v > nums:\n            # print(k,v)\n            res += str(k) * (v-nums)\n        elif k not in 'you':\n            res += str(k) * v\n    print(res)\n    \n    \n    \n    # 暴力会超时间，用正反序前缀和，空间换时间\n    import sys\n    n = int(input())\n    nums = list(map(int, input().split()))\n    sorted_nums = sorted(nums)\n    left = [0] * n\n    cum = 0\n    for i in range(n):\n        cum += sorted_nums[i]\n        left[i] = cum\n    right = [0] * n\n    cum = 0\n    for i in range(n-1, -1, -1):\n        cum += sorted_nums[i]\n        right[i] = cum\n    hashmp = dict()\n    for i in range(n):\n        if sorted_nums[i] in hashmp:\n            continue\n        if i > 0:\n            ops_left = sorted_nums[i] * i - left[i-1]\n        else:\n            ops_left = 0\n        \n        if i < n-1:\n            ops_right = right[i+1] - sorted_nums[i] * (n-i-1)\n        else:\n            ops_right = 0\n        \n        hashmp[sorted_nums[i]] = ops_left + ops_right\n    for i in nums:\n        print(hashmp[i])\n    \n    \n    \n    import sys\n    import re\n    array = input()\n    new_pairs = re.findall(r'([-\\d]+)\\(([\\d]+)\\)', array)\n    res = '['\n    i, n = 0, len(new_pairs)\n    while i < n:\n        key = new_pairs[i][0]\n        val = int(new_pairs[i][1])\n        idx = i + 1\n        while idx < n and new_pairs[idx][0] == key:\n            val += int(new_pairs[idx][1])\n            idx += 1\n        i = idx\n        if i != n:\n            res += str(key)+'('+str(val)+')'+',' \n        else:\n            res += str(key)+'('+str(val)+')'+']' \n        \n    print(res)\n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597526637852336128?sourceSSR=users",
        "title": "腾讯云一面凉",
        "content": "项目点评+外卖20分钟，几乎问道源码层面了[牛泪]…\n\n接着三道算法15分钟，两道中等秒了，一道hard有思路、不知道怎么输入输出（真不会用，菜还得多练[牛泪]\n\n最后说了点建议：知识面够广但不够深入，算法题目有思路，但不够熟练。\n\n得再学习沉淀了，不气垒不言败…\n\n\\----3.15更新----\n\n被csig其他部门捞了，下周继续被拷打[打气][笑cry]....\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597532258978832384?sourceSSR=users",
        "title": "24校招，Moka测试开发工程师一面",
        "content": "## 前言\n\n大家好，今天回顾一下楼主当时参加moka测试开发工程师的面试\n\n对其中一些重要问题，我也给出了相应的答案\n\n时间：40min\n\n平台：腾讯会议\n\n## 过程\n\n  1. 自我介绍\n  2. 挑一个项目，详细介绍你在其中担任的职责\n  3. 如何安排工作的，有什么成果？\n  4. 回归测试如何设计，怎么把控？ 答：如果是上线新功能，全盘测试+老功能的测试\n  5. 有哪些用例设计方法？ 答：等价类划分、边界值分析、判定表、正交实验法、状态迁移法、错误推测法\n  6. 表单你了解吗？ 答：Form表单，收集数据\n  7. 针对表单提交功能，在不同输入条件下，写测试用例 答：null、格式区别、图片大小、文本长度、其他语言、乱码、实时反馈、XSS注入、SQL注入、安全性、可靠性\n  8. web安全漏洞？ 答：SQL注入、XSS、CSRF、Dos\n  9. 版本控制工具有哪些？ Git、SVN\n  10. 如何创建分支？ git branch 分支名、git checkout -b 分支名\n  11. 创建分支之后，做些什么？ add 文件\n  12. 介绍一下Git使用的整体流程 答：git init git add git commit git log git branch\\checkout git merge git clone\n  13. 事务是什么？访问或更新数据库中各种数据项的一个程序执行单元\n  14. 事务使用的场景？ 支付界面\n  15. ACID\n  16. 分组查询 group by\n  17. http是什么？ 超文本传输协议\n  18. http和tcp的区别？ 性质：http是请求-响应协议，TCP是面向连接的传输层协议；连接：http运行在TCP上；功能不同、连接状态不同。\n  19. http请求方法 get post delete\n  20. get和post的区别？ 安全、效率、是否可被缓存\n  21. http状态码？ 1**-information，2**-success，3**-redirect，4**-client error，5**-server error\n  22. 区分前后端问题？ 前端：开发者工具、请求信息是否正确、界面兼容性，后端：响应信息是否正确、日志、打点服务、连接建立状态\n  23. 访问一个URL，页面空白，怎么定位问题？ 换一个设备、抓包、切换网络、看报错、看url\n  24. 怎么判断后端有没有响应？ 响应报文、服务器状态、硬件使用率\n  25. 接口测试项目\n  26. 压力测试怎么做？ 测试系统所能承受的最大访问量或响应速度，加压，大量请求\n  27. 性能测试关注哪些参数？ CPU、内存、响应时间、数据库读写\n  28. 测试重复工作会枯燥吗？ \n  29. 反问\n  30. 反馈bug\n\n## 总结\n\n第一轮面试，一般都是考察应聘者的基础素养，看这个人是否达到了岗位所需的基础知识\n\n二面就会考察一些更加深入的东西，比如场景设计、项目工作等\n\n如对此次面试的第二轮考核过程有兴趣，欢迎关注博主，马上更新！\n\n**以上就是本文的全部内容，如有问题可留言讨论或分享给您的朋友一起学习！**\n\n**我们正在组建测试开发方向的求职交流社区，如果您对软件质量管理、团队效率提高内容感兴趣，欢迎关注我。**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**Searching for QALog**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597517015737298944?sourceSSR=users",
        "title": "【腾讯云】CSIG一面，凉凉凉|0313",
        "content": "![alt](https://git.acwing.com/Hasity/interview_hunter/-/raw/master/2024/image/%E9%9D%A2%E7%BB%8F12%E8%85%BE%E8%AE%AF.png)\n\n## 1\\. 介绍下TCP UDP的区别\n\n**解析：**\n\n计算机网络基础知识，简单题，必考题。\n\n**参考答案：**\n\n>\n> TCP（传输控制协议）和UDP（用户数据报协议）是计算机网络中传输层的两个主要协议，它们各自具有不同的特点和适用场景。以下是TCP和UDP之间的主要区别：\n>\n>   1. 连接特性：\n>\n\n>   *\n> TCP是面向连接的协议。在传输数据之前，需要通过三次握手来建立连接，并在数据传输完成后通过四次挥手来释放连接。这种连接机制确保了数据传输的可靠性和顺序性。\n>   * UDP则是无连接的协议。发送数据前不需要建立连接，直接发送数据包，这使得UDP在传输数据时更加灵活和高效。\n>\n\n>   2. 可靠性：\n>\n\n>   * TCP提供可靠的数据传输服务。它使用校验和、重传控制、序号标识、滑动窗口和确认应答等机制来确保数据的无差错、不丢失、不重复且按序到达。\n>   * UDP则提供尽最大努力交付的服务，不保证数据的可靠传输。在数据传输过程中，如果发生丢包或乱序，UDP不会进行重传或顺序控制。\n>\n\n>   3. 效率与实时性：\n>\n\n>   *\n> UDP具有较好的实时性和较高的工作效率，因为它不需要建立连接和进行复杂的控制操作。这使得UDP适用于对高速传输和实时性有较高要求的通信或广播通信，如语音、视频、直播等。\n>   * TCP虽然提供了可靠的数据传输，但由于其复杂的控制机制，相对UDP而言效率较低。\n>\n\n>   4. 通信模式：\n>\n\n>   * TCP连接只能是点对点的，即一条TCP连接只能连接两个端点。\n>   * UDP则支持一对一、一对多、多对一和多对多的交互通信模式，这使得UDP在广播和多播等场景中更具优势。\n>\n\n>   5. 首部开销：\n>\n\n>   * TCP的首部较大，通常为20字节，这增加了每个数据包的开销。\n>   * UDP的首部较小，只有8字节，减少了数据包的开销，提高了传输效率。\n>\n\n>\n>\n> TCP和UDP在连接特性、可靠性、效率与实时性、通信模式以及首部开销等方面存在显著差异。在选择使用TCP还是UDP时，需要根据具体的应用场景和需求进行权衡。例如，对于需要可靠数据传输的场景（如文件传输、远程登录等），TCP是更好的选择；而对于实时性要求较高或需要广播和多播的场景（如语音、视频等），UDP则更具优势。\n\n**学习指引：**[TCP和Udp的区别是什么？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F47378601)\n\n>\n> **[面经专栏直通车](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fmanager%2FcolumnDetail%2F0xKkDM)**\n\n>\n> **[面经专栏下载](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgit.acwing.com%2Flicw%2F24_job_hunter)**\n\n## 2\\. TCP怎么保证他的连接可靠\n\n**解析：**\n\n计算机网络常见题，必考题。\n\n**参考答案：**\n\n> TCP（传输控制协议）通过一系列机制保证连接的可靠性。以下是TCP确保连接可靠性的主要方式：\n>\n>   1. **序列号与确认应答**\n> ：TCP给每一个发送的数据包都赋予一个序列号，同时要求接收方在收到数据后回复一个确认应答（ACK），告知发送方已成功接收。如果发送方在一定时间内没有收到ACK，它会认为数据包丢失并重传。\n>   2. **校验和**\n> ：TCP在发送数据前会计算数据的校验和，并在接收端对数据进行校验和比对。如果校验和不匹配，接收端会丢弃该数据包，并要求发送方重传。\n>   3. **超时重传** ：TCP在发送数据包后会启动一个定时器。如果定时器超时前未收到ACK，发送方会重传该数据包。\n>   4. **连接管理**\n> ：TCP通过三次握手来建立连接，确保双方都已准备好进行数据传输。在数据传输完成后，通过四次挥手来关闭连接，确保数据已完全传输并释放资源。\n>   5. **流量控制** ：TCP使用滑动窗口机制来实现流量控制，确保发送方不会发送过多数据导致接收方缓冲区溢出。\n>   6. **拥塞控制** ：TCP通过慢开始、拥塞避免、快重传和快恢复等算法来避免网络拥塞，确保数据传输的稳定性和可靠性。\n>\n\n**学习指引：**[TCP协议如何保证可靠传输](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.cnblogs.com%2Fxiaokang01%2Fp%2F10033267.html)\n\n## 3\\. 介绍一下四次挥手\n\n**解析：**\n\n计算机网络常见题，必考题。\n\n**参考答案：**\n\n>\n> 四次挥手是TCP（传输控制协议）中用于释放已建立的连接的一个过程。这个过程确保客户端和服务器双方都能正常、有序地关闭连接，并释放相关资源。以下是四次挥手的详细步骤：\n>\n>   1. **第一次挥手**\n> ：客户端（假设为主动关闭的一方）发送一个FIN报文给服务器，用来关闭客户端到服务器的数据传送。此时，客户端进入FIN_WAIT_1状态，等待服务器的确认。\n>   2. **第二次挥手**\n> ：服务器收到FIN报文后，发送一个ACK报文给客户端，确认收到客户端的关闭请求。此时，服务器进入CLOSE_WAIT状态，客户端收到这个ACK后，进入FIN_WAIT_2状态。\n>   3. **第三次挥手**\n> ：服务器在完成所有数据传输后，发送一个FIN报文给客户端，表示服务器也准备关闭连接。此时，服务器进入LAST_ACK状态，等待客户端的确认。\n>   4. **第四次挥手**\n> ：客户端收到服务器的FIN报文后，发送一个ACK报文给服务器，确认收到服务器的关闭请求。此时，服务器进入CLOSE状态，完成连接的关闭。客户端在发送完ACK后，会等待一段时间（通常是2MSL，即两倍的最长报文段寿命），确保服务器已经收到ACK并关闭了连接。然后，客户端进入CLOSE状态，完成四次挥手过程。\n>\n\n>\n> 通过四次挥手，TCP协议确保了双方都能正常、有序地关闭连接，避免了资源泄露和网络问题。这也是TCP协议保证连接可靠性的一个重要方面。\n\n**学习指引：**[一文彻底搞懂\nTCP三次握手、四次挥手过程及原理](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F108504297)\n\n## 4\\. TIME_WAIT出现在TCP连接的什么时候\n\n**解析：**\n\n计算机网络基础知识，简单题，必考题。\n\n**参考答案：**\n\n>\n> TIME_WAIT状态出现在TCP连接的关闭过程中，特别是在四次挥手的阶段。具体来说，当主动关闭连接的一方（通常是客户端）发送完最后一个ACK报文后，它会进入TIME_WAIT状态。\n>\n>\n> 在四次挥手的过程中，主动关闭连接的一方首先发送一个FIN报文给对端，表示希望关闭连接。然后，它等待并接收到对端的ACK报文，进入FIN_WAIT_2状态。接着，当对端也准备好关闭连接并发送FIN报文时，主动关闭连接的一方会发送一个ACK报文进行确认，并进入TIME_WAIT状态。\n>\n>\n> 在TIME_WAIT状态中，主动关闭连接的一方会等待一段时间（通常是2MSL，即两倍的最长报文段寿命），以确保对端收到了ACK报文并关闭了连接。这样做的目的是为了防止已经关闭的连接中的报文段还在网络中滞留，导致出现“迷途”的数据包，影响下一次在相同端口上建立的新连接。\n\n**学习指引：**[TCP中time_wait解释及解决方法](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2Fmystyle_%2Farticle%2Fdetails%2F119176327)\n\n## 5\\. 介绍一下HTTP连接的流程\n\n**解析：**\n\n在计算机网络中，HTTP 属于常考题，必考题。\n\n**参考答案：**\n\n>   1. 浏览器进行DNS域名解析，得到对应的IP地址\n>   2. 根据这个IP，找到对应的服务器建立连接（三次握手）\n>   3. 建立TCP连接后发起HTTP请求（一个完整的http请求报文）\n>   4. 服务器响应HTTP请求，浏览器得到html代码（服务器如何响应）\n>   5. 浏览器解析html代码，并请求html代码中的资源（如js、css、图片等）\n>   6. 浏览器对页面进行渲染呈现给用户\n>   7. 服务器关闭TCP连接（四次挥手）\n>\n\n**学习指引：**[一次完整的HTTP请求过程是怎么样的呢？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F161560683)\n\n## 6\\. HTTP有长连接吗，怎么实现的\n\n**解析：**\n\n在计算机网络中，HTTP 进阶题，常考题。\n\n**参考答案：**\n\n> **HTTP有长连接** 。HTTP的长连接通常是通过在HTTP请求头中设置`Connection: keep-\n> alive`字段来实现的。这个字段告诉服务器，客户端希望保持与服务器的TCP连接，直到超时或显式地断开连接。\n>\n> HTTP长连接的实现基于TCP协议。在HTTP/1.1中，长连接是默认启用的，除非显式地在请求头中设置`Connection:\n> close`。在使用长连接的情况下，客户端和服务端建立一次连接之后，可以在这条连接上进行多次请求/响应操作。当客户端发送完一个HTTP请求后，连接并不会立即关闭，而是等待服务器发送响应。服务器在发送完响应后，也不会立即关闭连接，而是保持连接开放，以便客户端可以继续发送新的请求。这样，客户端和服务器之间可以重用已经建立的TCP连接，避免了频繁地建立和关闭连接所带来的开销，提高了网络性能。\n>\n>\n> 需要注意的是，长连接并不意味着连接会一直保持打开状态。在实际应用中，服务器可能会根据一些策略（如超时时间、并发连接数等）来主动关闭连接，或者客户端在发送完所有请求后也可以主动关闭连接。此外，HTTP/2协议中采用了更高效的连接管理方式，称为多路复用，它默认使用长连接，并通过更复杂的机制来管理多个请求在同一连接上的并发传输。\n>\n> HTTP长连接的实现依赖于TCP协议的支持和HTTP协议中相关字段的设置。通过合理使用长连接，可以提高Web应用的性能和用户体验。\n\n**学习指引：**[HTTP长连接实现原理](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjuejin.cn%2Fpost%2F6923887573861564423)\n\n## 7\\. TCP长短连接流程，怎么实现\n\n**解析：**\n\n**参考答案：**\n\n> TCP长短连接的流程如下：\n>\n> **短连接** ：\n>\n>   1. **建立连接** ：客户端与服务器之间建立TCP连接。\n>   2. **发送消息** ：客户端向服务器发送消息或请求。\n>   3. **响应回传** ：服务器响应回传消息或处理结果给客户端。\n>   4. **关闭连接** ：完成一次发送与接收（读、写）服务后，客户端和服务器都会关闭连接。\n>\n\n>\n> **长连接** ：\n>\n>   1. **建立连接** ：客户端与服务器之间建立TCP连接。\n>   2. **发送消息** ：客户端向服务器发送消息或请求。\n>   3. **响应回传** ：服务器响应回传消息或处理结果给客户端。\n>   4. **多次通信** ：一次请求响应结束后，当前连接不关闭，通过当前连接实现多次通信。\n>   5. **关闭连接**\n> ：客户端或服务器在不再需要连接时，会主动关闭连接。通常，客户端会发起关闭连接的请求，而服务器则依据连接的超时时间（timeout）来关闭连接。\n>\n\n>\n> **实现方式** ：\n>\n>\n> TCP长短连接的实现主要依赖于TCP协议本身以及应用程序的设计。在TCP层面，连接的建立、数据的传输和连接的关闭都是通过TCP协议的相关机制来完成的。而在应用层面，如HTTP协议，可以通过在请求头中设置相应的字段（如`Connection:\n> keep-alive`或`Connection: close`）来指示使用长连接还是短连接。\n>\n> **特点** ：\n>\n>   * **短连接**\n> ：管理简单，每次请求都需要建立连接和释放连接，因此每次连接只用于一次读写操作。它适合于访问不频繁的操作，如简单的web页面访问、用户注册、数据查询或文件下载等。\n>   * **长连接** ：可以省去较多的TCP建立和关闭的操作，减少浪费，节约时间。它适用于需要频繁通信的场景，如实时数据传输、聊天应用等。\n>\n\n>\n> TCP长短连接的实现主要依赖于TCP协议和应用层协议（如HTTP）的设定。根据应用的需求和场景，可以选择使用短连接或长连接来优化性能和资源利用。\n\n**学习指引：**[TCP 长连接\n短连接](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjuejin.cn%2Fpost%2F6847902214237880328%3FsearchId%3D2024031319280166635994FE4B29136E01)\n\n## 8\\. 介绍一下线程\n\n**解析：**\n\n操作系统必考题，简单难度。\n\n**参考答案：**\n\n> 线程，被称为轻量级进程（Lightweight Process,\n> LWP），是程序执行流的最小单元，也是CPU调度和分派的基本单位。线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。使用线程的最大作用是提高程序并行执行的能力，充分利用CPU的利用率。然而，线程并非越多越好，因为过多的线程切换会消耗资源，反而可能导致程序的运行时间增加。\n>\n>\n> 线程与进程类似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是，同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是各个线程之间做切换工作时，负担要比进程小得多。\n>\n>\n> 实现多线程主要有三种方法：继承Thread类、实现Runnable接口和实现Callable接口。线程与进程之间的主要区别在于，进程是资源分配的最小单位，而线程是CPU资源调度的最小单位。\n>\n>\n> 总的来说，线程是操作系统中进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但它可与同属一个进程的其它的线程共享进程所拥有的全部资源。\n\n**学习指引：**[进程？线程？有什么区别？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjuejin.cn%2Fpost%2F7174799659129372729)\n\n## 9\\. 线程的调度怎么完成\n\n**解析：**\n\n操作系统必考题，难度中等。\n\n**参考答案：**\n\n> 线程调度的完成通常涉及以下几个步骤：\n>\n>   1.\n> 选择调度算法：操作系统可以使用不同的调度算法来决定线程的执行顺序。常见的调度算法包括先来先服务（FCFS）、最短作业优先（SJF）、轮转调度（Round\n> Robin）等。选择适合系统需求的调度算法是很重要的。\n>   2.\n> 确定优先级：每个线程通常都有一个优先级，优先级决定了线程被调度的顺序。高优先级的线程会被优先执行，而低优先级的线程则可能被延迟执行。操作系统可以根据线程的类型、重要性等因素来确定线程的优先级。\n>   3.\n> 创建和管理线程队列：操作系统会维护一个线程队列，用于存储等待执行的线程。当一个线程需要执行时，它会被添加到队列中。调度器会从队列中选择一个线程，并将其分配给可用的处理器执行。\n>   4.\n> 上下文切换：当调度器决定切换到另一个线程时，它会进行上下文切换操作。上下文切换包括保存当前线程的上下文信息（如寄存器状态、程序计数器等），并加载下一个线程的上下文信息，以便继续执行。\n>   5.\n> 执行线程：一旦调度器选择了一个线程，并完成了上下文切换，该线程就会开始执行。线程执行的时间片通常是有限的，当时间片用完后，调度器会再次选择下一个线程执行。\n>\n\n>\n> 不同的操作系统可能会有不同的实现方式和策略。线程调度的目标是合理分配系统资源，提高系统的性能和响应能力。\n\n**学习指引：**[【操作系统】进程和线程调度](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2Fqq_45467083%2Farticle%2Fdetails%2F119755767)\n\n## 10\\. 线程在什么时候会阻塞\n\n**解析：**\n\n操作系统常考题，难度中等。\n\n**参考答案：**\n\n> 线程在多种情况下可能会进入阻塞状态。以下是一些常见的情况：\n>\n>   1. **线程休眠** ：当线程执行了`Thread.sleep(int\n> n)`方法时，它会放弃CPU的使用权，进入休眠状态，持续n毫秒后恢复运行。在休眠期间，线程处于阻塞状态。\n>\n>   2. **等待获取同步锁**\n> ：当线程需要执行一段同步代码块，但无法获得相关的同步锁时，它会进入阻塞状态。只有当获得了所需的同步锁后，线程才能继续执行。\n>\n>   3.\n> **执行`wait()`方法**：线程在执行一个对象的`wait()`方法时，会进入阻塞状态。此时，线程会释放它持有的对象锁，并等待其他线程执行该对象的`notify()`或`notifyAll()`方法，才能被唤醒并继续执行。\n>\n>   4. **等待相关资源**\n> ：线程在执行I/O操作（如文件读写、网络通信等）时，可能会因为等待相关资源而进入阻塞状态。例如，在远程通信中，客户端线程可能在等待服务器端响应时阻塞。\n>\n>   5. **读写数据时的阻塞** ：\n>\n>      * 线程在向Socket的输出流写一批数据时，可能会进入阻塞状态，直到所有数据都输出，或者发生异常。\n>      * 线程从Socket的输入流读取数据时，如果没有足够的数据，就会进入阻塞状态，直到读取到足够的数据，或者到达输入流的末尾，或者出现异常。\n>   6. **其他线程操作** ：当一个线程调用了`yield()`方法时，它会将执行权礼让给同等级或更高优先级的线程，此时也可能进入阻塞状态。\n>\n>   7. **线程设置延迟关闭**\n> ：如果线程在Socket通信中设置了延迟关闭（通过`Socket.setSoLinger()`方法），那么在调用`Socket.close()`方法时，线程会等待底层Socket发送完所有剩余数据，或者超过设定的延迟时间，才返回。这期间，线程也会处于阻塞状态。\n>\n>\n\n>\n> 此外，线程的阻塞还可能由其他因素导致，如用户输入、文件上传、加载等操作。这些因素都会导致线程需要等待某个事件或条件成立后才能继续执行，从而进入阻塞状态。\n\n**学习指引：**[什么是线程阻塞?为什么会出现线程阻塞？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.cnblogs.com%2FJonaLin%2Fp%2F11570858.html)]([https://www.cnblogs.com/JonaLin/p/11570858.html](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.cnblogs.com%2FJonaLin%2Fp%2F11570858.html))\n\n## 11\\. 介绍一下c++的内存分配策略\n\n**解析：**\n\nC++ 原理基础题，必会题。\n\n**参考答案：**\n\n> C++的内存分配策略主要包括静态内存分配、栈内存分配和堆内存分配。\n>\n>   1.\n> 静态内存分配：静态内存分配是在程序编译阶段完成的，用于存储全局变量和静态变量。这些变量的内存空间在程序启动时就被分配，并在整个程序的生命周期内保持不变。\n>   2.\n> 栈内存分配：栈内存分配是由编译器自动管理的，用于存储局部变量和函数调用的上下文信息。栈内存的分配和释放是自动进行的，遵循\"先进后出\"的原则。当一个函数被调用时，它的局部变量会被分配到栈上，当函数执行完毕时，这些变量会被自动释放。\n>   3.\n> 堆内存分配：堆内存分配是由程序员手动管理的，用于存储动态分配的对象。在堆上分配内存需要使用特定的操作符（如new、malloc等），并在不需要时手动释放内存（使用delete、free等）。堆内存的分配和释放不受函数调用的限制，可以在程序的任意位置进行。\n>\n\n>\n> 静态内存分配适用于全局变量和静态变量，栈内存分配适用于局部变量和函数调用，堆内存分配适用于动态分配的对象。\n\n**学习指引：**[C++内存分配的几种策略](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2FTABE_%2Farticle%2Fdetails%2F124532013)\n\n## 12\\. c++从编译到运行发生了什么\n\n**解析：**\n\nC++ 原理题，常考题。\n\n**参考答案：**\n\n> C++程序从编译到运行经历了以下几个步骤：\n>\n>   1.\n> 预处理（Preprocessing）：在编译之前，预处理器会对源代码进行处理。它会处理以\"#\"开头的预处理指令，例如#include、#define等，并展开宏定义，删除注释等。预处理后的代码成为编译单元。\n>   2. 编译（Compilation）：编译器将预处理后的代码翻译成汇编语言。它会进行词法分析、语法分析、语义分析等过程，生成汇编代码。\n>   3. 汇编（Assembly）：汇编器将汇编代码转换成机器码，生成目标文件（通常是二进制文件）。目标文件包含了可执行代码、数据和符号表等信息。\n>   4.\n> 链接（Linking）：链接器将目标文件与其他必要的库文件进行链接，生成可执行文件。它会解析符号引用，将目标文件中的符号与其他目标文件或库文件中的符号进行关联，生成最终的可执行文件。\n>   5.\n> 加载（Loading）：操作系统将可执行文件加载到内存中，并为程序分配运行所需的资源。加载过程包括分配内存空间、建立程序入口点、加载依赖的动态链接库等。\n>   6.\n> 运行（Execution）：程序开始执行，按照指令序列进行操作。它会分配栈空间、执行全局初始化、调用main函数等。程序执行过程中可能会进行输入输出、调用其他函数、分配和释放内存等操作。\n>\n\n**学习指引：**[一个程序从编译到运行的全过程](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F547559531)\n\n## 13\\. c++的动态链接和静态链接\n\n**解析：**\n\nC++ 原理题，难度中等。\n\n**参考答案：**\n\n> C++中的链接可以分为动态链接和静态链接两种方式。\n>\n>   1. 静态链接（Static Linking）：\n> 静态链接是将所有的目标文件和库文件在编译时链接到可执行文件中。在静态链接的情况下，目标文件中使用的所有函数和库函数的代码都会被复制到最终的可执行文件中。这意味着可执行文件独立于系统中的动态链接库，可以在没有其他依赖的情况下运行。静态链接的优点是执行速度快，不受系统环境的影响。但缺点是可执行文件的体积较大，占用磁盘空间较多。\n>   2. 动态链接（Dynamic Linking）：\n> 动态链接是在程序运行时将目标文件和库文件链接到可执行文件中。在动态链接的情况下，可执行文件只包含对库函数的引用，而不包含实际的库函数代码。当程序运行时，操作系统会在内存中加载所需的动态链接库，并将其与可执行文件进行链接。动态链接的优点是可执行文件的体积较小，节省了磁盘空间。同时，多个程序可以共享同一个动态链接库，减少了内存的占用。然而，动态链接的缺点是在程序运行时需要查找和加载动态链接库，可能会稍微降低程序的执行速度。\n>\n\n>\n>\n> 在C++中，可以使用编译器提供的选项来指定链接方式。对于静态链接，可以使用编译器的静态库选项（如\"-static\"），将库文件静态链接到可执行文件中。对于动态链接，可以使用编译器的动态库选项（如\"-shared\"）生成动态链接库文件，并在编译时指定动态链接库的路径。\n>\n> 选择动态链接还是静态链接取决于具体的需求。静态链接适用于独立的、可移植的可执行文件，而动态链接适用于共享库、模块化的程序设计和资源共享的场景。\n\n**学习指引：**[深入浅出静态链接和动态链接](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2Fkang___xi%2Farticle%2Fdetails%2F80210717)\n\n## 14\\. 大小端字节序\n\n**解析：**\n\n存储相关的常考题，难度中等。\n\n**参考答案：**\n\n> 大小端字节序（Endianness）是指在多字节数据类型（如整数、浮点数）在内存中存储时，字节的顺序是从高位到低位还是从低位到高位。\n>\n>   1. 大端字节序（Big\n> Endian）：在大端字节序中，高位字节存储在低地址，低位字节存储在高地址。例如，十六进制数0x12345678在大端字节序中存储为：0x12 0x34\n> 0x56 0x78。\n>   2. 小端字节序（Little\n> Endian）：在小端字节序中，低位字节存储在低地址，高位字节存储在高地址。例如，十六进制数0x12345678在小端字节序中存储为：0x78 0x56\n> 0x34 0x12。\n>\n\n>\n> 选择使用大端字节序还是小端字节序是由硬件架构和操作系统决定的。x86架构的计算机通常采用小端字节序，而一些网络协议（如TCP/IP）通常使用大端字节序。\n>\n> 在C++中，可以使用类型转换和位操作来处理大小端字节序的问题。例如，可以使用memcpy函数将字节序进行转换，或者使用位操作来逐个字节读取和写入数据。\n>\n> 在跨平台开发时，应该考虑字节序的问题，以确保数据在不同平台上的正确解析和传输。\n\n**学习指引：**[字节序（大小端）理解](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2Fsunflower_della%2Farticle%2Fdetails%2F90439935)\n\n## 15\\. 网络字节序是大端还是小端，本地字节序是大端还是小端\n\n**解析：**\n\n考的不多，多读几遍有印象即可。\n\n**参考答案：**\n\n>\n> 网络字节序是大端字节序，即高位字节存储在内存的低地址端，低位字节存储在内存的高地址端。这种字节序的采用主要是为了不同平台之间的兼容性问题，确保数据在网络传输中的一致性和准确性。\n>\n>\n> 而本地字节序则取决于具体的硬件和操作系统。例如，Intel和AMD的处理器采用的是小端字节序，即低位字节存储在内存的低地址端，高位字节存储在内存的高地址端。然而，也有一些处理器采用大端字节序。因此，在进行网络通信或跨平台编程时，需要注意字节序的转换问题，以确保数据的正确解析和处理。\n\n**学习指引：**[网络字节序为什么使用大端字节序呢？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F458844566)\n\n## 16\\. MySQL什么时候会用索引\n\n**解析：**\n\nMySQL 重点题，常考题，必会题。\n\n**参考答案：**\n\n> MySQL在以下情况下会使用索引：\n>\n>   1. **查询条件中的关键字**\n> ：当查询条件中使用了某个字段的关键字，且该字段上建立了索引时，MySQL会尝试使用索引来加速查询。例如，使用`WHERE`子句中的`=`、`>`、`<`、`>=`、`<=`等操作符进行条件筛选时，如果相关字段有索引，MySQL通常会利用这些索引。\n>   2. **联接操作** ：在进行表联接（如`JOIN`操作）时，如果联接条件中的字段有索引，MySQL会尝试使用这些索引来加速联接过程。\n>   3. **排序和分组操作** ：当使用`ORDER BY`或`GROUP\n> BY`子句时，如果排序或分组的字段有索引，MySQL可能会利用这些索引来优化排序和分组操作。\n>   4. **覆盖索引**\n> ：如果一个查询只需要访问索引中的信息，而无需回表查询原始数据，那么这个索引被称为覆盖索引。当MySQL检测到可以使用覆盖索引时，它会优先使用覆盖索引，因为这样可以避免回表操作，从而提高查询效率。\n>   5. **唯一性约束和主键约束**\n> ：在MySQL中，为表的主键和具有唯一性约束的字段自动创建索引。这些索引不仅用于加速查询，还用于确保数据的唯一性。\n>\n\n>\n> 虽然索引可以提高查询性能，但它们也会占用额外的磁盘空间，并可能降低写操作的性能（如INSERT、UPDATE和DELETE操作）\n>\n>\n> 。因此，在创建索引时，需要权衡查询性能与存储和写操作的开销。通常建议只对经常用于查询条件、排序、分组或联接操作的字段创建索引。同时，可以通过定期分析查询性能和数据访问模式来确定哪些索引是最有益的。\n\n**学习指引：**[MySQL索引的分类、何时使用、何时不使用、何时失效？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F359680672)\n\n>\n> [更多面经直通车](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fusers%2F630265916)\n\n>\n> [原贴连接](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fusers%2F548238257)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597496359440216064?sourceSSR=users",
        "title": "腾讯内容运营2面—复试",
        "content": "没想到能到2面，不过这次是真的凉了，我面完就马不停蹄的来分享了，该说不说腾讯的面试是真的很轻松，也是大厂该有的气度\n\n很棒，我还是爱鹅信🐧，5点面试完就收到不合适的邮件了\n\n这次面试也很轻松，可能不是技术岗的原来吧，没啥太难的，唯一一点问我sql掌握程度，（还好我学过。虽然一般）\n\n感觉问的问题大差不差，问的更深入了\n\n1.自我介绍—深问了奖学金和考试大概成绩\n\n2.问了我现阶段的情况——是不是还在实习，简历写的至今，论文进度如何\n\n如果通过最终面，会不会来提前实习，\n\n3.你认为你未来三到五年的职业规划是如何，深圳、广州、北京，你更喜欢哪里？\n\n4.想成为什么样的人，认为自己有哪些的特质，认为工作对你而言的意义\n\n4.想从工作当中得到什么？最喜欢哪个事业群？对哪方面内容印象最深刻\n\n5.你认为自己最擅长哪部分的运营\n\n6.你最近一年读了多少本书，你推荐那本书，为什么？学到了什么？\n\n7.你从事的这4份实习，运营方向都是不一样的，你认为你那份实习/运营方向，是你最擅长的\n\n8.你这份最擅长的实习和内容运营的相同之处\n\n9.你什么星座？？？？？？？？？？？？？？？？？？？？？？？？？？\n\n反问就是问了一下薪资，感觉被自己蠢到了，虽然结束了还是很不错的一次体验，感谢腾讯，就当攒面经啦\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597531907458449408?sourceSSR=users",
        "title": "24校招，帆书测试开发工程师一面",
        "content": "## 前言\n\n樊高读书是帆书的前身，我之前还看过他们的书，缘分闭环了\n\n### 时间：25min\n\n### 平台：飞书视频面试\n\n## 过程\n\n  1. 自我介绍\n  2. 为啥从后端转测试？\n  3. 通过实习经历，对测试有什么了解？\n  4. 讲一下游戏测试经历\n  5. 负责什么业务？\n  6. 安装一个应用，在安卓和IOS上有什么区别？ 安全性、安装包格式、测试工具、开发工具、快捷键、分辨率、卸载\n  7. 前后端的接口测试、交互测试有做过吗？\n  8. APP上前后端测试\n  9. 抓包工具-Fiddler、Wireshark、Charles（收费）\n  10. app的接口测试\n  11. MySQL是什么类型的数据库？ 关系型数据库\n  12. 工作中用过Redis吗？\n  13. count *和count 1有区别吗？都会计算null，count 1的效率更高\n  14. 把两张表的数据，用一个结果查出来？ union all\n  15. 使用的语言\n  16. 性能测试有coding吗？\n  17. 你写过相关的脚本吗？\n  18. 反问\n  19. 建议：了解一下项目实现，每层之间的交互\n  20. 关注一下操作过程中的链路，中间层发生问题容易定位\n  21. 测试更精确的定位，可以减轻团队工作量\n  22. 自动化的使用场景，web、接口自动化\n  23. 从语言中脱离出来\n  24. 测试了解的要广\n\n## 总结\n\n### 难度：4/5\n\n### 面试官专业程度：专业\n\n### 体验打分：3.5/5\n\n就感觉和面试官思路不是太匹配，数据库的问题当时也没反应过来\n\n但最后他给我的建议还是十分受用的，后面查缺补漏，好好学习吧\n\n**以上就是本文的全部内容，如有问题可留言讨论或分享给您的朋友一起学习！**\n\n**我们正在组建测试开发方向的求职交流社区，如果您对软件质量管理、团队效率提高内容感兴趣，欢迎关注我。**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**Searching for QALog**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597475126036209664?sourceSSR=users",
        "title": "虎牙直播 一面凉经（c++开发）",
        "content": "> 总结：面试官非常耐心，答不出来也会很认真引导，解释所有我回答不上的知识点，我愿称为无偿补课40分钟（不是）\n\n  1. 编程语言中，c++算熟悉吗？对比新兴的主流语言，比如go、java、python，有没有什么倾向？\n  2. 用cpp的版本是哪个？（答的11）\n  3. 整体来说觉得cpp11怎么样？比如好用的功能，或者要吐槽的地方。\n  4. CPP的11版本多了很多新功能，有没有什么功能是你觉得比较好用的？\n  5. 移动语义和右值引用了解吗？（接上一个）\n  6. 常见的STL库的容器有用过哪些呢？\n  7. vector和list的区别是什么？\n  8. vector和数组一样，在空间上分布是连续的，那它是如何实现动态分配的？\n  9. vector分配上的连续，那它这个特点有什么应用吗？或者说有什么优势呢？\n  10. 排序算法知道哪些呢？快排复杂度多少？最坏的情况是多少？\n  11. STL的sort()函数里，有自定义的对比函数，这个有使用过吗？\n  12. 那这个自定义函数有没有什么需要注意的点呢？比如说a<b，那假设a<=b会怎么样呢？\n  13. vector和list的区别在哪？\n  14. STL的容器还有很多，比如map经常和unordermap进行对比，那map是有序的吗？\n  15. 所以map底层的逻辑是什么你知道吗？\n  16. 说到树，那相关的数据结构代码有没有写过？红黑树和平衡树的对比，性能提升在哪里？\n  17. 说回hash，它是怎么解决冲突问题的？2个不同的值可以映射到同一个键吗？在cpp里是用什么数据结构进行存储的？\n  18. 看你简历上说到的项目，有开发过网络编程，用过REACT框架是吧？有没有做过网络编程的开发呢？\n  19. TCP和UDP的特点和区别\n  20. TCP的可靠传输具体是靠什么实现的？重传包是怎么知道要传什么包的？\n  21. 端口号的范围？\n  22. MySQL也学过是吧？除了普通查询，别的索引之类的用过吗？\n\n##### 反问\n\n  1. 这个岗位需要负责什么工作呢？\n  2. C++开发需要学习的东西有没有什么建议呢？\n\nC++基础数据结构的底层结构、算法、如何避免它们的坑网络编程方面的知识\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597464636975325184?sourceSSR=users",
        "title": "24/3/13_海马云音视频开发实习_面试",
        "content": "# 1.介绍项目1——RTSP服务器项目\n\n## （1）RTP最大长度：\n\nRTP数据包的最大长度通常受到网络MTU的限制。通常情况下，以太网的MTU为1500字节。\n\n## （2）RTSP信令的内容：\n\nOPTION：RTSP 200 OK，序列号，可以请求的信令如DESCRIBE,SETUP等。\n\nDESCRIBE：客户端发送该命令以获取有关媒体流的描述信息，如媒体格式、编解码器等。\n\nSETUP：用于建立传输流的通道。客户端和服务器之间可能会有多个通道，例如控制通道、音频流通道和视频流通道。\n\nPLAY：指示服务器开始向客户端传输媒体数据。\n\n其中DECRIBE中有SDP（Session Description\nProtocol）是一个用来描述多媒体会话的应用层控制协议，为会话通知、会话邀请和其它形式的多媒体会话初始化等目的提供了多媒体会话描述，例如会话声明、会话邀请、会话初始化等。它是一个基于文本的协议。\n\n会话级描述主要包含以下字段：\n\nv = （ 表示sdp的版本号，不包含次版本号）\n\no = （所有者/创建者和会话标识符）\n\ns = （Session Name会话名称）\n\ni = * （会话信息）\n\nu = * （URI 描述）\n\ne = * （Email 地址）\n\np = * （电话号码）\n\nc = * （连接信息 ― 如果包含在所有媒体中，则不需要该字段）\n\nb = * （带宽信息）\n\n时间描述\n\nt = （会话活动时间）\n\nr = * （0或多次重复次数）\n\n媒体级描述主要包含以下字段：\n\nm = （媒体名称和传输地址）\n\ni = * （媒体标题）\n\nc = * （连接信息 — 如果包含在会话层则该字段可选）\n\nb = * （带宽信息）\n\nk = * （加密密钥）\n\na = * （0 个或多个会话属性行）\n\n## （3）select/poll/epoll区别？\n\n当有事件触发时，select和poll需要用户自己去遍历文件描述符找出触发的事件，而epoll能够直接返回所有的触发事件；\n\n每次调用select和poll都需要将文件描述符集合拷贝到内核空间，返回时再拷贝一次。而epoll只需要拷贝需要修改的文件描述符而不需要集体的拷贝；\n\nselect支持的文件描述符数量有上限，而poll和epoll没有此限制。\n\n## （4）H264的封装？\n\nH.264由一个一个的NALU组成，每个NALU之间使用00 00 00 01或00 00 01分隔开，每个NALU的第一次字节都有特殊的含义\n\n介绍了NALU的报头\n\nH264三种RTP打包方式：单NALU、聚合打包、分片打包\n\n## （5）H264都有什么帧？\n\nI帧（关键帧），P帧（向前参考帧），B帧（双向参考帧），IDR帧（解码器立即刷新），SPS（序列参数集），PSP（图像参数集）\n\n## （6）RTP基于TCP还是UDP？\n\n都可以。\n\n# 2.介绍项目2——Web服务器项目\n\n## （1）采用什么模型\n\nReactor多线程模型\n\n# 3.介绍项目3——硕士课题\n\n# 4.介绍项目4——本科毕设\n\n# 5.C++八股\n\n## （1）引用和指针的区别\n\n返回函数内局部变量的内存用指针，对栈空间大小比较敏感用引用，开销小。类对象作为参数传递的时候使用引用。\n\n## （2）new和malloc区别\n\n相同点：都可用于内存的动态申请和释放\n\n不同点：前者是C++运算符，后者是C/C++语言标准库函数\n\nnew自动计算要分配的空间大小，malloc需要手工计算\n\nnew是类型安全的，malloc不是。\n\nnew的实现过程：调用operator new标准库函数，分配内存，保存指定对象，运行该对象的构造函数，最后返回新分配并构造后对象的指针。\n\ndelete的实现过程：堆指针指向的对象进行析构，然后调用operator delete释放内存。\n\n## （3）STL中容器都是安全的吗\n\n并不是所有的STL容器都是线程安全的。\n\n## （4）new和malloc返回什么\n\nnew返回指向创建对象的指针，malloc返回void指针\n\n## （5）基类和子类的析构需要写成虚函数吗？\n\n需要\n\n# 6.python八股\n\n## （1）python怎么在内部修改全局变量\n\nglobe\n\n## （2）python 列表推导式\n\n[expression for item in iterable if condition]\n\n## （3）可变对象不可变对象\n\n可变对象：列表（list）、字典（dict）、集合（set）\n\n不可变对象：整数（int）、浮点数（float）、字符串（str）、元组（tuple）\n\n## （4）字符串倒序\n\n[::-1]\n\n## （5）装饰器\n\n装饰器是给现有的模块增添新的小功能，可以对原函数进行功能扩展，而且还不需要修改原函数的内容，也不需要修改原函数的调用。\n\n装饰器的使用符合了面向对象编程的开放封闭原则。\n\n## （6）new和init区别\n\nnew静态方法，init实例方法。\n\nnew主要作用是创建并返回一个新的对象实例。\n\ninit 方法的主要作用是对新创建的对象进行初始化，为对象的属性赋初值。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597531368779804672?sourceSSR=users",
        "title": "24校招，Moka测试开发工程师二面",
        "content": "## ​前言\n\n大家好，我是Chowley，今天回顾一下，我之前实习公司的面经\n\n## 过程\n\n  1. 自我介绍\n  2. 介绍一下你印象最深的实习经历，[24秋招实习，初创公司测试开发实习生面经](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2Fweixin_53415043%2Farticle%2Fdetails%2F135434300)\n  3. 讲一下负责的产品\n  4. 负责过几个项目，做得都是什么？\n  5. 微信扫码登录，有哪些需要注意的点？安全性-交互性\n  6. 公司和微信的交互是怎么实现的？二维码的获得-微信客户端登陆授权-网站后台请求数据\n  7. 游戏测试和软件测试有什么区别？游戏测试注重用户体验，软件注重逻辑实现\n  8. 有一个list，把它里面的元素去重，有几种方法？集合、排序、字典\n  9. 装饰器是什么？在现有的函数上做补充\n  10. 装饰器需要return吗？可以不需要\n  11. 深拷贝和浅拷贝的典型应用？只维护一个列表时，用深拷贝添加\n  12. 介绍一下Django，Python的web端框架\n  13. 有用它的数据库操作吗？\n  14. 接口测试的测试思路是什么？功能-响应状态\n  15. 状态码不对，怎么去排查问题？4**-客户端问题，资源、开发者工具、抓包，5**-客户端问题，打点和日志\n  16. 状态码正确，数据不对，是什么原因导致的？请求被劫持，看链接，换机器\n  17. 压力测试接触过的内容？ \n  18. postman并发执行，有几个线程？\n  19. 对单一接口进行持续请求，算做压力测试吗？\n  20. 用户一直请求，导致的问题，是性能瓶颈吗？内存空间溢出，使用线程池+多线程并发处理，类似多用户请求\n  21. 职业规划\n  22. 在朋友圈上传图片设计测试用例\n  23. 手撕：二分+快排\n  24. 测试这个功能\n  25. 你对工作的期望和目标\n  26. 反问\n\n## 总结\n\n这次的面试考核非常全面，系统的评估了我是否有能力成为一个测试开发工程师\n\n同时也对我的人生产生了积极影响，命运的齿轮开始转动了，我们下次再见！\n\n**以上就是本文的全部内容，如有问题可留言讨论或分享给您的朋友一起学习！**\n\n**我们正在组建测试开发方向的求职交流社区，如果您对软件质量管理、团队效率提高内容感兴趣，欢迎关注我。**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**Searching for QALog** ​\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597458596875595776?sourceSSR=users",
        "title": "长江存储一面经验",
        "content": "211本，春招投简历在boss直聘上看到hr发信息回复了一下，就直接打电话来通知面试了  \n一面差不多30分钟不到，面试官很和蔼  \n首先自我介绍，接着就问了一下简历上的项目，这部分感觉hr就随便听听。然后问成绩+唠嗑，主要说该岗位会倒班能不能接受，再就是对岗位工作的了解+哪里人，主要感觉和网上面经问题高度一致，完全不考各种专业知识，了解一下公司就行。（感觉像是hr刷KPI[赞]）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597449487791026176?sourceSSR=users",
        "title": "乾程科技一面（HR面）",
        "content": "HR面试一个人10分钟，按顺序进去会议室\n\n1.先是自我介绍\n\n2.了解公司吗（hr介绍公司业务、规模）\n\n3.为什么选择我们\n\n4.问了一下简历上的项目\n\n5.期望薪资是多少\n\n6.反问环节\n\nhr面过了以后会有通知参加技术面试，不通过就没有通知\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597447914520178688?sourceSSR=users",
        "title": "哈啰 一面",
        "content": "面试时间：2024.1.24\n\n面试时长：40分钟\n\n1、手撕快排\n\n2、操作系统的“颠簸”可以解释一下吗\n\n3、Linux操作系统的常用命令\n\n4、sort底层排序的原理\n\n5、线程池的提交流程\n\n6、call当前主线程处理可以解释一下吗\n\n7、说一下操作系统虚拟存储\n\n8、反问\n\n总结：这可以说是我所有面试中最最难受的一场面试了，主要是因为这次面试都是问的我不太擅长的，答出来的还被面试官给否了，而且我看面试官的很多小动作，叹气啊，沉默啊，擦眼睛，挪椅子，摆弄电脑啊什么的，我本身不是很敏感的人但是我也感觉到了面试官一丝丝的不耐烦，问了几个问题没得到面试官要的答案，就没再问下去了，但是这次的面试对我的心理打击还是很大的，我甚至一度怀疑自己是不是不适合做Java开发，后面约的几个面试都没有心情准备了，颓废了好几天，但是其实回想起还是很感谢这次的经历的，让我增强了自己的心理建设，在这之后面试遇到的面试官感觉都非常和善当我有不会的问题会引导我回想知识点，面试完也会说一些激励我的话。这里想送《新不了情》里的一句话给正在努力求职的友友（真的很治愈）--“**我顶多埋怨过自己的运气不好，却从来没有怀疑过自己的才华**\n”。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597433796685799424?sourceSSR=users",
        "title": "【蔚来】3-13春招笔试",
        "content": "蔚来的笔试25道单选题 + 2道编程题，一共给了2小时。\n\n刚开始还担心时间不够，后面发现纯纯多余。\n\n单选题混杂着c++，java，mysql，计算机网络。\n\n编程题是两道很easy的简单题：\n\n1.输入一个数组，转为链表，然后打印出来。\n\n2.两个输入：一个有序可重复数字的数组，一个数字v，找出数组里第一个大于等于数字v的下标。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597429464523415552?sourceSSR=users",
        "title": "3-12 腾讯客户端- 实习基地",
        "content": "被客户端捞走 估计看有之前的实习 但是真的全忘了\n\n时长一小时\n\n1\\. 自我介绍\n\n2\\. 一道easy 估计是客户端降低要求？\n\n3\\. 优化算法 复杂度\n\n4\\. 项目 研究方向\n\n5\\. 多线程\n\n6\\. 数组 链表 map\n\n7\\. 如何实现读写锁\n\n8\\. 问了一下大学的客户端实习（过去太久 一点也没印象了 故直说一点不记得）\n\n后面忘记了\n\n四目相对\n\n尴尬抠脚\n\n估计不出意外的话 gg\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597427948555190272?sourceSSR=users",
        "title": "达实物联网二面（技术面试）",
        "content": "15min\n\n自我介绍\n\n项目\n\n  1. 比较满意的项目\n  2. 优点和缺点\n  3. 项目中遇到的困难怎么去解决\n  4. 有没有使用过异步\n  5. 在项目中和进行测试\n  6. 除了前端，还会什么其他技术吗\n\n八股文：\n\n  1. xss攻击，如何防御\n  2. 如何进行移动端适配\n  3. 单点登录\n  4. token的使用\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597413623098613760?sourceSSR=users",
        "title": "腾讯3.13号实习基地后端面试",
        "content": "嗨～我是可拟雀，一个全栈开发工程师，毕业于某985大学，目前供职于bat某大厂核心部门后端。每天分享最新面经答案，希望在大环境不好的当下能帮到你，让你多积累面试经验。免费分享个人学习2个月速通大厂路线，需要面经合集的请私信我～\n\n90min\n\n部门：pcg\n\n# **算法**\n\nLRU\n\nlc3. 无重复字符的最长子串\n\n## 八股\n\nLRU思路\n\n你实现LRU是线程安全的吗?HashMap是线程安全的吗？怎么样是线程安全的？\n\n有什么线程安全的集合？\n\nJava中的多线程是怎么样的\n\n线程之间怎么同步\n\nfinal关键字有什么用\n\nSpring加载顺序\n\nbootStrap.yml和Application.yml谁先配\n\nspring.factories怎么样用的\n\n@Autoware的用法\n\n介绍一下Mysql索引失效\n\n嗯，如果我要在MySQL指定一行加读锁呢？\n\n问：是要实际实现？还是讲原理？\n\n面试官：直接给我一行\n\n嗯嗯，讲一下事务隔离等级\n\n好，读已提交和可重复读有什么区别\n\n那Prometheus采集数据方式\n\n好，Docker是怎么样的上线步骤呢？\n\n追问：push的命令你给我打一下\n\n本地有哪些Docker镜像怎么看？\n\nLinux的进程的端口号那些怎么看？\n\n问：以为还在Docker，问是服务器暴露的端口号还是？\n\n面试官：进程号\n\n了解，你说一下负载均衡的算法\n\n一致性哈希这个圆形一样取模为什么比哈希就好了？\n\n我看你用了RabbitMQ，能介绍为什么用RabbitMQ吗？\n\n有对比过RabbitMQ和Kafka的区别吗？\n\n追问：\n\n除了持久化呢？Kafka会持久化吗？\n\n看你用了Redis，能给我介绍一下Redis的数据结构吗\n\n用Redis的命令存一个Hash结构\n\n[免费专栏地址，每日更新，欢迎订阅](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgw-c.nowcoder.com%2Fapi%2Fsparta%2Fjump%2Flink%3Flink%3Dhttps%253A%252F%252Fwww.nowcoder.com%252Fcreation%252Fmanager%252FcolumnDetail%252FMJ4LAm)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597396578097283072?sourceSSR=users",
        "title": "友塔游戏测开笔面经",
        "content": "## 题目一\n\n给定任意非负整数M，判断其能否表达为 M = 2 ^a + 2 ^b(a和b为非负整数)，若可以输出a和b，若不能输出-1；\n\n例如： 输入：6 输出: \"1 2\"\n\n### 分析：\n\n`void findAB(int M){}` 为解决问题的主函数\n\n**流程** ：\n\n  1. 若 M <= 0, 2的幂次无法为0，故认为无解，直接返回 \"-1\"\n  2. 检查M是否是2的幂次方，如果是，直接输出 \"0 log2(M)\"\n  3. 用两层循环遍历所有可能得a值和b值查找可能得结果，检查的范围限定在 a 在 [0, log2M]， b 在 [a + 1, log2M]， b 从 a+ 1开始是为了避免重复， a 和 b 相同且为结果在\n\n第二步就能求出，即 $ 2 ^a + 2^a = 2^(a+1) $\n\n### 代码\n\n    \n    \n    // 函数用于判断一个数是否是2的幂次方\n    bool isPowerOfTwo(int n)\n    {\n        // n 不能为0\n        // 且n的二进制表示只有一个1， n & (n - 1) 将 n 最右边的1变为0\n        return (n && !(n & (n - 1)));\n    }\n    \n    string findAB(int M)\n    {\n        if(M <= 0)\n        {\n            return \"-1\";\n        }\n    \n        // 检查M是否是2的幂次方，如果是，直接输出\n        if(isPowerOfTwo(M))\n        {\n            return \"0 \" + to_string((int)log2(M));\n        }\n    \n        for(int a = 0; a <= log2(M); ++a)\n        {\n            for(int b = a + 1; b <= log2(M); ++b)  // b从a+1开始，避免重复\n            {\n                if(pow(2, a) + pow(2, b) == M)\n                {\n                    return to_string(a) + \" \" + to_string(b);\n                }\n            }\n        }\n        return \"-1\";\n    }\n    \n    \n    \n\n## 题目二\n\n圆上按顺序有编号1到n的n个点。两点间连线，连过线的点不与其他点相连。要求这些线都不相交，n为偶数时最终有 n/2条线，n为奇数时有 (n - 1) /\n2条线，输入点的个数n，输出满足要求的方法数量。\n\n例如：\n\n输入：4\n\n输出: 2\n\n函数原型为 `int solution(int n)`\n\n### 分析\n\n对于给定的n个点（n为偶数），以这些点为端点连互不相交的弦的方法数量就是第n/2个卡塔兰数。\n\n卡塔兰数的递推公式为\n\n![](https://www.nowcoder.com/creation/write/%E5%8F%8B%E5%A1%94%E6%B8%B8%E6%88%8F%E6%B5%8B%E5%BC%80%E7%AC%94%E9%9D%A2%E7%BB%8F.assets/image-20240313114835494.png)\n\n对于n个点连接不相交弦的问题，由于每条弦都会将圆分成两部分，每一部分内的弦也必须满足不相交的条件，因此问题可以递归地分解成更小的子问题，这正好对应卡塔兰数的定义。\n\n但是n为奇数的时候，要保证所有连线不相交，则相交线数量为 (n - 1) / 2\n,且必然有一个点没被连接，所以可以任取一个点作为没被连接的点，从而得不相交弦的方法数量为：n*C((n - 1) / 2)\n\n    \n    \n    unsigned long long catalan(unsigned int n)\n    {\n        if(n <= 1) return 1;\n        vector<unsigned long long> C(n + 1, 0);\n        C[0] = C[1] = 1;\n    \n        // 递推式的循环表示\n        for(unsigned int i = 2; i <= n; ++i)\n        {\n            for(unsigned int j = 0; j < i; ++j)\n            {\n                C[i] += C[j] * C[i - j - 1];\n            }\n        }\n        return C[n];\n    }\n    \n    // 核心主函数\n    unsigned long long chordCount(int n)\n    {\n        if(n % 2 != 0)\n        {\n            // 奇数的情况\n            return n * catalan((n - 1) / 2);\n        }\n        else\n        {\n            return catalan(n / 2);\n        }\n    }\n    \n    \n    \n\n**解法二**\n\n    \n    \n    int solution(int n) {\n        // 卡特兰数通常用于解决此类问题\n        // dp数组用于存储结果，dp[i]表示i个点形成非交叉连线的方法数\n        vector<int> dp(n + 1, 0);\n        dp[0] = 1; // 没有点时认为有一种方法\n        dp[2] = 1; // 两个点只有一种连接方式\n    \n        // 填充dp数组\n        for (int i = 4; i <= n; i += 2) { // 只考虑偶数个点，因为奇数个点不可能完全配对\n            for (int j = 0; j < i - 1; j += 2) {\n                // dp[i]累加上dp[j]（左侧的点形成的配对方式）* dp[i - j - 2]（右侧的点形成的配对方式）\n                dp[i] += dp[j] * dp[i - j - 2];\n            }\n        }\n    \n        return (n % 2) ? (n * dp[n - 1]) : dp[n];\n    }\n    \n    \n\n## 题目三\n\n小游戏是一个正八边形，每条边有打开(1),关闭(0)两种状态，每次执行游戏选定一条边，把该边和其相邻的两条边（共三条）改为格子相反的状态。如三边为1 0\n1，选定中间边进行一次操作结果为 0 1 0 。输入一个一维数组M（数字0或1）表示八条边的初始状态，输出最少需要多少次可以把八条边都置位0。\n\n例如：\n\n输入：[0, 0, 0, 0, 0, 0, 0, 1]\n\n输出 : 5\n\n函数原型为`int solution(vector<int> M)`\n\n### 分析\n\n解决该问题的方法是如何通过有限的操作将八边形的每条边都转为0状态。由于问题规模较小，可用位运算和穷举来寻找最优解。\n\n每一条边的状态可以用一个8位的二进制数表示，每位代表一条边的开或关状态。因此，可以通过【遍历所有可能的操作序列】来找到将所有边都转换为0状态的最小操作次数。\n\n使用双层循环来遍历每一种翻转的情况：\n\n    \n    \n    for (int seq = 0; seq < (1 << 8); ++seq) {\n    \n    \n\n这个循环遍历所有可能的操作序列。seq变量代表当前的操作序列，用一个8位的二进制数表示，其中每一位对应于八边形的一条边是否被选择进行操作。所以一共\n2^8种情况。\n\n内层循环如下：\n\n    \n    \n    for (int j = 0; j < 8; ++j) {\n    \n      if (seq & (1 << j)) {\n        state = flip(state, j);\n        steps++;\n      }\n    \n    }\n    \n    \n\n这个循环遍历当前操作序列seq的每一位，检查每一条边是否被选择进行操作。\n\nseq & (1 << j)是位操作，检查seq的第j位是否为1。如果结果非0，意味着在当前操作序列中，第j条边被选中进行操作。\n\n如果第j条边被选中，那么调用 flip(state, j)\n函数翻转第j条边及其相邻两条边的状态。state变量代表当前的边状态，是一个8位的二进制数，每一位对应一条边的开或关状态。\n\nsteps++记录了进行当前序列操作所需的步数。\n\n最后进行检查和更新最少操作次数\n\n    \n    \n    if (state == 0) {\n    \n      minOperations = min(minOperations, steps);\n    \n    }\n    \n    \n\n### 代码\n\n    \n    \n    int flip(int state, int index)\n    {\n        // 翻转当前位\n        state ^= 1 << index;\n        state ^= 1 << ((index + 7) % 8);\n        state ^= 1 << ((index + 1) % 8);\n        return state;\n    }\n    \n    int solution(vector<int> M)\n    {\n        int initialState = 0;\n        for(int i = 0; i < 8; ++i)\n        {\n            initialState |= M[i] << i; // 初始化状态\n        }\n        int minOperations = INT_MAX;\n    \n        // 尝试所有可能的操作序列，见分析\n        // 如seq = 3 = 0000 0011 , 即代表最前面两位进行翻转操作，其余不动\n        for(int seq = 0; seq < (1 << 8); ++seq)\n        {\n            int state = initialState;\n            int steps = 0;\n            for(int j = 0; j < 8; ++j)\n            {\n                if(seq & (1 << j)) // 检查第j位是否为1， 若是，则翻转\n                {\n                    state = flip(state, j);\n                    steps++;\n                }\n            }\n            if(state == 0)\n            {\n                minOperations = min(minOperations, steps);\n            }\n        }\n        return minOperations == INT_MAX ? -1 : minOperations;\n    }\n    \n    \n\n## 面试题\n\n  * 介绍一下对测试理解\n  * 复盘笔试题，第二题\n  * 假设有1,2,3,4,5 分别有权重10,20,30,40,50，实现随机取5个数中的一个（权重求和，然后从0~和之间取随机数，落在1~10就返回1，落到21~40就返回2，依次类推）\n\n其他记不清了，面试官说主要用python开发，开发测试工具为主，测试有单独测试人员主要负责。\n\n已收到感谢信。。。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597395034597617664?sourceSSR=users",
        "title": "腾讯PCG 移动客户端一面凉经",
        "content": "总1h左右\n\n1、自我介绍\n\n2、什么时候接触IOS，怎么学的？\n\n3、问项目（问了很久，每个项目都问） 没问实习\n\n4、问对C++和JAVA哪个更熟（C++）\n\n5、C++虚函数是什么\n\n6、重载和重写\n\n7、设计模式知道哪些（单例、适配器、工厂）\n\n8、MVC和MVVM\n\n9、单例模式优缺点\n\n10、设计模式项目里用什么比较多\n\n11、RunTime和RunLoop\n\n后面甚至问了我研究生做的 人工智能方向的项目（怀疑是凑时长）\n\n算法：模拟两个大数相乘（写了但是没写完，面试官说我思路对，但是边界没处理清楚，寄！）\n\n准备了半天的计算机网络和系统没用上，问题都能答得上来一点但是说不完全。\n\n算法只让做了一题就匆匆下线了\n\n流程光速变回了测评hhhhhhh\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597393830383525888?sourceSSR=users",
        "title": "03.12 【Momenta】日常一面 Java 45min",
        "content": "飞书面试，进来是位女面试官，没开摄像头，问题问的像提前安排好的，没管我的回答，感觉是kpi，结果约二面了\n\n【项目】\n\n  * 自我介绍 + 项目 + 项目难点\n\n【八股】\n\n  * 有哪些分布式的 微服务可使用的全局原子类\n  * 场景：1到100的数组，求所有奇数和，怎么用stream快速实现\n  * 线程池参数、怎么设置\n  * 怎么判断提交的任务是否执行完，有什么办法\n  * runnable和callable区别\n  * 两个线程 线程1和线程2 线程2如何拿到线程1的结果 有哪些方法\n  * javaweb项目是怎么分层的，你是怎么理解的\n  * sql慢，你的排查思路是怎么样的\n  * linux命令熟悉哪些\n  * 查磁盘目前内存占用最多的日志文件，怎么查\n  * 如果找到了日志文件，想要找到关键信息，你一般怎么搜索的\n\n【算法】\n\n  * ACM模式，复原IP地址，力扣93，卡输入卡了很久。。把双引号也输入进去了，卡了我半天[好无辜]\n\n——————————————————————\n\n更新：二面自我介绍完后，就做一道题，路径裁剪，环状链表裁剪某一段，输出剩下链表，要求：面向对象思想，路径必须以类的形式存在，且ACM模式，构造链表，构造类路径。\n\n半小时没a出来，没懂到底让我输入输出什么，还必须面向对象，写两行就被打断说不能这样写。不过面试官人挺好，还是我自己太菜了。估计凉了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597392787331477504?sourceSSR=users",
        "title": "TPlink 联州 后台开发 一面",
        "content": "3/13 一面 20分钟\n\n主要是根据简历上的项目以及写的技术点去提问\n\n介绍一下项目中的技术点，让具体讲讲，我讲了我自己实现分页查询的逻辑，让我讲具体的讲实现的sql语句忘了\n\n问数据库的索引类型有些 索引优化\n\n数据库事务有了解吗，什么时候用到，怎么使用。\n\nspring mybaits的原理有了解过吗，当时只是简单用没了解\n\ntcp udp 区别 tcp的可靠性指什么怎么实现，udp和http区别\n\ntsl了解过吗\n\ntcp三次握手\n\n被拷打，好多一问很深就不会了，攒攒人品希望给个机会。\n\n3月18号 更新 现在看官网是终面待安排。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597357232027705344?sourceSSR=users",
        "title": "天融信前端日常实习武汉三面已oc",
        "content": "自我介绍\n\n详细讲讲实现瀑布流遇到的困难？\n\n她说我感觉简历做了准备，经验丰富就不问了，开始问前端基础\n\nhtml5的新特性？\n\n前端存储的方式？\n\n简单介绍 cookie、localstorage、sessionStorage的区别\n\ndom节点操作有哪些常见的方法？\n\ncss的选择器优先级？\n\n说几个css的选择器？\n\n前端常用的布局方式？\n\n讲一讲定位布局？有哪几个定位，有什么区别？\n\n前端隐藏页面元素有哪些方式？\n\n元素水平居中的方式？\n\n垂直居中呢？\n\n最简单对于一行文字垂直居中？\n\n终于到我熟悉的了\n\n怎么判断数据类型？typeof，instanceof原理，弊端，constructor原理，弊端，Object.prototype.toString.call()原理\n\n数组常用的操作？我答的太复杂了 她只想问简单的push pop 这种 我简单的介绍了数组遍历的方法\n包括对forEach中断和思考，包括map对原数组是否改变分为两种情况以及返回值，forin和forof的区别，reduce、some、every\n\n对字符串的常见方法？\n\nsplit返回值是什么？\n\n字符串的includes()方法呢？\n\n对this了解吗？定时器的this指向的是谁？\n\napply、call、bind的区别？\n\nvue的生命周期？\n\nvue的基本指令有哪些？\n\nv-if和v-show的区别？\n\n网络安全问题？xss、csrf\n\n通过哪些方式去学习前端？\n\n面试通过上岗几天？\n\n近几年的职业规划\n\n反问 几面 技术栈angular、TypeScript,Jq 20min结束\n\n二面聊天\n\n已oc\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597353533658218496?sourceSSR=users",
        "title": "腾讯数据工程光子一面（3.12）",
        "content": "一上来面试官针对简历的项目聊了大半个小时，具体聊的项目细节不展开赘述，主要包括以下几个部分\n\n1、数据集的来源\n\n2、业务场景的需求、学校的研究课题来源\n\n由于我第一个项目涉及一个全新的领域表-图，面试官一直在和我讨论这个模式的实际业务场景\n\n3、第二个项目的数据来源\n\n4、第三个项目是怎么进行数据清洗的，讲一下tf-idf公式，具体公式是怎么写的？\n\n5、之前实习做的是渗透测试，具体承担哪些工作？\n\n接着开始问一些基础的八股：\n\n1、什么是完全二叉树？\n\n2、给定一个完全二叉树，假设从1到n编号（他的意思是层次遍历），想选中第k个元素，怎么计算最快？\n\n3、Spark平时用什么来写？是否用过scale写？\n\n4、你的项目的集群hadoop环境是自己搭建的吗？还是实验室现有的？\n\n5、有没有用springboot写过http？之前什么项目用过\n\n6、一些闲聊，问我日常学习这些开发工具的时间安排 具体怎么学\n\n最后，给出一道手撕题\n\n两数之和 写功能函数即可\n\n十五分钟完成\n\n反问：\n\n光子部门数据开发岗位需要做哪些业务？\n\n觉得面试过程能看出我还有哪些问题可以改进？\n\n最后，面试官问了我一句 ，会不会redis和kafka\n\n我很诚实得说，最近刚开始学......\n\n总体而言，鹅厂的面试官还是很友好的，并且对于我项目里在学校的研究课题给了一些实质性的建议和提问，感觉还是很有收获的。\n\n3.13早上 收到二面通知\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597241678784733184?sourceSSR=users",
        "title": "游戏面试",
        "content": "这种人配当面试官哦？一直问游戏做不好该怎么办，给了他几个方案还一直问，\"这样还是找不到解决方案\"，想一拳打死他，面试就是这样不断找茬？提问环节一个问题就30个字吧，说不出来的样子，真是厉害！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597347042091933696?sourceSSR=users",
        "title": "小鹅通日常实习3面已oc",
        "content": "一面：前面一半忘记录音了有点久远记不起来了\n\n原型与原型链的区别？\n\n=和==和===的区别？\n\n了解闭包吗？\n\n闭包内的全局变量会不会被回收？\n\n讲一讲cookie、localstorage、sessionStorage？\n\nlocalstorage有没有一个最大上限呢？\n\nvue2与vue3的生命周期有哪些？\n\n在vue3中setup和created谁会先执行？ 为什么？\n\nvue实现响应式的原理？\n\n直接更改数组其中一个数的一个下标是否触发更新？\n\nv-for中key的作用？\n\njs的事件循环？\n\ntcp的三次握手和四次挥手？\n\n从输入url地址到响应过程发生了什么？\n\n浏览器渲染原理？\n\n反问 公司？业务？他说能满足我的项目需求哈哈哈 几面？3面\n\n二面：面试官迟到10多分钟我直接没等了 然后hr说上一个面太久了 [无语]11点拖到11.30开始\n\n自我介绍\n\n实习干了什么，遇到了什么问题？\n\n为什么要学习源码？\n\n要我实现一个类似微信的移动端h5我会怎么从架构方面去想（如果我是项目组长）？组件、优先级、具体实现（一开始在说长列表优化之类的发现答的不是他想要的结果，想了半天往组件方面靠勉强搭边）\n\n反问 因为时间太短了实在不知道问什么 扯了半天 面评？\n\n三面：实习学到了什么，遇到了什么问题？\n\n用三个词语形容自己？（这里我真绷不住了）\n\n对工作地点深圳能接受吗？能接受，工资这方面给的够就好，哈哈哈哈哈\n\n为什么不去北京上海那些地方？那里的厂你也投了吗？如实说\n\n还投了其它大厂吗？是在等待结果吗？如实说 可能我有其它offer 但是表明了他们干自己的产品我还是很感兴趣的并发量和用户量\n\n昨天hr打电话 通过了 等发offer\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597226951954264064?sourceSSR=users",
        "title": "阿里云-瓴羊 秋招面经",
        "content": "8.28开\n\n9.12投 瓴羊（其他基本都要9硕）\n\n9.16一面\n\n电话面 30min\n\n  * 项目\n  * 怎么自学\n  * 最近在看什么技术类的书籍\n  * java集合类\n  * hashmap能put null吗、key能为空吗、put的整个流程\n  * 影响hashmap的性能有哪些因素\n  * 线程 进程的区别\n  * 线程状态有哪些\n  * 创建线程有哪些方法\n  * 线程池\n  * Spring aop\n  * 动态代理 有哪些方式实现\n  * spring和spring boot的区别\n  * 绩点 排名\n  * 自己兴趣是哪块\n  * 工作中要支持一些运维的活能接受吗（一定程度能 实话实说了）\n  * 可以提前实习吗\n  * 城市怎么考虑\n\n反问\n\n  * 做阿里云的bi报表平台，做后端，但也要懂运维\n\n后面约笔试 放弃了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597220366989205504?sourceSSR=users",
        "title": "腾讯后台实习二面",
        "content": "汗流浃背，面试官水平很高，被拷打麻了。不知为啥有两个面试官，其中一个全程旁听。全程1h20min.  \n  \n1\\. Tbase用过吗？咋用的？  \n2\\. Mysql什么结构？数据怎么写的？buffer pool？redolog？log buffer？  \n3\\. Mysql主从，主节点binlog是同步还是异步的？主机挂了数据是不是没了？写数据时主节点宕机，但向客户端返回成功了，如何保证从节点数据写进去？  \n4\\. innodb相关，索引为啥用b+树，其他索引为啥不行？数据量很大内存放不下咋办？  \n5\\. redis主从了解吗？  \n5\\. 实习项目，细问  \n6\\. 之前项目中遇到过的困难，有什么收获？说了一个，又被追着问细节..  \n7\\. 最后写一个题，LRUCache  \n  \n还问了一些其他的，印象不深了。第一次被问得大脑空白...  \n  \nupdate 挂了之后腾讯云又给我捞了，md，面吧..  \n  \n  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597209598755454976?sourceSSR=users",
        "title": "尚米网络-安卓开发-一二面面经",
        "content": "#\n\n# 2-28hr电话确认薪资等公司福利情况等\n\n# 3-1一面30min\n\n个人介绍\n\n1、有考研考公嘛？英语四级？班级排名？\n\n2、学习过哪些课程？xx课程主修还是选修课？\n\n3、平时Java学习咋学的？看文档还是博客还是一章一章地去学？应该是看你的学习能力和方法，英文这个方向是安卓，属于转岗了。\n\n4、为什么不考研，我直接反问面试官是研究生吗，他也没有哈哈哈。\n\n5、除了学校的课程还学了自学课外的哪些内容，大方面的技能？怎么个学的方式？\n\n上面应该是确认学习能力咋样吧\n\n7、Java如何开启多线程。\n\n8、数组和集合的区别\n\n9、反射优缺点+使用场景\n\n10、包装类型和基本数据类型区别？\n\n11、设计模式了解多少？项目里用过多少种？\n\n最后\n\n12、期望薪资\n\n13、入职最看重那两点？\n\n14、面试官介绍工作地点+公司业务+公司历史+公司人员+公司架构+0基础培养安卓路线城镇规划+调薪规则等等+工作时间+福利+工作+工作旅游福利等\n\n15、有什么想问的？\n\n# 3-4二面30min\n\n1、个人介绍\n\n2、目前在职？可以随时离职？实习时间等\n\n3、在校课程\n\n4、数据结构知道哪些\n\n5、数组和链表区别\n\n6、排序算法有哪些\n\n7、冒泡时间平均复杂度\n\n最优呢？现场推断出来O(n)\n\n8、hashmap底层数据结构\n\n9、dijkstra算法？\n\n10、有做过性能优化的相关的内容吗？\n\n11、Java遍历的方法\n\n12、设计模式用过哪些？\n\n单例模式优缺点？场景？\n\n13、面向对象原则哪些？\n\n14、Java终止线程的方式\n\n15、认为什么代码是最好的代码\n\n16、看过那些代码规范的书？代码质量相关的书？\n\n17、最近看过什么书籍？\n\n18、高考多少分\n\n19、看你六级没考哦，大学数学成绩一般什么范围\n\n20、兴趣爱好？\n\n21、业余时间做什么多一些？\n\n22、职业规划？\n\n23、对公司有什么想了解\n\n24、期望薪资\n\n25、哪些不足？\n\n26、如果入职会有协议\n\n27、其他反问\n\n# 3-5hr电话\n\n约ceo面时间\n\n再次确认薪资，试用期7k,转正8k\n\n考虑好周四去的\n\n朋友说工作日下班时间太晚相当于变相加班，那就拒了吧，三面就没去了，特殊情况还不能报销路费。感觉问的都是简简单单的，没问啥项目，给人感觉很容易进的样子。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597202331259707392?sourceSSR=users",
        "title": "高德地图2025届算法笔试3.12",
        "content": "#### 选择\n\n（1）Batch Normalization 的细节\n\n（2）AVL在插入一个序列时，平衡因子的变化\n\n（3）循环有序数组做二分查找时候第一个比较的数\n\n（4）多任务学习的损失函数\n\n（5）多头注意力是怎么合并的\n\n#### OJ\n\n给你一个整数数组 nums 和一个整数 k ，编写一个函数来判断该数组是否含有同时满足下述条件的连续子数组：\n\n子数组大小至少为 2，且子数组元素总和为 k 的倍数。 如果存在，返回 true ；否则，返回 false 。\n\nA: 只需要用hash记录余数，O(n)即可oc\n\n#### 大题\n\n实现一个简单的文本编辑器，支持以下操作： 1 append(s: str)：在文本末尾追加字符串 s。 2 delete(k: int)：删除文本末尾的 k\n个字符。 3 print_text()：打印当前文本。 4 undo()：撤销上一次的操作（只需撤销一步）。 编写一个类 TextEditor\n实现上述功能：\n\nA: 维护一个past字符串即可\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597201920255705088?sourceSSR=users",
        "title": "Hikvsion海康威视-测试-笔试90min-3.12",
        "content": "**题型分布：**\n\n15个单选 45分 5个多选 15分 2个问答 20分 2个编程 20分\n\n【单选】【多选】\n\npython3语法：字节转换、元组\n\nlinux命令：删除文件前确认命令\n\n数据库sql:right join作用、插入语句\n\n测试基本知识：回归测试、缺陷生命周期6个阶段、逻辑覆盖中覆盖能力最强的是条件-组合覆盖、测试用例设计的原则\n\n计组:RAID等级安全性、指令的地址码来源\n\n计网:子网掩码、组播地址、带宽上限受限于哪些\n\n【问答】\n\n两道题都是测试用例的设计，第二道设计摄像头的网络配置\n\n【编程】\n\n一道经典动态规划；一道C++基础，分割字符串，将分割后的片段存储在vector容器中。\n\n\\----[等offer][等offer][无语子][无语子]只记得这些，如有出入，请勿追究[诶嘿][诶嘿][摸鱼中][摸鱼中]----\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597198969457995776?sourceSSR=users",
        "title": "华为od c++开发",
        "content": "本人背景，211计科专业22年毕业，毕业后通过校招进入一家游戏公司工作到去年(23)九月，部门效益不佳被裁员了，回来考研，考完就知道考不上了，年底准备准备面试材料。年后2月开始投简历，时间点如下:\n\n2.22 机试，三题分别95，100，80；总分355。感觉第二题会比第一题简单，前两题100分，后一题200，总分400，必须把前两题提交了才能做第三题。\n\n2.23 性格测试，这个挂了会很麻烦，好像半年不能再面试了。上午做完下午就出结果了。\n\n2.23 下午提供流水、学位证、英语证书等个人资料\n\n2.27 下午三点半通知，四点半hr资面。二十分钟，第二天通知面试通过。\n\n3.2 上午技术面，一面\n\n3.2 下午技术面，二面\n\n3.4 因为我自己之前的base在北京，后面我自己想换到上海，咨询以后说可以转，部门内转了，然后技术面成绩照用，但是需要加一个hr面和主管面。\n\n3.6 原部门主管面，面完主管说，他们在北京，hr没有把我想去上海的信息同步到位。面完和hr沟通，换了个三级部门。\n\n3.7 上午新部门hr面，下午主管面，晚上通知结果通过，接到oc，等offer审批，说三到五天。\n\n3.12 要了上份工作领导的姓名和电话，要进行背调。问了offer还在审批，不知道啥时候出结果，焦急等待。\n\n  \n\n分界线————————————\n\n3.15  收到offer了，准备体检，月底入职～\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597180697819869184?sourceSSR=users",
        "title": "【小米】Java开发面经，太难了|0312",
        "content": ">\n> ![](https://git.acwing.com/Hasity/interview_hunter/-/raw/master/2024/image/%E9%9D%A2%E7%BB%8F12%E5%B0%8F%E7%B1%B3.png)\n\n## 1\\. JVM的架构，具体阐述一下各个部分的功能？\n\n**解析：**\n\n考察面试者对JVM有没有整体理解，一般在简历中写了相关技能，面试管会问\n\n**参考答案：**\n\n> JVM（Java Virtual\n> Machine，Java虚拟机）是Java程序运行的环境，它负责将Java字节码转换成特定机器上的机器码并执行。JVM的架构主要由以下几个部分组成，每个部分都有其特定的功能：\n>\n>   1.\n> 类加载子系统：负责加载类的信息到JVM中。当Java程序需要使用某个类时，类加载子系统负责找到对应的.class文件，并将其加载到JVM的方法区中。这个子系统确保了类的正确性和安全性，同时实现了类的动态加载。\n>   2.\n> 方法区：存放已加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。方法区是线程共享的内存区域，它在JVM启动的时候被创建，并且随着类的加载而动态扩展。方法区中包含运行时常量池，用于存放编译期生成的各种字面量和符号引用。\n>   3.\n> Java堆：Java堆是JVM所管理的最大一块内存区域，它是所有线程共享的内存区域。几乎所有的对象实例都在这里分配内存。Java堆是垃圾收集器管理的主要区域，因此也经常发生垃圾回收操作。\n>   4.\n> Java栈：每个Java虚拟机线程都有一个私有的Java栈，与线程同时创建。Java栈中保存着帧信息，每个方法在执行时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。\n>   5.\n> 程序计数器（PC寄存器）：这是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。\n>   6.\n> 本地方法栈：与虚拟机栈所发挥的作用非常相似，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。\n>\n\n>\n>\n> 此外，JVM还包含直接内存，这是Java堆外的、直接向系统申请的内存空间。直接内存的访问速度通常优于Java堆，因此在一些读写频繁的场合可能会考虑使用直接内存。垃圾回收器可以对方法区、Java堆和直接内存进行回收。\n>\n>\n> JVM的执行引擎负责执行虚拟机的字节码，虚拟机会使用即时编译技术将方法编译成机器码后再执行。这样，JVM就能提供一个安全、稳定、高效的运行环境，使得Java程序能够跨平台运行。\n\n**学习指引：**[JVM组成结构以及各部分的功能详解](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F166254123)\n\n>\n> **[面经专栏直通车](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fmanager%2FcolumnDetail%2F0xKkDM)**\n\n>\n> **[面经专栏下载](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgit.acwing.com%2Flicw%2F24_job_hunter)**\n\n## 2\\. Zset的底层如何实现\n\n**解析：**\n\nRedis 经典八股文之一，属于常考题。\n\n**参考答案：**\n\n> Redis 的 Zset（有序集合）类型的底层实现会根据实际情况选择使用压缩列表（ziplist）或者跳跃表（skiplist）。Redis\n> 会根据实际情况动态地在这两种底层结构之间切换，以在内存使用和性能之间找到一个平衡。\n>\n> 这主要取决于两个配置参数：`zset-max-ziplist-entries` 和 `zset-max-ziplist-value`。\n>\n>   1. **使用压缩列表** ：当 Zset 存储的元素数量小于 `zset-max-ziplist-entries` 的值，且所有元素的最大长度小于\n> `zset-max-ziplist-value` 的值时，Redis\n> 会选择使用压缩列表作为底层实现。压缩列表占用的内存较少，但是在需要修改数据时，可能需要对整个压缩列表进行重写，性能较低。\n>\n>\n> 压缩列表是一种为节省内存而设计的特殊编码结构，它将所有的元素和分数紧凑地存储在一起。这种方式的优点是占用内存少，但是在需要修改数据时，可能需要对整个压缩列表进行重写，性能较低。当\n> Zset 存储的元素数量较少，且元素的字符串长度较短时，Redis 会选择使用压缩列表作为底层实现。\n>\n>   2. **使用跳跃表** ：当 Zset 存储的元素数量超过 `zset-max-ziplist-entries` 的值，或者任何元素的长度超过\n> `zset-max-ziplist-value` 的值时，Redis\n> 会将底层结构从压缩列表转换为跳跃表。跳跃表的查找和修改数据的性能较高，但是占用的内存也较多。\n>\n> 跳跃表是一种可以进行快速查找的有序数据结构，它通过维护多级索引来实现快速查找。这种方式的优点是查找和修改数据的性能较高，但是占用的内存也较多。当\n> Zset 存储的元素数量较多，或者元素的字符串长度较长时，Redis 会选择使用跳跃表作为底层实现。\n>\n> 跳跃表（skiplist）是一种可以进行快速查找的有序数据结构，它通过维护多级索引来实现快速查找。\n>\n>\n\n>\n> 这两个参数都可以在 Redis 的配置文件中进行设置。通过调整这两个参数，你可以根据自己的应用特性，选择更倾向于节省内存，还是更倾向于提高性能。\n\n**学习指引：**[Redis中zset的底层实现原理](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fcloud.tencent.com%2Fdeveloper%2Farticle%2F2183817)\n\n## 3\\. Mysql隔离机制有哪些？怎么实现的？可串行化是怎么避免的三个事务问题？\n\n**解析：**\n\nMySQL 常见八股文，考察数据库隔离机制及实现原理。\n\n**参考答案：**\n\n>\n> MySQL的隔离机制主要通过事务的隔离级别来实现。事务的隔离级别定义了事务之间如何相互隔离，以及如何影响其他事务。MySQL提供了四种事务隔离级别：READ\n> UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。\n>\n>   1. **READ UNCOMMITTED（读未提交）**\n>\n> 这是最低的隔离级别。在这个级别下，一个事务可以读取另一个未提交事务的修改。这可能导致脏读、不可重复读和幻读。 实现：无需额外的机制，直接读取数据即可。\n>\n>   2. **READ COMMITTED（读已提交）**\n>\n> 大多数数据库系统的默认隔离级别（但不是MySQL的默认级别）。它只能读取已经提交的数据。这可以防止脏读，但仍然可能导致不可重复读和幻读。\n> 实现：当事务进行时，它读取的数据行会被加上锁，其他事务不能修改这些数据行，直到当前事务提交或回滚。\n>\n>   3. **REPEATABLE READ（可重复读）**\n>\n> MySQL的默认隔离级别。它确保了在同一个事务中多次读取同样记录的结果是一致的。这可以防止脏读和不可重复读，但仍然可能导致幻读。\n> 实现：MySQL使用多版本并发控制（MVCC）来实现这个隔离级别。每个事务都看到一个一致的数据快照，即使其他事务正在修改数据。\n>\n>   4. **SERIALIZABLE（可串行化）**\n>\n> 这是最高的隔离级别。它通过强制事务串行执行，从而避免脏读、不可重复读和幻读。但是，这可能会大大降低并发性能。\n> 实现：在SERIALIZABLE级别下，每个读写事务都会获得一个唯一的锁，这确保了事务的串行执行。MySQL通过表锁或行锁来实现这一点，具体取决于存储引擎。\n>\n>\n\n>\n> **可串行化是如何避免三个事务问题的？**\n>\n> 三个事务问题通常指的是：脏读、不可重复读和幻读。\n>\n>   1. **脏读**\n> ：一个事务读取了另一个未提交事务的修改。在SERIALIZABLE隔离级别下，由于事务是串行执行的，未提交的事务的修改不会被其他事务读取，因此避免了脏读。\n>   2. **不可重复读**\n> ：在同一个事务中，多次读取同一数据返回的结果有所不同。SERIALIZABLE级别通过强制事务串行执行，确保在事务期间数据的一致性，从而避免了不可重复读。\n>   3. **幻读**\n> ：一个事务在执行两次相同的查询，但由于另一个并发事务的插入或删除操作，导致第二次查询返回了不同的结果集。在SERIALIZABLE级别下，由于每个读写事务都会获得一个唯一的锁，这确保了其他事务不能插入或删除数据，从而避免了幻读。\n>\n\n>\n>\n> 需要注意的是，虽然SERIALIZABLE级别可以完全避免这三个问题，但它也可能导致性能下降，因为它限制了并发性。在实际应用中，需要根据具体的应用需求和性能要求来选择合适的隔离级别。\n\n**学习指引：**[MySQL事务隔离级别和实现原理](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F117476959)\n\n## 4\\. Spring源码看过吗？Spring的三级缓存知道吗？\n\n**解析：**\n\nSpring 原理老八股问，常考。\n\n**参考答案：**\n\n> Spring框架中确实存在三级缓存机制，它主要用于解决循环依赖问题。具体来说，这三级缓存分别是：\n>\n>   1. **singletonObjects**\n> ：一级缓存，通常被理解为单例池，用于存放已经完全初始化的单例Bean实例。这些实例在缓存中是以键值对的形式存在的，键为Bean的名字，值为Bean实例。\n>   2. **earlySingletonObjects**\n> ：二级缓存，用于存放已经创建但还未完成初始化的单例Bean实例。这些Bean实例通常是因为依赖其他Bean实例而无法完成初始化，处于不完整状态。\n>   3. **singletonFactories**\n> ：三级缓存，用于存放Bean实例的工厂对象。这些工厂对象可以用来创建单例Bean实例，并在需要时提前暴露Bean，以便解决循环依赖问题。\n>\n\n>\n>\n> 需要注意的是，只有单例的Bean会通过三级缓存提前暴露来解决循环依赖的问题。非单例的Bean每次使用都会从容器中创建新对象，因此不会将其放到三级缓存中。此外，Spring之所以设计二三级缓存而不仅仅是二级缓存，主要是为了解决循环依赖对象需要提前被AOP代理的问题，以及在没有循环依赖的情况下，早期的Bean也不会真正暴露，避免不必要的代理过程。\n>\n> 总的来说，Spring的三级缓存机制是一个复杂但高效的设计，它允许Spring在创建和初始化Bean时处理各种复杂情况，包括循环依赖和AOP代理等。\n\n**学习指引：**[彻底搞懂Spring之三级缓存解决循环依赖问题](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F610322151)\n\n## 5\\. 抛开Spring，讲讲反射和动态代理？那三种代理模式怎么实现的？\n\n**解析：**\n\nSpring 原理八股，属于常考题\n\n**参考答案：**\n\n>\n> 当谈到反射和动态代理时，通常是指在运行时动态地创建和操作类的实例，而不是在编译时静态地绑定类和方法。这些概念在Java编程中经常用于实现框架和库，以及在运行时实现各种功能的灵活性和可扩展性。\n>\n> **反射（Reflection）** ：\n>\n>\n> 反射允许在运行时检查、获取并操作类的属性、方法和构造函数，以及访问和修改类的成员变量。Java反射API提供了一组类和接口，例如`Class`、`Method`、`Field`等，可以用于实现这些功能。\n>\n> 反射的主要应用包括：\n>\n>   1. 在运行时创建类的实例。\n>\n>   2. 动态地调用类的方法。\n>\n>   3. 获取和修改类的成员变量。\n>\n>   4. 通过反射读取和操作注解信息。\n>\n>\n\n>\n> **动态代理（Dynamic Proxy）** ：\n>\n>\n> 动态代理是一种在运行时动态生成代理类的机制，代理类负责调用目标类的方法并在必要时执行额外的逻辑。Java中的动态代理通常通过`java.lang.reflect.Proxy`类实现，它要求目标类必须实现至少一个接口。动态代理的主要应用包括：\n>\n>   1. 实现AOP（面向切面编程）。\n>\n>   2. 实现远程方法调用（RMI）。\n>\n>   3. 实现虚拟代理、延迟加载等模式。\n>\n>\n\n>\n> **三种代理模式的实现方式：**\n>\n>   1. **静态代理（Static Proxy）** ：\n>\n\n>\n>\n> 静态代理是通过手动编写代理类来实现的，在编译时就已经确定了代理类和目标类之间的关系。代理类通常实现与目标类相同的接口，并在方法中调用目标类的方法，并可以在方法前后添加额外的逻辑。\n>\n>   2. **JDK动态代理** ：\n>\n\n>\n>\n> JDK动态代理是基于接口的代理，在运行时通过`java.lang.reflect.Proxy`类动态生成代理类。这种代理方式要求目标类必须实现至少一个接口，代理类在调用目标类方法时会通过`InvocationHandler`接口来处理方法的调用。\n>\n>   3. **CGLIB动态代理** ：\n>\n\n>\n>\n> CGLIB动态代理是基于类的代理，它通过继承目标类并重写其方法来实现代理。与JDK动态代理不同，CGLIB动态代理可以代理没有实现接口的类，它使用`Enhancer`类生成代理类，并通过`MethodInterceptor`接口来处理方法的调用。\n\n**学习指引:** [深入理解 Java\n反射和动态代理](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F60805342)\n\n## 6\\. 讲讲线程池？为什么用线程池?\n\n**解析：**\n\n操作系统八股文，常考提，难度适中。\n\n**参考答案**\n\n>\n> 线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。具体来说，线程池在系统中开辟一块区域，存放一些待命的线程，这些线程会等待任务的到来。一旦有任务需要执行，线程池会从这些待命的线程中选取一个来执行任务，任务执行完毕后，线程会返回线程池等待下一次的任务分配。\n>\n> 使用线程池的主要原因包括：\n>\n>   1. **资源重用**\n> ：通过重复利用已创建的线程，线程池显著降低了线程创建和销毁所带来的资源消耗，包括内存和CPU时间。这有助于减少系统的开销，并提高整体性能。\n>   2. **提高响应速度**\n> ：由于线程已经预先存在，当任务到达时，它们可以立即开始执行，无需等待线程的创建过程。这大大提高了系统的响应速度，特别是在高并发场景下。\n>   3. **控制并发数**\n> ：线程池可以有效地控制并发执行的任务数量，防止系统资源耗尽或响应速度下降。通过设置线程池的核心线程数、最大线程数以及队列大小等参数，可以根据系统的承载能力来限制并发级别，提高系统资源的利用率。\n>   4. **提高线程的可管理性**\n> ：线程是稀缺资源，无限制的创建不仅会消耗系统资源，还可能降低系统的稳定性。线程池提供了统一的线程分配、调优和监控机制，使得线程的管理更加便捷和高效。\n>   5. **提供灵活的线程调度策略**\n> ：线程池通常支持多种线程调度策略，如优先级队列、定时调度、阻塞队列等，这些策略可以根据任务的特性来合理分配线程资源，优化程序运行效率。\n>   6. **异常处理与监控**\n> ：线程池能够更好地统一管理和处理线程的异常情况，避免因为单个线程的异常而导致整个应用程序崩溃。此外，线程池还提供了监控机制，可以实时查看线程的状态和性能数据，便于进行性能分析和调优。\n>\n\n>\n>\n> 线程池通过优化线程的使用和管理，提高了系统的性能和稳定性，特别是在处理大量并发任务时表现出色。因此，在需要频繁创建和销毁线程的场景中，使用线程池是一种非常有效的解决方案。\n\n**学习指引：**[【详解】为什么使用线程池？线程池的实现原理是什么？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2FSunshineoe%2Farticle%2Fdetails%2F123533889)\n\n## 7\\. 集合里面的arraylist和linkedlist的区别是什么？有何优缺点\n\n**解析：**\n\nJAVA 基础考察，难度简单\n\n**参考答案：**\n\n> `ArrayList` 和 `LinkedList` 是 Java\n> 集合框架中两种最常用的列表实现。它们的主要区别在于数据的内部存储和访问方式，因此它们在性能特性上有所不同。\n>\n>   1. **底层数据结构** ：\n>\n\n>\n> `ArrayList`：基于数组实现。它在内存中维护一个连续的空间来存储元素。\n>\n> `LinkedList`：基于链表实现。它使用双向链表存储元素，每个元素都包含指向其前一个和后一个元素的引用。\n>\n>   2. **访问元素** ：\n>\n\n>\n> `ArrayList`：通过索引访问元素非常快，因为可以直接计算元素在内存中的位置。时间复杂度为 O(1)。\n>\n> `LinkedList`：通过索引访问元素相对较慢，因为需要从头或尾开始遍历链表直到找到所需元素。时间复杂度为 O(n)。\n>\n>   3. **插入和删除元素** ：\n> `ArrayList`：在列表的开头或中间插入或删除元素时，可能需要移动大量元素以保持数组的连续性。因此，这些操作相对较慢，特别是在列表很大时。\n> `LinkedList`：在列表的任何位置插入或删除元素都相对较快，因为只需要更新相邻元素的引用。\n>\n>   4. **内存消耗** ：\n>\n>\n> `ArrayList`：由于数组需要预留连续的内存空间，所以可能存在一定的内存浪费。但是，由于它的内存布局更紧凑，所以在存储相同数量的元素时，`ArrayList`\n> 通常比 `LinkedList` 占用更少的内存。\n> `LinkedList`：由于每个元素都需要存储指向其前一个和后一个元素的引用，所以链表实现通常会有更高的内存开销。\n>\n>   5. **用途** ：\n>\n>\n\n>\n> 当你需要频繁地通过索引访问元素，且不需要经常插入或删除元素时，`ArrayList` 是一个好选择。\n>\n> 当你需要在列表的任何位置频繁地插入或删除元素时，`LinkedList` 更为合适。\n>\n> 总结优缺点：\n>\n> **ArrayList** ：\n>\n>   * **优点** ：通过索引访问元素非常快，内存占用相对较小（相对于 LinkedList）。\n>   * **缺点** ：在列表开头或中间插入、删除元素时性能较差，因为可能需要移动大量元素。\n>\n\n>\n> **LinkedList** ：\n>\n>   * **优点** ：在列表的任何位置插入或删除元素都很快，不需要移动其他元素。\n>   * **缺点** ：通过索引访问元素较慢，因为需要从头或尾开始遍历链表。内存占用相对较大，因为每个元素都需要存储额外的引用。\n>\n\n**学习指引：**[ArrayList和LinkedList的区别以及优缺点](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2Fqq_32679815%2Farticle%2Fdetails%2F78907437)\n\n## 8\\. 介绍一下计网里面的tcp和udp协议\n\n**解析：**\n\n考察计算机网络基础知识，属于基础题，需要注意的是要答全要点。\n\n**参考答案：**\n\n> TCP（传输控制协议）和UDP（用户数据报协议）是计算机网络中用于处理传输数据包的两种重要协议，它们各自具有不同的特点和使用场景。\n>\n>\n> TCP协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。在通信之前，TCP会在发送方和接收方之间建立连接，确保数据传输的可靠性。TCP通过确认机制、超时重传、流量控制以及拥塞控制等手段，确保数据能够无差错、不丢失、不重复、按序到达。TCP协议提供全双工通信，允许通信双方的应用进程在任何时候都可以发送数据。然而，由于TCP需要建立连接并进行一系列的检查与修改，其开销相对较大，实时性也不如UDP。\n>\n>\n> 相比之下，UDP协议则是一种无连接、不可靠的传输层协议。UDP在发送数据前不建立连接，也不对数据报进行检查与修改，因此其传输效率较高，实时性较好。但是，由于UDP不保证数据的可靠性，可能会出现分组丢失、重复、乱序等问题，需要应用程序自行处理这些问题。UDP协议适用于对实时性要求较高，但对数据可靠性要求不高的场景，如视频流传输、实时语音通信等。\n>\n>\n> TCP和UDP协议各有优劣，应根据具体的应用场景和需求来选择合适的协议。对于需要保证数据可靠性的场景，如文件传输、电子邮件等，通常选择TCP协议；而对于实时性要求较高，但对数据可靠性要求不高的场景，则可以选择UDP协议。\n\n**学习指引：**[深入理解网络通讯和TCP、IP协议](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fdeveloper.baidu.com%2Farticle%2Fdetails%2F3137237)\n\n## 9\\. 介绍一下http和https的区别？为什么https安全？\n\n**解析：**\n\n计算机网络基础知识，属于简单八股文，需要注意的是要答全要点。\n\n**参考答案：**\n\n> HTTP和HTTPS的主要区别体现在安全性和数据传输方式上。\n>\n>\n> 首先，HTTP是超文本传输协议，它采用明文方式传输数据，这意味着数据在传输过程中是不加密的，可能会被第三方截获或篡改。相比之下，HTTPS则是具有安全性的SSL加密传输协议，它通过在HTTP协议的基础上添加SSL/TLS加密层，实现了数据的加密传输。因此，HTTPS可以防止中间人攻击和数据窃听，使得数据在传输过程中更加安全。\n>\n>\n> 其次，HTTPS需要到CA申请证书，一般情况下需要一定费用，而HTTP则无需此步骤。此外，HTTP和HTTPS使用的端口号也不同，HTTP的端口号是80，而HTTPS的端口号是443。\n>\n>\n> HTTPS之所以安全，主要得益于其采用的加密技术和身份验证机制。SSL/TLS加密层对传输的数据进行加密处理，确保数据的完整性和机密性。同时，HTTPS还包含身份验证环节，通过验证服务器端的证书，确保客户端与正确的服务器进行通信，防止了中间人攻击和服务器劫持等安全问题。\n\n**学习指引：**[只看这一篇就能搞懂Http和Https协议区别](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F631089816)\n\n## 10\\. Mysql有很大的数据量怎么办？怎么分表分库？\n\n**解析：**\n\nMySQL 大数据处理，数据一定难度的题，也是常考题。\n\n**参考答案：**\n\n>\n> 当MySQL数据库中的数据量变得非常大时，性能可能会受到影响，查询速度变慢，甚至可能导致系统崩溃。为了解决这个问题，我们可以采用分表分库的策略。分表分库是将一个大的数据库或表拆分成多个较小的、更易于管理的部分，以提高性能、可靠性和可维护性。\n>\n> 以下是一些关于如何分表分库的建议：\n>\n> **1\\. 垂直拆分**\n>\n> **垂直分库** ：按照业务将不同的表分到不同的数据库上，每个数据库都包含各自独立的业务数据。\n>\n> **垂直分表** ：将一个大表中的某些列拆分到另一个表中，通常是按照列的属性进行拆分。例如，将经常访问的列和不经常访问的列分开。\n>\n> **2\\. 水平拆分**\n>\n> **水平分库** （也叫分区）：按某个字段的某种规则，将同一个表中的数据拆分到多个数据库（服务器）上，每个库可以放在不同的服务器上。\n>\n> **水平分表** （也叫分片）：将同一个表中的记录拆分到多个结构相同的表，每个表只包含一部分数据。常见的分片键有用户ID、订单ID等。\n>\n> **3\\. 分片策略**\n>\n> _范围分片_ *：按某个范围来分片，比如按时间范围或ID范围。\n>\n> **哈希分片** ：对某个字段进行哈希计算，然后按照哈希值的大小或范围进行分片。\n>\n> **目录分片** ：创建路由表或目录，路由表中保存了数据记录的存放位置信息，系统执行查询操作时，根据路由表的地址信息去相应的分片中查询。\n>\n> **4\\. 注意事项**\n>\n>   * **事务处理** ：分表分库后，跨表或跨库的事务处理变得更加复杂，需要考虑分布式事务的解决方案。\n>   * **数据迁移与备份** ：随着数据的增长，可能需要定期迁移数据或进行备份。确保有有效的数据迁移和备份策略。\n>   * **中间件** ：使用数据库中间件（如MyCAT、Sharding-JDBC等）可以简化分表分库的操作，隐藏底层的复杂性。\n>   * **应用层调整** ：分表分库后，应用层需要进行相应的调整，以支持新的数据结构和查询方式。\n>   * **测试与监控** ：在实施分表分库之前和之后，都需要进行充分的测试和监控，以确保系统的稳定性和性能。\n>\n\n>\n> 总之，分表分库是一个复杂的过程，需要根据具体的业务场景和需求来制定合适的策略。在实施之前，建议进行充分的调研和测试，以确保系统的稳定性和性能。\n\n**学习指引**\n[MySQL数据库中，数据量越来越大，有什么具体的优化方案么？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F94146184)\n\n## 11\\. Redis的基本数据类型？Redis的持久化呢？有何优缺点？\n\n**解析：**\n\nRedis 基础知识，简单的八股文，需要掌握好。\n\n**参考答案：**\n\n> Redis是一个开源的使用ANSI C语言编写的、支持网络、可基于内存亦可持久化的日志型、Key-\n> Value数据库，并提供多种语言的API。以下是关于Redis的基本数据类型和持久化的详细解答：\n>\n> **一、Redis的基本数据类型**\n>\n> Redis支持五种基本数据类型：\n>\n>   1. **String（字符串）**\n> ：这是Redis最基本的数据类型，可以理解为与Memcached中的类型一致，即一个key对应一个value。String类型是二进制安全的，意味着它可以包含任何数据，如jpg图片或序列化的对象。在Redis中，字符串的value最大可以达到512M。\n>   2. **Hash（哈希）**\n> ：Redis的Hash是一个键值对集合，实际上是一个String类型的field和value的映射表。Hash特别适合用于存储对象。\n>   3. **List（列表）** ：列表是用来存储多个有序的字符串，一个列表最多可以存储2^32-1个元素。\n>   4. **Set（集合）** ：Redis的Set是String类型的无序集合，它是通过HashTable实现的。\n>   5. **Zset（有序集合）**\n> ：Redis的Zset和Set一样都是String类型元素的集合，且不允许重复的成员。但与Set不同的是，Zset的每个元素都会关联一个double类型的分数，Redis正是通过分数来为集合中的元素从小到大进行从小到大的排序。\n>\n\n>\n> 此外，Redis还提供了其他三种特殊的数据结构类型，包括Geospatial（地理位置）、Hyperloglog（基数统计）和Bitmap（位图）。\n>\n> **二、Redis的持久化**\n>\n> Redis提供了两种主要的持久化方法：RDB（Redis DataBase）和AOF（Append Only File）。\n>\n>   1. **RDB** ：\n>\n>\n\n>   * 原理：通过创建子进程，将数据快照写入一个临时文件，然后替换之前的文件达到持久化。主进程在持久化过程中不进行IO操作，保证了持久化过程的高性能。\n>\n>   * 优点：节省磁盘空间，恢复速度快。\n>\n>   * 缺点：如果突然宕机，可能会丢失最后一次备份后的数据。此外，由于是利用拷贝技术，如果数据量较大，持久化过程可能会消耗较多性能。\n>\n>\n\n>   2. **AOF** ：\n>\n>\n\n>   * 原理：通过记录每次写操作命令，并在启动时重新执行这些命令来恢复数据。\n>   * 优点：提供了更稳健的数据恢复机制，丢失数据少，生成的日志可读，便于处理误操作。\n>   * 缺点：相比RDB，AOF占用了更多的内存空间，恢复备份的速度较慢。如果每次读写都同步的话，会有一定的性能压力。\n>\n\n>\n>\n> 在选择持久化方式时，需要根据实际的应用场景和需求进行权衡。例如，如果更关心数据的完整性和可靠性，可以选择AOF；如果更看重性能和磁盘空间的利用率，可以选择RDB。当然，也可以结合使用两种持久化方式，以达到最佳的效果。\n\n**学习指引：**\n[redis的五种数据类型、redis持久化机制](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2Frm_rf1024%2Farticle%2Fdetails%2F104074705)\n\n## 12\\. B+树了解吗?底层呢？为什么这么用？\n\n**解析：**\n\n数据库底层原理，数据结构基本原理，常考提，要掌握。\n\n**参考答案：**\n\n> B+树是一种多路搜索树，其定义基本与B-树相同，但在某些方面进行了优化。B+树的主要特点包括：\n>\n>   1. 所有的叶子结点中包含了全部关键字的信息，以及指向包含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。\n>   2. 所有的非终端结点可以看成索引部分，结点中仅含有其子树（根结点）中最大（或最小）关键字。\n>   3. 非叶子节点的关键字数目等于它的分支数量。\n>\n\n>\n>\n> 在B+树中，数据存放的更加紧密，具有更好的空间局部性，因此访问叶子节点上关联的数据具有更好的缓存命中率。同时，由于叶子结点都是相链的，对整棵树的遍历只需要一次线性遍历叶子结点即可，且由于数据顺序排列并且相连，所以便于区间查找和搜索。\n>\n>\n> B+树的底层实现主要是基于多路平衡查找树。在查询过程中，从根节点出发，查找到叶子节点方可获得所查键值，然后根据查询判断是否需要回表查询数据。这种结构使得B+树在访问数据时具有更高的效率。\n>\n> B+树在数据库和许多其他数据结构中得到广泛应用的原因主要有以下几点：\n>\n>   1.\n> I/O次数更少：由于B+树的层数比其他树（如二叉搜索树）小，因此读取节点并进行I/O操作的次数也会减少。同时，B+树中间节点不存储数据，只存储索引，使得相同大小的磁盘页可以容纳更多的节点元素，进一步减少了I/O次数。\n>   2. 查询更加稳定：B+树每次查询都必须访问到叶子节点，而B-树可能在中间节点或叶子节点找到匹配元素，因此B+树的查询性能更为稳定。\n>   3. 更利于查询范围：由于B+树的叶子节点首尾相连，因此在进行范围查询时，只需要在链表上进行遍历，效率非常高。\n>\n\n**学习指引：**[面试官：MySQL索引为什么要用B+树实现？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2Fzzti_erlie%2Farticle%2Fdetails%2F82973742)\n\n>\n> [更多面经直通车](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fusers%2F630265916)\n\n>\n> [原贴连接](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Ffeed%2Fmain%2Fdetail%2F6b1e855d9f9843ba8e576f852ab391ed)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597180307938320384?sourceSSR=users",
        "title": "EMQ映云科技一面",
        "content": "26届找日常实习，投了两家简历就有一家马上约面了，就是 EMQ映云科技 了，HR 人感觉很好的。\n\n# 问项目情况\n\n简要介绍在字节的实习经历中，5个月都做了什么，主要讲了负责的两个小项目（面试官觉得五个月才做两个事情太少了，不过我当时的 leader\n真的是不给我什么任务，都是自己在学习，去要工作也要不到什么业务）。如何排查出问题并解决的（给的代码 MySQL\n落库的状态错误，我简单修复就提交了）。问，做的数据迁移拓扑图具体是什么样的（就很简单的节点和箭头，颜色，边上的标注等等）\n\n生产环境的数据是如何导入到沙箱隔离环境的？（生产环境的数据经过第一层网关的时候会往 context\n里面做键值对标记，表明该流量应该转发的环境有哪些，后面网关再做对应的转发）\n\n向他项目大多是实验室的科研项目和自己的小项目，面试官觉得没有含金量没问。\n\n# golang 八股\n\n  1. 如何启动一个协程？使用 go 关键字启动函数类型对象\n  2. 如何控制协程的关闭？一开始回答说可以用 Context 的超时类型 但是我不想超时之后再自动结束，如何直接控制结束？因为没了解过像 C++ 那样发送信号之类的，所以回答了用 channel 发送结束信号那如果有十几个协程都启动了协同完成一件事情，如何在其中一个协程完成了之后其他协程结束？（比如多个协程进行文本单词搜索，其中一个协程找到了，其他协程也结束）没有想到什么好的方法，说使用闭包作为协程启动对象，闭包去引用外部的公共变量，然后上锁，定时去检测，但感觉面试官想要的不是这个方法？说应该也能做到\n  3. 通道创建的时候，携带的数值参数是什么作用？指定数据缓冲大小\n  4. 写入无缓冲通道会怎么样？阻塞\n  5. 读无缓冲对象会怎么样？应该也会阻塞（感觉回答的时候用不确定的语气面试官默认你不会，但实际上之前看过相关的面经，有点印象哈哈）\n  6. 写入一个已经关闭的通道会怎么样？panic\n  7. 读一个已关闭的通道会怎么样？获得通道数据类型的零值 如果是读缓冲中仍有数据的呢？会获得剩余的数据直到返回最后一个数据和false表示缓冲中已经没有下一个数据\n  8. 准备写一个通道时候，怎么判断有没有关闭？可以用 `data, ok := <-in` 的方式读取一下看看是不是返回 false。（面试官说有没有其他方法，总不能每次写之前都用读判断一下有没有关闭吧）继续答，可以用局部的 panic-recover ，如果写入失败的话局部函数退出提前捕获返回的 `err != nil` （面试官好像勉强接受这个方式？）\n  9. select 去读取多个通道不会阻塞吗？是的（印象中这么写轮询有数据的通道，没有就结束）像 I/O 模型的 poll/epoll 帮我们检测可读文件描述符一样。（应该要 default 才行吧）是的是的，默认了……\n\n# MySQL 八股\n\n  1. where 子句 和 having 子句有什么区别（没复习好，说的 where 是 select 选出所有数据之前进行筛选，having 是扫描所有数据得到 select 列所有数据后再筛选，实际上应该是 分组前筛选和分组后筛选）\n\n# 反问\n\n项目组里怎么使用 golang 的呢？我看 hr 给我发的项目介绍里面，MQTT 主要是 erlang 呢，仓库的语言没有\ngolang。（我所在的小组负责另外一个开源项目，不是 MQTT 的。EMQ 主要的是做 MQTT\n服务器程序，开源项目贡献了以后成绩也是自己的，还是挺好的）\n\n# 总结\n\n没有算法题，可能是我答错了很多，面试官觉得我基础不行根本不用继续下去了，MySQL 就问了一个问题，或者单纯的就是实习岗位不需要太难？\n\n  1. 在校追绩点是有代价的，花了更多时间做专业课和保研，那就少了很多时间去学企业招聘要求的技术\n  2. 都是 gopl-zh 里的基础内容，奈何忘了太多了，只能凭印象回答\n  3. MySQL 除了索引事务常见的八股，关键字、子句、SQL也是常考八股，很久不写 SQL 了，关键字的特性都忘了，但是专门去复习索引和事务那些底层八股了，结果漏了最平常的问题\n\n整场面试 40\n分钟，只问项目和八股（面试官觉得大厂实习五个月做的事情比较少。。。唔确实说的比较委婉了），没有算法，我还最近天天刷五六道题，各种题库轮流做。可能前面答得基础不行，就没必要做算法了，随便问点其他的收尾……\n\n感觉自己就是应试教育下的专门产物，唉，只懂得死记硬背了，没什么灵活变通的能力，遇到没见过的情况直接一脸懵。感觉现在行业最不缺的就是埋头苦干勤勤恳恳的码农了，985的学历只能证明在应试教育的体系下我能完成任务，可是实际行业生产所需的技能我却是不知道如何系统性地学习的，所以感觉招人能招到一个轻轻松松的第二名，就没必要招一个勤奋努力的第一名😣\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597178859020165120?sourceSSR=users",
        "title": "腾讯wxg二面",
        "content": "  * 内存分配算法 如何分配 分配的内存块可能比较小 内存是一块连续的 很大 保证回收时不浪费太多的碎片\n  * udp 设计一个算法 udp一次能传输多少呢？ 1gb可以吗 还是1k 1m 100k 每次要怎么传输呢 传输窗口不大呢 保证最大传输效率？动态监测？ 如何保证接收方不丢包 发送方正确传输 可以做到吗？ 你觉得中途出错的原因呢？ 防止窃听怎么做呢？保证哈希可以吗？ md5？\n  * 我要加密一个字节流 要保证能还原 能怎么做到呢？ 比如是一个64位字节流 加密成2位二进制 加密成16位呢？ 先转十进制？ 有什么更好的做法吗？base64。。。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597177823408799744?sourceSSR=users",
        "title": "微众测试（武汉）-社招面试记录（1，2，3，4面）",
        "content": "牛客网新人，平时不怎么逛这个网站，技术也很菜鸡。\n\n在26厂干测试5年广进了。\n\n在一线城市卷不动了，于是萌生了找个二线城市的想法。\n\n在这里记录一下面试的过程，希望能帮助到其他的同学。\n\n因本人不在武汉，所以以下面试都是远程腾讯会议进行：\n\n一面 3.9号 1h：\n\n二面 3.11号 30分钟左右\n\n三面 hr面 3.14 20分钟\n\n四面 叫什么综合面试（个人感觉是性格测试） 3.15 40分钟\n\n# 一面：\n\n自我介绍；\n\n项目介绍，用一个简单的实际例子介绍你的项目是干什么的？\n\n自动化用例框架选择的原因，大致讲一下你用例实现的过程？如何实现登录操作的？\n\n4.如何验证微信的随机红包是真随机的？\n\n5.有一个放贷的业务，经历A->B->C->申请人手中。请设计测试用例测试这个流程？\n\n6.有一张在spark里面的表，里面有客户姓名，信用卡额度，已使用额度等信息，表以天为分区，求出近90天内信用率大于50%的客户（信用率就是已使用的额度处于信用卡的额度）？\n\n\\--这个问题刚开始一直没get到面试官的想法，说让我用增量的方式？如果用全量的方法的话，会有什么可能的风险点？\n\n7\\. 简单的sql查询，有姓名，性别，运动。求喜欢各个运动的男女生人数。用一行sql语句求出来。\n\n8\\. 你们在测试的时候是如果构造自己的数据质量体系？这个问题没太听明白，说了几点，面试官表示不是他想要的。\n\n9.为什么离职？(直说裁员)，为什么选择武汉？来过武汉吗？平时考核怎么样？\n\n10.反问？（加班情况，进去后的主要工作内容，有没有双休？等\n\n3.5号，收到hr的性格测试，说很重要，要重视（后面一面的面试官加上微信说让我好好答，hr可能会因为这个一票否则，但我那个时候已经答完了/(ㄒoㄒ)/~~。）\n\n# 二面\n\n二面应该是项目线的领导，说下面管了好几个团队。\n\n1.自我介绍；\n\n2.项目介绍，你负责的模块是干什么的？平时如何进行测试的？你在里面起到什么作用？（由于我们组模式的问题，都是一个人人对接一个团队，所有我说从最开始的需求澄清，到最后的测试执行，bug提交全都是我一个人干的，哈哈😂~）?\n\n3\\. 你如何评价自己？抗压能力怎么样？学习能力怎么样？如何评价自己的领导？你们公司加班是什么情况？\n\n4 为什么离职？(直说裁员)，为什么选择武汉？来过武汉吗？平时考核怎么样？是主动背的名额还是领导找到的你？--感觉被裁心累，总让人感觉是因为能力问题。\n\n5\\. 你对工作有什么期望？\n\n6.反问？听说有末位淘汰制度15%？--确实有，但有些是3个月，6个月就走的，还没到考核的时候。领导说招人肯定是希望稳定性久一点的。\n\n有没有微众搞个人贷款业务的佬，里面加班真的强度这么大吗？\n\n# 三面 hr：\n\n本来想约晚上的，结果hr只有白天有空，果然hr是不加班的，哈哈。\n\n不知道为什么和我联系的hr是个小姐姐，面试的时候又是个小哥哥。\n\n由于在公司会议室面的，面的时候总是担惊受怕，怕有人闯进来。\n\n  1. 自己介绍；\n  2. 离职原因？是自己领的，还是被领导找上的。？--自己借着机会走的？那换城市的想法是什么？\n  3. 有没有和家里商量？对象同意吗？-家里听我的，没对象，哈哈哈哈，没有牵挂。\n  4. 期望薪资；目前总包是多少？\n  5. 项目是卖的服务还是卖的产品？\n\n反问：\n\n工作时间是什么样的？--不打卡？只要做完事就行？那岂不是24小时待命？\n\n中午午休多久？一般12去食堂，2点上班？\n\n有中午关灯睡觉吗？有，hr问我为什么关注这个，我说在广东睡习惯了,哈哈哈哈🤣\n\n本来想问薪资结构，说后面有专人负责就没问。\n\n结束后，一直联系的我的hr小姐姐打电话来，说还有一个面试，是个领导面。不知道为什么又加了一面，难道是我期望报高了？\n\n# 四面：\n\n面试官自己介绍，说自己也是从深圳刚回武汉，负责综合测试（我感觉就是学心理的）\n\n  1. 自己介绍、、\n  2. 为什么离职？(直说裁员)，为什么选择武汉？--每次面试都问，\n  3. 工作中遇到过什么大的困难，如何解决？\n  4. 平时有什么爱好？\n  5. 收到不公和委屈如何排解？\n  6. 有没有听过微众的价值观？-没有，我自己公司的价值观都记不住\n  7. 人生的价值观？-刚开始没想好，面试官说有些人喜欢自由，有些人喜欢干事。就是你觉得人生中有什么重要的东西？--我回答：快乐，人生苦短，终归尘土（有喜欢看《凡人修仙传》的朋友肯定想起了莫大夫），开心最重要，哈哈哈~！\n\n开放性问题：\n\n1\\. 你有100块钱，张三有个聚宝盆，投入金额进去，会翻倍产出。你会愿意给多少钱，给张三？\n\n2\\. 有2批敌人，一边是一只像马那么大的鸭子，另外100只像鸭子一样大的马？选一个杀死？\n\n反问：\n\n面试官说只能问一个问题？我寻思这别的工作内容相关的他估计也不知道。\n\n于是我问她，开放性问题，第一个聚宝盆的问题，想从候选人这里听到什么答案？\n\n答：希望听到合作的意思、还有信任这些东西，听到给出70%的金额，当然金额的数量没有绝对。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597175196688130048?sourceSSR=users",
        "title": "腾讯云-后台开发一面--凉经（java）",
        "content": "面试时间---2024.3.12 20.30\n\n1.自我介绍\n\n2.项目经历\n\n3.八股文（java）\n\n（1）反射的实现原理\n\n（2）线程池的工作原理\n\n（3）分布式锁应用场景\n\n（3）分布式锁---实现原理\n\n（3）分布式锁---使用数据库进行实现\n\n（5）消息队列应用场景\n\n（4）消息队列RabbitMq\n\n（5）RabbitMq如何防止消息丢失\n\n4.算法\n\n求最大重复子串--没写出来\n\n最后整个流程很快45分钟就结束了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597172992778563584?sourceSSR=users",
        "title": "5.海康  #面经攒人品#",
        "content": "春招内推码：**987J1S**  \n\n共两面\n\n### 一面技术\n\n1.c程序的生成过程，（预处理，汇编，编译，链接），各过程生成的中间文件\n\n2.c语言字节对齐作用\n\n3.linux系统中进程与线程的区别\n\n4.TCP四次挥手，close_wait,time_wait状态作用；当服务端一直处于close_wait状态，原因：未调用close()接口\n\n5.自身优缺点，怎么克服\n\n6.未来发展，职业规划\n\n### 二面HR\n\n主要问了项目分工，项目难点，项目创新，项目特点总结\n\n加班，地点，家庭等常见问题\n\n  \n\n春招内推码：**987J1S**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597163075975778304?sourceSSR=users",
        "title": "OPPO 春招 后端工程师 一面+二面+HR面",
        "content": "更新：HR面已完成，许愿offer～\n\n## 时间线\n\n2.29 投递\n\n3.8 性格测试\n\n3.9 笔试\n\n3.12 一面\n\n3.19 二面（上午） + HR面（下午）\n\n## 一面面经\n\n40分钟，面试官很友好，没有答上来的会补充，面试体验挺好的。\n\n  * 自我介绍\n\n#### 项目问题\n\n  * xxx功能怎么实现的，怎么保证安全性\n  * API网关跟Nginx有什么区别\n  * 场景题：流量很大的时候发现响应速度很慢，但是sql语句的查询速度显示正常（即不是查询语句慢的问题），可以分析一下是什么原因吗？（没太理解，然后面试官补充，因为我项目中用了Dubbo，他想问的是在流量突然变得很大的时候，使用Dubbo会有什么问题）\n\n#### 八股文\n\n  * final可以加在哪里，有什么作用\n  * java有哪几种锁\n  * synchronized锁是怎么升级的\n  * 对象锁和方法块锁在指令上的区别（太菜了没了解过）\n  * AQS怎么实现公平和非公平\n  * 线程有哪些状态\n  * 如何查看现在使用cpu最高的一个线程（top -a）\n  * 创建线程有哪几种方式\n  * 线程池的工作原理（7个参数，及工作流程）\n  * HashSet是如何实现的，如何保证不重复\n  * HashTable可以put一个Null吗（不能，因为需要用key去计算hash值，如果key为null会抛出空指针异常）\n  * HashMap在1.7和1.8之间做了什么优化\n  * ConcurrentHashMap呢\n  * Redis内存淘汰策略有哪几种\n  * Redis如何加锁，如何用Redis实现分布式锁\n  * 追问：使用setnx会不会导致死锁（会，必须设置过期时间，使用事务原子命令SET key value EX time NX）\n  * Redis有哪几种高可用部署方式（Redis真不熟。。面试官帮忙说了，主从、哨兵、分布式集群）\n  * Redis如果不用事务命令怎么保证原子性（Lua脚本）\n  * 使用Redis分布式锁有一个问题，不管是主从模式/哨兵模式下，如果主节点挂了，key没有同步到主节点，查询不到key就又可以获取锁，怎么解决（Redisson）\n  * 场景题：如果锁超时释放了，业务还没执行完，其他线程这个时候是可以获取到锁的，但是不想让其他线程获取到锁，如何解决（用一个定时器/看门狗，在锁快过期的时候去判断业务执行完了没有，没执行完就重置过期时间）\n  * NIO跟BIO、AIO的区别\n  * JVM的垃圾回收算法有哪几种\n  * MVCC主要用在哪里\n  * 事务的隔离级别\n  * （面试官本来好像想问一下python，但是我不太熟，只是会用）\n  * Redis缓存穿透是什么，怎么解决\n  * Spring三级缓存为什么要设置第三级\n\n#### 反问\n\n  * 现在面试的岗位是什么部门的（官网上给了8 9个方向）\n  * 技术栈\n  * 面试流程（回答：两轮技术面+一轮HR面）\n  * 反馈时间（2-3天）\n\n## 二面面经\n\n40分钟，主要是问项目，优化方向，场景题，感觉比一面紧张，发挥一般\n\n  * 问了硕士的专业学的什么，以及硕士毕业设计用到的技术（比较浅，没有深入问，因为跟岗位不是太相关）\n  * Spring Boot 是什么（简单讲了一下和 Spring 的区别）\n  * 配置文件用的是yml格式吗？有没有用其他格式？yml格式有什么好处？\n  * Spring Boot 中有解决跨域问题吗？怎么解决的？\n  * 怎么理解微服务？\n  * 说一下 Redis 缓存穿透\n  * 为什么读硕士之前会先去工作？\n  * 问了一些之前工作的内容\n  * Spring Boot 和 Spring Cloud 有啥区别？\n  * 进程调度是怎么进行的？（没复习到。。。）\n\n突然面试官说有个会议，然后换了一个面试官（因为没开摄像头，一开始还没发现）\n\n  * 个人项目中为什么要选择MySQL？目的是什么\n  * 事务的特点\n  * MySQL 并发怎么保证不会有冲突\n  * 什么场景下会导致MySQL的查询和插入效率降低？\n  * 数据量达到多少的时候会影响查询效率？\n  * 个人项目中为什么实现某个功能\n  * HTTP状态码中404和403分别代表什么意思？\n  * 为什么要在项目中使用网关？\n  * 对于日志记录有没有思考过应该写什么样的日志，该怎么写？\n  * 日志怎么分级？分别在什么情况下会用INFO、WARN、ERROR级别？\n  * 发现 WARN 和 ERROR 级别的日志会怎么去处理？\n  * 根据项目给出了一个场景题：如果未来请求变多，有没有思考应该怎么做？\n  * 基于个人项目问的：搭建系统需要考虑哪些问题？如何衡量系统的质量？\n  * 怎么去分析某个请求耗时长的问题？\n\n#### 反问\n\n（第一个面试官正好回来了）\n\n  * 部门负责的业务\n  * 公司氛围\n\n# HR面\n\n20分钟，主要是了解个人的过往经历，气氛比较轻松，聊天。应该每个人的问题都不太一样，就分享一些不透露个人隐私的问题作为参考吧\n\n  * 自我介绍\n  * 为什么工作以后又想去读研？\n  * 为什么选择这个学校读硕士，以及为什么选这个专业？\n  * 为什么想从事后端的岗位？\n  * 问了一些工作经历的细节\n  * 为什么会选择去这家公司工作？\n  * 读研压力大吗？\n  * 求职的时候，对于进入的行业或者从事的业务上有什么规划和考虑吗？\n  * offer情况\n  * 秋招情况\n  * 春招之前的这段时间是怎么安排的？\n\n#### 反问\n\n  * 有没有定岗位（还没定，后续分配）\n  * 针对应届生的培训制度\n  * 工作强度（早上9-9:30，晚上8点左右）\n  * 流程推进需要多久（快的话这周内，慢的话2-3周）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597160017078304768?sourceSSR=users",
        "title": "杭州小公司面试（记录一下尴尬时刻）",
        "content": "1、自我介绍\n\n2、为什么选择用RocketMQ，选型考虑\n\n3、Redis基本类型\n\n4、讲一下SortedSet\n\n5、介绍一下ACID\n\n6、MySQL默认隔离级别\n\n7、可重复读属于比较重的隔离级别，为什么tps不低\n\n（第一次面试，刚说Redis熟脑子宕机讲zset说能放购物车，说完自己都发现不对，脑子转不过来当场尬住了😅，果然还得多刷点小公司面试提升一下，不能贸然面大厂）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597140330667958272?sourceSSR=users",
        "title": "腾讯一面（3.12）（客户端开发岗实习）",
        "content": "一开始先让我做了个自我介绍，然后问我擅长哪门语言，然后让我用C++做了两道题目。第一道是关于单例模式的一个懒加载写法，具体要求是构造一个类，要求写一个成员函数Print用来打印这个类对象本身的地址；第二道关于指针，具体题目是删除当前链表倒数第n个元素，写完之后让我解释代码。这个题目其实比较好做，但是我有点忘记链表结构是如何定义的了，有点不熟。之后问了我关于项目的东西，问的很细致，就是看我是不是真正自己做了；然后问了进程和线程的通信，new和malloc的区别，主码和外码的区别，进程崩溃的几种情况以及进程中堆和栈的区别等等；最后问我将来打算。总的来说算法那里有点不太熟练，其他地方我个人感觉答的还行。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597120740776861696?sourceSSR=users",
        "title": "文远知行一面面经",
        "content": "1.简单讲项目，难点\n\n2.计算机基础问题\n\n3.go GMP结构\n\n4.C++如何做多线程\n\n5.C++线程和协程的概念\n\n6.C++垃圾回收机制\n\n7.详细讲讲智能指针\n\n8.防止内存泄漏的其他方法\n\n9.C++内部如何存储复数和浮点数\n\n10.malloc申请存储的空间有办法释放吗\n\n11.new和malloc的区别\n\n13min开始编程\n\n1.实数二分求sqrt（x）\n\n2.狼羊草过河问题，用搜索求出最短过河次数，并且输出方案。\n\n后面给出进阶版本：狼羊草数量都是输入的\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597116383192690688?sourceSSR=users",
        "title": "【快手】日常实习 Java一面面经｜讲解｜0312",
        "content": "今天挑选一篇快手日常实习一面，给大家做**讲解分析，参考回答和学习资料指引** ，期望对大家有所帮助～\n\n>\n> [原贴链接](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Ffeed%2Fmain%2Fdetail%2F49357025d1b448b88753446c07db624a)\n>\n>\n> ![alt](https://uploadfiles.nowcoder.com/images/20240312/7538287_1710235534927/D2B5CA33BD970F64A6301FA75AE2EB22)\n> ![alt](https://uploadfiles.nowcoder.com/images/20240312/7538287_1710235561765/D2B5CA33BD970F64A6301FA75AE2EB22)\n>\n> **感谢这位同学的分享，预祝Offer多多～～～**\n\n## 1.为什么模糊查询用ES而不用Mysql呢？\n\n  1. 为什么ES查询比Mysql快\n  2. 说一下倒排索引？\n\n**解析：**\n\n考察对ES的理解，ES属于常用组件，但是校招来说，如果没用用到过，简历上没有写过的话，一般不会延伸过去。但是如果会ES当然是加分的\n\n**参考回答：**\n\n> **为什么模糊查询用ES而不用Mysql呢？**\n>\n>\n> 假设我们有一个在线零售商店，销售数十万种不同的商品，包括服装、电子产品、家居用品等。用户通常通过关键词搜索来查找他们想要的商品。在这种情况下，实现一个高效且准确的搜索功能至关重要。\n>\n> **使用MySQL的劣势** ：\n>\n>   1.\n> 性能问题：如果尝试使用MySQL的LIKE语句进行模糊查询，当商品数量达到数十万或更多时，查询性能可能会变得非常差。这是因为LIKE语句通常不会使用索引，而是会扫描整个表来查找匹配的行。\n>   2. 功能限制：MySQL的全文搜索功能在某些情况下可能不够用，特别是当需要处理多种语言、同义词、拼写错误或复杂查询时。\n>   3. 索引结构劣势：MySQL使用B树等数据结构来存储索引，这在精确查找时非常高效，但不太适合全文搜索和模糊查询。\n>\n\n>\n> **使用Elasticsearch的优势：**\n>\n>   1.\n> 高性能全文搜索：Elasticsearch专为全文搜索而设计，使用倒排索引和分词器等高级技术来快速定位包含查询关键词的文档。这使得它能够在毫秒级内返回结果，即使面对数十亿级别的文档集合。\n>   2.\n> 丰富的查询功能：Elasticsearch支持多种类型的查询，包括模糊查询、通配符查询、正则表达式查询等。它还提供了高亮显示、分页、排序和聚合等高级功能，以改善用户体验并满足复杂的业务需求。\n>   3. 多语言支持：Elasticsearch内置了对多种语言的支持，包括中文、英文等。它可以处理不同语言的文本数据，并提供相应的搜索和分析功能。\n>   4. 索引结构优势：Elasticsearch使用倒排索引，这使得它非常适合执行全文搜索和模糊查询。倒排索引可以快速定位到包含特定词汇的文档。\n>\n\n> **为什么ES查询比Mysql快?**\n>\n>   1.\n> 索引结构差异：Elasticsearch使用倒排索引，而MySQL通常使用B+树等结构。倒排索引根据关键词快速定位到相关的文档，非常适合全文搜索和模糊查询。相比之下，MySQL的索引结构在处理这类查询时可能效率较低。\n>   2.\n> 数据存储与检索方式：Elasticsearch将数据存储在内存中，以提高检索速度。而MySQL则需要先从磁盘读取索引，然后查找对应的数据节点。这种差异使得Elasticsearch在查询速度上具有优势。\n>   3.\n> 分布式架构：Elasticsearch是一个分布式搜索和分析引擎，可以轻松扩展到数百台服务器以处理大规模数据。这种分布式架构使得Elasticsearch能够并行处理查询请求，进一步提高查询速度。而MySQL的扩展性相对有限，可能需要通过分库分表等方式来提高性能，但这会增加系统的复杂性和维护成本。\n>\n\n> **说一下倒排索引？**\n>\n> 倒排索引（Inverted\n> Index）是一种索引方法，被用来存储在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射。它是文档检索系统中最常用的数据结构，也是Elasticsearch等搜索引擎能够快速定位到相关文档的关键技术之一。\n>\n> **举例**\n>\n> `假设有三篇文档：`\n>\n>   1. 文档1:我喜欢吃苹果。\n>   2. 文档2:他喜欢打篮球。\n>   3. 文档3:苹果很甜，但我不喜欢运动。\n>\n\n>\n> `倒排索引为：`\n>\n>   * 我：文档1, 文档3\n>   * 喜欢：文档1, 文档2\n>   * 吃：文档1\n>   * 苹果：文档1, 文档3\n>   * 他：文档2\n>   * 打：文档2\n>   * 篮球：文档2\n>   * 很甜：文档3\n>   * 但：文档3\n>   * 不：文档3\n>   * 运动：文档3\n>\n\n>\n> 当你想搜索“苹果”时，倒排索引会快速告诉你它在文档1和文档3中。这就是倒排索引的核心原理：以单词为关键字，列出含有这个单词的文档编号，实现快速查找。\n\n**学习指引：**\n面试学习：[《掘金》｜浅谈ElasticSearch原理](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjuejin.cn%2Fpost%2F7239610698115629114)\n面试学习：[《简书》｜理解ElasticSearch工作原理](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.jianshu.com%2Fp%2F52b92f1a9c47)\n\n## 2.什么场景下我们使用Mysql，什么情况下我们用Redis？\n\n  1. Redis快，那Mysql不是也有索引吗，为什么要用redis\n\n**解析：**\n\nMysql,redis的特点，需要掌握。\n\n**参考回答：**\n\n> **使用MySQL的场景** ：\n>\n>   1.\n> 关系型数据存储：MySQL是一个关系型数据库管理系统（RDBMS），非常适合存储和查询结构化数据，即数据之间存在明确关系的数据。例如，电商网站中的用户信息、订单信息、商品信息等。\n>   2.\n> 事务处理：MySQL支持ACID事务特性，这意味着它可以保证一系列操作的原子性、一致性、隔离性和持久性。对于需要确保数据完整性和一致性的应用，如银行转账、订单处理等，MySQL是理想的选择。\n>   3.\n> 复杂查询：MySQL支持SQL（结构化查询语言），可以进行复杂的查询操作，如连接、聚合、排序等。对于需要进行大量数据处理和分析的应用，MySQL非常适用。\n>\n\n>\n> **使用Redis的场景** ：\n>\n>   1.\n> 缓存：Redis是一个高性能的内存数据库，通常用作缓存层，以减少对后端数据库的访问。对于读多写少、数据实时性要求较高的应用，如新闻网站、社交媒体等，使用Redis作为缓存可以显著提高性能和用户体验。\n>   2.\n> 实时数据处理：Redis支持多种数据结构（如字符串、哈希、列表、集合和有序集合等），并且提供了丰富的操作命令。这使得Redis非常适合处理实时数据流，如实时排行榜、实时统计等。\n>   3. 消息队列：Redis提供了发布/订阅功能和阻塞队列等特性，可以用作消息中间件来实现异步通信和分布式系统之间的解耦。\n>   4.\n> 高并发场景：由于Redis基于内存存储且采用单线程模型（实际上是通过IO多路复用来处理并发请求），它在高并发场景下表现优异。对于需要快速响应大量并发请求的应用，如秒杀系统、实时推荐系统等，Redis是一个很好的选择。\n>\n\n> **Redis快，那Mysql不是也有索引吗，为什么要用redis?**\n>\n> 确实，MySQL也有索引，它可以提高查询速度。但是，Redis和MySQL在数据存储和查询机制上有一些根本的区别，使得在某些场景下Redis表现得更快。\n>\n>   *\n> `内存/磁盘`：Redis是基于内存存储的，而MySQL主要是基于磁盘存储。内存访问速度比磁盘访问速度要快得多，因此Redis在读取数据时通常会比MySQL更快。\n>   * `数据结构`:Redis存储的是k-\n> v格式的数据，部分数据结构时间复杂度是O(1)，即常数阶，而MySQL引擎的底层实现通常是B+Tree，时间复杂度是O(logn)，即对数阶。这意味着在大多数情况下，Redis查找数据的速度会比MySQL更快。\n>\n\n**学习指引：**\n[《知乎》｜MySQL与Redis的区别与联系详解](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F141385393)\n\n## 3.Synchronized加锁和ReentrantLock加锁有什么区别？\n\n  1. 为什么我们有了synchronized还要用redis分布锁呢\n\n**解析：** Synchronized系列常考面试题。\n\n**参考回答：**\n\n>   * 底层实现不同：synchronized 是依赖于 JVM 实现的，具体实现并没有直接暴露给我们；ReentrantLock 是 JDK\n> 层面实现的，所以我们可以通过查看它的源代码，来看它是如何实现的。\n>   * ReentrantLock 比 synchronized 增加了一些高级功能:\n> 等待可中断;可实现公平锁;可实现选择性通知（锁可以绑定多个条件Condition）\n>\n\n> **为什么我们有了synchronized还要用redis分布锁呢?**\n>\n> 因为synchronized只能保证同一JVM进程内的线程安全，而无法控制不同JVM进程或不同服务器之间的并发安全\n\n**学习指引：**\n\n面试学习：[***********************************************](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjavaguide.cn%2Fjava%2Fconcurrent%2Fjava-\nconcurrent-\nquestions-02.html%23synchronized-%25E5%2592%258C-reentrantlock-%25E6%259C%2589%25E4%25BB%2580%25E4%25B9%2588%25E5%258C%25BA%25E5%2588%25AB)\n\n理解学习：[《网课：Java并发编程78讲》｜synchronized 和 Lock\n孰优孰劣，如何选择？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Flearn.lianglianglee.com%2F%25E4%25B8%2593%25E6%25A0%258F%2FJava%2520%25E5%25B9%25B6%25E5%258F%2591%25E7%25BC%2596%25E7%25A8%258B%252078%2520%25E8%25AE%25B2-%25E5%25AE%258C%2F21%2520%25E5%25A6%2582%25E4%25BD%2595%25E7%259C%258B%25E5%2588%25B0%2520synchronized%2520%25E8%2583%258C%25E5%2590%258E%25E7%259A%2584%25E2%2580%259Cmonitor%2520%25E9%2594%2581%25E2%2580%259D%25EF%25BC%259F.md)\n\n面试学习：[《小林coding》｜ 如何用 Redis\n实现分布式锁的？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fxiaolincoding.com%2Fredis%2Fbase%2Fredis_interview.html%23%25E5%25A6%2582%25E4%25BD%2595%25E7%2594%25A8-redis-%25E5%25AE%259E%25E7%258E%25B0%25E5%2588%2586%25E5%25B8%2583%25E5%25BC%258F%25E9%2594%2581%25E7%259A%2584)\n\n## 4.说一下HashMap添加元素的一个底层原理？\n\n**解析：**\n\nHashMap是Java集合中最常考的结构，并且pu t流程也是最高频面试题之一。\n\n大致流程即可，其中肯定很多分支细节没办法描述。\n\n![alt](https://uploadfiles.nowcoder.com/images/20240312/7538287_1710235162487/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n**参考回答：**\n\n>   1. ①.判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；\n>\n\n  2. ②.根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③；\n  3. ③.判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；\n  4. ④.判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；\n  5. ⑤.遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可； ⑥.插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。\n\n**学习指引：**\n\n面试学习：[《美团技术团队》博客｜Java\n8系列之重新认识HashMap](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Ftech.meituan.com%2F2016%2F06%2F24%2Fjava-\nhashmap.html)\n\n## 5.那你说一下，扩容的时候这个数据是怎么迁移的呢\n\n**解析：**\n\n我们都已JDK8为例去讲。如果面试官问了，再去讲JDK7 。 所以都需要掌握\n\n**参考回答：**\n\n> `JDK7的元素迁移：`\n> JDK7中，HashMap的内部数据保存的都是链表。因此逻辑相对简单：在准备好新的数组后，map会遍历数组的每个“桶”，然后遍历桶中的每个Entity，重新计算其hash值（也有可能不计算），找到新数组中的对应位置，以头插法插入新的链表。\n> 这里有几个注意点：\n>\n>   * 因为是头插法，因此新旧链表的元素位置会发生转置现象。\n>   * 元素迁移的过程中在多线程情境下有可能会触发死循环（无限进行链表反转）\n>\n\n> `JDK8的元素迁移：`\n> java1.8+在扩容时，不需要重新计算元素的hash进行元素迁移。而是用原先位置key的hash值与旧数组的长度（oldCap）进行\"与\"操作。\n>\n>   * 如果结果是0，那么当前元素的桶位置不变。\n>   * 如果结果为1，那么桶的位置就是原位置+原数组长度\n> 值得注意的是：为了防止java1.7之前元素迁移头插法在多线程是会造成死循环，java1.8+后使用尾插法\n>\n\n**学习指引：**\n\n面试学习：[《知乎》｜HashMap的扩容机制](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F114363420)\n\n## 6.Mysql的受隔离级别，可以说一下嘛，分别解决了什么问题呢？\n\n**解析：**\n![alt](https://uploadfiles.nowcoder.com/images/20240312/7538287_1710235244037/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n**参考回答：**\n\n> **四种隔离级别**\n>\n>   * 读未提交（read uncommitted），指一个事务还没提交时，它做的变更就能被其他事务看到；\n>   * 读提交（read committed），指一个事务提交之后，它做的变更才能被其他事务看到；\n>   * 可重复读（repeatable read），指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，MySQL InnoDB\n> 引擎的默认隔离级别；\n>   * 串行化（serializable\n> ）；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；\n>\n\n> **分别解决了什么问题呢？**\n>\n>\n> 根据分析图：要解决脏读现象，就要升级到「读提交」以上的隔离级别；要解决不可重复读现象，就要升级到「可重复读」的隔离级别，要解决幻读现象不建议将隔离级别升级到「串行化」。\n\n**学习指引：**\n\n面试学习：[《小林coding》｜事务的隔离级别有哪些？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fxiaolincoding.com%2Fmysql%2Ftransaction%2Fmvcc.html%23%25E4%25BA%258B%25E5%258A%25A1%25E7%259A%2584%25E9%259A%2594%25E7%25A6%25BB%25E7%25BA%25A7%25E5%2588%25AB%25E6%259C%2589%25E5%2593%25AA%25E4%25BA%259B)文章包括隔离级别介绍和解决的问题。\n\n## 7.如果Mysql遇到慢sql我们怎么排查啊？\n\n**解析：**\n\n排查慢SQL的原因和思考SQL优化点事类似的过程。\n\n**参考回答：**\n\n> 当MySQL遇到慢查询（慢SQL）时，我们可以通过以下步骤进行排查和优化：\n>\n>   1. **开启慢查询日志** ：\n>\n\n>   * 确保MySQL的慢查询日志已经开启。通过查看`slow_query_log`和`slow_query_log_file`变量来确认。\n>\n>   * 如果没有开启，可以在MySQL配置文件（如`my.cnf`或`my.ini`）中设置这些变量，然后重启MySQL服务。\n>\n>\n\n>   2. **分析慢查询日志** ：\n>\n\n>   * 使用`mysqldumpslow`或其他慢查询日志分析工具来查看和分析慢查询日志中的条目。\n>\n>   * 关注查询的执行时间、锁等待时间以及被调用的次数等信息。\n>\n>\n\n>   3. **使用`EXPLAIN`命令**：\n>\n\n>   * 对于日志中记录的慢查询，使用`EXPLAIN`命令来查看查询的执行计划。\n>\n>   * 分析查询是否使用了合适的索引，以及是否存在全表扫描等低效操作。\n>\n>\n\n>   4. **优化查询** ：\n>\n\n>   * 根据`EXPLAIN`的输出结果，优化查询语句，比如添加或修改索引。\n>   * 避免在查询中使用`*`，而是指定需要的列。\n>   * 减少JOIN操作的数量或复杂性，特别是在大数据集上。\n>   * 考虑将计算密集型的操作移到应用层进行。\n>\n\n**学习指引:** 一篇就够了。 [《掘金：全解Mysql》|\nSQL优化篇：如何成为一位写优质SQL语句的绝顶高手！](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjuejin.cn%2Fpost%2F7164652941159170078%23heading-37)\n\n## 8.Kafka如何保证消息的不丢失呢？\n\n**解析：**\n\nkafka如何保证消息不丢失，或者至少一次消费，高频考题，需要从producer，broker，consumer 三端进行处理。\n\n**参考回答：**\n\n> `Producer端`\n>\n>   * 不要使用 producer.send(msg)，而要使用 producer.send(msg,\n> callback)。记住，一定要使用带有回调通知的 send 方法。\n>   * 设置 acks = all。acks 是 Producer 的一个参数，代表了你对“已提交”消息的定义。如果设置成 all，则表明所有副本\n> Broker 都要接收到消息，该消息才算是“已提交”。这是最高等级的“已提交”定义。\n>   * 设置 retries 为一个较大的值。这里的 retries 同样是 Producer 的参数，对应前面提到的 Producer\n> 自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries > 0 的 Producer 能够自动重试消息发送，避免消息丢失。\n>\n\n>\n> `Broker端`\n>\n>   * 设置 unclean.leader.election.enable = false。这是 Broker 端的参数，它控制的是哪些 Broker\n> 有资格竞选分区的 Leader。如果一个 Broker 落后原先的 Leader 太多，那么它一旦成为新的\n> Leader，必然会造成消息的丢失。故一般都要将该参数设置成 false，即不允许这种情况的发生。\n>   * 设置 replication.factor >= 3。这也是 Broker\n> 端的参数。其实这里想表述的是，最好将消息多保存几份，毕竟目前防止消息丢失的主要机制就是冗余。\n>   * 设置 min.insync.replicas > 1。这依然是 Broker\n> 端参数，控制的是消息至少要被写入到多少个副本才算是“已提交”。设置成大于 1 可以提升消息持久性。在实际环境中千万不要使用默认值 1。\n>   * 确保 replication.factor >\n> min.insync.replicas。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成\n> replication.factor = min.insync.replicas + 1。\n>\n\n>\n> `Consumer端`\n>\n>   * 确保消息消费完成再提交。Consumer 端有个参数 enable.auto.commit，最好把它设置成\n> false，并采用手动提交位移的方式。\n>\n\n**学习指引：**\n[《掘金》｜kafka如何保证消息不丢失](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjuejin.cn%2Fpost%2F7102243362471673892)\n\n## 9.那可以说一下JVM的那几块内存结构嘛？\n\n  1. 哪些是线程独享的？\n  2. 方法区里面存的都是什么东西呢 **解析：**\n\n![alt](https://uploadfiles.nowcoder.com/images/20240312/7538287_1710235317772/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n**参考回答：**\n\n>   1.\n> `堆`：这是Java内存管理中最大的一块区域，被所有线程共享。它主要用于存放对象实例，几乎所有的对象实例都会在这里分配内存。堆区是垃圾收集器管理的主要区域，因此也被称为“GC堆”。\n>   2. `方法区`：这也是被所有线程共享的内存区域。它主要用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n>   3.\n> `虚拟机栈`：这是线程独享的内存区域。每个线程在创建时都会创建一个虚拟机栈，每一个方法执行的时候都会创建一个栈帧用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。\n>   4. `本地方法栈`：与虚拟机栈类似，本地方法栈也是线程独享的，但它主要用于执行Native方法。\n>   5.\n> `程序计数器`：这是一块较小的内存空间，也是线程独享的。它可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。\n>\n\n> **线程私有的：**\n>\n>   * 程序计数器\n>   * 虚拟机栈\n>   * 本地方法栈\n>\n\n**学习指引：**\n\n面试学习\n[************************](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjavaguide.cn%2Fjava%2Fjvm%2Fmemory-\narea.html%23%25E8%25BF%2590%25E8%25A1%258C%25E6%2597%25B6%25E6%2595%25B0%25E6%258D%25AE%25E5%258C%25BA%25E5%259F%259F)\n\n## 10.说一下Threadlocal的适用场景和原理\n\n**解析：**\n\nJava并发中的高频题之一Threadlocal，重点掌握。\n\n**参考回答：**\n\n> **适用场景：**\n>\n>   1. 每个线程需要有自己单独的实例。\n>   2. 实例需要在多个方法中共享，但不希望被多线程共享。对于Java\n> Web应用而言，Session保存了很多信息，且很多地方都需要操作Session。存在多方法共享Session的需求，如果不使用ThreadLocal，可以在每个线程内构建一个Session实例，并将该实例在多个方法间传递。但使用ThreadLocal可以使代码耦合度更低，且实现更优雅。\n>\n\n> **原理：**\n>\n>   1.\n> ThreadLocal是线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只有指定线程可以获得存储数据，其他线程则无法获取到。\n>   2.\n> ThreadLocal中有一个静态内部类ThreadLocalMap（一个简化版的HashMap），用来存储每个线程独有的ThreadLocal变量，以ThreadLocal对象的弱引用为key，ThreadLocal值为value。ThreadLocal的实例通常是与线程一一对应的，每个线程都维护自己的ThreadLocal实例。\n>   3.\n> ThreadLocal的get()和set()方法操作的变量是每个线程自己独有的threadLocals，并非ThreadLocal类的静态变量。每个线程的threadLocals变量都有自己的独立实例。\n>   4.\n> 当调用ThreadLocal的set()方法时，它的实现首先获取了当前线程，并在当前线程的ThreadLocalMap中设置了一个值，当前线程不共享它的ThreadLocalMap实例，因此其他线程无法访问到这个值。\n>   5.\n> 当调用ThreadLocal的get()方法时，它同样首先获取当前线程，然后获取当前线程的ThreadLocalMap实例，并返回ThreadLocalMap中当前线程存储的值。\n>\n\n**学习指引：** [《Java 全栈知识体系》｜Java 并发 -\nThreadLocal详解](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fpdai.tech%2Fmd%2Fjava%2Fthread%2Fjava-\nthread-x-threadlocal.html)\n\n## 11.redis常用的数据结构有哪些？\n\n**解析：**\n\n重点掌握5中常用结构\n\n**参考回答：**\n\n>   1. **String（字符串）**\n> ：这是Redis最基本的数据类型，一个key对应一个value。它是二进制安全的，可以包含任何数据，如jpg图片或序列化的对象。一个键最大能存储512MB的数据。\n>   2. **Hash（哈希）**\n> ：Redis的哈希是一个键值对集合，是string类型的field和value的映射表。它特别适合用于存储对象，可以像数据库中更新一个属性一样只修改某一项属性值，而不需要取出整个字符串反序列化成对象修改再序列化存回去。\n>   3. **List（列表）**\n> ：Redis的列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边），它的增删操作非常快，且提供了操作某一段元素的API。\n>   4. **Set（集合）** ：Redis的Set是string类型的无序集合。它是通过哈希表实现的，添加、删除和查找的时间复杂度都是O(1)。\n>   5. **Sorted Set（有序集合）** ：与Set相似，但Sorted\n> Set中的每个字符串元素都会关联一个double类型的分数。Redis正是通过分数来为集合中的成员进行从小到大的排序。有序集合的成员是唯一的，但分数(score)可以重复。\n>\n\n>\n>\n> 除了以上五种基本数据类型，Redis还支持一些其他的数据结构和功能，如Bitmaps（位图）、HyperLogLog（基数统计）、Geospatial（地理位置）和Streams（流）等。\n\n**推荐学习：** [《小林 coding》Redis\n常见数据类型和应用场景](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fxiaolincoding.com%2Fredis%2Fdata_struct%2Fcommand.html%23redis-%25E5%25B8%25B8%25E8%25A7%2581%25E6%2595%25B0%25E6%258D%25AE%25E7%25B1%25BB%25E5%259E%258B%25E5%2592%258C%25E5%25BA%2594%25E7%2594%25A8%25E5%259C%25BA%25E6%2599%25AF)\n\n本文也是 **《热门面经讲解》专栏** 系列文章之一，文末尾有专栏链接，大家可以**点个关注** ，我会持续更新～\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597114515871809536?sourceSSR=users",
        "title": "得物 秋招面经",
        "content": "8.14开\n\n8.16投 java-商家技术-杭州\n\n##### 8.23 笔试\n\n赛码 2h\n\n选择x20（java、uml、数据库、操作系统、算法）、编程x2（思维题 100%、背包 暴力36%）、问答x1（拓扑排序）\n\n  1. 开幕式排练：导演在组织进行大运会开幕式的排练，其中一个环节是需要参演人员围成一个环形。演出人员站成了一题，出于美观度的考虑，导演不希望某一个演员身边的其他人比他低太多或者高太多。现在给出个参演人员的身高，问在他们站成一圈时，相邻演员的身高差的最大值至少是多少？请你帮忙计算。\n  2. 最小数字：小明用计算机随机生成了N个正整数，他希望从这N个数中选取若干个数，使得它们的和等于M。这些随机生成的数字可能会相同，但是每个数字最多只允许使用一次。当然这样的选取方案可能不存在，也可能有多个。现在希望你编写一个程序，能够找出数字个数最少的选取方案，输出对应的最少数字的个数，如果无解输出\"No solution”。\n  3. 在构建模块化系统时，模块间会存在依赖，模块化系统在加载完成所有模块后，需要判断一下模块是否满足启动条件：(1)依赖的模块不存在的话，这个模块不能被启动；(2)如果模块间存在循环依赖，则这些模块都不能被启动；(3)模块在启动中如果因为异常导致模块启动失败，则依赖它的模块也是无法启动成功。请设计一个算法判断模块系统哪些模块启动成功，哪些模块启动失败\n\n##### 9.2 一面\n\n牛客 25min\n\n  * 实习（完成工作、遇到的大问题、redis怎么用、多端推送详细）\n  * 数据量增加redis不适用的情况下，要怎么优化、怎么平滑切换\n  * mysql如何设计表结构\n  * 分库分表策略\n  * 换用key-value数据库要怎么考虑\n  * Aqs\n\n反问\n\n  * 三面技术面\n  * 24届扩招\n  * 两周一个日常迭代周期\n  * 10105，与杭州大部分公司相同，本来有大小周但疫情后取消了\n  * 面试在周六，在加班面试\n\n##### 9.6 性格测评\n\n后续无消息\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597111266150236160?sourceSSR=users",
        "title": "TPLink 普联 一二面 面经 24春招",
        "content": "个人背景：本9海硕，一段本硕之间的一年工作经验，一段老外研究所实习\n\n岗位：软件开发（杭州）\n\nTL：3/7投递，3/9笔试，3/12一面，3/14二面\n\n**一面：**\n\n时间：3/12，长度20分钟\n\n内容：\n\n  1. 自我介绍\n  2. 之后一点八股没问，一直在问实习工作内容和项目，基本都是这块做了什么，为什么这么做的问题，由于实习是做数据库相关的，问了很多数据库的问题：\n  3. 目前做的数据库的底层数据结构\n  4. 查询执行是怎么实现的\n  5. 效率和别的数据库的比较\n  6. 还有一些其他问题，都是与我的经历相关的，没啥参考价值\n  7. 无反问\n\n感受：面试官问完一个问题，我回答之后会有一段较长时间的沉默，看上去对方在一直记录什么，不知道是不是面评。问项目的时候对项目的底层技术没有回答的很好，很多细节都忘了。实习的数据库底层原理也是一顿扯，因为我没有具体去做那块的工作，我是在做图数据库模块，但是面试官一直对关系数据库那块的底层感兴趣。而且面试官看上去有一点点对我目前工作的数据库的不屑，因为我说它受到了SQLite的启发，面试官就一顿笑，大意是SQLite是什么档次的东西，看上去你们做的也就那样啊...\n总之感觉面试官全程对我是持着质疑的态度。\n\n结语：春招首面，不管最后去不去，都希望有个好结果，还是希望能过。\n\n**一面：**\n\n时间：3/14，长度50分钟\n\n内容：\n\n  1. 上来没要自我介绍，直接开始智力题环节，看上去是个很注重实干的面试官，当时心就有点凉了，一般这种面试官都很严格\n  2. 智力题1:100个灯问题，第一个人拨动1,2,3,...的灯，第二个人2,4,6，第三个人3,6,9，以此类推，问最后有哪些灯是亮的。这个题之前看到过一眼，但没细想，虽然最后答出来了，但用时挺久的，也被提示了好几次。\n  3. 智力题2:1000瓶酒问题，其中有一瓶毒酒，问最少用多少只老鼠可以测出来哪一瓶。最后没答出来，面试官说只答了一半。\n  4. 手撕：字符串括号匹配，自己在IDE写，这应该是个简单题，我大概的流程也很快写出来了，但是有一些bug被面试官指了出来。算法刷的不多，这块我能做出来已经是万幸。\n  5. 之后就是问项目，主要问了简历上的物联网项目，一直在追问工作量在哪里，逻辑是什么样的。\n\n感受：面试官感觉很专业，应该在tplink里面是技术负责人这样的角色。智力题没见过一时半会还真想不出来，手撕虽然大体上对，但没有bug\nfree，感觉面试官不是很满意。最后问项目的时候也被说项目的深度没有说出来，他想知道的是一项技术为什么选，有没有考虑过其他技术，有没有和其他技术做了对比这种问题，而我回答的比较宽泛。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597110289082888192?sourceSSR=users",
        "title": "贪心歌手 - 华为OD统一考试(C卷)",
        "content": "> OD统一考试（C卷）\n>\n> 分值： 200分\n>\n> 题解： Java / Python / C++\n\n![alt](https://uploadfiles.nowcoder.com/images/20231201/644248237_1701399029315/A4F5E48572027B66E6ECFA2EF0A7C66A)\n\n## 题目描述\n\n一个歌手准备从A城去B城参加演出\n\n  1. 按照合同，他必须在T天内赶到\n  2. 歌手不能往回走\n  3. 每两座城市之间需要的天数都可以提前获知。\n  4. 歌手在每座城市都可以在路边卖唱赚钱。经过调研，歌手提前获知了每座城市卖唱的收入预期: 如果在一座城市第一天卖唱可以赚M，后续每天的收入会减少D(第二天赚的钱是M - D，第三天是M-2D…)如果收入减到0就不会再少了。\n  5. 歌手到达后的第二天才能开始卖唱。如果今天卖过唱，第二天才能出发\n\n贪心的歌手最多可以赚多少钱?\n\n## 输入描述\n\n第一行两个数字 `T` 和 `N`，中间用空格隔开 `T` 代表总天数; `N` 代表路上经过N座城市; 0 < T < 1000 ,0 < N < 100\n\n第二行`N`+1个数字，中间用空格隔开 代表每两座城市之间耗费的时间。 其总和<=`T`。\n\n接下来`N`行，每行两个数字`M`和`D`，中间用空格隔开.\n\n代表每个城市的收入预期。\n\n0< M <1000, 0 < D < 100\n\n## 输出描述\n\n一个数字。代表歌手最多可以赚多少钱。以回车结束\n\n## 示例1\n\n    \n    \n    输入：\n    10 2\n    1 1 2\n    120 20\n    90 10\n    \n    输出：\n    540\n    \n    说明：\n    总共10天，路上经过2座城市。 路上共花1+1+2=4天 剩余6天最好的计划是\n    在第一座城市待3天，在第二座城市待3天 在第一座城市赚的钱:120+100+80=300 \n    在第二座城市赚的钱:90+80+70=240 \n    一共300+240 = 540\n    \n\n## 题解\n\n> 这是一个**动态规划** 问题，需要求解在限定时间内，歌手最多可以赚多少钱。\n>\n>\n> 首先，我们可以定义一个二维数组`dp[i][day]`，其中`i`表示在前`i`个城市中，`day`表示停留的天数，`dp[i][day]`表示在这种情况下的最大收益。\n>\n> 接下来，我们可以使用状态转移方程来更新`dp`数组。\n>\n> 具体来说，对于每一个城市`i`，我们需要考虑在这个城市停留的天数`wait_day`，然后更新`dp[i+1][day]`。\n>\n> 我们可以通过循环遍历`wait_day`和`day`来更新`dp`数组。\n>\n> 在这个过程中，我们需要注意每天的收益如何减少，以及在达到收益减少到0后，不再减少。\n>\n> 最终，我们可以在`dp[n][D]`中找到最大收益，其中`n`表示城市的数量，`D`表示在城市间行走后剩余的天数。\n>\n> ### 复杂度分析\n>\n> 该算法的时间复杂度为O(n * T * D)，其中`n`为城市的数量，`T`为总天数，`D`为城市间行走后剩余的天数。空间复杂度为O(n * D)。\n\n### Java\n\n    \n    \n    import java.util.Scanner;\n    /**\n     * @author code5bug\n     */\n    public class Main {\n        public static void main(String[] args) {\n            Scanner scanner = new Scanner(System.in);\n    \n            int t = scanner.nextInt();\n            int n = scanner.nextInt();\n    \n            int sumCostTime = 0;\n            int[] costTime = new int[n + 1];\n            for (int i = 0; i <= n; i++) {\n                costTime[i] = scanner.nextInt();\n                sumCostTime += costTime[i];\n            }\n    \n            int[][] plant = new int[n][2];\n            for (int i = 0; i < n; i++) {\n                plant[i][0] = scanner.nextInt();\n                plant[i][1] = scanner.nextInt();\n            }\n    \n            // 城市可\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597109096424194048?sourceSSR=users",
        "title": "快手垂直业务一面凉经",
        "content": "1\\. 自我介绍, 介绍一下技术栈和项目\n\n2\\. 抢优惠券, redis是怎么实现的\n\n\\- 怎么保证用户不重复抢: 通过JWT写入threadlocal里uuid, 这样可以通过uuid标识身份...\n\n\\- 怎么避免超卖: 我答的给整个优惠券加锁\n\n\\- 你这样效率很低啊, 每次只有一个用户能抢. 比如假设有100张优惠券, 你想一想有什么更好的方式吗? : 想了一会儿, 比如可以分为10组,\n每组分别加锁, 这样同时就能用10个用户抢.\n\n3\\. 你提到了把数据存入redis, 那redis如果宕机了怎么办, 怎么保持redis持久性\n\n\\- 回答了rdb和aof, 但是rdb底层原理忘了, aof定时写入的策略也和redis的定时删除过期策略混淆了,\n讲了定时删除过期的FastMode和SlowMode :(\n\n4\\. 比较一下rdb和aof\n\n5\\. 这个项目有遇到什么问题吗\n\n\\- 一下懵了, 没有提前准备好. 想了几十秒, 回答的保持redis和mysql数据一致性的问题, 延迟双删策略, 吟唱八股\n\n6\\. HashMap源码, 介绍一下HashMap底层原理\n\n\\- 讲了一下HashMap的原理, 扩容, put, get机制\n\n\\- 问为什么要用红黑树\n\n\\- 然后问HashMap的key如果是对象, 应该怎么存,以为是问堆和栈, 说了一下. 面试官有重复了一遍, 提示应该重写什么,\n只答上来一个hashcode\n\n7\\. HashMap是线程安全的吗, 要保证线程安全应该怎么办\n\n\\- 回答的用ConcurrentHashMap, 如果多线程访问 hash冲突了,把节点所住,\n\n\\- 面试官又问底层原理: 一下忘了底层原理:( 还问了一下面试官, 底层是AQS吗? 结果他说是....我就讲了AQS的底层实现\n\n8\\. 线程池用过吗, 讲一下线程池的构造参数\n\n9\\. 线程池的拒绝策略了解过吗?\n\n\\- 背八股的时候没怎么在意, 只答上来默认的策略:(\n\n10\\. 讲一下类加载机制\n\n\\- 讲了类加载机制和双亲委派机制和好处\n\n\\- 他又问知道类加载之后是什么吗? 不知道:(\n\n11\\. 讲一下JVM\n\n\\- 问的好宽泛, 讲了一下JVM的结构, 着重讲了一下堆, 新生代老生代blabla...顺着又讲了对象new出来放在Eden区, 讲了GC...\n\n12\\. 算法, 链表排序\n\n13\\. 反问: 业务\n\n没有复盘之前自我感觉良好, 以为自己正确率还可以. 复盘听的时候, 才感觉问题挺多的:( 还得再努力啊\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597103859126808576?sourceSSR=users",
        "title": "小米-安卓-面经复盘",
        "content": "时间：1月 1月份还在秋招还是头次见 当初投太晚了\n\n## 一面 1h10min\n\n  1. 不用自我介绍 先聊了一下岗位 不要紧张当普通聊天 面试就是找你的优点(小米面试官素质确实顶) 主要问一些基础\n  2. 进程和线程的区别 线程调度算法 引导想一下设计线程调度要注意哪些东西 (脑抽只说了优先级 设置亲和性 IO密集计算密集 忘了说线程同步和锁的问题)\n  3. 计算机为什么会有硬盘 内存 L1 L2 L3这样的多级缓存(性能 成本取舍 把晶振时钟周期外频内频倍频 主板布线 锁存器触发器 sram dram说了一遍)\n  4. 平时用什么语言 对C/C++有了解吗 static关键字在C/C++和Java中是用来干啥的 和不用static的变量有什么区别\n  5. Java和C++的区别(运行机制 性能 库生态 GC)\n  6. 对JVM GC方法有了解吗(只说了下引用计数 可达性分析)\n  7. 数组和链表的区别 查找时间复杂度 分别适用什么场景 栈和队列的区别 不考虑时间复杂度情况下可以用栈去实现队列/队列实现栈吗\n  8. 计网 TCP和UDP区别 使用场景 TCP首部有哪些字段(未答全)\n  9. 一次HTTPS访问网页 经过了哪些协议 说的越多越好 (ARP IP(不同网段路由 同一网段Ethernet/PPP) TCP/UDP DNS递归/迭代 HTTP HTTPS)\n  10. 对Linux了解吗 常见命令 ls cd 怎么返回上级目录 返回上上级目录 进入下级目录\n  11. 谈一个最体现你能力的项目(分散传输模拟BT) 说下你的协议具体怎么实现的 如果你的文件块里面有一个字节不一样怎么办(md5 哈希等摘要算法校验)\n  12. 看你做了一个安卓项目 平常用什么安卓IDE\n  13. 手撕 查找最优解 有一个整型数组，数组元素不重复，数组元素升序,给定一个任意目标值，找出不大于目标值的最大值，若给定元素小于最小值，则输出最小值。说一下你的思路(基于二分查找修改)\n  14. 你之前有面试其他公司吗 有offer吗 什么行业的\n  15. 反问 工作内容(统招统分) 时间965(加班另算) 会被分配到新能源车吗(一般不会 偏手机 可以考虑转岗) 写java还是kotlin(到时候再学 反正你学的快) 对移动端鸿蒙iOS安卓的看法(只要你逻辑思维够硬都一样)\n\n## 二面 1h\n\n  1. 对做安卓java方向没问题吗 哪里人\n  2. 你的项目来源 选一个你觉得最深刻的最有技术含量的 说流程\n  3. 文件为什么要切片 应该是要用多线程请求对吗 你是用什么工具或者代码切的\n  4. 你说的序列化是什么意思解释一下 你的元数据放在哪 是单独放在一个地方的吗 底层是TCP为什么会传输失败(不知道) 你创建socket的数据类型是什么\n  5. 你选udp还是tcp的时候是怎么分别创建socket的(忘了) 功能模块划分\n  6. 有没有实习过 Git和SVN用过吗\n  7. 平时用什么语言 为什么做BT协议用了C++\n  8. 看你一面问了不少基础知识了 对多线程编程用得多吗 碰到过问题吗(资源竞争线程同步) 怎么解决这个问题 资源的共享怎么做 比如说有一个队列 有两个线程一个往里面写一个读(synchronized/lock/阻塞队列)\n  9. C语言我在头文件里面定义一个int a=1 写一个文件1.c包含头文件 把变量赋值为2打印出来 再写一个2.c包含头文件 直接打印变量 这两个文件分别编译出来 分别运行两个程序 分别打印什么(答得有点混乱，引导下回答完)\n  10. 说一下对C语言全局变量和局部变量的理解\n  11. 手撕 判断回文串 如果不是回文串就补成最短回文\n  12. 反问 用的语言(还是java多一点，有少量jni，主要在播放器那块) kotlin和java(占比差不多) 工作时间(上午9点半之前到 下午6点半 加班一般到8点左右) 总部是在北京吗 加班和工资是不是高一点(北京的肯定高点)\n\n## 总结\n\n疑似投太晚被kpi了 当练手了\n\n最该投早点的一集\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597099902488854528?sourceSSR=users",
        "title": "腾讯pcg 一面 kpi",
        "content": "1自我介绍  \n2.hashmap 流程 红黑树阈值8退化6为什么  \n3.深浅拷贝  \n4.静态内部类的使用场景  \n5.反射原理，为什么性能低  \n6.内存泄露 怎么解决  \n7.编译器优化  \n手撕：基于生产者消费者模型实现多线程交替打印  \nlc424  \n50min。  \n白准备一大波计网和os\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597099508064858112?sourceSSR=users",
        "title": "【大厂面试官】知道Redis集群和Redis主从有什么区别吗",
        "content": "![alt](https://uploadfiles.nowcoder.com/images/20240312/300233579_1710231520112/F19C9085129709EE14D013BE869DF69B)\n\n> _面试官：上一期博客问了你Redis主从，现在考考你Redis集群吧_\n>\n>  \n>\n>\n> _面试官：不用慌尽管说，错了也没关系😊。。。_\n>\n>  \n>\n>\n> 以【**面试官面试** 】的形式来分享技术。**整理分类专栏、首发博客**\n> 在[CSDN](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2Fhdgaadd)（戳这），本期是《Redis系列》，期待观众老爷的关注❤️\n\n## 面试官：知道Redis多机数据库有什么部署方式\n\n知道的，主要有两种。\n\nRedis主从复制、Redis集群。\n\n>  \n>\n>\n> _面试官思考中…_\n>\n>  \n>\n\n## 面试官：那他们有什么区别\n\n它们两者都是Redis高可用的解决方案，但偏向点不同。\n\nRedis主从对数据的完整性更看重，主、从服务器都**保存完整** 的一个数据库。\n\n而Redis集群则对抗压能力更看重，整个集群的数据库**整合起来** 是一个完整的数据库。要看业务做出不同的选择。\n\n所以在功能上他们也有不同，Redis主从有哨兵，而Redis集群有分片。\n\n![alt](https://uploadfiles.nowcoder.com/images/20240312/300233579_1710231525394/9C34B8FC2AAA141DC53D4B5E1280D2BD)\n\n>  \n>\n>\n> _面试官思考中…_\n>\n>  \n>\n\n## 面试官：那Redis集群怎么实现负载均衡的\n\n主要是通过我刚刚提到的**分片** 功能。\n\n集群的话通过分片的方式来保存数据库中的键值对，集群的整个数据库被分为**16384** 个槽，而集群中的每个节点可以处理这里面的0个或最多16384个槽。\n\n这样的话，对键值对的增删改查就可以**负载均衡** 地下落到各个集群的节点中。\n\n>  \n>\n>\n> _面试官思考中…_\n>\n>  \n>\n\n## 面试官：要是热点数据都是某个Redis节点的槽，负载均衡不是没用了？\n\n噢噢，这种情况的话，Redis集群有**重新分片** 的功能。\n\n重新分片操作可以将任意数量已经指派给某个节点的槽改为指派给另一个节点，相关槽所属的键值对也会从源节点被移动到目标节点。\n\n更重要的是，重新分片是可以**在线进行** 的，集群不需要下线，源节点和目标节点也都可以继续处理命令请求。\n\n像面试官说的这种情况，可以在线上环境紧急把相关热点槽**指派** 给其他节点处理。\n\n![alt](https://uploadfiles.nowcoder.com/images/20240312/300233579_1710231531149/F46A40409547F03A3379BE6EE415F158)\n\n>  \n>\n>\n> _面试官思考中…_\n>\n>  \n>\n\n## 面试官：还有其他方法吗\n\nemmmm我想想，还可以对这些槽负责的Redis节点配置从服务器。\n\n主节点用于处理槽，而从服务器可以用来分担**读的压力** ，如果主节点失效了，从节点会成为主节点代替它继续工作。\n\n![alt](https://uploadfiles.nowcoder.com/images/20240312/300233579_1710231538998/321BD06E89835ED718186C43EF2288D6)\n\n>  \n>\n>\n> _面试官思考中…_\n>\n>  \n>\n\n## 面试官：集群里没有哨兵，那他们怎么选举主节点的\n\n选举的话是集群中**自带的机制** ，不需要哨兵的支持。\n\n不过和**哨兵** 选举领头哨兵一样是先到先得，而且他们投票的对象是**集群中的其他节点** 。\n\n集群里每个负责处理槽的主节点都有一次投票的机会，而第一个向主节点要求投票的从节点将获得主节点的投票。获得半数支持的从节点就可以成为主节点。\n\n>  \n>\n>\n> _面试官思考中…_\n>\n>  \n>\n\n## 面试官：最后问你一个，集群里节点怎么进行故障检测的\n\n**集群节点之间** 的故障检测和Redis主从中的**哨兵** 检测很类似，都是通过**PING消息** 来检测的。。。\n\n> _面试官抓抓脑袋，继续看你的简历......_\n>\n>  \n>\n>\n> _得想想考点你不懂的😰_\n\n## 未完待续。。。。。。\n\n好了，今天的分享就先到这，我们下期**大厂面试演练** 继续。\n\n> **整理分类专栏、首发博客在**\n> ：[CSDN](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.csdn.net%2Fhdgaadd)\n>\n>  \n>\n>\n>\n> [GitHub](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgithub.com%2Fhdgaadd)，你的\n> ⭐️ Star ⭐️，是作者的动力！\n>\n>  \n>\n>\n> **创作不易，不妨点赞、收藏、关注支持一下，各位的支持就是我创作的最大动力** ❤️\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597095891773730816?sourceSSR=users",
        "title": "腾讯天美后台一面（凉经）",
        "content": "因为本硕都是机械，项目一个是ROS机器人一个是图像分割算法。昨天接到天美的面试消息觉得很不可思议..最后面试官也说让我去投车企吧...当然凉是凉了，东西还是学习到了。（吐槽一下，面试官的话我听得不是很清楚，面的很痛苦）\n\n流程：\n\n自我介绍\n\n讲项目，项目用了生产者消费者模型，且消费者比生产者慢，共享内存是哈希表。共享内存上了互斥锁。问我为什么不用消息队列...说上锁影响性能\n\n然后问我生产者消费者模型如果进程崩溃了，在共享内存中，如果生产者消费者进程出现问题，共享内存的生命周期会怎样\n\n虽然答对了内存还存在，但原因没说好（下面是new\nbing回答：在共享内存中，如果生产者和消费者进程出现问题，共享内存本身并不会自动销毁。共享内存的生命周期通常由创建它的进程控制，或者直到系统重启。如果进程异常终止，共享内存仍然存在于系统中，除非有明确的操作来释放或删除它。因此，即使生产者或消费者进程出现问题，共享内存段也会保持在系统中，直到被显式地删除）\n\n另一个项目，C++写的ROS机器人，电脑在局域网内对机器人发指令。接着问我如果机器人接受不到命令，可能是什么原因：我回答了网络丢包，他让我大胆回答...（我不知道啊...搜了一下，如果服务器负责监听订阅的进程崩溃了，通常会有几种情况和解决方案：进程崩溃导致的TCP连接关闭：如果是服务端进程崩溃，内核会发送FIN报文，与客户端进行四次挥手，从而关闭TCP连接1。服务端主机宕机：如果服务端主机宕机，客户端可能会因为超时重传机制而断开连接。Linux系统中有一个tcp_retries2配置项，默认值是15，它控制在TCP连接建立的情况下，超时重传的最大次数1。TCP\nKeepalive机制：如果开启了TCP\nkeepalive机制，即使客户端不发送数据，在一段时间后，TCP会发送探测报文来检测服务端是否存活。如果服务端无响应，经过一定次数的探测后，客户端会认为TCP连接已经死亡，并断开连接1。）\n\n接着是c++八股，问我stl熟悉哪一个，我说了vector，unordered_set之类的，然后他问我vector自动扩容，本来以为终于能答对一题了，结果他问我vector自动扩容可能会出现的问题（现在回想起来，可能是内存的问题？这个过程可能导致性能问题，因为：内存分配和复制：每次扩容都需要分配新的内存并复制旧元素，这是一个耗时的操作。迭代器失效：扩容后，所有指向旧元素的迭代器、指针和引用都会失效。频繁扩容：如果vector频繁扩容，会导致多次内存分配和复制，影响性能。为了避免这些问题，可以采取以下措施：预留容量：如果你提前知道需要存储的元素数量，可以使用reserve()方法预先分配足够的内存。减少扩容次数：通过合理选择初始容量或使用reserve()来减少扩容的次数。）\n\n然后就无了，最后和我说方向不太契合，15分钟结束...背了一大堆八股也没考上，感慨一下机械人没有网络编程的经验面互联网大厂真的不容易...\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597095454202966016?sourceSSR=users",
        "title": "字节测开  一面   3月12",
        "content": "自我介绍完就问看你简历都是软开比较多为什么投测试岗位\n\n然后就根据简历让我描述一下自己的项目都做了什么，有没有使用一些测试工具去测试\n\n有没有使用过一些测试工具都用过什么\n\n假如一个人发抖音评论但是没有显示可能是什么原因\n\n让设计抖音评论接口的测试用例\n\n问数据库假如突然查询速度很慢可能是什么造成的\n\n最后来了一道手撕，应该是最长连续数组，写了半天都没写出来，然后他说时间差不多了，应该是无了，算法能力太差了\n\n更新 下午就收到感谢信了，太菜了没办法\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597092471092404224?sourceSSR=users",
        "title": "线上面试",
        "content": "String StringBuilder StringBuffer\n\nString创建过程\n\nArraysList 和 HashMap\n\n红黑树的特点\n\nLambda map groupingBy 使用\n\nSpring IOC AOP\n\nSpringMVC的流程\n\n单例模式 恶汉式 懒汉式 以及其他实现方式\n\nLocalDate LocalTime LocalDateTime 区别\n\n@Transactional（排除那些事务失效的情况）一定能回滚吗\n\n字符流读取视频会发生什么\n\n字节流和字符流读取效率\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597089959782166528?sourceSSR=users",
        "title": "腾讯云一面凉",
        "content": "中午接面试晚上面，复习了一下午八股，心里非常没底\n\n**项目中的难点：** 没复习也没来得及总结，导致讲得磕磕绊绊，做的时候全是难点，做完了就没了，面试之前一定要系统的总结好这方面的内容。\n\n**1、为什么要使用RPC而不是http？**\n\n  * rpc是框架，http是协议，rpc底层可以使用多种协议实现。回答的时候嘴瓢了，把rpc说成了协议，给自己埋了坑导致被疯狂提问\n  * rpc提供了服务发现功能\n  * 定制化程度更高，性能会好一些\n\n**2、netty为什么高性能？**\n\n回答了它的线程模型是reactor模型，采用epoll\nio多路复用技术，并且一个请求只在一个epoll线程中处理，避免了锁的竞争这样的耗时操作。另外应该还有：\n\n  * 零拷贝\n  * 内存池\n  * 高效序列化\n\n**3、同步、异步、阻塞、非阻塞的概念**\n\n同步异步和阻塞非阻塞的维度不同，同步异步侧重于用户线程功能执行层面，是否需要等待当前任务执行完毕再接着往下执行（同步需要主动将内核缓冲区数据读取到用户缓冲区，异步是系统直接通知用户缓冲区数据就绪，不需要主动去读取）。而阻塞非阻塞侧重于线程访问数据时，数据未准备好的处理方式，可以选择将当前线程挂起（阻塞），也可以选择直接返回（非阻塞）。\n\n回答的时候没有分清楚，大概只说了阻塞非阻塞是实现同步异步的手段，同步也可以轮询巴拉巴拉，但没有能够系统解释。\n\n**4、IO模型有哪些？**\n\n  * 同步阻塞\n  * 同步非阻塞（轮询）\n  * io多路复用\n  * 信号驱动io\n  * 异步io（一般非阻塞）\n\n前四种io都是同步io，最后一种是异步io\n\n**5、spring bean的初始化顺序如何指定？**\n\n  * 构造方法依赖\n  * @dependon注解\n\n我以为是spring容器中bean的生成顺序，但问了下面的问题，我觉得我可能理解错了，其实应该是问存在依赖的初始化顺序，没答上来。心里想的是类似@Order这样的注解，**但是@Order注解不能指定\nbean 的加载顺序，它适用于 AOP 的优先级，以及将多个 Bean 注入到集合时，这些 bean 在集合中的顺序。**\n\n**6、循环依赖如何解决？**\n\n三级缓存，然后讲了三级缓存不能解决的一些情况（原型bean， 有aop的情形）\n\n**7、threadLocal的原理？**\n\n**8、cpu到了100%，如何定位排查？**\n\njps + jstack\n\n**9、java文件到生成对象的过程**\n\njava文件->字节码文件->类加载器->加载到虚拟机解析->运行时常量池->静态变量初始化->分配空间->初始化->构造函数赋值\n\n**10、如何解决数据库幻读**\n\n说了一下mvcc，加间隙锁，在事务读期间不去写数据库，升级隔离级别串行化\n\n**9、算法 两个有序数组的中位数**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/597080432412241920?sourceSSR=users",
        "title": "天融信二面",
        "content": "一共25分钟\n\n## 自我介绍\n\n## 问我研究生的研究方向\n\n我介绍了我做的计算机视觉，问我为啥不找视觉方面的工作，我说比较难，问我图卷积的原理\n\n## 项目\n\n  1. 项目中如何实现缓存一致性的？\n  2. 讲一下对图的深度优先遍历的了解，有什么实际场景的应用么(这个一时间想不出来)？\n  3. 部门是做网络安全相关的项目的，你对网络安全的场景有了解么(我就回答了 Cookie 导致的跨站请求伪造 CSRF 是怎么导致的，面试官说一时间的确不好想出来)？\n  4. Java 中的优先级队列指的是什么(不知道问的是什么，就回答了不知道，后来我又问是不是大顶堆那个，他说不知道没关系，平时不常用)？\n  5. 问我除了常见的设计模式之外还了解什么？(我答了代理，然后又顺着讲了静态代理动态代理，cglib动态代理 jdk动态代理)\n  6. 在项目中有没有遇到什么难点？怎么解决的？(这个问题已经问我两次了，没提前准备，现场编了我手写MQ的主从选举怎么实现的)\n  7. 你的手写 MQ 有什么特点？\n  8. ZK 存储了什么信息，起到了什么作用？\n  9. 怎么实现选举的？\n\n## 时间方面\n\n  1. 问我时间情况\n  2. 描述了一下薪资发放情况\n  3. 第二天下午之后给消息\n\n"
    }
]