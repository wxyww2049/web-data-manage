[
    {
        "url": "https://www.nowcoder.com/discuss/590554793584648192?sourceSSR=users",
        "title": "【24春招】万得JAVA开发工程师面经",
        "content": "完整时间线  \n\n2024.2.20 投递+约面\n\n2024.2.23 一面\n\n2024.2.27 约二面\n\n2024.2.28 二面\n\n2024.2.28 下午 发笔试链接\n\n2024.3.4 小程序显示已淘汰（绷）\n\n## 一面（10min）\n\n时间：14:30～14:40\n\n1.OSI的七层模型\n\n2.传输层有哪些协议\n\n3.TCP和UDP的区别\n\n4.TCP是如何保证可靠性的\n\n5.进程和线程的定义和区别\n\n6.用过哪些中间件？罗列一下\n\n7.熟悉哪几种排序？挑最熟悉的一种解释一下算法流程\n\n8.mysql的索引结构\n\n9.B树和B+树有什么区别\n\n面评基础很不错，然后火速离开，估计这老哥需求挺多啊，有点像kpi了\n\n\\------------------------------------更新------------------------------------------\n\n## 二面（30min）\n\n时间:10:25～10:55\n\n也是很常见的八股以及项目浅挖、实习经历浅挖\n\n1.java创建线程的方式？（说了四种 还没说全）\n\n2.用过哪些java的数据结构，重点说一下List系？\n\n3.HashMap1.7和1.8做了哪些优化？\n\n4.HashMap是线程安全的吗？\n\n5.ConcurrentHashMap和Hashtable的区别？（并发度、遍历性能、null值等角度）\n\n6.数据库ACID特性了解吗？幻读和不可重复读区别？\n\n7.写一个sql 要求如下：有A表和B表 A有学生id和学生姓名 B表有学生id 课程id和课程分数 给出sql查出平均分>80分的学生姓名\n\n8.介绍一下项目？（快烂大街的乞丐版12306项目 高并发、微服务主要技术手段介绍了一下）\n\n9.项目中消息队列是用在什么地方？\n\n10.票务系统的购票逻辑怎么设计的？（位示图算法 brbr 不知道他听懂没）\n\n11.介绍另一个项目以及你在这个项目中负责的模块？\n\n12.这个项目里的分布式锁用在什么地方？\n\n13.快手的实习经历主要是干运维这方面工作的吗？（不是 虽然实习经历确实不是很有含金量 但我是前端不是运维 估计没仔细看我简历）\n\n14.介绍一下你们实习公司的开发流程？项目架构是你自己定的还是架构师定的（怎么可能是我定的🤣😋）\n\n反问：介绍业务？介绍一下自研万得数据库（不熟悉，业务机密不方便透露）\n\nover，说后续会有HR联系我\n\n\\-----------------------------------------更新-------------------------------\n\n二面完当天下午发了笔试，一道题共两问原创题。\n\n——————————更新————————\n\n[笑cry]已淘汰，可能是只A出一道的缘故\n\n  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590524744772988928?sourceSSR=users",
        "title": "0223【理想汽车】Java实习一面",
        "content": "全程55分钟，面试官人挺和气，场景题问题引导的比较多\n\n【八股】\n\n1\\. 用过哪些Java集合类\n\n2\\. HashSet 和 HashMap 在使用场景上有什么区别？\n\n3\\. 任何对象都可以作为 HashMap 的 key 吗？（理论上可以用任何对象，但不能用可变对象，hashcode可能会改变，从而造成数据丢失）\n\n4\\. hashmap的key在查找时的工作流程（先哈希、再位移、再异或，最后取模）\n\n5\\. 用过哪些线程池？\n\n6\\. 线程池的核心参数\n\n7\\. 什么情况下会想使用线程池（能不能结合项目，说项目里哪些地方用了线程池）\n\n8\\. 有一个主线程会唤起5个子线程，主线程想等5个线程执行完成后再进行操作该怎么做（future、信号量等）\n\n9\\. 你用过 redis 吗？用它来做什么？（缓存、分布式锁、限流）\n\n10\\. 怎么用分布式锁来解决缓存击穿（注意获取锁资源之后还要进行第二次检查）\n\n【项目相关】\n\n12\\. 边缘计算项目的背景\n\n13\\. ”孪生“ 怎么理解\n\n14\\. 边缘服务器指的是什么，要怎么部署呢？终端比如手机这些怎么与边缘服务器连接呢？\n\n15\\. 如果它要真实部署到应用场景中，是不是要用大量的边缘服务器来承载运算呢\n\n16\\. 计算任务放到边缘服务器比云端的好处\n\n17\\. 看你做了单点登录，存储分析。介绍一下用户登录流程\n\n18\\. 假设你在生成 token 的时候，会设置一个过期时间，如果有一次访问的时候发现快过期了要怎么办\n\n19\\. 进行 token 校验的时候用了什么处理方法吗？\n\n【场景题】\n\n20\\.\n开放性问题：去图书馆借书，设计一个图书管理系统，如何分解实现，抠了很多细节，具体怎么设计表结构、要怎么分库分表，同一个书籍如果有多本书该怎么设计表结构。\n\n【手撕】\n\nN叉树的层序遍历（飞书直接发了个代码框，ACM模式）\n\n  \n\n更新，2.26oc\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590506036352540672?sourceSSR=users",
        "title": "【校招】从容面对笔试面试",
        "content": "# 一、笔试\n\n如果是面试研发岗的话一般都是有笔试，**难度因公司而异**\n，一般来说越大的公司笔试就越难。对于不同岗位考察的方向也不一样，比如如果岗位是偏通信类的话多一点的话可能就会考一下计算机网络和通信原理这些知识。控制类的话考微机原理和单片机这些会多一点。\n不过对于嵌入式行业来说**C语言、单片机** 这些基础的内容还是一样的。\n\n  * 笔试之前可以到牛客上搜索一下该公司的笔试题目，人比较多的公司一般都有大佬分享过笔试题目。然后把近几年的都做一遍，相当于考前模拟。 ![alt](https://uploadfiles.nowcoder.com/images/20240223/988609951_1708659402512/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n  * 如果要练习c语言、单片机和网络这方面的知识，可以刷一下[牛客](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fexam%2Fintelligent%3FquestionJobId%3D3%26tagId%3D21003)上和[**](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fleetcode.cn%2F)（选择性刷）上的题目。像牛客上都已经分门别类整理好了。\n\n![alt](https://uploadfiles.nowcoder.com/images/20240223/988609951_1708659425356/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n# 二、面试\n\n## 1.自我介绍\n\n一般开始面试前都会有一个自我介绍（1·2）分钟，我们要提前就准备好，但是切记面试的时候不能像背书一下一下子就背完，这样会显的你是背好稿过来（虽然事实也是），可以中间有点停顿，**把握好节奏**\n，就不会很刻意。\n\n> 格式参考：自我介绍+客套话+比赛的经历+项目经历（写一个重点的，介绍项目、解释自己做了什么和取得了什么成绩）+校园经历（来个**但是**\n> ，说自己除了搞比赛之外还做了什么比如当了班干部啥的）+总结自己(表现自己能胜任该职位）\n> ![alt](https://uploadfiles.nowcoder.com/images/20240223/988609951_1708659450674/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n## 2\\. 技术面试\n\n技术面一般都会问你**简历上写的的东西** ，单片机的基本知识，有些会让你手撕代码。我们一定一定提前熟悉我们直接所做项目涉及到的**技术栈**\n，充分掌握**C语言、单片机** 这些基本知识。\n\n  * **找工作之前** 要一定要复习学习一下基本的知识，我的主页里也有分享校招知识，有需要的可以关注一波。\n\n![alt](https://uploadfiles.nowcoder.com/images/20240223/988609951_1708659514948/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n  * 在看的差不多的基础知识去牛客搜一下该公司的**面经** ，里面都有大佬分享过面试的问题，我们可以查漏补缺。 ![alt](https://uploadfiles.nowcoder.com/images/20240223/988609951_1708659535629/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590500467453485056?sourceSSR=users",
        "title": "蘑菇车联二面~",
        "content": "  * 自我介绍 近期突出的点 主要问题\n  * c++拿了奖为什么学java后端\n  * 练习java花的时间\n  * 主要时间做什么\n  * 软件开发能带来的收获和具备的能力\n  * 为什么项目选游戏\n  * 最近看的书\n  * 项目独立开发吗 有过合作的项目吗\n  * 工作上的东西准备好了吗\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590334256749064192?sourceSSR=users",
        "title": "大数据工程师面试 - 面试前先找到竞争力！",
        "content": "> 我是**大数据欧老师** ，曾在互联网某大厂任大数据负责人，从业大数据领域近 10 年，全网粉丝\n> 5000+，从很多候选人的面试和咨询中复盘了**大数据工程师的面试全流程** ，如果你有求职大数据工程师的计划，欢迎找我聊一聊！\n\n## 你的竞争力是什么？\n\n大家读这篇文章之前，不妨思考一下，如果你正打算去面试，你的竞争力是什么？\n\n  * 是你 NB 的学历和大厂的经验？\n  * 是你在某个技术栈上有充足的实力和自信？\n  * 是你特别能吹牛？\n  * 是你特别懂电商这个业务？\n\n都对，但是知道你的竞争力之后，你是如何做**针对性的准备** 呢？\n\n## 面试是一次横向比较\n\n首先我们强调一点，面试的本质就是候选人之间的不同比较（这里不是鼓励内卷），所以你面试能否通过，取决于你和其他的候选人有多大的差异。这个差异，可能体现在：\n\n  1. 你会的东西别人不会\n  2. 大家都会的东西你更深入\n  3. 大家都会的东西，你做的有特点\n\n## 五个维度剖析你的竞争力\n\n我们可以把核心竞争力拆解为五个维度：\n\n![](https://uploadfiles.nowcoder.com/images/20240223/763464184_1708618591693/8B0CB39B70A7E7023EB89134558AE402)\n\n  * **纵向能力** ：你特有的，需要继续去做强化，突出优势；包括技术广度 / 技术深度 / 业务场景结合力\n  * **横向能力** ：通用型能力，需要培养和提升；包括面试沟通力 / 背景和经历\n\n### 技术广度\n\n**如果你是公司里的多面手，对多个技术栈都有使用和了解，那你可能会拥有技术广度的竞争力。**\n\n技术广度指的是你在工作中对多个技术栈都有所了解。我们要注意，在很多数据和业务结合的工作岗位上，需要有技术广度的人来做**端到端的交付**\n，而这个端到端可能会涉及到很多个组件，所以如果你是个多面手，拥有技术广度的优势，那你**面试这类岗位会有非常大的优势** 。\n\n![](https://uploadfiles.nowcoder.com/images/20240223/763464184_1708618617868/7FC9C956506C9DA4EB354F13D2140500)\n\n我们可以看一下左边这份简历，有两个项目，分别是采集监控平台和数仓分析平台。这两个项目都有一个特点，就是涉及到的技术组件非常多，但每一个组件使用的都并不深入。这位同学他能够使用各个组件之间把它们串联起来，并且实现端到端的一个项目的交付，所以说明他对各个组件的了解，至少是使用上是没有问题的。那么我们可以把这位同学的经历当做是拥有技术广度竞争力的一个典型例子，就是**对单个组件的了解有限，但是对项目所需要的多个组件以及某个组件的上下游组件有所了解或者有所使用**\n。\n\n**这位同学应该怎么做？**\n\n  1. 首先我们的简历上就要明显避免着重去写某一个框架，因为这位同学并不会对某一个框架有很深入的了解。\n  2. 其次，在面前准备的时候，我们要复习好各个组件的知识点，不要在关键内容上掉链子，在面试沟通的时候，当我们讲项目和知识点的时候，我们要讲出我们系统的复杂度和组件之间的串联关系，然后体现自己有组件闭环的能力。\n  3. 面试沟通时，因为这个同学对各个组件都有所了解，所以当面试官问到其他的问题的时候，我们可以采取关联的方法，把面试官的问题引入到我们自己使用的这个组件上，这样就利用好了我们技术广度的优势。\n\n### 技术深度\n\n**如果你是公司里的 xx 大牛，对某个技术栈很擅长，大家有问题都来找你，那你可能拥有技术深度的竞争力。**\n\n技术深度指的是你在**某一个技术栈上有比较深入的了解和使用**\n，甚至有过修改源码的经历。对于当前大厂类的很多业务，由于它的数据规模、业务复杂度以及需求的多样性，导致他们需要对某个组件了解特别深入的人一起参与，才能够完成现有的复杂需求和大数据量的计算，**所以这类能力在大厂会非常受欢迎。**\n\n![](https://uploadfiles.nowcoder.com/images/20240223/763464184_1708618624283/A0A65B6B6836E34A746B127463C99E5B)\n\n我们来看看左边这份简历，这是一个做基础架构同学，一直是在大数据计算引擎方向上发展，所以他对这方面的了解是非常深入的。这类同学就是典型的有技术深度优势的例子，他因为他长时间专注于某一两个组件，所以他对这些组件的原理是绝大部分都了解的。甚至知道这个组件的痛点，以及很细节的内容。\n\n**对于这类的同学，应该怎么做？**\n\n  1. 首先他要去思考什么样的公司需要这样的岗位，以及这个岗位应该是什么样子。比如他的岗位优势，其实在字节、阿里这样的大公司，才会有需要，对于创业公司，你过于精专，反而起不大什么作用。\n  2. 其次，在简历上一定要突出自己的特点，要让别人觉得你对这个东西是绝对的一个专家。比如简历上需要花大量的篇幅来阐述自己的优势点，但是阐述过程要注意，**面试官能否读懂这些内容并向你提问** ，如果面试官看不懂，那就糟糕了。\n  3. 面试的时候尽量引导面试官往你擅长的方向走，当然这里会遇到一个比较大的问题是，面试官可能并不是做这个方向，或者他对这个方向的了解没有你深入。这种情况下，你要抓住反向输出的机会，通过引导把一些很复杂的东西以非常简单的话术告诉给他，这样反向输出能给面试加很多分。\n\n### 技术 x 业务结合力\n\n**什么叫做技术 x 业务结合力？**\n\n这类能力是，你在**专注于某个业务领域的同时，得到了这个领域的专业知识，并且针对这个业务领域有定制化的架构**\n，常见的有推荐系统、广告计费系统、电商等。以下图中左边这个例子为例，在用户行为数据分析的场景里，它是使用了 Flink 的 cep\n模块来完成一个用户行为的时序分析，那在这里面它的亮点就是基于 bitmap\n对这个模块进行了一定的重构。重构本身它并不是一个很大的改动，但是它在重构过程中。完成了这个复杂业务场景的实现，并且还拿到了相对应的收益，比如资源成本下降一个数量级等。这就是非常典型的一个业务和技术结合的case。\n\n![](https://uploadfiles.nowcoder.com/images/20240223/763464184_1708618631753/E6868978482CB7AD862198D7B22D776E)\n\n**那什么样的人比较会容易会有这样的竞争力呢？**\n\n通常来讲是公司内部复杂业务的工程师负责人，因为只有复杂业务才需要技术的定制化，而定制化过程会产生技术和业务的护城河，也就是候选人的竞争力。\n\n对于这类候选人，应该去重点研究市面上数据和场景结合的岗位，这样才能利用上自己业务的复杂度，并且最好找的岗位业务是能够和自己的业务相关的，这样自己做复杂业务的护城河才能最在面试的时候最大化的体现出来。\n\n### 面试沟通力\n\n好的沟通力有以下四个表现：\n\n  1. **掌握主动权** ：候选人能够引导面试官到自己擅长的方向上来，这样的话优势才能够被最大化体现出来。但实际上，很多候选人**面试后一直在抱怨，为什么问的问题总和我的专长无关？**\n  2. **简历还原** ：我们要让面试表现和简历达到同样的效果，甚至让面试表现比简历还优秀。但实际上很多候选人的情况是，**简历写的很好，但是面试的时候总是觉得发挥不出来** ，想不明白是怎么回事。\n  3. **彼此同频** ：我们要让面试官和候选人是在同一频道上，这样的话两个人说的话才能够互相理解。但真实情况是很多候选人容易把整个面试的节奏带向，**面试官听不懂我说的话，我听不懂面试官说的话。**\n  4. **错不扣分** ：我们要让说错了或者不会的，他并不会影响我们最后的面试评价。但我面试很多候选人，一问到他们不会的点，他们就在那儿愣住了不说话，然后把整个面试的节奏带上一个很尴尬的局面。\n\n![](https://uploadfiles.nowcoder.com/images/20240223/763464184_1708618637862/3834D8DB0AD4ADE989DA0620F6C05F30)\n\n**这个横向能力是上面纵向能力的基础，如果在横向能力就做不好，很容易把上面的一些竞争力优势给打一个折扣。这个能力也是很多候选人所欠缺的，也是他们应该花时间和精力去重点培养的一个能力。**\n\n### 背景和经历\n\n**背景和经历指的是你过往的学校、公司、做过的好项目，担任过的职位，以及自己在写的博客、github、开源项目等等。**\n\n****![](https://uploadfiles.nowcoder.com/images/20240223/763464184_1708618645543/D61A741F9CB8C37FBFA29C6000CD3A82)\n\n这一部分属于硬性能力，如果你没有的话，也很难在短时间内快速培养出来，但我们能做的是，在你已有的经历的基础上，借用这个经历把你的面试表现达到最大化。每个人都有这些东西，我们要思考怎么借助这些硬性条件来帮助自己面试，\n\n这里我给大家三个建议：\n\n  1. 让过往的平台成为你的竞争力。对于很多来自于中大厂公司的候选人，这些平台是面试官通过你简历的非常重要的依据之一。所以你在面试的时候，最好是能输出一些你在前司的体验收获，以及前司的技术项目，当然这里不能泄密，我们挑整体大面儿上的内容去讲一讲。这样也能让面试官感觉到你是一个比较善于总结归纳的人，在你的面试上会有很大的加分。\n  2. 秀一秀你做过的好项目，如果你做过的项目和面试官喜欢聊的话题恰好对口，即使这个项目可能并不是你简历上的重点项目，甚至可能没有写到简历上，我们遇到这样的机会，一定要说出来，让面试官感觉到你在这个方向上是有过思考的，并且这种思考他们一定是需要的。而且面试官可能以为你是临场发挥，那最那这对你的面试帮助就非常大了。\n  3. 你的博客，开源项目，如果有的话，记得在面试前把它整一整，把最好的前几篇放到首页上。这样面试官。如果有时间的话，他可能真的会去看一看你的博客。并且在面试中你也可以侧面说一下你日常是有对技术做总结归纳的。这样也能拿到一个不错的印象分。\n\n## 带着竞争力自信面试！\n\n学习了上面的思考方法，相信你基于过去工作的复盘，已经对自己有了更深刻的了解。没错，面试想要取得一个好的结果，最最重要的点是**了解自己，知道自己的优势在哪里**\n。\n\n期望大家将上面的方法论，作为延续你整个求职历程的思考方式，帮助你在一轮又一轮的面试里，逐步向面试官展现一个最好的自己！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590299607469436928?sourceSSR=users",
        "title": "java实习面经 | 三家小厂",
        "content": "最近几天一直在忙着面试，面了三家，今天才有空整理一下\n\n# 2.19 宁波某小厂\n\n  1. java的基本数据类型？\n  2. String是不是基本类型？\n  3. String对象怎么比较？如果两个引用类型怎么比较？\n  4. java是单继承还是多继承？\n  5. 一个程序我要确认他是否能执行或者知否会出错应该怎样做？（答了单元测试） 如果程序正在运行呢？我要知道它是不是出错该怎么办？（答了日志） 然后他直接说**异常** ，该怎么处理？（try，throw，throws） 绕来绕去。\n  6. 异常分类\n  7. 使用原生的jdbc创建了一个连接，如果程序异常，我该怎么关闭连接资源？（finally）\n  8. catch里面的代码块一定会执行吗？\n  9. java里面的线程一般怎么用？（线程的实现方式）ps：我简历上没写多线层捏\n  10. 把外部的引用传递到匿名内部类里面，在内部类里面修改这个引用，会不会对原引用造成影响，修改引用的值呢？（其实就跟把一个对象作为参数传递到方法里面一样的）\n  11. ssm、boot常见注解\n  12. @ResponseBody返回什么类型的数据？\n  13. sleep()和wait()的区别\n  14. mybatis #{}和${}的区别\n  15. redis有用过吗？数据类型知道吗？\n  16. left join、inner join、right join的区别？\n  17. 手撕sql： user表(id)，order表(id, user_id)，**查询哪些用户没有购买商品** 用子查询写出来了，然后要求使用left join写不会了....\n\n没问项目\n\n总体答得还不错[赞]\n\n2.20 约了hr面，2.21oc\n\n# 2.19 上海某小厂\n\n  1. 就你最近做的一个项目说一下做项目遇到的困难以及怎么解决的\n  2. 简单说一下项目中用到哪些集合\n  3. ORM框架你用过哪些？其他的有了解过吗？\n  4. 数据库用过哪些或者了解过哪一些？\n  5. 场景题：怎么删除list中的一个元素，例如从数据库中查出了三个学生，怎么把李四的数据删除？\n  6. 遍历list和map有哪些方式？\n  7. 场景题：三张表，用户表、角色表、权限表，用户表和角色表式一对多的关系，角色表和权限表是多对多的关系，怎么通过用户id查询一个用户的所有权限？\n  8. 项目中用拦截器对token进行拦截验证怎么做的啊？\n  9. 过滤器和拦截器的区别？请求先经过拦截器还是先经过过滤器？ nnd，面试前一天还预料这他可能会问拦截器和过滤器的区别，愣是没看\n  10. 我现在有一些请求是对外开放的，不需要验证token，比如说我可能提供对外的几个接口，是第三方系统调用的，不需要登录账号和密码，应该怎么实现？\n  11. spring相关的注解有哪些？\n\n答得很不好，但是2.20就直接oc了[诶嘿]\n\n# 2.20 杭州某小厂 线下面\n\n  1. springboot读取yml配置文件的数据的方法？\n  2. AOP有用过吗？\n  3. 常见的一些异常类？\n  4. final关键字的作用？\n  5. java多线程怎么保证线程安全？\n  6. 你拿这两个项目作为简历的主要项目，你觉得它们对你的主要意义是什么？\n  7. 项目是你自己写的吗？\n  8. 采购模块的流程、涉及的接口、时序逻辑？有多少个接口，分别实现什么功能？\n  9. 入库和出库两个模块功能、流程？\n\n跟着动力节点做的两个项目——《盈利宝》和《恒合仓库》，恒合仓库觉得太简单了，就增删改查，就快速过了一遍，没怎么敲代码，面试的时候也大都忘光了，印象不深。是我眼高手低了，简单项目的基本流程还没搞清楚，总想着去搞高大上的项目。面试项目还是很重要的，一定要吃透，八股文。\n\n这场面试也不是很在意，因为本来就是想体验一下线下面试的，顺便练练车（从宁波跑到杭州），并且面试前一个小时上海那家大电话过来说通过了，offer也比较满意，所以就很随意，后面也当然是没过了。不过还是得端正态度的，认真对待每一场面试！[打气]\n\n**吐槽** ：杭州是真的邪乎，上面这家实习生只能开100~110每天；另一家招全栈实习生要求能独立开发，薪资150/天还说满足不了这么搞的要求[老人手机]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590333298145013760?sourceSSR=users",
        "title": "蘑菇车联后端一面",
        "content": "  * 聊项目\n  * linux命令 有一个很大的文件 检索关键字符并列出前后几行 关键字符有很多呢？\n  * docker部署 nginx反向代理是否用到？\n  * reentranlock 公平锁 or 非公平锁\n  * mysql索引\n  * 对jvm了解 垃圾回收机制 各种回收算法\n  * spring 多个对象 如何实现单例 \n  * spring和springboot特性区别\n  * 用过哪些注解\n  * mq消息队列 自己实现的阻塞队列\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590266672792014848?sourceSSR=users",
        "title": "鑫互联   java后端实习面经",
        "content": "自我介绍（这次好多了，心情一开始很平稳）\n\n**1.缓存预热怎么实现的**\n\n引入spring scheduler依赖，然后添加@Scheduler标签。然后巴拉巴拉\n\n这里面试官问我是不是当我到定时任务执行的时间了，服务器刷新了是不是就是空了\n\n我没听懂他啥意思，我就说我定时任务是要从数据库里面读数据到redis里面啊\n\n他很吃惊他说啊数据是存在数据库了的？\n\n我说嗯。\n\n我现在有点明白了，面试官是不是以为我这个定时任务要重启服务器还是怎么的？还是以为我数据是存储在云服务器里面？我也不太明白，期待大家的见解\n\n**2.接着上面，面试官问我如果改代码了，是不是要重新部署一遍，那你的数据不用重新动吗**\n\n我当时我有点懵，然后我说数据不用动吧，因为数据是存在数据库里面的，我直接上传到宝塔的数据库里面，所以不用动吧\n\n我现在在复盘我还是有点懵，面试官是想问啥啊\n\n**3.一道算法题**\n\n//将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。\n\n我真的太丢脸了。其实不是什么难题，但是面试官是让我共享屏幕的，然后从0手敲，我用struct建立节点写了半天，然后我不记得怎么节点判空了。真的很无语。然后到时间就没写出来\n\n然后就口述了一下思路，一开始是0(n)的思路，然后面试官又问我o(1)怎么写，我又口述了一下\n\n**4.一道算法题**\n\n//对一个数组 arr (int[] )，有一种交换操作:当相邻两个数字均为奇数或均为偶数的时候，可以交换这两个相邻数字;\n\n//目标函数:将数组中的数字拼接起来，组成的字符串，例如[1,2,4,3] > \"1243\"\n\n//求执行任意次交换之后，目标函数的最大值\n\n思路也是很好想，就是只有连续的偶数，连续的奇数才能交换。每次找到连续的奇数活着偶数，因为是无数次交换，所以直接从大到小排列就好了\n\n我很无语，我只记得sort了，我不记得倒序怎么排列了，我真的会谢。然后又没写出来。\n\n**5.Redisson是什么场景下用的，以及对Redisson锁的理解**\n\n按照之前准备的答就好了\n\n**反问：**\n\n问他们的业务是什么\n\n面试官说什么AI方面的，CRM。然后前面他问我想走什么方向，我就说java后端，他说难道对人工智能什么没有兴趣吗，我说我不太了解这方面。\n\n**总结：**\n\n也没有问八股，就是一些项目相关的知识点，但是八股还要接着准备；还有就是我尼玛抗压能力太差了吧，两道算法没写出来，声音直接颤抖了，怎么破啊呜呜。后续就接着准备分布式的项目，然后多练算法题，还是太大意了，不能用力扣那种提交器练。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590255424520183808?sourceSSR=users",
        "title": "0222【借贷宝】Java日常实习一面",
        "content": "全程40分钟，只跟着简历上的项目问，穿插一点八股，无算法\n\n  1. 【简历相关】分布式事务是怎么做的，Seata有哪些模式？（XA、AT、TCC、SAGA）\n  2. 项目中使用的是什么模式？Seata的TCC模式可能遇到哪些问题？（空悬挂、空回滚、幂等）\n  3. 分布式锁是怎么实现的，可能会有哪些问题？（Redisson，主从切换锁丢失）\n  4. RocketMQ的使用场景\n  5. 怎么保证消息不丢失（三方都要保证）\n  6. Redis与MySQL缓存一致性怎么保证（先更新数据库后删除缓存、延迟双删、Canal）\n  7. 【简历相关】Canal的流程是怎么样的\n  8. 缓存击穿问题场景、解决方案\n  9. 【简历相关】有哪些限流算法，各有什么优缺点（令牌桶、漏桶、线程池等）\n  10. 怎么获取线程池里线程的执行结果（future.get()）\n  11. 分库分表介绍、按照什么分的、怎么定位该去哪个库\n  12. 数据库查询优化方法有哪些\n  13. JDK1.8默认的JVM垃圾回收器是什么(Paralle)\n\n当天下午约二面\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590218714595721216?sourceSSR=users",
        "title": "阿里云   实习面经（已OC）  一面",
        "content": "## 写在前面\n\n这是本人去年找暑期实习时候的面经，java后端方向。之前面试的时候一直会做录音复盘，但是并未整理过面经，最近有uu私信想看一下，因此分享给大家，做个参考，希望可以帮助大家。相关文章链接：[阿里云二面](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F591740699846926336)、[阿里云三面](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F593036111606198272)\n\n## 面试时长\n\n60min\n\n## 面试形式\n\n电话面。一开始知道是电话面试，本来以为不需要写算法题的，谁知道最后感觉快结束的时候发了个链接过来让打开写Orz，所以一定要做足准备，不要心存侥幸哎。\n\n## 面试内容\n\n  1. 自我介绍；\n  2. 项目简单介绍。大概说下做了哪些项目，项目的需求是什么，大概用到了哪些技术栈；\n  3. Java相关：String为什么是不可变的？\n  4. Java相关：String、StringBuffer和StringBuilder的区别？\n  5. Java相关：在循环内使用“+”进行字符串拼接的话会有什么问题？\n  6. JVM相关：堆空间的结构？分配策略有哪些？\n  7. JVM相关：Minor GC和Full GC的区别？\n  8. Linux相关：文件的概念？（可能是想让我指出Linux中所有内容都是以文件的形式保存和管理）\n  9. Linux相关：文件有哪些类型？各自的作用是什么？\n  10. Linux相关：inode的作用？inode包含哪些内容？给出一个文件名，Linux是如何根据该文件名打开文件的？（文件名->inode->block）文件的访问时间是如何记录的？\n  11. Linux相关：零拷贝是什么？用来解决什么问题？有哪些应用场景？实现方式有哪些？\n  12. Linux相关：压缩和解压使用的命令？相关参数的作用？\n  13. 网络相关：TCP 和 UDP 可以使用同一个端口吗？\n  14. 网络相关：三次握手与四次挥手流程？TIME_WAIT出现在什么时候？要等待多久？（2MSL）为什么要等待这么久？\n  15. 算法题：Leetcode15 三数之和\n\n## 总结\n\n一面主要还是以八股文为主，项目基本就是简单了解了下。不过感觉问的有些八股文并不是很常见的，比如Linux那一块儿。此外，面试的时候有些地方会一直追问，直到你回答不出来为止，估计是想看看面试者的知识宽度和深度。最后的算法题虽然是之前做过的，但是一开始还是有不少细节被忽略了，后面检查了好一会儿才过。\n\n针对八股文，还是要多多花时间，重点常考的地方多看几遍，考的频率低的地方也要稍微过一过有点印象；针对算法题，常见的题目还是要多刷几遍，做过一次不代表面试的时候就写的出来。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590190589690331136?sourceSSR=users",
        "title": "1.15 OPPO求职攻略-2024理工科版本",
        "content": "#### 1.15.1 校园招聘时间流程\n\n提前批 | 网申 | 笔试 | 面试 | offer  \n---|---|---|---|---  \n7月 | 8月 | 8月-9月 | 8月-11月 | 9月底-12月  \n  \n#### 1.15.2 薪资爆料\n\n岗位 | 地点 | 学历 | 薪资范围（年薪）  \n---|---|---|---  \n结构岗 | 东莞 | 硕士 | 20K~24K * 15 +500补贴/月  \n结构岗 | 东莞 | 本科 | 15.5K * 12 + 45K年终  \n电子PE工程师 | 东莞 | 硕士 | 19K~20.5K *15 + 500补贴/月  \n工艺工程师 | 东莞 | 硕士 | 18K~20K * 14  \n工艺工程师 | 东莞 | 博士 | 总包50W  \n制造工艺工程师 | 东莞 | 博士 | 18K * 12~15  \n材料工程师 | 东莞 | 硕士 | 年包28W  \n高级材料工程师 | 东莞 | 博士 | 32K * 12 +111K年终 +股票  \n  \n  * 数据来源 牛客用户，更多详细信息可到牛客查询\n\n#### 1.15.3 面试经验\n\n**OPPO-24届结构岗提前批面试**\n\n**作者：无语666**\n\n**07.19  技术面**\n\n1、 自我介绍\n\n2、 没让介绍项目，只是让介绍一个项目的难点和创新点\n\n3、 我在自我介绍中有介绍自己的特点，面试官让说一个在项目中能体现这种特点的事情（特地强调是在项目中体现）\n\n最后就是反问环节，问了部门对新人的培养机制。\n\n整个面试大概25min，更偏向于聊天，结束后一直是面试已结束的状态\n\n****\n\n**08.04  主管面**\n\n自我介绍 1、 介绍一个项目并简单提问 a) 项目中涉及到不同的制造工艺，问在项目开始阶段是如何确定选择哪种制造工艺，不同制作工艺有什么区别/优缺点 2、\n对结构工程师的了解 3、 职业规划 4、 因为项目主要是半导体工艺，和结构没多大关系，问为啥来OPPO而不去半导体厂（感觉就是变相在问我们为啥要你）\n\n最后反问，问了主管是哪个部门，具体工作内\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590189774611247104?sourceSSR=users",
        "title": "面试官视角下的技术面——为什么要“背八股”",
        "content": "在互联网从业十余年了，面试过的候选人没有上千也有几百。最近也一直在招人，最近几年发现现在互联网行业的招聘形势确实发生了不少变化，公司要求会越来越高，而候选人需要提前做的一些准备也有更高的要求。因为自己在招聘上也有一些思考和感触，所以想写一个系列文章，让一些涉世未深的年轻人们能更多了解到站在招聘方视角是如何看待候选人的，希望能帮助一些小朋友们少走一些弯路吧。\n\n首先是想谈谈大家经常提到的准备面试经常提到的背八股文，当然作为中国人，应该都能知道背八股文是个贬义词，原意是想表示当年科举制度的僵化和死板，要求很多人需要死记硬背四书五经等等。对应到我们技术面试，就是大家所谓的那些基础知识点，比如计算机相关的操作系统、网络、编译原理等等诸如此类的东西，大部分是一些有固定答案的概念性知识。\n\n说实话，在有了搜索引擎和ChatGPT这种东西后，对于死记硬背的东西我们为什么还需要去准备呢？想不起来就查一下不就好了？实际上确实如此，很多知识点在我们实际工作中不会死记硬背，真想不清楚了，肯定也是会再查一遍。那为什么那么多年了，不管是学校考试还是技术笔面试都还要考察这些东西呢？这就是我想在这篇文章给想不明白的同学解释解释原因。\n\n我们不排除有部分面试官不太合格，只是按部就班的去考察这些八股文，看答案对不对就完事了，只作为了一个最简单的门槛筛选，简单来说，就是他们认为如果你连这点勤奋都不愿意付出，那说明不太符合岗位的期望。只能说这种筛选有一定的道理，但不应该是考察这些基础知识的初衷。\n\n回到正题，先说说“八股”该不该背，我认为不该背，应该去掌握去理解这些知识点，形成知识体系。很多知识点当时靠背是能很快速成的，至少应付一些小公司问题不大。但这样的话，你永远不可能对计算机基础有深入的理解，这都是点状的知识点，完全孤立在你的大脑里，你完全不知道是什么意思，比如问你线程和进程区别，你背了一通下来这些东西（实际上我也记不住，现搜的）\n\n> “**进程是操作系统进行资源分配的最小单元，线程是操作系统进行运算调度的最小单元** 。\n> 进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。\n> 线程是操作系统能够进行运算调度的最小单位。”\n\n但你根本不知道操作系统里资源分配和运算调度是什么意思，你都不知道操作系统里哪些东西算是进程，哪些算是线程，你也不知道进程怎么区分怎么通信等等，那你这个知识点就相当于无用的。因为它没有结合你日常能接触到的一些实际应用结合起来。正常来说，你应该搞清楚什么是进程，进程在我们用电脑的时候是怎么样的存在，它有哪些特点，通过什么管理，有哪些方式能体现通信等等，你把这些东西都串起来后，你就会对什么交资源分配的最小单元有比较清晰深入的理解。\n\n**所以说，实际上大家所有的背八股是不可取的，实际上招聘方本质的诉求是招聘有良好计算机基础的候选人。**\n\n但很多人会问，良好的计算机基础到底在实际工作中有什么卵用呢？你大部分工作不还是在CRUD吗，都是搬砖，你用得上学那么多吗？如果你有这样的疑问，那我们需要再讨论讨论工程师和码农的区别。你如果只是满足于做一个外包，天天接需求，那你就可以认为自己做个码农就行了，不要管什么原理什么基础，我简单培训个一两个月的就能上手干活做需求，就跟真的是去工地搬砖一样，有手有脚，体力充沛就行了，这样显然你的职业生涯是有局限性，抗风险能力也很差。\n\n那怎么能比较系统的学习计算机基础呢？最简单的当然就是把专业课本都能搞明白了，你专业课如果都能拿90+，那肯定基础不会差，虽然大学的很多课程大家都是考前一两周突击一下就能及格甚至拿不低的分数，但想拿90+，肯定还是需要好好掌握的。另外，多思考多结合实际，现在都有ChatGPT这样强大的工具了，你如果对某个知识点不太明白他具体什么意思，你就让ChatGPT给你举几个例子，让他用大白话给你说清楚，我想会你会更容易掌握，更能知道到底怎么回事。我可以举个例子，比如问你计算机网络的七层网络模型，你如果光看死记硬背，你还是经常会忘了一两个，但如果你能跟着某个网络请求的过程，层层去拆解他在每一层都发生什么变化，这样就可以把这些知识点串起来了。\n\n再举一个岗位相关的例子，比如面试前端工程师，我经常会问盒模型这种烂大街的问题，有部分人甚至不知道盒模型的正确概念，那可以认为你学习HTML/CSS肯定是不可能系统的，而一半左右的同学能看过概念，能说清楚标准盒模型和IE盒模型的区别，从内到外分别是哪几个盒子，有些能知道width和height在两种情况下分别是什么盒子，然后就就仅此而已了。那我希望的是什么呢？我一般会继续追问，知不知道盒模型在整个布局中的作用，然后再问自己使用CSS的时候，有没有思考过比较常见的一些属性都影响哪些盒子，再去问问相关的常见布局方案和CSS选择器优先级等等。由此就基本能判断，这个候选人对整个知识体系是否有一定的理解了。所以每个“八股”知识点的背后，肯定是有关联性的，真正要考察的是很多知识点背后的基础理解。\n\n说到这，就可以解释为什么有些同学在面试的时候经常自我感觉良好，感觉问了好多“八股”题自己都自我感觉良好，但最后还是被挂了。有没有可能是一个面试问了10个这种问题，然后你只答对了基础的概念是什么，而忽略了后面面试官的那些追问，而很多同学甚至没意识到可能更重要的是后面的那些追问，导致自己留下来的印象就是问的问题好像我一开始都答得挺好的，但就是没过。\n\n**总而言之，掌握计算机基础知识不能靠死记硬背，需要自己多去思考知识点之间的联系，这也是人类能记忆大量信息的关键，通过网状的知识体系，能够互相联系，帮助自己巩固。我们所谓的理解了某个知识点，其实也是类似的感觉。**\n这样的好处是，即使某个知识点你记得不太清了，你也可以通过跟面试官沟通相关的知识，让面试官能知道你是个有比较好基础的人。\n\n所以面试的本质还是面试官判断你是不是需要的人，是不是愿意跟你做同事，“八股”和其他各种面试题也好，都只是为了验证这些的手段而已，所以不管你记不记得这些基础知识，也不要慌，一道题不会，不会判你死刑，但你如果因此心态崩了，发挥只会越来越差，很多能补救的机会也会错过。所以有些问题你记不清，你可以尝试着去跟面试官互动一下，表示说这块具体细节我可能背不出来了，但我知道他其实主要作用是blabla，实际上他是xxxx这个体系里的xxx环节，一般我们在xxx的时候可能会需要考虑它。如果是这样的回答，我相信面试官也会有个好印象。\n\n这个问题就先讨论到这里，后面想到哪些常见现象我会再写文章，也欢迎大家评论说一下面试中自己比较疑惑的点，我可以考虑优先写个文章展开说说。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590169149154869248?sourceSSR=users",
        "title": "商汤全栈一面 已oc～",
        "content": "  * 先聊项目 一直聊 聊到数据库表怎么设计 表怎么支持用户的一些功能实现\n  * mysql 底层 红黑树和b+树\n  * 平衡树怎么保证高度平衡\n  * 增删改查四个操作用mybatics-plus怎么实现的\n  * 增加一个元素到数据库的时间复杂度\n  * 按某个字段进行sort的时间复杂度\n  * b+树n叉树具体是多少 有具体的计算算法吗\n  * docker部署方案\n  * 代码题：非递归实现的后序遍历\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590189317415239680?sourceSSR=users",
        "title": "1.14 小米求职攻略-2024理工科版本",
        "content": "#### 1.14.1 校园招聘时间流程\n\n网申 | 笔记 | 面试 | offer  \n---|---|---|---  \n8月 | 9月-10月 | 9月-11月 | 10月-12月  \n  \n#### 1.14.2 薪资爆料\n\n岗位 | 地点 | 学历 | 薪资范围（年薪）  \n---|---|---|---  \n结构岗 | 北京 | 硕士 | 20K * 14  \n热设计 | 深圳 | 硕士 | 20K * 14~18  \n自动驾驶 | 北京 | 硕士 | 22K~28K * 15  \n材料工程师 | 北京 | 硕士 | 20K~22K * 14  \n工艺工程师 | 上海 | 硕士 | 18K * 15  \n机器人结构设计 | 北京 | 硕士 | 20K * 15  \n电池工程师 | 北京 | 硕士 | 20K~25K * 14  \n  \n  * 数据来源 牛客用户，更多详细信息可到牛客查询\n\n#### 1.14.3 面试真题\n\n#####\n\n##### 结构岗\n\n1、自我介绍（着重介绍一下本科成绩，研究生成绩，是否保研，奖学金情况，竞赛获奖情况）\n\n2、材料力学名词解释\n\n3、建模思路，设计思路问题。\n\n4、项目介绍，散热是怎么解决的，遇到哪些问题 ，怎么解决的\n\n5、自我评价，是个怎么样的人，如何证明你是这样的人，兴趣爱好，offer情况，薪资期望\n\n##### 热设计\n\n1、自我介绍\n\n2、对毕设项目进行介绍，针对提问这个项目难点是哪里，怎么做的\n\n3、针对简历上的其他项目挨个提问，问每个项目工作定位是独立完成吗，和甲方对接有没有分歧？怎么解决？\n\n4、针对写在简历上的技能，自己打分说掌握几分\n\n5、和导师沟通的频率是怎么样的，你主动的比例多大\n\n6、论文比较多是如何做到的\n\n7、爱好有哪些\n\n8、家庭情况\n\n9、你对手机散热的认识\n\n10、你对于小米的认识\n\n11、热力学八股，例如传热系数导热系数定义范围，通常范围\n\n12、有没有面试其他公司\n\n13、你觉得如果入职热设计，有什么项目经验技能可以迁移\n\n14、\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590148926121013248?sourceSSR=users",
        "title": "2.21OPPO前端笔试",
        "content": "40分20道选择题，主要涉及前端三大件和数据结构操作系统，难度中等\n\n3道大题第一道15分给出一个数组判断能否三个数相加得到奇数，签到题很简单\n\n第二道25分\nn*m矩阵k次移动，初始位置在左上角，每次移动可以选择上下左右四个方向移动一格，超出矩阵则本次不动，求经过格子数量的数学期望，一个格子经过多次只计数一次。应该是dp做但不会做\n\n第三道20分页面设计\n\n应该是凉了，但还是记录一下[牛泪]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590167179677483008?sourceSSR=users",
        "title": "用友后端笔试",
        "content": "  * 五道java语法基础题\n  * 五道mysql的select语句 有点难度\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590169977148145664?sourceSSR=users",
        "title": "1.10 博世求职攻略-2024理工科版本",
        "content": "#### 1.10.1 校园招聘时间流程\n\n网申 | 面试 | 笔试 | offer  \n---|---|---|---  \n8月 | 8月-10月 | 9月 | 9月-11月  \n  \n#### 1.10.2 薪资爆料\n\n岗位 | 地点 | 学历 | 薪资范围（年薪）  \n---|---|---|---  \n机械设计工程师 | 上海 | 硕士 | (21K+1.2K房补)*12  \n标定工程师 | 苏州 | 硕士 | 年包14W  \n仿真工程师 | 苏州  | 本科 | 13.5K * 15  \n机械结构 | 杭州 | 硕士 | 总包20W  \n材料研发 | 苏州 | 博士 | 总包30W  \n燃料电池系统相关 | 苏州 | 硕士 | 22K * 14.5  \n汽车电子工程师 | 苏州 | 硕士 | 17K * 15  \n  \n  * *数据来源 牛客用户，更多详细信息可到牛客查询\n\n#### 1.10.3 面试真题\n\n#####\n\n##### 热设计\n\n1、商场中如何保持一个舒适的环境？\n\n【解题思路】\n\n> 在商场中保持一个舒适的环境需要综合考虑多个因素，其中包括空气温度、湿度、空气流通、噪音等方面。以下是一些可能的措施：\n>\n>   * 控制空气温度：根据不同季节和天气变化，设置合适的空调温度，保持室内温度适宜。\n>   * 控制湿度：在潮湿的环境下，使用加湿器降低湿度；在干燥的环境下，使用除湿器提高湿度。\n>   * 控制空气流通：保证室内外空气的流通，定期清洗空调过滤器，维护空气质量。\n>   * 控制噪音：通过合适的隔音、降噪设施等措施，降低室内噪音，提高环境舒适度。\n>   * 节能减排：通过合理使用空调系统、照明设备等，减少能源的消耗，降低对环境的影响。\n>\n\n>\n> 综合运用以上措施，可以达到在商场中保持一个舒适的环境的目的。\n\n2、你觉得应该从哪些方面提高传热效率？\n\n【解题思路】\n\n> 作为热设计工程师，我认为应该从以下几个方面来提高传热效率：\n>\n>   * 增加传热表面积：可以通过增加热交换器的管子数量、扩大散热片的表面积、增加蒸发器和冷凝器的片数等方式来增加传热表面积。\n>   * 提高传热介质的流速：流速越大，传热系数就越大。可以通过改变管道的截面形状，增大流通截面积，增加流量来提高流速。\n>   * 提高传热介质的温度差：可以通过增加供热和冷却介质的温差来提高传热效率。\n>   *\n> 优化流动状态：在流体流动时，容易产生各种不稳定的涡流，这些涡流会降低传热效率。可以通过改变管道的截面形状，增加障板等方式来优化流动状态，从而提高传热效率。\n>   * 使用高传热系数的材料：选择导热系数高的材料，可以减小传热阻力，提高传热效率。例如，使用铜或铝制成的热交换器管子，可以提高传热效率。\n>\n\n>\n> 综上所述，通过增加传热表面积、提高传热介质的流速、提高传热介质的温度差、优化流动状态、使用高传热系数的材料等方式，可以提高传热效率。\n\n3、影响对流换热的因素有哪些？\n\n【解题思路】\n\n> 对流换热是指在流体内部或流体与固体表面的接触过程中，通过流体的流动而进行的热量传递过程。影响对流换热的因素主要包括以下几个方面：\n>\n>   * 流体的性质：包括密度、热导率、比热容和粘度等，这些物理性质直接影响了流体的运动状态和传热能力。\n>   * 流体的速度：流体的速度越大，传热效率越高，因为高速流动的流体可以带走更多的热量。\n>   *\n> 流体的流动方式：流体可以分为层流和湍流两种，层流时流体呈现出平稳的流动状态，对流换热效率较低；湍流时流体呈现出不规则的涡流运动，可以带来更高的传热效率。\n>   * 固体表面的形态：固体表面的形态可以影响流体的流动状态，从而影响对流换热效率。\n>   * 温度差：温度差越大，传热效率越高，因为温度差是产生传热的驱动力。\n>\n\n>\n> 综上所述，影响对流换热的因素是多方面的，设计传热设备时需要综合考虑这些因素，以达到最佳的传热效果。\n\n4、你学的最好的一门课是什么，主要学习了哪些内容？\n\n【解题思路】\n\n>\n> 我学的最好的一门课程是热传导学。在这门课程中，我学习了传热的基本原理，包括热传导、对流换热和辐射换热等内容，以及热传导的一些基本方程和解法。我还学习了一些应用方面的知识，如传热导数和热阻的计算方法，传热系数的估算方法，以及传热的一些应用案例和实验技术等。通过这门课程的学习，我对传热学有了更深入的理解，这对我的热设计工程师职业发展非常有帮助。\n\n5、未来职业有什么规划？\n\n【解题思路】\n\n>\n> 关于未来的规划，我希望能够在热设计工程领域取得更多的经验和技能，成为一名专业的工程师。在未来的职业生涯中，我希望能够承担更多的责任，参与更多的项目，并不断提高自己的技能和知识水平。我也希望有机会担任领导角色，带领团队一起实现目标，为公司的发展做出贡献。最终，我希望在热设计领域取得卓越的成就，并成为一名有影响力的专家。\n\n#####\n\n##### 机械类（英文面试）\n\n1、英文介绍一下你的相关项目。\n\n【解题思路】\n\n> One of my most recent projects was designing a new manufacturing process for\n> a company that produced small engines. I was part of a team tasked with\n> improving the efficiency and reliability of the manufacturing process, as\n> well as reducing costs. My role in the project was to develop the process\n> flow, design the fixtures and tools required for the assembly process, and\n> ensure that the production line met quality and safety standards.\n>\n> In a previous project, I worked on the design of a new automated packaging\n> machine for a food processing company. The goal was to increase the speed\n> and accuracy of the packaging process, while also reducing waste. My\n> responsibilities included designing the mechanical components of the\n> machine, selecting appropriate motors and sensors, and collaborating with\n> the electrical and software engineers to ensure the smooth integration of\n> all subsystems.\n>\n> Another notable project I worked on was the developmen\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/590145884592103424?sourceSSR=users",
        "title": "关于质量效应汉化组大佬是我的腾讯面试官",
        "content": "腾讯IEG后台开发实习面经\n\n第一次面试，很紧张，但面试官很亲切，很大程度上纾缓了我的紧张情绪。\n\n很奇怪的面试流程，1月底投了一个腾讯游戏策划培训生的职位，简历上全是游戏相关内容（游戏项目、游戏经历，哪个游戏玩了多少小时几周目白金这种）结果到2\n月中旬突然通知我面试后台开发（？）并且连具体部门都没写，很难让人不怀疑是kpi。\n\n  \n\n面经：\n\n1.自我介绍（学校成绩，因为没有其他经历）\n\n      自我介绍一结束，面试官先是夸赞我的游戏经历很丰富，看起来对游戏行业很有热情，随后突然加了一句\"还是质量效应的汉化组\"，让我迷惑了一下\n\n      我以为面试官眼花，把我简历里的\"质量效应三部曲二周目最高难度白金\"看成了\"质量效应汉化组成员\"，缓了半天才说了一句\"啊？\"，告诉他我不是我没有，没想到面试官接下来的回复震撼我妈：\n\n      \"不是，我是说我是质量效应汉化组的成员\"\n\n      我缓了半天，又说了一句\"啊？\"\n\n  \n\n2.面试官接下来介绍了一下流程，说分为三个部分：1⃣️聊一聊项目\n\n—>  2⃣️问一些C++ 、Unity基础知识（因为我简历写的是Unity项目）\n\n—>  3⃣️代码题（为什么我说是代码题，因为实际做到的时候发现连算法都算不上）\n\n      然后面试官突然问\"你能在上海实习吗，什么时候能入职？\"，我：？，什么情况，这么快，然后按照牛油的说法答：需要花时间租房子，大概一周能入职，面试官：\"好，好，没事\"\n\n  \n\n3.项目\n\n     面试官接下来就一些Unity使用的基本知识问了问，比如：\n\n     你知道DrawCall吗？你在项目里怎么减少 Drawcall的（图集+static，没怎么优化过，其他的不了解\n\n     你说你用了协程，能介绍一下C艹艹中的协程吗？（是轻量级线程，具体不知道，但挺好用的\n\n     你了解渲染管线吗，你对Shader 了解多少（只用过URP管线，没用过built-in管线，之前把一个built-in shader  移植到URP管线中过，其他不了解\n\n     你项目里写了对象池，能介绍一下是怎么用的吗？（提前填充好对象，防止数量不够还得扩充，面试官：没了吗，我：没了，面试官：没事\n\n  \n\n4.C++、Unity、基础知识（为什么叫基础知识，因为连八股都算不上\n\n       （从这里面试官开始用面呗写东西）\n\n       面试官上来先写了个\"include<vector> \"，问：\"这个你用过吗\"（可能因为我投的是游戏策划岗吧），我差点没绷住，答：\"用过\"，然后面试官初始化了个vector，先问我size 和capacity是什么意思，然后问我这个vector的size 和capacity分别是多少，capacity发音还没发对，然后又分别rezize和reserve了一下，问我size 和capacity分别是多少，答案就不用说了，我答完，面试官道：\"很好，很好\"\n\n        然后面试官写了个\"include<map> \"，问：\"这个你用过吗\"，我接着绷，答：\"用过\"，然后开始问我map和unordered_map的底层原理，红黑树和哈希表的时间复杂度等简单八股\n\n         既然说了哈希表，那你知道哈希表的负载因子吗（不知道），没关系，因为这是比较底层的机制（HashMap  负载因子 load factor，也叫做扩容因子和装载因子，它是 HashMap 在进行扩容时的一个阈值，当  HashMap 中的元素个数超过了容量乘以负载因子时，就会进行扩容。 默认的负载因子是 0.75 ，也就是说当 HashMap 中的元素个数超过了容量的 75% 时，就会进行扩容）\n\n         那你知道哈希表几个不同的元素分配到同一个地址时要怎么做吗（哈希冲突，用开放定址或链地址\n\n         不知道什么类型的题：给你一个二维点和凸多边形，如何判断点是否在凸多边形内（想了半天没想出来算法怎么写，明明毕设里刚做过，ctrl c+ctrl v的弊端显现了，只能说了说思路，从这个点作一条射线，与多边形交点为偶数个则在多边形外，奇数个则在多边形内），那如果射线经过顶点怎么办呢（视为两个交点）\n\n         如果我想在Unity 中改变一个三维物体的透明度，怎么实现（我说了说2D的方法，改变spriteRenderer颜色的alpha值，3D的不清楚，直接改材质透明度的话会导致所有使用该材质的物体都变透明，3D 用的不多（根本没用过），不知道怎么做\n\n）面试官：\"好，好，没事\"\n\n  \n\n5.编程题（？）\n\n           反转链表（？我裤子都脱了就问这个\n\n           用栈来实现（说了说思路\n\n  \n\n6.反问环节\n\n           抄袭了牛油的面经里问的问题\n\n       1⃣️我们部门的职责是什么？\n\n            我们是游戏部门下的一个人工智能团队……bala 数据库bala服务器bala…….（就是，AIGC ？）嗯，差不多，烘培你知道吧（是渲染里的一个步骤？）没错，我们就是负责大批量三维模型的自动化烘培…….balabala（好的好的）\n\n       2⃣️实习生的职责是什么\n\n             差不多把上面的又说了一遍，具体内容忘了\n\n       3⃣️实习生的发展空间\n\n             额，这个我不太好说，只能说我们团队内对实习生的态度很好（这个我听说过，发展空间这个你得后面如果有后续流程的话问hr\n\n       4⃣️额，能问问您了解龙腾世纪的汉化吗\n\n              额，我不太了解，因为出的比较晚，3dm 出汉化的时候，我应该已经退出汉化组了（好的谢谢\n\n         \n\n7.最后\n\n         面试官：没有了吗\n\n         我：没有了\n\n         面试官：好的谢谢\n\n         我：久仰，久仰\n\n         面试官：谢谢谢谢\n\n         我：谢谢谢谢\n\n         面试官：再见\n\n         我：再见（听说面试官说谢谢就是寄了，不会吧😭，回来吧，我的汉化组大佬\n\n\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589935470973288448?sourceSSR=users",
        "title": "【交流贴】24年互联网大厂投递和面试分享｜有空建议简历和内推",
        "content": "# 简介\n\n最近很多校友和朋友正被寒冬折磨，无论是职业起步的实习还是校招都困难重重。首先明确不要全归因于个人能力和学历，社会是个变化中的复杂系统，客观去应对和选择就好了。\n\n个人只是互联网余晖的残党，也想一同看看新时代的大船。\n\n# 环境\n\n仅我感知到的部分情况，欢迎补充。\n\n  1. 边缘业务和部门裁减，投递相对稳定的业务和大的部门可能真实hc更多，尽量一线城市部门主要所在地。（腾讯深圳、北京，字节北京、上海）\n  2. 字节招聘依然火热（可能是招聘和跳槽最多去的），按照字节的面试特点针对性准备，发展值得。\n  3. 拼多多给钱和招聘热情大大下滑，个人不太建议卖身风险也很高。\n  4. 中厂（美团京东等）招聘实际hc大大下降，面试录取比较看运气，不要在意多尝试就好了。\n  5. 头部AI公司（月之暗面等）值得一博，小的初创大模型公司小心有坑。\n  6. todo\n\n# 个人\n\n**简历**\n\n  1. **大而全的所有个人内容塞入✖️ 清晰明确重要项目内容和个人角色☑️**\n  2. **为了海投搞完全通用内容的简历✖️ 对想去的厂明确应聘职位和定制化简历☑️**\n  3. **经历过程内容描述过多（学校、实践等）✖️ 做的事情专业化描述和丰富，经历精简☑️**\n  4. **个人项目和实习内容流水账✖️ 明确不需要过程，要的是结果和贡献以及专业度，尽量润色和扩充吧**\n  5. **todo**\n\n****\n\n**面试**\n\n  1. **海投麻木式应聘✖️ 两阶段：练手公司体验和积累经验，之后想去的公司认真针对性准备和面试以及复盘提升**\n  2. **担心环境不好、个人内容、没有offer求一个就好✖️ 还是客观应对就好，不要贬低和祈求，自信面和争取就好了**\n  3. **只背八股和只背题✖️ 建议刷面经的时候自己模拟整个流程，沟通和思考过程串起来，刷题分类刷和面试场景理解**\n  4. **todo**\n\n# 投递\n\n校招建议官网和内推直接投递。社招建议朋友推荐、****、找猎头沟通。\n\n# 其它\n\n  * 是否考研和读博？\n\n如果想互联网，其实本科性价比是最高的，静待时机或者走别的路另说。\n\n  * 内卷和出海？\n\n个人比较看好出海，无论是个人的发展还是业务的选择，海外硕个人觉得是很好的一条路，可交流。\n\n  * 面对毕业和职业规划？\n\n细聊吧todo\n\n  * **最近在做AI应用产品雏形设计开发，有AI应用想法的欢迎交流合作呀**\n\n临时想起，慢慢补全，自由交流。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589930826406649856?sourceSSR=users",
        "title": "腾讯IEG 游戏客户端实习面经",
        "content": "牛客上看了不少面经，回馈一下\n\n****\n\n**一面30min：**\n\n**项目：**\n\n选一个说，扩展提问\n\n**八股：**\n\n多态\n\n构造函数析构函数能不能是虚函数\n\n空类的大小是多少\n\n为什么要内存对齐\n\ntcp和udp的差异\n\nCPU和GPU渲染管线\n\n**做道题：**\n\n合并k个有序链表\n\n**其他：**\n\n能实习多久\n\n玩过什么游戏\n\n**二面45min：**\n\n**项目相关：**\n\n深挖项目提到的技术点具体有什么用\n\n**做道题：**\n\n1\\. 看代码找错误 —— 用malloc给List分配空间， 应该用new，否则没初始化调用构造函数\n\n2\\. 数组中的重复元素，要求最优\n\n**八股：**\n\n虚拟内存，虚拟内存的好处\n\n模板偏特化\n\nvector的push_back()和emplace_back()的区别\n\n如何计算空间中点到线段距离\n\n如何判断点在三角形内\n\nGPU渲染管线\n\nculling了解哪些，说一下视锥剔除的计算过程\n\nGPUInstancing了解吗\n\n**其他：**\n\n游戏经历\n\n能实习的时间\n\n你倾向于哪个方向，引擎还是gameplay\n\n**HR面30min：**\n\n正常HR面的问题，如何评价自己优缺点，最有成就感的事等\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589929937377771520?sourceSSR=users",
        "title": "转赛道拿阿里产品offer，0经验如何变收割机",
        "content": "![](https://uploadfiles.nowcoder.com/images/20240221/7648284_1708522189775/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n事实上，不二从事产品/运营职前教育已经快6年了，也带过600+同学拿到了大厂offer。去年也是从抖音裸辞决定全职做好「不二PM」这个创业项目，希望能够帮助更多同学成为优秀的互联网人。为了给更多求职互联网的学弟学妹，找到自己学习的榜样，我们会在后续邀请我带过上岸大厂的学员为大家分享他们的求职经验。\n\n投稿人0基础秋招上岸阿里/字节/快手等大厂的不二学员@飞飞（第一人称自述，经本人同意脱敏）\n\n1️⃣职业规划\n\n我过去实习经历以咨询和战略为主，但是本身觉得战略行业前景不确定性大，加之公司对于校招生的培养不达预期，决定转变职业发展方向。在跟不二学长职位规划后发现产品方向是自己匹配度较高且比较喜欢的，决定求职产品。\n\n2️⃣产品知识\n\n①产品书籍，推荐《人人都是产品经理》，《幕后产品》，《产品思维30讲》\n\n②产品项目，不二学长带我做了一个公司内部的核心项目p2，让我对产品设计企微和方法论有了更具体系统的认知提升。\n\n3️⃣实习复盘\n\n每段实习时要注重对于自己参与的项目的整理，着重复盘每个项目的收获与不足之处。尤其是自己作为主Owner参与的项目或者可以精准突出自己能力点的项目。\n\n4️⃣面试复盘\n\n通过秋招面试官对项目的反馈来进行复盘，提升面试技巧，这里特别感谢不二学长的指导! 每次学长都会在我面试后跟我一起复盘反馈面试中出现的问题。\n\n📆部分面试真题回顾\n\nQ1：讲述过往实习中印象最深刻的项目\n\n【问题拆解】拿一个自己充分参与、有数据成果的项目进行分享。讲完项目后面试官会延伸问：如何挖掘项目需求/是否有和竞品进行比较/数据部分怎么分析的/推进过程中遇到的困难等问题。\n\nQ2：对淘宝x业务的了解程度\n\n【问题拆解】建议通过以下渠道了解 ① 网上公开资料：如小红书② 和公司内工作前辈请教业务③ 官网/研报查看对应内容④\n简单分析竞品情况⑤了解业务前景和未来战略。\n\nQ3：自己或朋友怎么评价自己？\n\n【问题拆解】可以说2个优势和1个劣势。如果面试官已明确表示不用和工作相关，可以展示一些自己性格方面比较讨人喜欢的特质。劣势的表述在展现真实的同时不是致命问题，并说明自己在改善这个劣势。\n\n最后，也欢迎大家和不二一块共同成长，0经验备战暑期/春招的同学\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589900847719477248?sourceSSR=users",
        "title": "1.7 汇川求职攻略-2024理工科版本",
        "content": "#### 1.7.1 校园招聘时间流程\n\n网申 | 线上测试 | 面试 | offer  \n---|---|---|---  \n8月起 | 8月-12月 | 8月-11月 | 9月底-1月  \n  \n#### 1.7.2 薪资爆料\n\n岗位 | 地点 | 学历 | 薪资范围（年薪）  \n---|---|---|---  \n结构工程师 | 苏州 | 硕士 | 16K~18K * 15~18  \n工业机器人结构设计 | 南京 | 硕士 | 22K * 12~18  \n电机结构工程师 | 苏州 | 硕士 | 15K * 12~18  \n机械设计工程师 | 苏州 | 硕士 | 17K~21.3K * 12~18  \n电机工艺工程师 | 苏州 | 硕士 | 14K~15K * 15  \n机械测试 | 南京 | 硕士 | 18K~20K * 15  \n热设计 | 深圳 | 硕士 | 年包38W  \n电子工艺工程师 | 深圳 | 硕士 | 16K * 15  \n结构仿真 | 苏州 | 硕士 | 19K~20K * 15  \n过程工艺开发 | 苏州 | 硕士 | 19K~20K * 15  \n  \n  * 数据来源 牛客用户，更多详细信息可到牛客查询\n\n#### 1.7.3 面试真题\n\n****\n\n**结构工程师**\n\n1、 请进行自我介绍。\n\n2、 请介绍一下你参与过的项目。\n\n3、 在之前的实习公司中，你主要负责的工作是什么？\n\n4、 目前所在实习公司生产的产品的核心竞争力是什么？\n\n5、 上料装置在结构设计方面的主要难点是什么？\n\n6、 从结构设计角度来看，你认为有哪些重要的因素？\n\n7、 你是通过什么途径了解到汇川的？\n\n**机械工程师**\n\n1、 基孔制和基轴制优先选哪个\n\n2、 淬火的目的\n\n3、 带传动中哪个是定传动比传动\n\n4、 机械加工的四把火是哪四个\n\n#### 1.7.4 面试经验\n\n**汇川—电机结构工程师面经**\n\n**作者：卡诺伊夫**\n\n老规矩，先贴timeline\n\n8月16号申请，9月9号一面，9月15号二面\n\n**一面** ：技术面时长1小时（感觉状态不行却过了）\n\n自我介绍+介绍项目和研究，主要针对于项目中的难点和解决方法问\n\n问该岗位有关技术知识。散热、振动等处理方法\n\n闲聊（面试官没开视频且语言清晰度很差）\n\n**二面** ：HR面时长20分钟（面完不到半小时给我挂了）\n\n问家庭情况、学校、生源地等\n\n你觉得你的性格怎么样？举例说明\n\n主动讲了本岗位的岗位职责和工作强度：职责—电机结构设计；强度—一个月60小时的加班，每天基本上8点半之后，周末可能加班，均无加班费和调休。反问绩效：绩效在工资里，一般能足额发放，其他的看年终奖。\n\n对薪资的要求：我说的可能有点高了（考虑到这个加班强度和无加班费）\n\n应届生就职和技能培训：7天企业培训，6个月试用期，转正方式为答辩，以项目结果为导向\n\n面试结果1到3个工作日出来\n\n就这样，毁灭吧看其他岗位捞不捞\n\n\\-------------------------------------\n\n9月20日更新：被联合动力的又捞起来了，有后续继续更\n\n**汇川二面、三面已结束**\n\n**作者：据说名字长会被关注**\n\n9.22晚上三面、9.23显示本轮面试结束、9.24已 oc，没泡池子，川子超级人性化，决定直接去了。本人秋招只投了川子这一个岗位，多谢不辜负，准备躺\n\n**二面** HR面，正常问题\n\n自我介绍\n\n项目困难、怎么解决？\n\n家庭情况\n\n渴望\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589876333107310592?sourceSSR=users",
        "title": "拼多多风控算法挂经",
        "content": "项目拷打：项目细节展开，多次打断然后问细节。（态度还是很好的，是我没有讲清楚，明明是end2end，我说错了），其实从这里开始就比较离谱了，我全程不在频道。我感觉还没说完，被打断：以我的经验，这不可能（确实）。\n\nU-Net多尺度如何实现，共享参数如何实现，OCR的一些技术栈等，\n\nLaplace变化的目的？（可能是因为我有工科背景？）答：时频转换，简化方程，稳定性分析等，控制系统也需要，通过 Laplace\n变换，可以将控制系统的动态响应表示为传递函数\n\n会不会C++,Java巴拉巴拉\n\n问了很多机器学习的知识点:\n\n决策树、Random Forest、Booting、Adaboot）GBDT和XGBoost的区别是什么？\n\n  1. 决策树（Decision Tree）：决策树是一种基于树状结构的模型，通过对数据集进行递归分割来进行决策。每个节点表示一个特征，每个分支代表一个决策规则。决策树容易过拟合，对数据的小变化敏感。\n  2. 随机森林（Random Forest）：随机森林是通过集成多个决策树来提高模型的性能。它采用Bagging技术，对训练集进行有放回抽样，然后训练多个决策树，最后将它们的预测结果进行平均。随机森林能够减少过拟合，提高模型的泛化性能。\n  3. Bagging：Bagging是一种集成学习技术，通过对训练集进行有放回抽样，训练多个模型，最后通过投票或平均来决定最终结果。它可以用于不同的基本学习器，不仅限于决策树。\n  4. Adaboost：Adaboost是一种Boosting技术，它通过逐步调整训练集样本的权重，每次都在之前模型的错误上进行训练。它通过组合多个弱学习器，提升整体模型的性能。Adaboost对于噪声敏感，容易受到异常值的影响。\n  5. GBDT（梯度提升树）：GBDT也是一种Boosting技术，它通过逐步拟合残差来训练多个弱学习器，最终将它们组合起来。GBDT的核心思想是利用梯度下降来最小化损失函数。GBDT对异常值和噪声相对较稳健，但容易过拟合。\n  6. XGBoost（Extreme Gradient Boosting）：XGBoost是GBDT的一种优化实现，通过引入正则化项和剪枝操作，提高了模型的泛化能力。它也支持并行处理，提高了训练速度。XGBoost在GBDT的基础上引入了正则化，可以控制模型的复杂度\n\n****\n\n问：\n一张图片，如果经过擦除水印模型，擦除的部分一般会有痕迹，比如白色或者均衡像素，（正常）如何实现擦除的部分还原真实颜色（比如复杂的草真实像素：例如草纸）：答：数据集上进行优化，首先有原始擦除后的图片才行。这样好做损失。\n\n问：算法上哪些方法可以实现呢？\n\n答：不知道，\n\n搜chatgpt：\n\n1.数据集优化，采取其他参考周围像素（ 比我的方法差）。\n\n2：图像修复算法，OpenCV 中的 inpaint（试过不好说）\n\n3：GAN(我为这点事情还重新训练模型？)\n\n**求大佬给出最佳答案**[牛泪]。\n\n我的思路在损失函数的优化上：对抗性损失、内容损失和上下文损失或者。。。（我总感觉还是必须要有原始图片呀，要不然计算机知道你想要啥[发火]）\n\n手撕代码：具体问题：一张图片，黑底白字，如何代码实现获取所有连续的白字：\n\n    \n    \n    import cv2\n    import numpy as np\n    \n    image = cv2.imread('your_image_path.png', cv2.IMREAD_GRAYSCALE)\n    white_mask = (image == 255).astype(np.uint8)\n    \n    # 连通组件分析\n    num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(white_mask, connectivity=8)\n    \n    # 提取连续的白字区域\n    continuous_white_regions = []\n    for i in range(1, num_labels):\n        x, y, w, h, area = stats[i]\n        continuous_white_regions.append(image[y:y+h, x:x+w])\n    \n    for i, region in enumerate(continuous_white_regions):\n        cv2.imshow(f\"Continuous White Region {i+1}\", region)\n    \n    cv2.waitKey(0)\n    cv2.destroyAllWindows()\n    \n    \n\n难点在于连续性，使用connectedComponentsWithStats，我完全不会。。。。应该会有其他方式。\n\n总之是一场酣畅淋漓的丢人大会，我太水了，emo\n\n反问：为啥风控要面cv。答：NLP，CV都要。\n\n问：有啥需要改进的吗？（我感觉已经挂了） 答：项目需要深耕[看好戏]（你说太慢了我才打断你）\n\n总结：感觉全程不在线[赞][赞]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589873535506542592?sourceSSR=users",
        "title": "真把我当全栈了？24春招-小鹏汽车-测试开发工程师三面",
        "content": "**大家好，我是chowley，今天来回顾一下之前参加的，车企测开技术面试**\n\n**前两面的岗位是自动驾驶测试工程师，但因为我表现的还行，加上自驾测试需要车企背景，面试官就给我转到了测试开发岗**\n\n**面试官针对前后端开发内容持续发问，本月最有含金量面试诞生了**\n\n### 部门：自动驾驶中心\n\n### 时间：40min\n\n### 平台：飞书\n\n## 过程\n\n  1. 双方自我介绍\n  2. 怎么理解测试开发的角色？\n  3. 在测试开发的角度来讲，你的开发需求是怎么来的？\n  4. 在你的测试实习中，你的开发任务是怎么来的？\n  5. 设计一个git commit的功能，开发不是测试！\n  6. 用户新增了一段代码片段，需要识别到新增部分并显示出来\n  7. 开发语言用的啥？\n  8. 列表和元祖有啥区别？\n  9. 进程、线程、协程之间有啥区别？\n  10. 多进程、多线程的使用场景？\n  11. 手撕：一个字符串，统计其中英文字母种类、字母出现的频次、按出现频次降序排列，字典\n  12. 有其他方式吗？列表\n  13. 还有吗？set+count\n  14. 服务端开发的django框架熟悉吗？\n  15. 做一个图书管理系统，你是怎么设计的？可行性分析-需求分析-概要设计-详细设计\n  16. 只针对登录系统、登录接口，怎么做参数校验？\n  17. 6-20位参数，如果是5位就返回太小，怎么实现功能？\n  18. 你有接触到什么库？\n  19. VUE用过吗？没有=/=\n  20. v-show和v-if有什么区别？\n  21. mysql中多对多的关系，做数据库结构设计\n  22. 多表查询，inner join和left join有什么区别？\n  23. Django的ORM做left join的查询，要怎么写？\n  24. 之前用过ORM做过开发吗？\n  25. 反问\n\n## 总结\n\n### 难度：4/5\n\n### 面试官专业程度：专业，面过这么多测开里最像全栈的面试官\n\n### 体验打分：4/5，虽然设计题问的我手足无措，但是经验弥足珍贵，下次还来！\n\n**好了，以上就是本文的全部内容，如有问题可留言讨论。**\n\n**本人正在组建校招测试开发方向的交流社区，如果您对测试求职方面感兴趣，欢迎加入了解。**\n\n**我是chowley，一个专注互联网技术和产品质量保障领域的博主，我们下次再见！**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**Searching for QALog.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589879089880629248?sourceSSR=users",
        "title": "1.6 海康威视求职攻略-2024理工科版本",
        "content": "#### 1.6.1 校园招聘时间流程\n\n网申 | 线上测试 | 面试 | offer  \n---|---|---|---  \n8月-9月 | 8月-9月 | 8月底-10月 | 9月-11月  \n  \n#### 1.6.2 薪资爆料\n\n岗位 | 地点 | 学历 | 薪资范围（年薪）  \n---|---|---|---  \n结构设计 | 杭州 | 硕士 | 15K~18K * 15  \n结构研发 | 杭州 | 硕士 | 年包24W  \n电气工程师 | 杭州 | 本科 | 14K * 15  \n自动驾驶 | 杭州 | 硕士 | 20K~25K * 15~18  \n工业工程师 | 杭州 | 本科 | 10K *15~18  \n工艺工程师 | 杭州 | 硕士 | 10K * 15  \n机器人部门 | 杭州 | 硕士 | 26K * 15~18  \n热设计 | 杭州 | 硕士 | 16K~17K * 15~18  \n  \n  * 数据来源 牛客用户，更多详细信息可到牛客查询\n\n#### 1.6.3 面试真题\n\n#####\n\n##### 通用问题\n\n  1. 自我介绍\n  2. 为什么想来海康工作\n  3. 对工作内容的了解\n  4. 科研遇到难题怎么应对与解决\n  5. 用三个词语形容自己\n  6. 你自认为有什么缺点\n  7. 单独负责一个项目会觉得压力大不大\n  8. 你平时科研学习的节奏是什么\n  9. 对加班的看法，能否接受加班\n  10. 有什么竞赛或者科研上最得意的一件事\n\n##### 结构工程师\n\n  1. 系统结构的材料加工方法，主要负责的内容\n  2. 电机的选型为什么这样选\n  3.  基础知识：齿轮减速器，从动齿轮直径增大，减速比怎么变，电机的扭矩变化\n  4. 材料的选用准则\n  5. 项目所用工艺的优势\n  6. 汽车底盘的分类\n  7. 3D打印以后的后处理详细步骤\n  8. 零件之间的机械配合方式\n  9. 常见的形位公差有哪些，在你的项目里用到了哪些\n  10. 讲一下你感觉做的最好的项目；里面用的什么传动方式；电机直驱扭矩很大，为什么用它\n  11. 滚子丝杆与蜗轮蜗杆传动方式的区别\n  12.  熟悉的材料，碳钢含碳量对材料属性的影响\n  13. 用过哪些绘图软件\n  14. 说几个proe的基本操作\n  15. 公差的分类\n\n#####\n\n##### 热设计\n\n  1. 想象一个场景，摄像头在冷柜内，需要考虑哪些因素\n  2. 想象一个场景，火灾现场，外界温度150摄氏度，摄像头需要持续5分钟，而内部器件只能耐100度高温，需要采取哪些措施\n\n##### 设备工程师\n\n  1. 激光切割对于金刚石切割的优缺点\n  2. 激光焊与钎焊的区别，相比的优缺点\n  3. 对电子元器件的失效分析的了解\n  4. 对机械力学受力分析仿真的了解\n  5. 什么样的焊点尺寸是好的\n  6. 什么样的焊点要避免\n  7. 如何抑制焊点金属间化合物的生长\n  8. 写出了解的机械仿真软件\n\n##### 工艺开发工程师\n\n  1. 对激光焊接有什么了解，优缺点有哪些\n  2. 对mems工艺的了解\n\n#### 1.6.4 面试经验\n\n**海康二面面筋**\n\n**作者：小小双非跪求offer**\n\n2023.9.25，更新，已挂以后家里用的监控不买海康的\n\n2023.9.22，全程22min\n\n二面(疯狂拷打) #海康威视#\n\n1.自我介绍\n\n2.介绍课题\n\n3.介绍一个发明专利\n\n4.为什么选择海康\n\n5.为什么来杭州\n\n6.为什么之前离职\n\n7.为什么不内部转岗\n\n8.为什么选择机械行业\n\n9.自己的优势\n\n10.最有成就感的一件事\n\n11.职业规划\n\n12.自己为了事业付出了什么努力\n\n13.父母对你工作地点的要求\n\n14.课题除了查文献还做了什么事来推进\n\n15.课题的最终目标是什么\n\n16.为什么不选择课题这个方向的企业\n\n17.内推人和你的关系\n\n18.期望薪资\n\n反问\n\n面试结果一到两周出\n\n入职前会分配部门\n\n新人会有一段培训期\n\n**机械专业-结构工程师-海康威视9.9面试复盘**\n\n**作者：科研顺利**\n\n海康的面试感觉很快，而且偏知识问答类型的。简历8.8是海康官网投递的，24号笔试，随来随考的那种，我记得就是单选、多选和一个\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589860869824147456?sourceSSR=users",
        "title": "c++ wxg 公众号&小程序团队 实习面经",
        "content": "# 算法 1小时\n\n  1. 判断链表交叉点\n  2. 为一个类实现拷贝赋值函数\n  3. 一艘船最多坐两个人或最大重量limit，问装完所有人最少几条船\n\n# 项目 1小时\n\n问了所有的项目，其中一个项目也许实习官没有听说过，是一个RTSP流媒体服务器的项目，面试官问了一些关于这个项目的问题，比如RTSP协议的作用，RTSP协议的工作流程，RTSP协议的请求和响应的格式等等。问了为什么要使用epoll，我看到的八股文给面试官说了，但是他好像不太满意，最后问了我是用的水平触发还是边缘触发，我具体说明了原因，最后给面试官解释了RTSP是什么东西。\n\nCMU15445中并发B+树的实现方法，并发怎么做，提到悲观锁和乐观锁，问了具体的原理。问和MySql的悲观锁和乐观锁是不是一样的，我说应该是一样的概念。问了是不是手写的，有没有参考代码，我说我参考了非并发的代码。提到b+树实现中最难的是并发和分裂，合并。还有如果数据库宕机了，要怎么恢复，但是他是在问完b+树的问题之后问的，就是说有一些内容在内存中还没有写入到硬盘要怎么办，我说的是在进行事务的时候宕机了怎么恢复。\n\n问了一些关于数据库的问题，比如数据库的索引，数据库的事务，数据库的隔离级别等等。问了怎么对锁的依赖图进行构建，怎么进行死锁检测，实现难度在哪里。\n\n问了redis和mysql，我说我没有特殊的学习过redis，只知道这是一个缓存，用过它来写一个java课程大作业。\n\n问了linux的一些基本命令，问了多线程和多进程的区别，多线程和多进程的优缺点，多线程和多进程的应用场景。我没有看这方面的内容，而且不知道多进程的使用场景，面试官就问我是不是可以用多线程取代多进程，不知道怎么说。问了怎么做IPC，我说用消息队列，共享内存，信号量，socket，kill，还有个pipe没答上来。\n\n然后问了操作系统项目的一些问题，问到实现fork的流程，COW是怎么做的，还好我写了实验报告复习了一遍，可以说出来。问了虚拟内存的作用，为什么要用虚拟内存，问了malloc是怎么实现的，我是参考谷歌的tcmalloc，说了个大概。\n\n最后问了不了解分布式，一致性的内容，这个是mit6.824的内容，我还没学这个课程，所以也没办法回答。\n\n# 总结\n\n太紧张了，算法题写的不是很好，感觉面试官还是对我的项目挺感兴趣的，聊了整一个小时，从面试官的口气感觉得到他对技术很有热情，问到的问题我也能回答个大概。先写这么多吧。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589843582748459008?sourceSSR=users",
        "title": "【经验分享】校招压力面该怎么应对？",
        "content": "-接上文-\n\n1.态度\n\n-保持谦虚，但要有竞争意识\n\n-如上篇文章里提到的一个问题：如果要淘汰1个人我会淘汰谁？为什么？\n\nA：（不要淘汰自己，可能会被面试官判定为不自信）\n\n我会淘汰XXX同学（不记得名字可以说是你座位的某个方向），因为我觉得这个同学的思维比较XXX，和XXX这个岗位的要求不是很符合，但我觉得公司里XXX的岗位更适合他/她。\n\n公式：要淘汰的人+理由（说XX同学表现不好这样的话不好讲出口，可以阐述他/她的特质及认为他/她部合岗位的理由）\n\n2.状态\n\n-不要紧张\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589868675923001344?sourceSSR=users",
        "title": "1.5 宁德时代求职攻略-2024理工科版本",
        "content": "#### 1.5.1 校园招聘时间流程\n\n网申 | 线上测试 | 面试 | offer  \n---|---|---|---  \n7月 | 8月起 | 8月-11月 | 10月-12月  \n  \n#### 1.5.2 薪资爆料\n\n岗位 | 地点 | 学历 | 薪资范围（年薪）  \n---|---|---|---  \n机械设计工程师 | 宁德 | 硕士 | 总包22W-24W（含年终4-6个月）  \n机械工程师 | 宁德 | 硕士 | (12.2K+2118)*12+12.2K *4~11  \n热管理工程师 | 宁德 | 硕士 | （7850+7850）*（12+3）  \n结构仿真工程师 | 宁德 | 硕士 | （7850+7850）*（12+3）  \n结构仿真工程师 | 宁德 | 本科 | (10.4K+1750)*12+10.4K *4~11  \n工艺工程师 | 宁德 | 硕士 | 11180 * 12  \n工艺研发 | 宁德 | 硕士 | 14K *（12+3）  \n材料研发 | 宁德 | 硕士 | （5550+5550+168+750）* 12  \n电气工程师 | 宁德 | 硕士 | （7000+7000）* 15  \n电芯机械结构设计 | 宁德 | 硕士 | (11K+1200+138) *12 +11K *3~8  \n  \n  * 数据来源 牛客用户，更多详细信息可到牛客查询\n\n#### 1.5.3 面试真题\n\n**机械维修工程师**\n\n1、标注其余表面的表面粗糙度：Ra的上限值为6.4um，任意加工法？\n\n2、在易触电的电气设备上操作时，防止触电的最重要的措施是什么？\n\n3、只能承受轴向载荷的轴承是什么？\n\n4、 典型的柔性制造系统FMS的三个基本部分组成有什么？\n\n5、 加工制造系统计算机控制系统和什么？\n\n6、 钢的常规热处理主要有什么方式，主要的化学热处理有什么方式？\n\n7、 为保证齿轮副侧隙，圆柱齿轮齿厚公差的什么？\n\n8、 适用于1mm厚铜板的焊接方法是什么？\n\n9、 现代机械制造自动化的技术内容是？\n\n10、 设计孔轴配合时优先采用什么？\n\n11、 用于制造凸轮轴连杆等零件的铸铁材料是什么？\n\n****\n\n**材料工程师**\n\n1、问了钢材常用的热处理工艺有哪些？\n\n2、问了钢材的化学处理有哪些？\n\n3、常用的机械传动机构有哪些？\n\n#### 1.5.4 面试经验\n\n**宁德时代提前批面试经历**\n\n**作者：南桦0812**\n\n专业是生物医学工程\n\n岗位：测试工程师\n\n面试官自我介绍，是一位工艺工程师，不是HR面试\n\n1、自我介绍1-2分钟\n\n介绍完，面试老师问我是不是打过草稿，比较流利\n\n直接回答是的，因为很重视这次面试\n\n2、你本科和研究生专业不一样，为什么要换专业呢？\n\n这里我就简单答了一下，但感觉面试老\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589828194753134592?sourceSSR=users",
        "title": "中科创达天津 测试实习生面经",
        "content": "面试攒人品 这个是技术面 面的好简单\n\n1.上来万年不变的自我介绍\n\n2.你认为在这么多大学生中我凭什么招你？你有什么优势？\n\n3.测试工作很枯燥你可以接受吗？\n\n然后HR就说可以反问他一些问题 薪资待遇问题去问另一个HR 我们的沟通就结束了\n\n可是我之前做准备的时候你看到他家问的问题还挺多的 赶巧了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589763440269328384?sourceSSR=users",
        "title": "【影石Insta360-24届研发校招岗位-面经分享】",
        "content": "**内推码：****ISK4KS 投简历：insta360.zhiye.com**\n\n春招马上就要开始了，24届的小伙伴们快准备起来吧，时间越早，上岸的概率就越高！！！欢迎小伙伴们踊跃投递~\n\n去年我也是迷茫的秋招人，也是零工作经验的职场小白，我的秋招从暑假拿到影石offer开始，同时这也是我最后的最佳的选择。现如今顺利入职影石，在心仪的部门实习，很开心也很梦幻。我们都不知道哪个才是最完美的选择，兴许并没有这样的选择，但是一定有一个是最适合我们的。闲暇之余，在这里分享一下面试经验，希望能给需要的小伙伴提供有价值的参考~\n\n**投递方向：感知算法**\n\n****\n\n**面试流程：无笔试，两轮技术面 + 一轮HR面**\n\n秋招的时候看到有的帖子是有笔试的，而一部分却没有。不过还是建议准备一下笔试，优先级没必要设置得最高，记得抽空刷刷题就好。\n\n****\n\n**面试前需要思考的三个问题：**\n\n1、对自身是否足够了解，是否已经把学业上有价值的工作量都体现在简历里了，是否有自己的技能树；\n\n2、对面试的公司是否足够了解，是否查过公司的主营业务和上市产品，是否对该行业领域感兴趣，是否能接受它的不足之处；\n\n3、对关注的岗位是否足够了解，自身的经验与投递的岗位是否匹配，如果不匹配那么与专业是否有关联，是否了解岗位的热度和难度\n\n****\n\n**投递渠道：【官网】+【牛客网 | 百校百企备战群】 2023/07/19**\n\n当时用的是比较简洁的简历模板，后来发现知页的观感更好一些，对搞研发的来说还是比较友好的，值得一试\n\n**一面：线上 腾讯会议 2023/7/31（约60min）**\n\n面试官：1人\n\n自我介绍：一面我准备得不太充分，说得比较啰嗦，经常卡壳，对着简历介绍项目经验，每个方面都讲到了但是详略没处理好（12-15min）\n\n问学业：是保研还是考研？GPA？（2-3min）\n\n问项目1：组合导航项目，某个传感器故障怎么办？主流是EKF那为什么要用GTSAM？滤波和优化的区别？传感器异步融合？因子图优化的原理？实验室的条件如何？状态估计的计算量大不大？用的什么实验平台？没有问数据和效果。（>15min）\n\n问项目2：视觉惯性SLAM，特征点错误匹配的方法？光流法和描述子？Ax=0求解方法？为什么要用IMU预积分？（这一块我答得比较多，意思说到了但是有点乱，建议小伙伴们组织好语言，即便是很熟的知识点）滑窗和边缘化和先验？后端优化的残差有哪些？因为缺少实践经验，所以很容易被问到知识盲区，但是不要慌，其实都不是很难（15-18min）\n\n问八股文：const关键字的用法？函数加const的作用？智能指针的作用？内存四区？当时我其实没有答好，大意了（3-5min）\n\n反问环节：\n\n1、贵公司的算法岗主要是什么业务？\n\n2、岗位要求与面试的着重点不太匹配的原因？\n\n面试官看法：项目经验跟岗位是有联系的，准备下一轮\n\n总结：个人感觉前面发挥还好，不过后半段被问到一些难点，有点紧张；面试官一开始比较高冷，越到后面语气越亲和（其实面试官也有记不牢固的知识点，所以不用很紧张，要稳住）。答不上来的一定要花时间去记，答不清楚的要做整理，特别是自我介绍的部分，口齿要清晰\n\n****\n\n**二面：线上 腾讯会议 2023/8/10（约60min）**\n\n面试官：2人（技术负责人）\n\n自我介绍：建议根据一面的感受做个全面的复盘，可以做个内容充实的PPT，把亮点直接突显出来，从绩点排名到专业培养方案、有点含金量的比赛、课程项目经验和本科毕业设计，用心准备一下然后展示出来，总能用得上的！（10-12min）\n\n问项目、课题、采用的是什么数据集、做实物还是仿真，还有一些比较细的专业知识，比如IMU。没问八股，主要是挖掘项目内容和代码能力；\n\n问竞赛获奖，排名多少，前百分之几；\n\n问职场相关，与领导相处、工作心态等；\n\n问我对该岗位的理解，是否对该业务感兴趣，接受程度如何；\n\n问编程基础，C++11和14有没有了解，手撕一个代码，涉及到vector、类继承和查找删改，给了比较多的时间（我写得不好，意思没理解到位，就写了个框架，然后解释思路），由于时间限制，这个环节就匆匆跳了过去；\n\n反问环节：可以问清楚岗位的新业务内容，需要哪些领域的知识，跟自己的适配程度，越细致越好，能彰显你的入职热情。最后可以稍微问一下面试官对自己的总体感受，有什么需要改进的地方，下一个环节大概什么时候。\n\n总体感受：两个面试官，表现得比较紧张，代码没撕出来但是圆过去了\n\n**HR面：线上 腾讯会议 2023/8/17（约45min）**\n\n这里我做了个PPT，做了几个分支，包括学业履历、岗位匹配、个人成就、性格兴趣、家庭背景和制定目标，可能准备得比较充分，感觉给HR的印象挺深的，直接进入反问环节，再后面就是谈薪了。所以不要放过任何展示自己的机会，能用文字表达的就别局限于口头阐述，能用图片概括的就别局限于文字表达\n\n**发意向：2023/8/21**\n\n有什么问题都可以跟HR问清楚，包括薪酬结构、打卡年假、公积金、实习期和试用期、违约金等（有的问题确实比较敏感，当时还担心会被留下不好的印象，但其实比较多虑），HR都回答得很清楚，而且也很真诚，不会绕圈子和整话术。所以小伙伴们不用过于担心，该问清楚就问清楚，这样既能避免互相猜忌，也是对自己负责\n\n****\n\n**入职感受**\n\n实习一个月了，目前感觉公司氛围还是不错的，确实像网上评价的一样，成员都比较年轻，而且有干劲，研发部门（包括硬件、嵌软和算法等）这边的同事们每天都有很多工作话题在讨论，既专注又活跃。零食确实有，而且不少。至于加班情况，目前看来还好吧，要看业务。弹性打卡，早上九点半前，工位上人挺少的。\n\n****![](https://uploadfiles.nowcoder.com/compress/mw1000/images/20240221/994496044_1708482300641/4247B96E2A9F6FC10646CCF80863FF1A)\n\n下班ing\n\n![](https://uploadfiles.nowcoder.com/compress/mw1000/images/20240221/994496044_1708482314603/8E902F5EF9A8D5D6C0387FD40D6D6786)\n\n茶水间的一角\n\n****\n\n**总结**\n\n从投递到收到offer就一个月的时间，算是比较快的了。影石还是一家比较年轻的企业，但这里的环境带给我的感觉却显得格外成熟稳健，大家都在忙着交流和解决问题，一点也不内卷，我不知道其他的企业是不是也这样的。总而言之，欢迎加入！！！\n\n![](https://uploadfiles.nowcoder.com/compress/mw1000/images/20240221/994496044_1708482280939/E029AFF23E26428FE7A9B3FC99B2DBCB)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589865629411180544?sourceSSR=users",
        "title": "1.4 长江存储求职攻略-2024理工科版本",
        "content": "#### 1.4.1 校园招聘时间流程\n\n网申 | 线上测评 | 面试 | offer  \n---|---|---|---  \n7月-10月 | 7月-10月 | 8月-10月 | 10月-1月  \n  \n#### 1.4.2 薪资爆料\n\n岗位 | 地点 | 学历 | 薪资范围（年薪）  \n---|---|---|---  \n工艺工程师 | 武汉 | 硕士 | 15K~21K *12 *1.2  \n工艺工程研发 | 武汉 | 硕士 | 15.5K~18K *12 *1.2  \n工艺工程研发 | 武汉 | 博士 | 24.5K *12 *12.5  \n质量工程 | 武汉 | 硕士 | 10.5K *12 *1.2  \n设备工程 | 武汉 | 硕士 | 11K-18K *12 *1.15  \n器件工程研发 | 武汉 | 硕士 | 15K~23K *12 *1.2  \n  \n  * 数据来源 牛客用户，更多详细信息可到牛客查询\n\n#### 1.4.3 面试真题\n\n1、为什么加入长江存储？\n\n【解题思路】\n\n>\n> 非常感谢您提出这个问题。我选择加入长江存储，主要是因为我对这个行业和公司的发展前景非常看好，同时我也认为自己能够为公司带来价值。长江存储作为中国领先的存储芯片设计和制造企业，不仅拥有一支优秀的技术团队和管理团队，而且还具备丰富的行业经验和先进的技术实力。这使得我对长江存储的发展前景充满信心，并且相信这里可以给予我广阔的发展空间和机会。除此之外，长江存储还注重员工的发展和培养，这也是我选择加入这家公司的原因之一。我希望能够在长江存储的平台上不断提高自己的能力和素质，并且为公司的发展做出自己的贡献。\n\n2、介绍一下你的项目，以及遇到的困难，怎么解决的，项目的创新点是什么？\n\n【解题思路】\n\n>\n> 我最近参与了一个机械结构设计项目，该项目是为了设计一种新型的机械手臂，能够自动化地完成物料搬运和组装任务。在项目中，我担任了团队的一名机械设计师，主要负责机械手臂的设计和优化。\n>\n>\n> 在项目中，我们遇到了一些困难，其中最大的挑战是如何设计一种机械结构，能够同时满足高强度、高刚度和轻量化的要求。在解决这个问题的过程中，我首先对现有的机械结构进行了深入的研究和分析，然后结合新型材料和先进的制造技术，提出了一种全新的设计方案。我们使用了先进的有限元分析软件对机械结构进行了模拟和优化，最终得到了一个高效、可靠且轻量化的机械手臂结构。\n>\n>\n> 此外，项目的创新点主要体现在机械结构的轻量化和高效性方面。我们利用了先进的材料和制造技术，将机械结构的重量减轻了50%以上，同时提高了结构的强度和刚度，从而大大提高了机械手臂的工作效率和安全性。\n>\n>\n> 总的来说，这个项目让我更深入地了解了机械设计和制造方面的知识，同时也锻炼了我的团队合作和解决问题的能力。我相信这些经验和技能将有助于我在长江存储的工艺整合工程师岗位上更好地发挥我的作用。\n\n3、详细介绍项目流程，使用的算法整体流程和优化手段？\n\n【解题思路】\n\n> 我很愿意为您详细介绍一下我曾经参与的机械工程项目的流程、使用的算法和优化手段。\n>\n> 该项目是一种用于生产线的自动化机器，用于对产品进行检测和包装。这个项目的整体流程包括以下几个步骤：\n>\n>   1. 需求分析：我们与客户和项目经理一起分析了项目的需求，并确定了机器的基本功能和性能要求，包括检测精度、生产效率、可靠性等。\n>   2. 概念设计：在需求分析的基础上，我们进行了一些创意性的设计，提出了一些概念性的解决方案，并与客户和项目经理一起讨论和确定最佳方案。\n>   3. 详细设计：在确定了最佳方案之后，我们进行了详细的设计工作，包括机器的整体结构设计、各个部件的设计和材料选择等。\n>   4. 制造和装配：根据详细设计，我们开始进行机器的制造和装配工作，包括加工和装配机器的各个部件，以及对机器进行测试和调整。\n>   5. 测试和优化：在机器制造和装配完成后，我们对机器进行了一系列的测试和优化工作，包括调整机器的参数、测试机器的性能和可靠性等。\n>\n\n>\n> 在整个项目流程中，我们使用了一些算法和优化手段，例如：\n>\n> 自适应控制算法：这个算法可以根据机器的反馈信息和环境变化自动调整机器的控制参数，以保证机器的稳定性和性能。\n> 优化设计算法：这个算法可以根据机器的性能要求和材料特性，自动选择最优的材料和设计方案，以提高机器的性能和可靠性。\n> 仿真分析工具：我们使用了一些仿真分析工具，例如有限元分析和计算流体力学分析，以验证机器的设计和优化方案的可行性。\n> 机器学习算法：我们使用了一些机器学习算法，例如神经网络和决策树，以对机器进行智能控制和优化，提高机器的性能和可靠性。\n>\n> 总之，我们通过以上流程和算法手段的应用，使得机器的性能、可靠性和生产效率都得到了显著提升，满足了客户的需求和期望。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589541455652192256?sourceSSR=users",
        "title": "宁波某科技公司 Java 面经",
        "content": "# 宁波某科技公司 Java 面经\n\n昨天投了简历，今天就面了，挺快的，面试完没几分钟就说初试过了，然后 HR 面，面完都过了，效率很高.gif\n\n1）\n\n面试官：先自我介绍一下吧，我看一下你的简历\n\n我：阿巴阿巴，继续重复准备好的学习过程以及获奖，竞赛，开源项目等等，喜欢看书的也可以介绍一下，总结有什么优点就往上面甩就完事了，可以按时间顺序进行介绍。\n\n2）\n\n面试官：简历上的项目是你自己做的吗？\n\n我：阿巴，确实，前后端都是自己做的，并且有一些拓展功能，有过性能测试和多线程安全的考虑等.....这边别说是网上抄写的，直接说学校老师交给你的项目都行，就算被看出来了，最好是项目自己拓展过功能，强调自己的学习能力和独立做项目能力就可以了，当然前提是，自己得有真才实料，你没技术说话都没底气。\n\n3）\n\n面试官：你项目上 Redis 用来做什么功能的，业务介绍一下？\n\n我：爬虫爬取数据，然后存 Redis 缓存预热，用了个定时任务，然后有个缓存一致性考虑.....\n\n4）\n\n面试官：数据库你是用什么 ORM 框架操作的？\n\n我：MyBatisPlus，然后复杂 SQL 自己写写，学校教了 JPA，基本没用，然后聊了下分表，Join 性能之类的问题。\n\n5）\n\n面试官：你有过性能测试吗？\n\n我：我用 Jemter 去测试，然后xxxx，如果有性能问题，慢查询日志引出，然后xxxx，然后多线程考虑，设计模式考虑等等，都可以阐述。\n\n6）\n\n面试官：图片你是存哪里的？\n\n我：七牛云免费图床.jpg，主要用来存项目图片和个人博客的图片....\n\n7）\n\n面试官：项目中有使用到多线程吗？\n\n我：异步编排 CompletableFuture 和线程池使用都可以讲一下，也可以聊一下锁的相关知识，具体看你项目用到什么技术了。\n\n8）\n\n面试官：前端你了解多少？\n\n我：阿巴阿巴，Vue 和 React 都会用，主流组件库都用过.jpg，全栈程序员真的强，主要是为了好玩，做个开源项目。\n\n9）\n\n面试官：Nginx 了解多少？\n\n我：我XXX反向代理，XXXX后期分布式，负载均衡xxx，还可以介绍下正向代理和反向代理的区别，动静分离，Nginx 缓存处理等等，会啥说啥、\n\n10）\n\n面试官：怎么查看日志等项目运行情况的？\n\n我：宝塔+腾讯云可视化，还有一些常用的内存 TOP，PS-EF等等，OOM 进程溢出怎么排查，然后我又说了下关于 Docker 的技术。\n\n11）\n\n面试官：我看简历项目是到 23 年 8月，那么之后都在干什么？\n\n我：主要维护开源项目和线上项目，还有拓展项目的功能点，合并 PR，修复 ISSUE。\n\n12）\n\n面试官：还了解哪些数据库？\n\n我：SQL SERVER，MongGODB，POSTGRESQL。\n\n13）\n\n面试官：你为什么个人就使用 Git 技术了？\n\n我：主要维护开源项目，分支和版本的控制，合并代码，解决冲突等等。\n\n总体还是简单面试，也没有深究，还是以问简历为主，因此大家的简历要写自己会的，别写的太宽泛，容易被开火，简历需要优化很多次，要注重机会，别没准备好就开投了。\n\n开源项目 Gitee 地址：[https://gitee.com/falle22222n-leaves/vue_-book-manage-\nsystem](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgitee.com%2Ffalle22222n-leaves%2Fvue_-\nbook-manage-system)\n\n欢迎老铁们 Star 下！⭐⭐⭐\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589518785023918080?sourceSSR=users",
        "title": "校招生如何准备软件测试、测试开发岗位的面试？",
        "content": "​**哈喽大家好，我是chowley**\n\n**今天我们邀请到了QALog联合创始人，双9硕士给我们做经验分享和学习路线规划，正文如下：**\n\n**校招生如何准备软件测试、测试开发岗位的面试？**\n\n**作者介绍**\n\n笔者是**软件测试方向的硕士研究生** 。在应届秋招中拿下了20余个软件测试、测试开发的offer。本系列会将我的测试理论体系与大家分享和探讨。\n\n**求职建议**\n\n大家都很困惑**如何学习测试？如何准备测试方面的面试？**\n\n我有朋友是做研发的，他认为测试不用准备，直接用开发的简历就行。也有人认为要学习一些测试理论，然后写一个测试项目。站在我的角度来看，两者都有点道理，但都不够充分。\n\n测试理论是一个测试工程师需要具备的，也是最重要的一块内容，这是成为一个好的测试的基础。对于校招生，首先需要有一个知识体系的架构，后续的学习积累都是填充这个架构。这个专栏将会分享笔者的测试理论体系，将通过回答什么是测试、测什么、怎么测、如何评判测试充分性等问题来将测试理论串联起来。\n\n**测试理论的学习重点**\n\n1\\. 软件测试的定义、软件测试与软件质量保障的关系。\n\n2\\. 软件测试的测试级别和测试类型。\n\n3\\. 软件测试的基本原则。（例如尽早介入测试、不可穷尽等 ）\n\n4\\. 软件测试的充分性和测试开销的理解。（覆盖率、故障注入等充分性判断手段的理解）\n\n5\\. 常用的测试技术的底层原理(分为基于需求的测试,基于结构的测试以及基于经验的测试)。\n\n6\\. 常见的一些效能提升手段的目的和基本使用(selenium,uiautomator等)。\n\n7\\. 测试前沿洞察(精准测试、蜕变测试、模糊测试、对抗神经网络、基于模型的测试等)。\n\n本专栏将主要讲解上面几方面内容，笔者会从回答问题的角度来描述这些概念和知识体系。\n\n除此以外，我们还需要掌握一些计算机基础知识，这块将在另一个专栏中详细总结（编程语言、计算机网络、操作系统、数据库）。后期我们也会提供完整的ui自动化、接口自动化测试项目供大家学习。\n\n**下面是本系列的文章目录：**\n\n![alt](https://uploadfiles.nowcoder.com/images/20240220/262196079_1708424180028/D09638ADCAD47A85343EA8B54BEE2605)\n\n**本期小tip**\n\n欢迎大家加入我们的社区一块学习、交流，此外我们也提供短期的面试辅导，让您在短期内具备应付大多数面试的测试理论水平。\n\n**好了，以上就是本文的全部内容，如有问题可留言讨论。**\n\n**********************************************************************\n\n**​欢迎点赞、评论、收藏，it's important for me.**\n\n**Searching for QALog.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589845724012048384?sourceSSR=users",
        "title": "1.3 美的求职攻略-2024理工科版本",
        "content": "#### 1.3.1 校园招聘时间流程\n\n网申 | 笔试 | 面试 | offer  \n---|---|---|---  \n8月-10月 | 8月-10月 | 9月-11月 | 9月底-12月  \n  \n#### 1.3.2 薪资爆料\n\n岗位 | 地点 | 学历 | 薪资范围（年薪）  \n---|---|---|---  \n结构开发岗 | 佛山 | 硕士 | 12K~13.5K *14  \n自动化工程师 | 上海 | 硕士 | 13.5K~15K *14  \n自动化工程师 | 佛山 | 本科 | 10K * 14  \n产品工艺 | 佛山 | 本科 | 9K * 14+生产一线2K/月  \n振动噪声 | 佛山 | 硕士 | 17.5K * 14  \n材料研究工程师 | 佛山 | 硕士 | 13.5K~14K * 14  \n电控 | 上海 | 硕士 | 年包37W  \n材料研发 | 佛山 | 硕士 | 13.5K * 14  \n材料研发 | 合肥 | 博士 | 23K * 15  \n  \n  * *数据来源 牛客用户，更多详细信息可到牛客查询\n\n#### 1.3.3 面试真题\n\n1、什么叫边界层\n\n【解题思路】\n\n>\n> 边界层是流体与其接触的物体表面附近，速度和物理性质发生显著变化的区域。在边界层中，流体速度从静止状态逐渐增加，而粘性和摩擦力也会逐渐增加，导致流体粘附在物体表面。边界层的存在对于流体力学和热力学的研究都有很重要的意义，同时也是机械工程中涉及到流体力学、气动学等方面的重要知识点。\n\n2、如何对洗衣机进行建模\n\n【解题思路】\n\n> 对洗衣机进行建模可以分为以下几个步骤：\n>\n>   * 确定模型的目的和范围：洗衣机的建模目的可以是为了设计新型洗衣机或优化现有的洗衣机，范围则包括洗衣机的各个部件和功能。\n>   * 收集洗衣机相关的数据：包括洗衣机的尺寸、材料、工作原理等信息。\n>   * 确定建模方法：可以采用CAD软件进行三维建模，也可以采用仿真软件进行虚拟建模和性能测试。\n>   * 开始建模：可以从洗衣机整体开始建模，逐渐细化到各个部件和功能。可以使用现有的CAD模型或从零开始建模。\n>   * 进行仿真测试：使用仿真软件对洗衣机进行各种测试，如稳定性测试、耐久性测试、能耗测试等。\n>   * 优化设计：根据仿真测试的结果，对洗衣机进行优化设计，改进洗衣机的性能和效率。\n>   * 输出结果：输出洗衣机的三维模型和仿真测试结果，以及优化设计方案。\n>\n\n3、如何在不减少风量的情况下，减小功率\n\n【解题思路】\n\n> 如果要在不减少风量的情况下减小功率，可以考虑优化风机的设计。具体来说，可以考虑以下几个方面：\n>\n>   * 优化叶片设计：采用合适的叶片类型、叶片数目和叶片形状，以减小阻力和风阻损失，从而降低功率。\n>   * 优化叶轮设计：调整叶轮的进出口角度、叶轮直径、叶片厚度等参数，以减小流体的湍流程度和损失，从而减小功率。\n>   * 优化叶轮和扇壳之间的间隙：减小叶轮和扇壳之间的间隙，可以减小风漏损失，从而降低功率。\n>   * 优化风机的控制方式：采用变频调速技术或者其他控制技术，可以根据实际需要调整风机的转速，从而实现功率的调节。\n>\n\n>\n> 需要注意的是，在进行优化设计时，需要综合考虑多个因素，如风机的工作条件、流体力学特性、材料强度等，以确保风机的性能和安全性。\n\n4、对cfd方面的软件了解多少？\n\n【解题思路】\n\n> CFD软件是用于模拟流体运动和热传输的工具。它们通过将物理问题离散化为数学模型，然后使用数值方法求解这些模型来模拟流体流动的行为。\n>\n>\n> CFD软件通常包括预处理器、求解器和后处理器三个模块。预处理器用于设置模拟的物理问题、网格生成和设定模拟参数。求解器用于对物理问题进行求解，并产生模拟结果。后处理器则用于对模拟结果进行分析和可视化。\n>\n> 常见的CFD软件包括ANSYS Fluent、OpenFOAM、COMSOL\n> Multiphysics等。这些软件具有各自的特点和优势，选择哪个软件取决于具体的应用场景和需求。\n\n5、对美的的了解，为什么选择美的\n\n【解题思路】\n\n> 作为一名机械工程师，我了解到美的集团是中国领先的家电制造企业，也是世界上最大的家电制造商之一，拥有众多知名品牌，包括美的、小天鹅、英菲尼迪等。\n>\n> 我选择美的的原因主要有以下几点：\n>\n> 领先的市场地位和技术优势：\n>\n> 美的在家电行业拥有领先的市场地位和技术优势，其拥有强大的研发实力和制造能力，在家电领域拥有广泛的产品线和业务范围，可\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589515029117005824?sourceSSR=users",
        "title": "前端面试总结（三维家）",
        "content": "    前端小白人生第一次面试，没怎么准备，感觉好像还OK？（虽然很多东西没答出来[牛泪]）  \n  \n    Part1  自我介绍  \n    提前十分钟在记事本先写的，按照从哪来，会什么，什么优势来介绍的。说得不太连贯也比较短。。。下次一定好好准备[尴尬]  \n      \n    Part2 介绍一下项目、难点以及如何解决  \n    按照简历写的粗略介绍了一下核心的项目。难点与解决说了三个：  \n    ①实现话题侧边栏的响应式显示。  \n     解决：设置页面窗口监听器监听页面宽度，到一定的阈值修改布尔值状态从而改变前端组件的展示。  \n    ②AI回答的流式输出。  \n     解决：由于获取AI回答的接口是在聊天框组件实现的，气泡组件是聊天框组件的子组件，因此使用props父子组件传值在每次获取一部分AI回答结果时向气泡子组件传递数据，气泡组件根据每一次接收父组件传值来更新元素。  \n    ③不同话题对应不同知识库的切换。  \n     将话题包装为一个对象，包含话题名称与对应知识库名称，发起提问时传递话题对象参数，获取当前话题对应知识库并提交接口发起提问。（属于是有点没什么说乱扒了）  \n  \n    Part3 项目提问  \n    ①窗口监听器的监听频率是多少？  \n     第一个问题就给问倒了，调用的是window.addEventListener()方法，完全没想过这个问题。。。。  \n     [HELP]查了一下addEventListener的监听频率，才发现不对劲儿啊，这玩意不就是事件发生时触发么？当监听到页面变化时触发监听，哪有频率可言？？？不知道是不是被坑了，反正当时脑抽啥也没想出来[牛泪]  \n    ②知不知道帧的概念？如果说是60帧的话那一帧是多少毫秒？  \n    答了1/60秒，好像勉勉强强过关？？还好游戏打的多[看好戏]）  \n      \n  \n    Part4 算法and数据结构  \n    ①set和array的区别  \n    一开始没反应过来是问的集合与数组，还以为是问的哪个js方法，慌麻了。面试官提醒才反应过来。答了set元素唯一性不可重复，array可重复。  \n    [HELP]Array 是一个有序的、可变的数据结构，其中的元素通过索引（从 0 开始）访问。  \nSet 是一个无序的、唯一值的集合。它不允许重复的元素。Array 提供了丰富的方法和属性，例如 push、pop、splice 等用于操作数组的方法，以及\nlength 属性用于获取数组的长度。  \nSet 提供了一些用于集合操作的方法，如 add、delete、has，但相对较少并且专注于集合的唯一性。  \n    没说到有序性和基本的接口举例，这一part估计也是寄了。  \n  \n    ②冒泡排序和快速排序的区别  \n    从算法时间复杂度，大概怎么实现说了一下。  \n    可以再说一下稳定性（冒泡稳定，快排不稳定，相等元素可能会被交换），和空间复杂度（冒泡不需要额外空间，快排需要logn的栈空间）  \n  \n    ③算法题：如何能确定一个点是否在矩形的边界上？其他几何形状呢？  \n    矩形想着映射到一个坐标系中列出边界区间去判断，其他形状就想不出来了。。。。  \n    [HELP]好像看到可以用作点的水平射线检查射线与几何形状交点的个数，奇数则成立。但是也看不懂算法，求助各位牛友们[HELP][HELP][HELP]  \n  \n    Part5 问题反问  \n    看了公司是ai方向的，问了涉及哪方面ai？问了一下公司的前端主要技术栈。  \n  \n  \n    [有offer][有offer]总结  \n    面试过后才知道自己的不足，准备得太少了。后面应该要优化一下自我介绍，深挖项目，找出若干个难点以及解决方案并对hr可能问的一些问题做准备。对基础知识需要再更加深入的理解，还有算法题！不刷真的麻了。。。  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589495704683290624?sourceSSR=users",
        "title": "趣头条测试实习生面经",
        "content": "1.自我介绍\n\n2.为什么最后选择测试而不是开发\n\n3.职业规划\n\n4.软件测试的流程\n\n5.提交一个bug所需要的信息\n\n6.SQL的增删查改\n\n7.Redis你用过什么命令\n\n8.Linux搜索日志文件中的关键字并输出对应行\n\n9.使用过Fiddler和Postman的什么功能\n\n10.针对一个POST请求登录接口，用户名和密码为必填项，验证码非必填，设计测试用例\n\n11.现在你负责一个项目，项目小组，原计划开发5天，测试两天，但是到指定日期开发还是没有提测，导致测试延误你该怎么办\n\n12.如何看待互联网加班的现象\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589489776437252096?sourceSSR=users",
        "title": "某跨境电商独角兽Java实习面经 OC拒",
        "content": "一面\n\n1自我介绍\n\n2说说对oop的理解（从三大特性扯到了策略+工厂+模板）\n\n3你接口和抽象类是怎么用的\n\n4ConcurrentHashMap怎么做并发处理的（介绍了一下分段思想和锁桶头）\n\n5ConcurrentHashMap的get方法里有做并发处理吗（没有）怎么保证读写互斥（volatile修饰节点）\n\n6对称加密与非对称加密\n\n7MD5是啥，它是加密算法吗（不是），加盐是什么原理，还了解其他加密算法吗（no[牛泪]）\n\n8DDoS攻击和CSRF攻击了解吗？ 说一下\n\n9类加载流程（开背）\n\n10JVM垃圾回收机制\n\n11为什么要分代（弱分代假说和强分代假说）\n\n12怎么判断垃圾（引用计数，可达性分析，三色算法）\n\n13了解安全点吗？\n\n14要是走不到安全点怎么办（安全区域）\n\n15MySQL底层是什么结构\n\n16为什么要用b树,有什么优点（矮胖，对比了一下hash，跳表，二叉树，红黑树。。）\n\n编程题:括号生成\n\n10分钟后约二面：\n\n拷打项目：\n\n2实习这个项目是怎么做异步的？（三个：redis，MySQL消息表，MQ定时任务）\n\n3为啥用消息表（减少对外接口的链路）\n\n4你们这个系统是怎么优化到这么高并发的？仔细说说（异步处理，缓存，SQL优化）\n\n5怎么定位的SQL（慢日志），你们多少秒是慢（2s）\n\n6为啥join操作放在代码里做就快了\n\n7OOM当时是怎么排查的（启jar包增加一个参数，发生OOM时自动保存dump文件dump下载下来，然后倒入堆找分析工具，看看哪个对象的数量是异常的）\n\n8怎么解决这死锁个问题的？（拆表）\n\n9你们还考虑了其他方案吗？\n\n10当时你们团队为啥用这个方案不用其他两个呢\n\n11实习中了解哪些中间件?\n\n12你啥时候能入职？\n\n反问\n\n  \n\n一下午连续面，累死\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589484575768727552?sourceSSR=users",
        "title": "2.20 春招 字节飞书 一面",
        "content": "6战字节\n\n  * 自我介绍, 说项目, 呱呱呱, 说完没反馈然后开始写题\n  * **一个字符串包含0-9的英文乱序, 还原数字: 例如: onzeore 返回01**\n  * 脑子都拼不出来, 尝试dfs, 未果\n  * 有没有其他思路: ....\n  * Redis和数据库用过吗\n  * 一个Session在insert update delete, 另一个select全表, 有什么影响\n  * 说下LRU, 先说了LRU是什么, 打断说问的是原理\n\n反问:\n\n  * 业务: 自己搜\"飞书项目\"\n  * 怎么学go和中间件: 看文档\n\n可能看到我简历和以往面评的第一眼, 就不准备面下去了吧😥😥. 以后不面字节了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589403287246360576?sourceSSR=users",
        "title": "Shopee 外卖产品经理一面凉经",
        "content": "1、自我介绍\n\n2、挖简历（两家公司实习经历中分别挑了两个项目，数据如何得出，量化你的的具体产出）\n\n3、介绍一个你喜欢的互联网产品，你觉得有哪些是你可以优化的点\n\n4、接3：如果这款产品单日DAU500w，老板希望一个周期后数据能翻倍，你作为产品经理你会怎么做（没给任何附加条件，面试官让我自由发挥）\n\n5、用你的数据背景（我上一段实习是数据产品）聊聊怎么运用在我们这个岗位上\n\n6、你觉得数据产品经理和我们这个岗位最大的不同是什么，展开说说\n\n7、反问环节（能否对我的面试表现做个评价？面试官以会影响判断拒绝了回答；最后提了一些我回答过程中不太理想的一些问题。。凉凉了）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589218901846663168?sourceSSR=users",
        "title": "百面嵌入式专栏（笔试题）北京联发科嵌入式软件工程师笔试题目",
        "content": "## 逻辑题\n\n#### 1\\.\n参加断型冠状病毒疫苗开发研讨会的70名学者中,亚商学者39人,博士33人,非亚裔学者中无博士学位的4人，根据以上陈述,参加此次研讨会的亚裔博士有几人?\n\nA 1\n\nB 2\n\nC 6\n\nD 7\n\nE 8\n\n> C\n>\n>\n> 亚裔学者39人，博士33人，非亚裔学者中无博士学位4人，这三者加起来是76人，但实际总人数只有70人。亚裔学者和博士两个概念之间为交叉关系，这两个概念和非亚裔学者中无博士学位者之间都是全异关系。这说明，既是亚裔学者又是博士即亚裔博士有6人。\n>\n> 也可以通过运用计算法来求解。设亚裔博士有x人，则可列方程：31+33-x+4=70，解这个方程，可得：x=6。\n\n#### 2\\.\n某省妇女儿童占全省总人口的2/3。如果妇女是指所有女性人口，儿童是指所有非成年人口，并且对任一年龄段，该省男女人口的数量持平，则上述断定能推出以下哪项结论？\n\nA 该省男性成年人口和儿童人口持平。\n\nB 该省男性成年人口大于儿童人口。\n\nC 该省男性成年人口小于儿童人口。\n\nD 该省女性成年人口和男性儿童人口持平\n\nE 该省男性成年人口和女性儿童人口持平。\n\n> A\n>\n> 由题干，可以给出以下表\n>\n> 女性 男性  \n> 成年 | 1/3 | 1/3 | 2/3  \n> 儿童 | 1/6 | 1/6 | 1/3  \n> | 1/2 | 1/2 |   \n>  \n> 由任一年龄段，该省男女人口的数量持平，可得总人口男女持平。\n>\n> 由妇女儿童占全省总人口的三分之二，可得成年男性占三分之一。\n>\n> 由成年男性占三分之一，得男童占六分之一（因为男性占二分之一）。\n>\n> 由男童占六分之一，得女童占六分之一。因此，该省男性成年人口和儿童人口持平。\n\n#### 3\\.\n某次讨论会共有25名与会者,已知(1)至少有7名青年教师是男性，(2)至少有8名男教师已过中年(3)至少有10名男青年是教师;如上述3句话两真一假,则关于与会人员可以得出以下哪项\n\nA 青年教师至少有10名\n\nB 男教师至多有15名\n\nC 男青年都是教师\n\nD 男青年至少有7名\n\n> D\n>\n> [1]：大于等于7名青男 [2]：大于等于8名中男[3]：大于等于10名青男。\n>\n> [1]与[3]数量上有重叠部分，如果[3]为真，则[1]一定为真；\n>\n>\n> 如果[1]为假，则[3]一定为假。此时就会两个为假，与题干条件的两真一假相矛盾，故[1]必真。而如果[1]为真，既青年男教师大于等于7人，那么男青年至少有7名。\n\n#### 4\\.\n某中药配方有如下要求(1)如果有甲药材,那么没有乙药材(2)如果没有丙药材,那么必须有丁药材(3)人参和天麻不能都有(4)如果没有甲药材而有丙药材,则需要有人参。如果还有天麻,则关于该配方的断定哪项为真?D\n\nA 含有甲药材\n\nB 含有丙药材\n\nC 没有丙药材\n\nD 含有乙药材或不含丁药材\n\n> 无正确答案\n>\n> 由“含有天麻”和（３）可以推出，不含有人参；进而由（４），否定后件就能否定前件，可以推出，有甲药材或者没有丙药材。\n>\n> 如果有甲药材，由（１）可以推出，**无乙药材** ；如果没有丙药材，由（２）可以推出，**有丁药材** ；故**无乙药材或有丁药材** 。\n>\n> 因此，选项中没有正确答案。\n\n#### 5\\.\n某国拟在甲、乙、丙、丁、戊己6种农作物中进口几种,用于该国庞大的动物饲料产业,考虑到些农作物可能有违禁成分,以及它们之间存在的互补或可替代因素,该国对进口这些农作物有如下要求(1)它们当中不含违禁成分的都进口。2)如果甲或乙含有违禁成分,就进口丙和丁。3)如果戊含有违禁成分,那么己就不进口了;如果进口丙,就进口乙和己。(4)如果不进口己,就进口戊;如果进口戊,就不进口己。根据上述要求,以下哪项所列的农作物是该国可以进囗的；\n\nA 甲、乙、丙\n\nB 乙、丙、丁\n\nC 甲、乙、戊\n\nD 甲、乙、己\n\nE 丙、戊、己\n\n> C\n>\n> A选项与（2）矛盾\n>\n> B选项与（2）矛盾\n>\n> D选项与（3）矛盾\n>\n> E选项与（4）矛盾\n\n## 不定向选择\n\n#### 1\\. int i =1;const int j =2;以下说法不正确的是\n\nA const int *p1 = &i;\n\nB const int *p2 = &j;\n\nC int *const p3 = &i;\n\nD int *const p4 = &j;\n\n> D\n>\n> int *const p4 ,p4为指针常量，p4指向的内存位置不能改变，但是，p4所指内存存放的值是可以改变的。j表示常量，其数值不能被改变。\n>\n> 将j的地址赋给p4后，**p4可以执行其他操作** （ 如*p4=4;），将j的值改变，因此，int *const p4 = &j;是错误的。\n\n#### 2\\. 以下关于内存的说法正确的是\n\nA RAM是随机存储器，在断电时将丢失其存储内容，ROM是只读存储器，断电时不会丢失存储内容\n\nB 内存的数据带宽与内存的数据传输频率、内存数据总线位数以及内存大小有关\n\nC 用户进程通常情况只能访问用户空间的虚拟地址,不能访问内核空间虚拟地址\n\nD Linux中使用 buddy system算法可以管理页外内存碎片,使用slub算法可以管理页内内存碎片\n\n> ACD\n>\n> B:内存的数据带宽的计算公式是：数据带宽=内存的数据传输频率×内存数据总线位数/8\n\n#### 3\\. 以下哪些事件会导致进程的创建\n\nA 系统初始化\n\nB fork系统调用\n\nC pthread_ create函数调用\n\nD 一个批处理作业的初始化\n\n> ABD\n>\n>\n> 创建进程的多种方式但凡是硬件，都需要有操作系统去管理，只要有操作系统，就有进程的概念，就需要有创建进程的方式，一些操作系统只为一个应用程序设计，比如扫地机器人，一旦启动，所有的进程都已经存在。\n>\n> 而对于通用系统（跑很多应用程序），需要有系统运行过程中创建或撤销进程的能力，主要分为4中形式创建新的进程\n>\n> 1.系统初始化（查看进程 linux中用ps命令，\n> windows中用任务管理器，前台进程负责与用户交互，后台运行的进程与用户无关，运行在后台并且只在需要时才唤醒的进程，称为守护进程，如电子邮件、web页面、新闻、打印）\n>\n> 2.一个进程在运行过程中开启了子进程（如 nginx开启多进程，os.fork等）\n>\n> 3.用户的交互式请求，而创建一个新进程（如用户用鼠标双击任意一款软件，qq，微信等）\n>\n> 4.—个批处理作业的初始化（只在大型机的批处理系统中应用）\n>\n> 无论哪一种，新进程的创建都是由—个已经存在的进程执行了—个用于创建进程的系统调用而创建的。\n\n#### 4\\. 下列说法正确的有\n\nA 计算机体系结构是一门研究计算机系统软件结构的学科。\n\nB 现代计算机处理器结构按照存储方式划分,可分为复杂指令集计算机和精简指令集计算机\n\nC RISC技术对比CISC最大的区别就是对CPI的精简\n\nD 单指令流单数据流计算机的每个机器周期最多执行一条指令\n\n> CD\n>\n> A.计算机体系结构主要研究软件、硬件功能分配和对软件、硬件界面的确定\n>\n> B.现代计算机处理器结构按照**指令系统** 方式划分,可分为复杂指令集计算机和精简指令集计算机\n\n#### 5\\. 32位系统中，该程序的输出为\n\n    \n    \n    //参数传递 退化为指针\n    void Func(char str_arg[100])\n    {\n    \tprintf(\"%d\\n\",sizeof(str_arg));\n    }\n    int main()\n    {\n    \tchar str[] = \"Hello\";\n    \tprintf(\"%d\\n\",sizeof(str));\n    \tprintf(\"%d\\n\",strlen(str));\n    \tchar *p = str;\n    \tprintf(\"%d\\n\",sizeof(p));\n    \tFunc(str);\n    \treturn 0;\n    }\n    \n\nA 5 5 4 4\n\nB 6 5 4 4\n\nC 6 5 6 4\n\nD 5 5 5 100\n\n> B 6 5 4 4\n>\n> 使用函数**strlen()**求某个字符串的长度时是** 不包括结尾标志符'\\0'**的，但当你用**\n> sizeof()**求某个字符串占用的内存空间时，**结尾字符'\\0'是被包括在里面的** 。\n>\n> strlen用来计算字符串的长度（在C/C++中，字符串是**以\"\\0\"作为结束符的**\n> ），它从内存的某个位置（可以是字符串开头，中间某个位置，甚至是某个不确定的内存区域）开始扫描直到碰到第一个字符串结束符\\0为止，然后返回计数器值。\n>\n> sizeof是C语言的关键字，它以**字节的形式** 给出了其操作数的**存储大小**\n> ，操作数可以是一个表达式或括在括号内的类型名，操作数的存储大小由操作数的类型决定。\n\n#### 6\\. 有以下程序,求输出结果\n\n    \n    \n    #include<stdio.h>\n    int fun(int i)\n    {\n    \tint cnt = 0;\n    \twhile(i)\n    \t{\n    \t\tcnt++;\n    \t\ti=i&(i-1);\n    \t}\n    \treturn cnt;\n    }\n    int main()\n    {\n    \tprintf(\"%d\\n\\r\",fun（2021));\n    \treturn 0;\n    }\n    \n    \n\n> 8\n>\n> &是按位与，对应位都为1时该位得1，否则得0。所以 i&(i-1) 的作用：将i的二进制表示中的最右边的1置为0。\n>\n> 在本题中即数出2021转换成二进制有几个1就会走几次循环(不断除2)。2021对应的二进制是：10100111111，一共8个1，故走8次。\n>\n> 扩展：(n > 0 && ((n & (n - 1)) == 0)是判断n是不是2的次幂\n\n#### 7\\. 若 int x = 5&6,那么x的值为（）\n\nA 3\n\nB 4\n\nC 5\n\nD 6\n\n    \n    \n    B\n    5: 0101\n    6: 0110\n    x: 0100\n    \n\n#### 8\\. 以下错误的表达式为\n\n    \n    \n    struct {\n    \tinr a;\n    \tchar b;\n    }Q,*p=&Q;\n    \n\nA Q.a\n\nB (*p).b\n\nC p->a\n\nD *p.b\n\n> D\n>\n> *p=&Q ，把Q的地址赋值给了指针p，对p解引用其实就是Q。\n>\n> A 选项肯定是对的，结构体的正常访问方法。\n>\n> B 选项 (*p).b 等价于 Q.b\n>\n> C p->a p为指针访问结构体用->没问题。\n>\n> D *p.b 优先级问题，.的优先级高于 *，所以 *p.b == *（p.b），p为指针，访问结构体成员要用->。\n>\n>\n> ![](https://gitee.com/dongxingbo/Picture/raw/master//Wechat/Article/2021/%E4%B8%89%E6%9C%88/%E4%BC%98%E5%85%88%E7%BA%A7%E6%88%AA%E5%9B%BE.png)\n>\n> 扩展：结构体中.和->两种访问区别\n>\n> 定义结构体指针，访问成员时就用->\n>\n> 定义结构体变量，访问成员时就用.\n>  \n>  \n>     struct A {\n>      int a;\n>      char b;\n>     };\n>     struct A q; //访问成员就用：q.a;\n>     struct A *p; //访问成员就用：p->a;\n>  \n\n#### 9\\. 关于对象的this指针,以下叙述不正确的有\n\nA 必须显示地在类中定义声明this数据成员才能使用this指针\n\nB 一且生成一个对\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589132626884055040?sourceSSR=users",
        "title": "【奖】春季刷题节，牛友们一起冲大厂！",
        "content": "新春已至[烟花]！各个公司的春招以及日常实习（甚至暑期实习）都逐渐开始啦~\n\n友友们准备好了吗[狗牛头]节前有友友在访谈中表示希望牛牛能多上线一线公司真题[冲]\n\n这可难不倒牛牛（jingguoniuniude fengkuangguitian[打气])\n\n![](https://uploadfiles.nowcoder.com/images/20240219/999991353_1708315173992/1160A210BA9E561FFDCD08BFA0E2E47E)\n\n**50+家大厂（🙇‍感谢甲方大大们）倾力支持，近3年笔试真题！！！保真！！!官方授权！！！免费！！！**\n\n![](https://uploadfiles.nowcoder.com/images/20240219/999991353_1708315615932/F9A224D6E698BB4AD8DAA194C4E267D7)![](https://uploadfiles.nowcoder.com/images/20240219/999991353_1708315640042/F64B563C3490AA05E76E5003487227F3)\n\n（嘘~这么好的消息，我可只告诉我聪明可爱机智勇敢，一定能拿到超棒offer的牛友们💖）\n\n# 📣活动时间（活动有时间，刷题无止尽！）\n\n**2024.02.26-2024.3.31**\n\n****\n\n# 🧸面向对象（刷题无门槛，趁免费快来！）\n\n**24、25、26届等全体牛友~**\n\n****\n\n# 🎀活动规则（规则很简单，刷刷刷刷题！）\n\n### 总规则说明\n\n1、在此帖下评论【**和牛牛一起刷真题** 】即为报名活动\n\n2、本次活动的刷题范围为[**题库-\n公司真题（笔试）**](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fexam%2Fcompany)页面下所有试卷\n\n3、试卷名称中标记有**【刷题节】** 的试卷为**刷题节试卷**\n\n![](https://uploadfiles.nowcoder.com/images/20240226/999991353_1708917977535/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n# 🎁活动奖励（好运加持中，欧气值满满~）\n\n（奖项互不冲突，同一用户ID最多可获得3项奖励）\n\n### 奖项一：参与即得奖\n\n在此帖下评论【**和牛牛一起刷题** 】参与活动报名，即可获得【好运offer头像挂件】（有效期60天）\n\n![](https://uploadfiles.nowcoder.com/images/20240219/999991353_1708326253527/E9468A93E65D66931865EA16D889CAE2)\n\n### **奖项二：共同进步奖**\n\n活动期间，成功报名后，带**#**[**和牛牛一起刷真题**](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fsubject%2F23f890385cd5447dad7c33b9f67f3f83)**#**\n话题分享1次自己的刷卷成果即可获得随机获得牛客抽纸盒*1/牛客小台灯*1/桌面手机支架*1中的一件牛客周边\n\n（注意：周边共计300份，数量有限，以发布顺序先到先得哦~）\n\n![](https://uploadfiles.nowcoder.com/images/20240219/999991353_1708327258289/7828644F90FDF2E2968AA53F8FD57767)![](https://uploadfiles.nowcoder.com/images/20240219/999991353_1708327202742/D2B5CA33BD970F64A6301FA75AE2EB22)![](https://uploadfiles.nowcoder.com/images/20240219/999991353_1708327299475/225B44580503F651C9C6E610A68955CD)\n\n**发布示例**\n\n![](https://uploadfiles.nowcoder.com/images/20240219/999991353_1708331673332/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n**练习截图去哪看？**\n\n**电脑端**\n\n****![](https://uploadfiles.nowcoder.com/images/20240219/999991353_1708332123268/507074E9CA1EFEA81D404D5873C36719)\n\n**手机端**\n\n****![](https://uploadfiles.nowcoder.com/images/20240219/999991353_1708332033077/D2B5CA33BD970F64A6301FA75AE2EB22)![](https://uploadfiles.nowcoder.com/images/20240219/999991353_1708332101840/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n### 奖项三：学习激励\n\n活动期间，每周会从上周参与**刷题节上新试卷** 刷题的牛友中随机抽取**3位** 牛友送出**100元京东卡** 作为学习激励奖金\n\n（此奖励仅限24-26届过往无活动违规的牛友，同一用户ID不可重复获得，名单公示后7个工作日内未领取视为放弃）\n\n![](https://uploadfiles.nowcoder.com/images/20240219/999991353_1708328913027/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n# 活动说明\n\n1、 本次活动为帮助牛友巩固专业知识，更好地通过校招/实习笔试，如有作弊，薅羊毛等行为，将取消活动奖励以及后续题库活动的参与&奖励；\n\n2.、活动时间为2024年2月26日活动公布之时至2024年3月31日 24：00；\n\n3、 活动奖品最晚将于活动结束后7-10个工作日安排快递，如有延期另行通知；\n\n4、 活动最终结束权归牛客所有，有任何问题欢迎向@牛客周周询问；\n\n5、对活动的异议请在活动时间内发出，活动结束后不接受任何申诉；\n\n6、本活动与Apple Inc.无关；\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589402825893879808?sourceSSR=users",
        "title": "迅雷 海外产品经理二面面经",
        "content": "1、自我介绍\n\n2、挖简历：剖析每个项目的目的与做的过程，有什么优化的空间。\n\n3、你平时如何做需求分析？举例\n\n4、根据soul这类语音房产品相对完善的软件，聊聊你对语音房产品的了解\n\n5、接4：对比一下聊聊你对我们的语音房产品的看法\n\n6、对于这份工作以后的想法，想怎么发展\n\n7、自己本身的职业规划\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589216776588664832?sourceSSR=users",
        "title": "百面嵌入式专栏（笔试题）小米嵌入式软件工程师笔试题目解析",
        "content": "## 选择题\n\n**1.已经获得除CPU以外的所有所需资源的进程处于（）状态**\n\nA 就绪状态\n\nB 阻塞状态\n\nC 运行状态\n\nD 活动状态\n\n> A\n>\n> 进程的五状态模型：\n>\n> 运行态：该进程正在执行。\n>\n> 就绪态：进程已经做好了准备，只要有机会就开始执行。\n>\n> 阻塞态（等待态）：进程在某些事情发生前不能执行，等待阻塞进程的事件完成。\n>\n> 新建态：刚刚创建的进程，操作系统还没有把它加入到可执行进程组中，通常是进程控制块已经创建但是还没有加载到内存中的进程。\n>\n> 退出态：操作系统从可执行进程组中释放出的进程，或由于自身或某种原因停止运行。\n\n**2.某二叉树的中序遍历序列为32145，后序遍历序列为32145，则前序遍历序列为**\n\nA 54123\n\nB 32154\n\nC 32541\n\nD 54321\n\n> A\n>\n> 二叉树的中序遍历序列为 32145 ，后序遍历序列为32145 ，可知该树只有左子树结点，没有右子树结点， 5 为根结点。\n>\n> 中序遍历序列与后序遍历序列相同，说明该树只有左子树没有右子树，因此该树有 5 层，从顶向下依次为54123 。\n>\n>\n> 具体分析过程也可以参考下[北京联发科嵌入式软件工程师笔试题目解析](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5ODUxNDMxMA%3D%3D%26mid%3D2247485235%26idx%3D1%26sn%3D8ff93eb768f37f40ed1be053097eb8a0%26chksm%3Dc0602bdaf717a2ccf200fa70233c6e8af1dd5ef4101457e78df4b617c4e17aa3f293d76888a0%26token%3D1037474555%26lang%3Dzh_CN%23rd)\n\n**3.若已知一个栈的入栈顺序是1,2,3...,n,其输出序列为P1,P2,P3,....Pn,若P1是n,则Pi=（）？**\n\nA i\n\nB n-i+1\n\nC 不确定\n\nD n-i\n\n> B\n>\n> 栈的排列遵循先进后（即后进先出）出的原则\n>\n> 因为P1是n，是出栈的第一个数字，说明在n之前进栈的数字都没有出栈。所以这个顺序是确定的。\n>\n> 还可以知道，最后出栈的一定是数字1，也就是Pn。代入这个式子，是正确的。\n\n**4（多选题）.下面协议中属于应用层协议的是（）**\n\nA ICMP、ARP\n\nB FTP、 TELNET\n\nC HTTP、SNMP\n\nD SMTP、POP3\n\n> BD\n>\n> 1、物理层：以太网 、 调制解调器 、 电力线通信(PLC) 、SONET/SDH 、 G.709 、 光导纤维 、 同轴电缆、 双绞线等。\n>\n> 2、数据链路层：Wi-Fi(IEEE 802.11)、WiMAX(IEEE 802.16) 、ATM 、 DTM 、 令牌环 、以太网、FDDI、\n> 帧中继、 GPRS 、 EVDO、HSPA 、HDLC 、 PPP 、 L2TP 、PPTP 、ISDN·STP、CSMA/CD等。\n>\n> 3、网络层协议：IP IPv4 、IPv6、 ICMP、ICMPv6·IGMP、IS-IS 、IPsec 、ARP 、RARP 、RIP等。\n>\n> 4、传输层协议：TCP、 UDP、TLS 、 DCCP、 SCTP 、 RSVP 、OSPF 等。\n>\n> 5、应用层协议：DHCP 、DNS、 FTP 、Gopher 、 HTTP、 IMAP4 、 IRC、 NNTP 、 XMPP、POP3 、SIP、\n> SMTP、SNMP 、SSH、TELNET 、 RPC 、RTCP 、RTP 、RTSP、SDP 、 SOAP、GTP、STUN 、NTP、SSDP 、\n> BGP 等。\n\n**5.下列程序段的时间复杂度是（）**\n\n    \n    \n    int fact(int n){\n    \tif(n<=1){\n    \t\treturn 1;\n    \t}\n    \treturn n*fact(n-1);\n    }\n    \n\nA O(log2n)\n\nB O(nlog2n)\n\nC O(n)\n\nD O(n*n)\n\n> C\n>\n> 当n<=1时执行return\n> 1这一个语句，每次返回上一层都执行n*fact(n-1)这一个语句，共执行n-1次。因此共执行基本语句n次，时间复杂度为O(n)\n\n**6.下列排序算法中最好情况和最坏情况的时间复杂度相同的是？（）**\n\nA 堆排序\n\nB 快速排序\n\nC 冒泡排序\n\nD 归并排序\n\n> A C D\n>\n> 堆排序在最好和最坏情况下的时间复杂度均为O(nlogn)\n>\n> 快速排序最好和最坏情况下的时间复杂度分别为O(nlogn)和O(n^2 )\n>\n> 冒泡排序排序在最好和最坏情况下的时间复杂度均为O(nlogn)\n>\n> 归并排序在最好和最坏情况下的时间复杂度均为O(nlogn)\n\n**7.将两个各有n个元素的有序表归并成一个有序表，最少的比较次数是？（）**\n\nA n\n\nB 2n\n\nC n-1\n\nD 2n-1\n\n> A\n>\n> 归并排序是将两个或两个以上的有序子表合并成一个新的有序表。在归并排序中，核心步骤是将相邻的两个有序序列归并为一个有序序列。\n>\n>\n> 题目中告诉我们，有两个各有n个元素的有序序列，要将这两个序列归并成一个有序序列，其方法是依次从小到大取每个序列中的元素进行比较，将较小的放进一个新的序列中，直到取完一个有序序列中的所有元素。再把另一个序列中剩下的元素放进新序列的后面即可。\n>\n> 最好的情况是一个有序序列中的最小元素大于另一个有序序列中的所有元素，这样只需要比较n次。\n\n**8.将递归算法转换为非递归算法通常需要使用（）**\n\nA 栈\n\nB 队列\n\nC 队列\n\nD 广义表\n\n> D\n\n**9.在MySql中， productname regexp '[1-3]xiaomi'的含义是（）**\n\nA productname 匹配“xiaomi重复1次或5次”的字符串\n\nB productname 匹配“xiaomi字符串前一个字符为1或3“的字符串\n\nC productname 匹配“xiaomi重复1到3次”的字符串\n\nD productname 匹配“xiaomi字符串前一个字符为1到3“的字符串\n\n> D\n\n**10.同个进程的不同线程以下不能被共享的是？（）**\n\nA 全局变量\n\nB 堆\n\nC 文件句柄\n\nD 栈\n\n> B\n>\n> 线程共享的进程环境包括：\n>\n>\n> 进程代码段、进程的公有资源（如全局变量，利用这些共享的数据，线程很容易的实现相互之间的通信）、进程打开的文件描述符、消息队列、信号的处理器、进程的当前目录、进程用户ID、进程组ID\n>\n> 线程独占资源：\n>\n> 线程ID、寄存器组的值、用户栈、内核栈（在一个进程的线程共享堆区（heap））、错误返回码、线程的信号屏蔽码、线程的优先级\n\n## 专项选择题\n\n**1.下列Java函数的执行结果是什么（）**\n\n    \n    \n    static boolean foo(charc)\n    {\n    \tSystem.out.print(c);\n        return true;\n    }\n    public static void main(string[] args){\n        int i = 0;\n        for(foo('B');foo('A')&&(i<2);foo('C'))\n        {\n    \t\ti++;\n            foo('D');\n        }\n    }\n    \n\nA BADCBDCB\n\nB BACDBACD\n\nC BADCADCA\n\nD 运行时抛出异常\n\n> C\n>\n> 1.其实foo('B');就是初始化条件，只会执行一次，所以第一个打印的肯定是B。\n>\n> 2.因为i=0;循环条件是i<2 （由此可知，循环i等于2的时候就会停止循环)，所以0<2满足条件，接着会输出A。然后执行i++;i就变成1了，在输出D\n> ，在最后输出C。一次循环后的结果是：BADC。\n>\n>\n> 3.第二次循环的开始是foo('B');是初始条件，所以不会执行。直接从foo('A')开始，输出A，然后i为1，且小于2，此时循环体内再次执行i++；i的值为2了，再次输出D，最后输出C。第二次循环输出：ADC。\n>\n>\n> 4.然后循环再次执行for(foo('B');foo('A')&&(i<2);foo('C'))，直接输出A。i的值在第二轮循环后的值变成了2，2<2不成立，终止循环，输出A。\n>\n> 故输出结果是：BADCADCA。\n\n**2.下列有关软链接表述正确的是？（）**\n\nA 不可以对不存在\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589051521786990592?sourceSSR=users",
        "title": "多益网络运营策划笔试",
        "content": "第一题：  \n现在有5个不透明倒扣的杯子，我在其中一个杯子里面放了一个小球，你在选择一个杯子后，我会打开剩下四个杯子中的3个没有小球的杯子。为了选中有小球的杯子，请问此时你是否会更换选择最后一个剩下的杯子？  \n第二题：  \n国内某动车站需要扩建卫生间，如果由你来负责建设，你会怎么做？  \n1.你觉得需要扩建多少卫生间？  \n2.这些卫生间怎么布局，卫生间怎么设计，需要配备什么？  \n第三题：  \n近几年市面上越来越多基于推荐算法的“沉浸式产品”，如快手，抖音，假设需要你做一款类似产品，你会倾向于推荐用户浏览较多的相似内容，还是推荐更多其他不同类型的新鲜内容？  \n第四题：  \n2019年12月23日，微信iOS7.0.9版本增加聊天消息引用功能。“引用”是IM软件中很常见的功能，但作为2011年就上线的产品，为什么微信这么久才发布这个功能，围绕场景需求和版本迭代设计等角度，聊聊你的看法  \n第五题（二选一，以下是我选择的题目）  \nPC端游戏的玩家下线后与游戏联系少，请设计一个官方游戏平台APP上的功能点，能在游戏外增加玩家与游戏的联动，具体要求如下:  \n1.简述提高玩家在平台与游戏联动的好处。  \n2.针对如何提高游戏联动设计功能，简述使用的场景、思路及功能玩法流程\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589047813367943168?sourceSSR=users",
        "title": "一篇真正的面经：你真的准备好实习“面试”了吗？",
        "content": "大家好，我是BAT后端“A师兄”（先后就职于字节阿里腾讯）。\n\n春节已过，春招马上开始，关于算法刷题+八股+项目等重要知识技能准备，我相信很多同学都有自己的规划，学得也差不多了（如果还没有，得抓紧了）。\n\n但是今天我想给大家分享的经验，并不是关于这些基础知识技能准备的，而是关于“面试”本身。所以这是一篇真正的“面经”\n\n面试跟考试不同，考试是你面对一张试卷进行个人能力展示，而面试需要你与一位陌生面试官进行聊天口述来展示个人能力，这种形式上的变化，如果你没有经历过的话，那前几次面试结果大概率不会太好。\n据我的经验来看，头几次面试，大部分同学是发挥不出个人能力60%的，当然我也是这大部分同学之一）\n\n我当年找实习情况：我的头几次实习面试就是阿里，百度等。先说结果，全挂😂，甚至一面都过不了。\n真实面试之前，我还是迷之自信的，毕竟985硕+科班出身+自认为准备充分，然而却被狠狠打脸。尤其是连续有问题答不上来，整个人的紧张状态是不受控制的，人过度紧张下是没办法思考的，更别说面试官深问了。（好在当时行情不错，面试机会很多，后期有面试经验之后，去了另外的大厂实习）\n\n总结我的面试问题：\n\n1\\. 缺乏面试经验：不懂心态调整，不懂面试技巧，不懂面试节奏把控，不懂遇到不会的面试问题怎么应对。（提升：多面试+获得面试指导。\n这些面试存在的问题，随着面试次数的增加，你会变的轻车熟路，心态也会变的波澜不惊。\n\n2\\.\n迷之自信：潜意识觉得看过的知识就算掌握了，因为没有有效检验手段，到真实面试的时候，才发现自己很多认为会的知识根本“说”不出来。（注重输出。技巧：学习知识的时候，假想面试官是小白，用自己的话给他讲懂）\n\n3\\. 学习无人指路：不清楚知识学习范围，考察深度。因为本身精力有限，分配也不合理，最后发现有些该学的没学，不用学的猛学。\n\n4\\.\n用大厂来试错：我当年是用阿里来试错的，因为留下了不好的面评，整个校招期间，阿里都没有再叼过我，包括秋招正式的时候，即便有其他大厂实习经历，也再没有获得过阿里面试机会。（后面社招去的阿里）（建议：先用中小厂或者不打算去的大中厂来积累面试经验）\n\n总之，你们正在走的是我走过的路，结合我多年后端从业经验，多年面试经验，我应该能帮到你们！\n\n我能提供的帮助：后端学习指引/简历指导/大厂模拟面试\n\n有需要的可以加我，或留着备用\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/589020448340320256?sourceSSR=users",
        "title": "比特大陆Java实习一二面 已OC",
        "content": "## 一面 35min\n\n纯项目、无八股无算法。问的比较深，简历上写的实现的功能问了个遍，基本上就是让我一步一步说清楚每个功能的具体实现逻辑，需要对自己的项目很熟悉。比如让我说登录的逻辑，需要从请求发到服务端开始，说清楚springmvc的处理流程，然后在到业务处理，包括方法的返回值都要说清楚。\n\n然后根据项目问了少量相关八股，比如数据库表怎么设计的，索引是怎么设计的，索引有什么优缺点；做数据库读写分离时，刚写入主表的数据怎么立刻读出来；布隆过滤器原理、优缺点；数据库中DateTime和TimeStamp的区别。\n\n绝大部分时间都在跟面试官聊项目，面试体验很好，不会的面试官也会引导。面完后10分钟hr打电话约二面。\n\n## 二面 25min\n\n二面面试官一上来没开摄像头、声音也比较小经常听不清（一度以为是kpi），但后面感觉也还好，回答完问题也会给反馈。\n\n  1. 为啥两个项目一个用jdk1.8一个用jdk17实际上是因为我做两个项目中间电脑坏过一次。。。然后换了新电脑后重新装Java环境就装了17。然后他问我jdk17有哪些新特性我就不会了\n  2. 说说责任链模式，项目中具体怎么用的\n  3. 还知道什么其他模式？然后问了单例、工厂、代理、构造者、观察者模式的原理和使用场景\n  4. zookeeper了解吗（不会）\n  5. kafka了解吗（只说了kafka在日志处理中常用，项目用的RocketMQ，具体不了解）\n  6. lua脚本怎么用的\n  7. lua脚本为什么是原子性的，怎么实现的（不会）\n  8. 为什么用布隆过滤器，缓存无效值有什么缺点\n  9. sortedSet怎么用的，底层的数据结构是什么\n  10. 汇编学过吗（本科学过但基本忘了，就没问）\n  11. 深度优先和广度优先知道吗，dfs和bfs分别用什么数据结构实现合适\n  12. 介绍下快排，快排用到了什么算法思想\n  13. 递归好不好，有什么缺点（说了可能会爆栈）\n  14. 为什么递归可能会爆栈\n  15. 除了快排还有什么nlogn的算法（说了归并和堆排序）\n  16. 内部排序和外部排序有啥区别\n  17. 外部排序一般用什么算法\n  18. Java中有没有数据结构底层是堆实现的（PriorityQueue）\n  19. sql优化有哪些常用方法\n  20. join的话左边应该是小表还是大表\n\n一二面都无手撕，一面主要是项目，二面问了一些八股但都比较简单。流程很快，年前一两天投的，初五约面，初七一面初九二面。二面面完20分钟就oc了。面试官都挺友善的，总体来说面试体验很好。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/588856383991205888?sourceSSR=users",
        "title": "秘易网络前端二面2.18 已offer",
        "content": "15分钟问答30分钟共享屏幕写题\n\n1.挑一个react项目介绍一下\n\n2.介绍一下对react的了解\n\n3.说一下redux的运行方式\n\n4.react函数组件中是怎样实现生命周期的\n\n5.说一下知道的hook和作用用法\n\n6.平时是如何解决bug的，用过断点调试吗\n\n7.es6新增了哪些东西\n\n8.map和filter的区别\n\n9.说一下prmise的用法和promise.all方法\n\n手写题\n\n1.对一个div包裹一个div实现子盒子的垂直水平居中展示。\n\n2.andt组件库的button修改默认样式改成......\n\n3.css实现div鼠标移入后高度平滑的增加100px,同时内部的字体字号修改为16。\n\n4.存在两个数组，编写一个方法返回以所有array1数组（id不会重复）中与array2（id不会重复）有相同id的元素数组。\n\n5.存在下方数据(children存在多层，当前只截取了一部分)，需要取出所有children以及本身的id值，返回一个id的数字数组。\n\n![](https://uploadfiles.nowcoder.com/images/20240218/968397238_1708266170248/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n6.补足下方数据，通过a进行分组，b进行自增长排序\n\nconst data = [\n\n{ a: 0, b: 0 },\n\n{ a: 0, b: 1 },\n\n{ a: 0, b: 2 },\n\n{ a: 1, b: 1 },\n\n{ a: 1, b: 2 },\n\n{ a: 1, b: 3 },\n\n{ a: 2, b: 0 }];\n\n补足后数据：\n\n[\n\n{ a: 0, b: 0 }, // 分组1 作为第一个序列字段最全（b）的组，被选为基准\n\n{ a: 0, b: 1 },\n\n{ a: 0, b: 2 },\n\n{ a: 1, b: 1 }, // 分组2 序列字段个数和基准组一致，所以不补充数据\n\n{ a: 1, b: 2 },\n\n{ a: 1, b: 3 },\n\n{ a: 2, b: 0 }, // 分组3 缺省数据，根据基准组进行数据补全\n\n{ a: 2, b: 1 }, // 这行数据被补充\n\n{ a: 2, b: 2 }, // 这行数据被补充\n\n]\n\n7.下方代码存在死循环，fetchSheetSource方法会触发clientFilters变量的变化，需要在不影响原逻辑的情况下解决死循环。\n\n![](https://uploadfiles.nowcoder.com/images/20240218/968397238_1708266232934/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/588848218830544896?sourceSSR=users",
        "title": "大数据工程师面试 - 利用简历在面试中“带节奏”",
        "content": "> 我是**大数据欧老师** ，曾在互联网某大厂任大数据负责人，从业大数据领域近 10 年，全网粉丝\n> 5000+，从很多候选人的面试和咨询中复盘了**大数据工程师的面试全流程** ，如果你有求职大数据工程师的计划，欢迎找我聊一聊！\n\n## 你花在简历上的时间有多少？\n\n小伙伴们回忆一下，在你过往的跳槽经历中，用了多少时间来回顾自己的工作内容和项目经历？简历是花了多长时间来写？简历从第一版到最后投递出去，总共改了多少次？\n\n如果屏幕前的你，只写了一版简历，就在各大互联网公司乱投，那大概率是拿不到好 Offer 的，或者即使拿到 Offer， Offer\n含金量也是远低于你的真实水平。（换句话说，**你损失了本该属于你的薪水和职级** ）\n\n## 大部分人忽视简历的背后原因\n\n我在做面试咨询的过程中，和很多同学有深入沟通过，大部分小伙伴不认真写简历的原因无外乎以下几点：\n\n  * **认为简历重要性不高，面试表现才最重要** ：大错特错！请你换位思考一下，如果你是面试官，你通过什么信息来给候选人提问？是**简历的内容！！！**简历在那儿瞎写，面试官可不就是瞎问么，那你的面试表现怎么可能会好？\n  * **觉得自己的经历不好，怎么写帮助都不大** ：这说明你对自己的经历和优势一无所知，我们知道面试是不同人之间的比较，优势都是相对的，所以即使你的学校、公司、项目都不够好，但你总有相对强的一面，对吧？我们面试中就要把这个**最强势的一面给展示出来** ，才能让面试的通过率最高。\n  * **不会写，怎么写都感觉别扭** ：简历的编写本身是有技巧的，通过好方法，能够让你快速复盘自己过去的履历，并且帮助自己找到优势点，挖掘出自己的竞争力。\n\n**写简历的过程本质上是自我复盘**\n。很多小伙伴可能没有意识到，简历是为了让自己的优势突出，而找到自己的优势，是需要花时间复盘经历、项目才能够达到的。在写简历的过程中，你可能无意识的就积累了很多面试时需要的知识，以及帮助你理清了面试思路，帮助非常大。\n\n## 如何写一份好的简历？\n\n### 简历的组成结构\n\n整个简历我们可以分为这五个模块：\n\n  1. **个人信息** ：你的年龄，邮箱，联系方式，博客，github 地址等；\n  2. **教育经历** ：：有的同学觉得自己学校差就不写了，这是没必要的；\n  3. **工作经历和角色** ：这部分需要高度概括一下你过去的几段工作经历和工作经历中承担的角色，是为了告诉别人，你在之前的团队里负责的事情和内容；\n  4. **项目经历** ：描述你在过去做的 3-4 个重点项目，简历内容的重头戏，非常重要；\n  5. **相关技术栈** ：相关技术栈，重要性较低；\n\n由于篇幅原因，我们这里会讲解最重要的「工作经历」和「项目经历」两个部分。\n\n### 常见问题\n\n以下是绝大部分简历会出现的两个问题，如果也发生在你身上，尽快修改一下：\n\n  1. **技术栈不要放在前面** ：因为其重要性相对较低，并且像\"精通\"，\"熟悉\"，\"了解\"这些描述是没有任何意义的。这一部分的内容在100份简历中，有90%都是重复的，所以这一部分在面试中的重要性很低。其真正的作用在于：当你的项目和工作经验不足时，面试官可能会从这一部分选取常规性的问题对你的基础知识进行考察。除此之外，这一部分几乎没有其他作用。\n  2. **不要弄混工作经历和项目经历** ：独立陈述工作经历的目的是让面试官清晰了解你以往所担任的角色及主要工作领域。将这两部分混合可能会让面试官感到困惑，因为项目常常涉及多个方面，如前端、后端、数据、存储等，如果只提及项目但不明确个人职责，将难以让面试官认识你在项目中的主要职责，他们提出的问题可能扩散到你不熟悉的范围内。此外，这样不清晰的描述可能让人误解你在项目中的角色，给人留下“蹭项目”的不良印象。\n\n### 如何写「工作经历」？\n\n工作经历分为两点：\n\n  * **公司+职位+时间** ：关于职位这部分，如果你是 xx 负责人直接写就好了，如果你不是，那就正常写 xx 工程师就行了。\n  * **主要工作内容** ：我们最好用 3～4 行描述清楚你在公司做的事情，比如你是公司里做实时数据平台的，你直接一句“从 0 到 1 构建实时大数据平台“就够了，细节可以放到后面的项目里。\n\n我们来看下图这个 bad case，这是我们学员里的一位同学给我发的：\n\n![](https://uploadfiles.nowcoder.com/images/20240218/763464184_1708264326082/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n有哪些问题？\n\n  1. **内容不分层** ：一句话直接写完了，一般人是不会这样去组织语言的，看起来很累，面试官可能看前两句就不会往下看了啊；\n  2. **内容口语化** ，这也是相当不专业的表现，说明你不具有用专业术语来总结概括的能力，写的很随便，简历是一个很正式的东西，未来都会留档的东西；\n  3. **废话太多** ：比如第三行“故接触到的内容比较多”，废话连篇，含金量极低；\n  4. **最后一句，写一句感悟，这个完全没必要** ：工作总结不是让你写感悟的，你要表达自己的感悟可以面试介绍的时候跟面试官直接说，在简历上写出来没必要，放这个工作感悟反而会让人觉得你的职场能力很差啊；\n\n我们要记住，「工作经历」的要点，就是**高度概括** 。我们可以稍微修改一下这位同学的经历，变成下面两条内容，是不是一下就“高大上”了很多？\n\n  1. 负责商业化广告流量数据系统建设，包括任务调度、监控系统等；\n  2. 负责 Druid/Doris，Flink/Spark 等大数据平台组件开发和维护；\n\n### STAR 模型写「项目经历」？\n\nSTAR 模型是一个用于组织和表述项目经历的框架，常被用在面试中。STAR 是\nSituation（情境）、Task（任务）、Action（行动）和Result（结果）的首字母缩写。这个模型在网上能找到很多相关资料，许多企业高管也会运用这个模型进行汇报。因此，该模型能助你以清晰且有逻辑的方式表述你的经历，特别是在回答面试问题时。\n\n  1. **Situation（情境）** ：详述你所处的环境或情境。这部分应为整个项目的背景，使面试官明白事件发生的上下文。例如，在构建基于Hadoop的监控系统的例子中，首先应解释你为什么要做这件事。\n  2. **Task（任务）** ：阐释你需要完成的任务或挑战。这部分应明确你的角色和目标，比如解决的问题，像是降低成本的百分比，或者提高链路的时间延误。\n  3. **Action（行动）** ：详述你为了解决问题或达成目标所采取的行动。这是项目经历的核心部分，它展示了你的技能、判断力和工作方式。详细描述你的具体行动，并在描述中重点突出使用的关键技术或组件的高级功能，例如Spark里的Bucket Shuffle，Hadoop的高可用以及Flink的Checkpoint。\n  4. **Result（结果）** ：在技术工程师面试中，结果可能不会如业务面试那样明显，因此对结果的关注度不会太高，可以选择写或者不写。\n\n这里附上一个例子，也是我们一个学员的简历内容，他是做一个实时 OLAP 平台，项目主要是从 Spark Streaming 迁移到 Flink，我们根据\nSTAR\n模型来分析下，他好和不好的地方，背景是不是有了，就是\"资源利用率低\"等问题；目标这里写的还差点意思，没有明确写出来，但是我们阅读完是不是也基本能看出来，是不是为了提升资源利用率；然后行动这部分是写的比较好的，比如各种\nSpark Streaming 比如动态分区表、Flink 里的各种高级功能，对吧，这里就突出这个小伙伴肯定是非常熟悉 Spark Streaming 和\nFlink，那面试官看到这个会怎么问呢？\n\n![](https://uploadfiles.nowcoder.com/images/20240218/763464184_1708264336874/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n首先这个项目经历里提到的 Flink、SS\n的高级特性，你看下来是不是还挺感兴趣的，那一下就把面试官给带到他自己擅长的领域里去了，对不对？这就是我们好的一份简历，能够引导面试官来问问题，问的还全是你擅长的，那你的面试能不通过吗？\n\n## 总结：满分简历是要多次修改\n\n学完上面的内容，相信你在写简历这个能力上，已经能够超越市面上 95% 的同学。但是，如果还想做的更好，我再给你两个建议：\n\n  1. **多次修改** ：每次面试完，或者每次重新复盘自己的项目，总会有新的收获和发现新的知识点，别偷懒，及时把内容补充进去，然后好好思考这部分面试时该怎么说，这样相当于你的优势又比别人多了一点点。\n  2. **根据不同岗位调整** ：有的同学处于换方向的节点上，那么简历肯定就不能只写自己优势的方向，内容要根据投递岗位的需求来写，当然，这个能力会比较高阶，可以单独找我咨询，但是要明白一点，**你的优势，在某些情况下，未必是这个岗位需要的能力** 。\n\n最后，欧老师祝大家都能完成一份让自己满意的“满分简历”！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/588840521779494912?sourceSSR=users",
        "title": "小公司要不要去啊 | java实习面经",
        "content": "上海，22年1月创业公司，不到10人，一个正式员工，其他都是实习生，第一次实习，日新120/天，5~6天/每周，要不要去啊哥哥们。目前几家回复，就这一家给面试发offer。ps：面试我的也是一个实习生....\n\n  \n\n2.20更新\n\n已经打算不去了的，谢谢佬们的建议[羞涩]\n\n# 面经\n\n## 八股\n\n  1. 函数式接口的实现方式有哪些（接口实现类、匿名内部类、lambda表达式、方法引用）\n  2. 哪些集合用的多一些（ArrayList、HashMap）\n  3. 怎么保证多线程下Map集合是线程安全的（HashTable、Collections.synchronizedMap()、ConcurrentHashMap）\n  4. 说说对SpringIOC的理解\n  5. Redis提供了两种持久化机制，让你选择的话，你觉得选择哪种更好\n  6. Redis数据和MySQL数据不一致怎么解决\n\n## 项目\n\n  1. jwt token令牌有没有考虑续期，还是说只是简单的设置了一个过期时间\n  2. 说一下项目中的定时任务怎么实现的（简历上写了Spring Task就简单的说了一下）\n  3. 收获\n\n反问环节.......\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/588805342037843968?sourceSSR=users",
        "title": "深圳某医疗公司 Java 后端面经",
        "content": "# 深圳某医疗公司 Java 后端面经\n\n1）\n\n面试官：先来个简单的自我介绍\n\n我：把自己的学习过程、经历（比如竞赛，学术等等成就）、开源项目、等只要是亮点的都可以进行阐述，学校的一些文体活动就不必说了，实验室的一些项目还是可以说的，引导面试官向你会的方向进行提问就完成这阶段的任务了。\n\n2）\n\n面试官：能看一下你的开源项目线上运行效果吗？\n\n我：共享屏幕，主要展示项目的亮点，然后梳理下业务逻辑阐述，面试官追问难点，阐述自己项目的难点就好了，提前准备好就可以了，面试官让我展示下主要的代码，前后端的都有，可能很多人电脑\n16 G 内存，开个前后端的IDE，加上视频和浏览器就很卡了，所以程序员至少得 32 内存，不然太难受了。\n\n3）\n\n面试官：了解工具类吗？介绍一下你项目的工具类\n\n我：共享屏幕介绍下常用的工具类就可以了，我是自己封装了一些适用于自己项目的方便的 API。\n\n4）\n\n面试官：看一下你接口调用的业务层代码\n\n我：一边共享屏幕一边介绍就可以了，主要介绍业务逻辑和数据处理，AI 调用，生成图表等等。\n\n5）\n\n面试官：我看你简历中写了设计模式，介绍一下你了解的设计模式\n\n我：单例、策略、装饰器、简单工厂、适配器、门面模式，等等，结合项目和 Spring\n等开源框架的源码去讲一下具体的使用场景就可以了，自己介绍自己熟悉的就好了，像代理模式的 JDK 和 CGLIB 就可以引导面试官，或许会让你手写一个。\n\n6）\n\n面试官：了解 Java 的 IO 流吗？\n\n我：主要介绍一下字符流，字节流，各自的使用场景和优缺点，然后写了一个读取文本的示例（共享屏幕），缓冲字符流读取。\n\n7）\n\n面试官：Stream 流介绍一下\n\n我：介绍一下我经常使用的一些方法，并给面试官看了一下我的一些小 demo。\n\n8）\n\n面试官：Spring 事务介绍一下\n\n我：主要介绍 @ Transactional 注解，然后和事务失效的场景，按常见的八股文说就可以了，最好结合一下自己的项目阐述。\n\n9）\n\n面试官：介绍一下 MySQL 的索引\n\n我：这块很宽泛，可以慢慢谈，先按分类谈有哪些索引，然后索引的作用，引导索引失效，回表，覆盖索引，索引下推等等，只要面试官没说停，一直可以进行延伸。\n\n10）\n\n面试官：你的项目中有哪些考虑到了性能问题？\n\n我：自己的项目确实没啥性能问题，不过可以说下优化查询语句和利用 Redis 进行缓存预热，会多级缓存的话可以阐述咖啡因本地缓存的使用。\n\n11）\n\n面试官：你的公钥和私钥，签名这块怎么做的？\n\n我：按 API 项目的八股文回答，总计阐述怎么实现即可。\n\n12）\n\n面试官：三大范式了解吗？\n\n我：阿巴阿巴，常规的学校考试问题\n\n13）\n\n面试官：让你设计一个聊天的表\n\n我：共享屏幕设计一下表字段和注意事项\n\n14）\n\n面试官：说下 Linux 的一些命令\n\n我：阿巴阿巴，常用命令说一下即可\n\n15）\n\n面试官：看一下你的个人博客\n\n我：简要概述下个人博客写了什么，然后对我的一些意义，怎么进行编程的学习等等。\n\n16）\n\n反问：业务方向\n\n今天刚面完，Waiting，继续努力！分享面经，从我做起.gif~\n\n个人开源项目 Gitee 地址：[https://gitee.com/falle22222n-leaves/vue_-book-manage-\nsystem](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgitee.com%2Ffalle22222n-leaves%2Fvue_-\nbook-manage-system)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/588738046242177024?sourceSSR=users",
        "title": "面试：百度一面，吓尿了",
        "content": "> 公众号：程序员白特，欢迎一起学习交流~  \n>  参考文章：掘金作者 - 旅梦开发团\n\n## 前言\n\n这是某211高校软件工程专业的师弟百度一面的题目和回答，全程高能，来看看你会多少~\n\n## 宇宙铁律，介绍下自己\n\n还好，之前看到过敖丙大佬[面试自我介绍5句话公式 - 掘金\n(juejin.cn)](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjuejin.cn%2Fpost%2F7067707781716901901%3FsearchId%3D20240216170005CAF961AEC3F3AE5E34CE)一文，里面有个公式：\n_我是谁+从哪里来+我做过什么+有什么成绩+为什么能胜任_ 。 下面为举例子：\n\n>\n> 面试官你好，我叫白特，22年毕业于XX大学物联网工程专业。之前任职于XX公司，担任前端开发工程师一职，在职期间主要负责金融活动相关项目的研发，对线上问题处理、性能调优、线程并发能问题都有自己的理解，对行业相关业务的研发设计流程也十分熟悉。  \n>  \n>\n> 除此之外，也仔细读过多本源码研发书籍（最好列举熟悉的一两个，面试官就可以因此提问）,并在公众号上写过多篇底层相关系列文章（可以举例子，为面试提问铺垫），热爱技术分享，多平台优秀作者。平时主要使用vue,\n> 熟悉全家桶开发，数据流按理及后台管理系统等等开发。阅读过vue、react、ElementPlus等的源码，并且多次向开源组件库贡献过源码，同时也有自己的开源组件库betterUI，star有xxx+。  \n>  \n>  因贵司XX部门的研发十分吸引我，并且和我的技能树十分匹配，因此决定面试咱们公司的XX前端研发岗位，希望能获得此次机会，谢谢。\n\n## 面试题\n\n### 1\\. var a = []; a.push()、a.pop() 请说明在js中的意义\n\n  * 使用的是字面量初始化创建了一个空数组，这是最简洁、直观且推荐的写法。这种方法直接在内存中创建并初始化数组对象，执行效率高。 `var a = new Array()`; 使用了Array构造函数来创建一个空数组。尽管功能上等同于前者，但性能上有差异。\n\n  * 如果传递整数参数，比如`new Array(3)`, 指定长度 比如`('a', 'b', 'c')` 作为元素初始化。 还有 `var arr = new Array(5).fill(0);`也经常用到。\n\n通过原型链查找，`Array` 原型上的`push`等方法\n\n面试官又追问， `var a = new A()，a 和 A 的关系，A 和 Function 的关系`\n\n> a 是 A 的一个实例对象，a 的`__proto__ `指向 A 的 `prototype`，A 的`__proto__` 指向 `Function`\n> 的 `prototype`。\n\n### 2.promise有几种状态，可以重复改变吗？\n\n`Promise`对象有三种状态，分别是：\n\n  * `Pending`（未决）初始状态\n  * `Fulfilled`（已履行/成功）：操作成功完成时的状态\n  * `Rejected`（已拒绝/失败）：操作因错误或异常未能完成时的状态\n\n`Promise`状态变化的特性是：\n\n  * `Promise`状态的转变是不可逆且只能发生一次。也就是说，一个`Promise`不能从`Fulfilled`状态变回`Pending`状态，也不能从`Rejected`状态变为`Pending`或者`Fulfilled`状态。 一旦`Promise`从`Pending`状态变为`Fulfilled（resolved）`或`Rejected（rejected）`，它就永远不会再改变。\n\n因此，`Promise`的状态不能重复改变。\n\n感觉回答的还可以，记得去字节的会长提醒面试时，切忌一个字一个字的蹦面试官。面试不只是回答问题，而是要 _展示自己_\n。抓住熟悉的知识或技能点，就来个滔滔不绝，面试官不喊停就 _一直说_ 。于是想到下面这个`API`:\n\n> `Promise.resolve()`与`Promise.reject()` 用于创建已确定状态的`Promise`对象，方便快速返回成功的或失败的结果\n\n面试官一听这个就感兴趣了， 继续提问`Promise`还提供了哪些静态方法，平时怎么用的？开心， 面试官进包围圈了。\n\n  * `Promise.all(iterable)`\n\n参数是`promise`对象数组。只有当所有`Promise`都变为`fulfilled`时，返回的`Promise`才会变为`fulfilled`，并且结果是一个包含所有`Promise`结果的数组；只要有一个`Promise`变为`rejected`，则整体`Promise`也会立即变为`rejected`，返回第一个`rejected\nPromise`的理由。\n\n  * `Promise.race(iterable)`\n\n在传入的 `Promise` 数组中任何一个 `Promise` 解决（`resolve`）或拒绝（`reject`）时，会立即以那个率先改变状态的\n`Promise` 的结果为准来解决或拒绝。 这里强调下细节，其它的`promise`实例仍然会继续运行，只不过其状态和结果不会归于最终的结果。\n`Promise.race` 关注的是速度最快的 `Promise` 的结果，而 `Promise.all` 关注的是所有 `Promise`\n是否都成功完成。\n\n  * `Promise.allSettled(iterable)`\n\n和`Promise.all()`相似，它等待所有`Promise`都达到`settled`状态（即无论是`fulfilled`还是`rejected`）。一旦所有`Promise`都决断了，返回的`Promise`会变成`fulfilled`，并且结果是一个数组，包含了每个输入`Promise`的结果描述对象，这些对象具有`status`（`'fulfilled'`或`'rejected'`）和对应的`value`或`reason`属性。\n\n`Promise.all()` 更关注所有 `Promise` 是否都成功完成，它适用于需要所有任务成功完成才能继续下一步场景。而\n`Promise.allSettled()` 则允许你观察一组异步操作的所有结果，无论成功与否，这对于获取并处理所有任务的最终状态非常有用。\n\n到此，在三种状态的语法回答外，还将并发任务及`sellted`等偏业余的需求表演给面试官，看表情他还是挺满意的...\n如果面试官不打断，我准备继续聊异步、红绿灯、手写`promise`... 面试就要变被动为主动，将自己擅长的表演出来。\n\n### 3.输出结果，为什么？\n\n    \n    \n    const obj3 = {a: 1}; \n    const obj4 = {b: 2}; \n    console.log(obj3 == obj4); // false \n    console.log(obj3 === obj4); // false\n    \n\n##### 结果:\n\n    \n    \n    false，false\n    \n\n##### 原因：\n\n  * == 值相等， ===严格相等，即值和类型都相等\n  * 类型转化，虽然`obj3`和`obj4` 值不一样，但面试官要听的是我们对于`JS`类型转换的理解。\n\n> 在转换不同的数据类型时，相等和不相等操作符遵循下列基本规则： 如果由一个操作数是布尔值，则在比较相等性之前先将其转换为数值---\n> false转换为0，而true转换为1；  \n>  \n>  如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值；\n> 如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf（）方法，用得到的基本类型值按照前面的规则进行比较；\n> 这两个操作符在进行比较时则要遵循下列规则。  \n>  \n>  null和undefined是相等的。 要比较相等性之前，不能将null和undefined转换成其他任何值。\n> 如果有一个操作数是NaN，则相等操作符返回false，而不相等操作符则返回true。重要提示：即使两个操作数都是NaN，相等操作符也返回false；因为按照规则，NaN不等于NaN。\n> 如果两个操作数都是对象，则比较他们是不是同一个对象。如果两个操作数都是指向同一个对象，则相等放回true，否则返回false。\n\n所以这里不会转换两个对象，而是比较他们是不是指向同一个地址，是否是同一个对象。\n\n  * ===严格相等，这里比较的也是引用地址。\n\n所以，在比较两个对象时，并不会发生类型转换以试图使它们相等。相等性判断直接基于对象的内存地址。\n\n### 4\\. 聊聊你对语义化的理解\n\n会长提醒过我，面试前要了解下公司的产品和技术栈什么的。百度是搜索公司，前端和搜索关联的肯定是`HTML5`的语义化了，`SSR`后面的题目会讲到。当然针对百度，\n我也准备了一些`AI`相关的内容，后面果然被问到了。\n\n  * html5 新增了语义化标签 `header、nav、section、aside、footer、aside、article`\n\n![](https://files.mdnice.com/user/32127/0bf69b48-f132-4260-9c74-ce4a4a5bee5c.png)\n\n一边讲标签， 一边把脑子里的这张图（掘金详情页）讲给面试官。这样说比干巴巴讲单词，好太多。\n\n  * `div + css` 能解决布局问题，但是可读性不好，代码不好维护\n  * `SEO` 搜索引擎优化 更好地支持各种终端，例如无障碍阅读和有声小说等\n\n### 斐波那契\n\n哟，面试官要使出闪电五连鞭了, 出算法题了。斐波那契或爬楼梯，始于递归，终于动态规划。还好我有准备，引着面试官往我的`dp`包围圈里走，大家往下看。\n\n  * 使用递归，快速解决战斗\n\n    \n    \n    function fib(n) { \n        if (n == 0 || n === 1) return 1; \n        return fib(n - 1) + fib(n - 2);\n    };\n    \n\n  * 有什么可以优化的地方\n\n时间复杂度是`O(n^2)`,而且递归（自顶向下）的过程中有很多重复计算，我们可以缓存，当然这里可以一步到位，用动态规划(自下向上，状态转移方程)，将时间复杂度降到`O(n)`,代码又有了。\n\n    \n    \n    function fibonacci(n) {\n      if (n <= 1) return n; \n      let fib = [0, 1]; // 保存斐波那契数列的结果 \n      for (let i = 2; i <= n; i++) { \n          fib[i] = fib[i - 1] + fib[i - 2]; // 计算第i个斐波那契数 \n      } \n      return fib[n]; \n    }\n    \n\n面试时间大概来到了25分钟左右，前面的`JS`基础面试官还比较满意。但是后面还有十几位候选人要面，貌美如花的女朋友约了晚上一起吃饭，算法是杀招。不会就挂电话不浪费时间，表现好的话就在小本本上记下明天通知二面。于是，面试官来了道动态规划难点的题。\n\n### 6.leetcode 原题编辑距离\n\n> 给你两个单词 `word1` 和 `word2`， 请返回将 `word1` 转换成 `word2`\n> 所使用的最少操作数。你可以对一个单词进行如下三种操作：  \n> (1) 插入一个字符;  \n>  (2) 删除一个字符;  \n>  (3) 替换一个字符;\n\n首先，这道动态规划题有些复杂，大家需要刷一些基础的动态规划题再来搞这道。像百度等这种级别的大厂，算法题我称为三板斧。一般是1-2道简单或中等题，再是1-2道有难度的动态规划题。只要我们准备好动态规划由简到难的各种常考题型，扛住面试官的前三板斧子，基本没有问题。\n\n    \n    \n    word1  horse\n    word2  ros\n    \n    1. word1 变\n    horse ->  rorse    h->r  替换\n    rorse -> rose      删除最2个r\n    rose-> ros         删除最后e \n    \n    操作次数是3次  由word1 变成word2\n    \n    再换个思考 由word2变成word1也是可以的\n    \n    2. word2 变\n    ros -> rose   添加e\n    rose->rorse  添加r \n    rorse-> horse r 替换为h\n    其实就是上面的逆向操作\n    \n    3. 都变\n    horse ->  rorse    h-> r  word1 变\n    rorse -> rose    删除r    word1 变\n    ros -> rose      word加e      word2 变\n    \n    word1 和word2 都操作了， 一共操作了3次\n    分析demo，方便等下我们考虑最优子结构的各种情况\n    \n\n天啊， 太复杂了，替换、删除、添加三种操作、两个单词混合修改。别怕，最值问题求解，就用动态规划。看上去复杂的`dp`问题，使用 _动规五部曲_\n就能化腐朽为神奇。\n\n##### 动规五部曲\n\n  * 定义`dp`数组\n\n比较两个字符串，那么我们要定义一个二维的`dp[i][j]`，两个字符串的最少操作次数（无论哪个操作字符，哪种操作，都可以用二维矩阵涵盖）\n\n以`i-1`结尾的`word1` ,以`j-1`结尾的`word2`\n\n`dp[i][j]`就是让两个字符相同的最少操作次数，根据动态规划的局部最优亦是全局最优，最后的`dp[m][n]`就是我们要的结果\n\n  * 递推公式\n\n我们要比较两个字符串，就要比较每个元素，那么要比较哪些元素呢？ `word1[i-1]`、`word2[j-1]` 递推，自顶向下思考\n\n    \n    \n    // 如果两个字符相同\n    if (word1[i-1] == word2[j-1]) {\n      // 不需要添加、删除、替换元素\n      // 最少操作次数可以是不改变的，取上一次的最少操作数，因为dp局部最优也是全局最优的\n      dp[i][j] = dp[i-1][j-1]\n    } else {\n      // 上操作\n      // dp[i][j] = dp[i - 1][j - 1] + 1, // 替换操作\n      // dp[i][j] = dp[i][j - 1] + 1, // 插入操作\n      //dp[i - 1][j] + 1)// 删除操作\n      dp[i][j] = Math.min(\n            dp[i - 1][j - 1] + 1, // 替换操作\n            Math.min(dp[i][j - 1] + 1, // 插入操作\n                     dp[i - 1][j] + 1) // 删除操作\n          );\n     // 总之， 根据动态规划的思想，只要有一步操作就可以到达\n    }\n    \n\n  * 初始化\n\n![](https://files.mdnice.com/user/32127/642bb71c-a0e7-4003-9b86-40ede12a4980.png)\n\n怎么来考虑初始化问题呢？\n上图`dp[i][j]`会由左上角的`dp[i-1][j-1]`、左边`dp[i-1][j]`、上边`dp[i][j-1]`三个方向迭代而来。所以在初始化的时候，我们需要把第一行`dp[]`和第一列都初始化，这样就可以递推出相应的值。\n\n    \n    \n    for (let i = 0; i <= m; i++) {\n      dp[i][0] = i;\n    }\n    for (let j = 0; j <= n; j++) {\n      dp[0][j] = j;\n    }\n    \n\n  * 迭代\n\n    \n    \n    //自底向上， 迭代\n    for (let i = 1; i <= m; i++) {\n      for (let j = 1; j <= n; j++) {\n         .....\n      }\n    }\n    \n\n  * 返回结果 最后的`dp[m][n]` 也就是二维矩阵的右下角。通过动态规划五步走，代码如下：\n\n    \n    \n    /**\n     * @param {string} word1\n     * @param {string} word2\n     * @return {number}\n     */\n    function minDistance(word1, word2) {\n      const m = word1.length;\n      const n = word2.length;\n    \n      // 初始化一个(m+1) x (n+1)的矩阵，第一行和第一列分别表示空串到word1前i个字符、空串到word2前j个字符的距离\n      const dp = new Array(m + 1).fill(null).map(() => new Array(n + 1).fill(0));\n    \n      // 初始化边界条件：空字符串转换成任意长度的字符串至少需要该字符串的长度次操作\n      for (let i = 0; i <= m; i++) {\n        dp[i][0] = i;\n      }\n      for (let j = 0; j <= n; j++) {\n        dp[0][j] = j;\n      }\n    \n      // 动态规划填充矩阵\n      for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n          if (word1[i - 1] === word2[j - 1]) {\n            dp[i][j] = dp[i - 1][j - 1]; // 如果两个字符相等，则不需要消耗操作次数\n          } else {\n            dp[i][j] = Math.min(\n              dp[i - 1][j - 1] + 1, // 替换操作\n              Math.min(dp[i][j - 1] + 1, // 插入操作\n                       dp[i - 1][j] + 1) // 删除操作\n            );\n          }\n        }\n      }\n    \n      return dp[m][n]; // 最终答案位于dp数组右下角\n    }\n    \n\n### 7\\. 如何用AI工具 提升开发效率\n\n  * 之前申请了`Github`的`Copilot`，学生党免费嘛。对代码提速和源码学习都有挺大帮助的。也试过下通义千问的`vscode` 插件，挺好的。\n\n  * 使用各种`chat bot`(`Chatgpt`等)，从前端到后端、`AI`学习、数据库等，提问式学习及解决问题，拥抱`AI Native`。\n\n  * 刻意练习一些`prompt` 的技巧， 生成前端页面、`SQL`等 比如在做后台管理系统的时候， `tailwind`的一些页面，基本都是`chat` 完成。\n\n  * 学习`transfromer`、`openai` 等`AIGC`类技能，将一部分的编程任务交给`Agent`来完成，发挥大模型的能力。最近在学习`LangChain`, 对`AI`很感兴趣。\n\n面试官好像突然来了兴趣，哐哐问了我一堆扩散模型、`pandas`，越听越像鸟语，真不会啊。这时想起来，会长的分享，面试里有不会的很正常，可以适当的请教面试官。果不其然，在我很有礼貌的说出请教后，面试官给我讲了一通，我瞬间表示学到很多，希望跟着他多学习，感觉面试官有种突然想收我的感觉。\n\n之前有朋友说，会一点的东西不要写到简历上。但也觉得，AI如此火的今年春招，建议把自己会的都加上。面试被追问不可怕，\n新的知识表现出学习兴奋和激情，再适当的拍拍面试官的马屁，可以让面试官有更深的印象。\n\n### 8\\. 讲一讲HTTP请求三次握手\n\n推荐大家看下[关于三次握手与四次挥手面试官想考我们什么？--- 不看后悔系列 - 掘金\n(juejin.cn)](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjuejin.cn%2Fpost%2F6844903834708344840%3FsearchId%3D2024021719035905F7961FC9ED3FF58FB9g)\n，我就按这个来回答的。\n\n不出意外，面试官继续追问 为什么是三次握手，不是两次或者四次\n\n> 三次握手是确定客户端和服务端接收和发送能力都正常(HTTP)的最优次数  \n>  \n> 第一次：客户端发送能力正常  \n>  第二次：服务端接收能力正常，服务端发送能力正常(接收和发送可以合并)  \n>  第三次：客户端接收能力正常  \n>\n\n### 9\\. 说一说跨域\n\n新手在实习的时候，`git` 操作和 跨域（前后端联调）是两个动手的要点。\n首先，跨域问题源于浏览器的同源策略，该策略限制了从一个源加载的网页脚本如何与另一个源交互。\n\n  * `jsonp` （`JSON with Padding`）\n\n利用 `<script>` 标签不受同源策略限制，通过动态创建 `src`\n属性指向服务端提供的接口，并带上回调函数名，服务端返回调用这个回调函数并携带数据的`JS`代码。\n\n  * `WebSocket API`\n\n`WebSocket`协议本身支持跨域，通过握手过程中服务器发送正确的`Access-Control-Allow-Origin`来实现跨域通信。\n\n  * `POSTMessage API`\n\n主要用于窗口间通信，比如`iframe`和父页面间的跨域通信，通过`window.postMessage()`方法发送消息，同时监听`message`事件接收消息。\n\n  * `Image Beacon`\n\n利用图片请求可以跨域的特点，通过创建`Image`对象并向其`src`属性设置跨域`URL`进行`GET`方式的数据传输。不适用于`POST`或复杂操作。\n\n  * `CORS（Cross-Origin Resource Sharing）`\n\n跟其它的方案不一样的地方，它单独在服务器设置。 服务器端设置允许跨域请求头（如`Access-Control-Allow-\nOrigin`），浏览器在发起跨域请求时会检查响应头是否允许本次请求。\n\n    \n    \n    //具体代码\n    app.use((req, res, next) => {\n      // 设置允许任何来源进行跨域访问（生产环境请替换为具体的源）\n      res.setHeader('Access-Control-Allow-Origin', req.headers.origin || '*');\n    \n      // 允许浏览器预检请求（OPTIONS）通过\n      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    \n      // 允许携带认证信息（如cookies）\n      res.setHeader('Access-Control-Allow-Credentials', true);\n    \n      // 允许自定义请求头\n      res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');\n    \n      // 对于预检请求，直接返回成功状态码\n      if (req.method === 'OPTIONS') {\n        return res.sendStatus(204);\n      }\n    \n      next();\n    });\n    \n\n### 10\\. vite 为什么比webpack快？\n\n面试来到了四十几分钟，面试官开始问工程化相关的问题了。之前会长在给我做模拟面试的时候，有问到工程化的问题。当时一脸懵逼，会长给我讲了一遍，还交给我在这种问题上延申表达，展示自己在工程化深度的一些方法。舒服，完美表演二十分钟，一小时左右的面试应该会完美收官。\n越想越开心， 赶快收拾下内心的荡漾，组织语言，回答面试官。\n\n>\n> 我们先不要急于回答问题本身，会长建议我多想想面试官通过面试题想考察我们哪些点。一场前端面试无非包含前端基础（`js/css/html5/es6`）、算法（排序、动态规划）、项目（`vue\n> /\n> node`）、计算机基础（计网/数据库/数据结构/操作系统）、工程化（`webpack/vite`）等。所以像工程化这种，在拿到题目后，尽量把这块的知识，以题目为中心全盘托出给面试题。一来展示了自己对这块知识点的理解广度和深度，二来不经意延长了优质面试时长，面试官会更有兴趣随时打断我们，“参与”进来。殊不知，面试官一参与进来，就又进入到我的包围圈，他会问什么问题，怎么问，就是我们预先准备好的。\n> 所以， 建议大家多做做模拟面试，自己当面试官，会有利于这一技巧的把握。\n\n  * 工程化、历史及现状\n\n在开发前端项目的时候，工程化工具是标配。比如项目的初始化，让我们快速开始业务开发；模块化的支持，方便组织和复用代码；各种资源的处理和加载，如`css`、图片、字体等，并将其压缩或优化后放入最后的代码包;各种`loader`和`plugin`，按需定制编译流程\n（`stylus/ts/jsx`）、压缩(`MiniCssExtractPlugin`)；热更新等\n\n`Webpack`和`Vite`等构建工具旨在解决前端开发中的复杂性和规模问题，通过自动化处理、模块化管理、性能优化等手段极大地提高了开发效率和应用性能，现代前端开发实践中不可或缺的部分，即前端工程化。\n\n之前，`webpack`是主流，但相对复杂，有点慢。`vite` 非常快，更简单，有种取代`webpack`地位之势。\n\n  * `bundle` 与` bundless`\n\n`webpack`： 一切皆可打包，是目前使用率最高的工程化框架，帮助我们打理代码调试到打包的全过程，但是也有一些缺点：\n\n![](https://files.mdnice.com/user/32127/e833ba32-12d3-4516-bf42-0485a1277933.png)\n\n`webpack`在项目调试之前，要把所有文件的依赖关系收集完，打包后才能运行，这是它慢的主要原因，随着项目规模（强调，新手有这个视野很nice）的激增，慢的一坨屎一样（数分钟）。于是，针对`webpack`的`bundle`思路，社区推出了`bundless`思路框架：`Vite`。\n\n从`bundle`到`bundless`，原因是浏览器里的`JavaScript`没有很好的方式去引入其他文件。`Webpack`（`node`环境运行）\n只能通过`require`（`commonJS`） 将一堆js\n按依赖关系组织起来，打包后运行。但是现在主流浏览器都支持`ES6`的`module`功能（`import/export`）。\n\n    \n    \n    <script type=\"module\" src=\"/src/main.js\"></script>\n    \n\n只要在`script`标签上添加`type=\"module\"`标记， `main.js` 就可以直接使用`import` 语法(动态导入)去引入`js`\n文件，所以可以不用`webpack(node)`打包功能，直接使用浏览器的`module`功能就可以组织我们的代码。\n\n`Vite` 能够做到这么快的原因，还有一部分是因为使用了 `esbuild` 去解析 `JavaScript` 文件。`esbuild` 是一个用\n`Go` 语言实现的 `JavaScript` 打包器，支持 `JavaScript` 和 `TypeScript`\n语法，现在前端工程化领域的工具也越来越多地使用 `Go` 和 `Rust` 等更高效的语言书写，这也是性能优化的一个方向。\n\n到这里，我们就向面试官讲清楚了 `bundle` 和`bundless`。这才是`vite` 更快的关键。\n\n  * 优缺点\n\n![](https://files.mdnice.com/user/32127/831741b5-6cb4-4b3e-aeeb-\nbe72e32b6d98.png)\n\n上面有太多东西可以说了，接下来我们再怎么扩展工程化这块的表达，主动把握优质面试时长，让面试官感到惊艳呢？这一方面是面试技巧，一方面也是检测面试准备充分程度。大家可以按这个列表扩展：\n\n  * `webpack.config.js` 中 `entry`, `output`, `module.rules`,` plugins` 等关键配置项的作用及其具体用法\n  * 代码分割、`Tree Shaking` 和懒加载等技术\n  * `Vite` 开发时，如何处理 `CSS` 预处理器\n  * 手写`Vite`\n  * 热更新机制的理解\n\n## 总结\n\n百度的面试还是比较专业的，能学到很多东西。以下是本次面试总结的技巧：\n\n  * 找学长内推，会比自己投好很多\n  * 吸星大法，问下学长面试经验，社区里多刷题\n  * 模拟面试，找些伙伴，假设自己是面试官， 你会问伙伴哪些问题，这样来准备\n  * 自我介绍最好写出来，多朗诵\n  * `js`基础要准备好`promise`系列、`JS`语法系列、`ES6`系列，面试不是被考试，而是当面展示自己。 滔滔不绝，相关联知识不停说。让面试官觉得我们基础扎实，对`JS`有激情\n  * 算法准备好动态规划由简到难，常考题一定要刷刷，状态转移方程可以计下来。 不要怕回答不上来，请教面试官，快速学习。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/588485168021643264?sourceSSR=users",
        "title": "百面嵌入式专栏（面试题）什么是函数调用栈？",
        "content": "![](https://uploadfiles.nowcoder.com/files/20240217/5503357_1708177763384/16ecbf4eff4d42998e5b99a17b14bc15.png)\n\n=\n\n> 沉淀、分享、成长，让自己和他人都能有所收获！😄\n\n📢在开发软件的过程中我们经常会遇到错误，如果你用 Google 搜过出错信息，那你多少应该都访问过Stack\nOverflow这个网站。作为全球最大的程序员问答网站，Stack Overflow 的名字来自于一个常见的报错，就是栈溢出（stack\noverflow）。\n\n今天，我们就从程序的函数调用开始，讲讲函数间的相互调用，在计算机指令层面是怎么实现的，以及什么情况下会发生栈溢出这个错误。\n\n# 一、什么是函数调用栈\n\n栈就像一个乒乓球桶，每次程序调用函数之前，我们都把调用返回后的地址写在一个乒乓球上，然后塞进这个球桶。这个操作其实就是我们常说的压栈。如果函数执行完了，我们就从球桶里取出最上面的那个乒乓球，很显然，这就是出栈。\n\n拿到出栈的乒乓球，找到上面的地址，把程序跳转过去，就返回到了函数调用后的下一条指令了。如果函数 A 在执行完成之前又调用了函数\nB，那么在取出乒乓球之前，我们需要往球桶里塞一个乒乓球。而我们从球桶最上面拿乒乓球的时候，拿的也一定是最近一次的，也就是最下面一层的函数调用完成后的地址。乒乓球桶的底部，就是栈底，最上面的乒乓球所在的位置，就是栈顶。\n\n![](https://uploadfiles.nowcoder.com/files/20240217/5503357_1708177763447/b0c45a09bb4b4a84ac8b97b8376eadc7.png)\n\n# 二、函数调用栈解析\n\n我们还是从一个非常简单的 C 程序 看起。\n\n    \n    \n    // function_example.c\n    #include <stdio.h>\n    int static add(int a, int b)\n    {\n        return a+b;\n    }\n     \n     \n    int main()\n    {\n        int x = 5;\n        int y = 10;\n        int u = add(x, y);\n    }\n    \n    \n\n这个程序定义了一个简单的函数 add，接受两个参数 a 和 b，返回值就是 a+b。而 main 函数里则定义了两个变量 x 和 y，然后通过调用这个\nadd 函数，来计算 u=x+y，最后把 u 的数值打印出来。\n\n    \n    \n    $ gcc -g -c function_example.c\n    $ objdump -d -M intel -S function_example.o\n    \n    \n\n我们把这个程序编译之后，objdump 出来。我们来看一看对应的汇编代码。\n\n    \n    \n    int static add(int a, int b)\n    {\n       0:   55                      push   rbp\n       1:   48 89 e5                mov    rbp,rsp\n       4:   89 7d fc                mov    DWORD PTR [rbp-0x4],edi\n       7:   89 75 f8                mov    DWORD PTR [rbp-0x8],esi\n        return a+b;\n       a:   8b 55 fc                mov    edx,DWORD PTR [rbp-0x4]\n       d:   8b 45 f8                mov    eax,DWORD PTR [rbp-0x8]\n      10:   01 d0                   add    eax,edx\n    }\n      12:   5d                      pop    rbp\n      13:   c\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/588387431464849408?sourceSSR=users",
        "title": "华为OD-22届考研-C++面经",
        "content": "个人情况：22届本科，工科专业，非科班，无工作经验（考研）。\n\n  * **一、机试 （就刷了栗栗姐给的题库，蛮多，刷了20来天）**\n\nT1：求三个矩形A、B、C相交区域的面积，给出每个矩形的左上顶点坐标以及长宽数据。\n\nT2：给定一个字符串，该字符串由 @ 分成两部分。@前的部分表示可以使用的字母及其数量。@\n后的部分表示已经被使用的字母及使用的数量。你需要按原字符串的顺序输出剩余的可使用字母及其剩余数量。\n\n例子：\n\n输入：a3b2c1@a1c1 输出：a2b2\n\nT3：寻找单词。给定一系列等长字符串，组成一个二维矩阵。给定一个目标单词，判断是否存在一系列上下左右相邻的字母能够按顺序连成目标单词，若存在，按顺序打印每个字母在矩阵中的位置（连接时每个字母只能用一次）。\n\n例：输入：ACCF，CDED，BESS，FECA target：ACCESS\n\n组成矩阵：A，C，C，F\n\nC，D，E，D\n\nB，E，S，S\n\nF，E，C，A\n\n输出：0, 0 0, 1 0, 2 1, 2 2, 2 2, 3\n\n  * **二、HR面试**\n\n内容参考：\n\n1.自我介绍\n\n2.个人情况\n\n3.断档原因\n\n4.家庭情况\n\n5.根据简历内容提问\n\n6.觉得自己有什么优势\n\n7.是否有其他offer\n\n8.为什么选择来OD\n\n9.职业规划\n\n9.薪资期望\n\n10.反问环节\n\n  * **三、技术面（机考以后参考栗栗姐的攻略准备了2周）**\n  * **【1】技术一面**\n\n面试语言：C++\n\n内容参考：\n\n1.编程\n\n将一组IPv4地址格式的字符串按照升序进行排序，并讲解代码思路。\n\n比较规则：192.168.1.1 > 192.168.0.1 172.168.6.1 < 192.168.0.1\n\n2.介绍一个自己的项目或作品\n\n3.如何对该项目的需求进行分析，并拆分项目功能模块\n\n4.项目用到了MVC，讲解M、V、C分别负责了哪些功能\n\n5.static的作用\n\n6.vector和list的区别\n\n7.迭代器的作用\n\n8.冒泡排序与快速排序的算法原理\n\n9.虚函数与普通函数有什么区别\n\n10.多线程与多进程有什么区别\n\n  * **【2】技术二面**\n\n面试语言：C++\n\n1.编程：\n\nLeetcode 165. 比较版本号\n\n2.简单介绍简历上的一个项目\n\n3.该项目的某个功能的算法实现思路\n\n4.项目的程序设计问题\n\n5.unordered_map 的原理\n\n6.如何解决哈希表的冲突问题\n\n7.进程间的通信方式有哪些\n\n8.如何解决在工作中遇到的问题\n\n  * **四、综面**\n\n内容参考：\n\n1.自我介绍\n\n2.断档情况了解\n\n3.考研目标院校与专业\n\n4.为什么选择考这个专业，而不是计算机专业\n\n5.为什么当初选择考研而不是找工作\n\n6.不是计算机专业，为什么选择这一行\n\n7.本科专业、考研目标专业、就业领域方向差异过大，是否觉得自己没有选对方向\n\n  * **总结：**\n\n1.技术面的难度不算太高，问的问题也是八股偏多（大概是因为没有工作经验），其余的也大都与简历内容相关。现场编程题目的难度不算高，但是限时40分钟，平时要注意多加练习。\n\n2.HR面比较轻松，回答的时候要以实事求是为主，并要能尽量体现自己：① 有正常的交流与逻辑思维能力；② 有获得这份工作的意愿；③稳定性好 等。\n\n3.综面时给的压力很大（因人而异），面试官的提问十分直接和尖锐，问的都是痛点，而且会追根问底。最好对类似的一系列问题提前做一个准备，不要被打个措手不及。\n\n最后要感谢全程提供答疑和帮助的HR栗栗，人很好，很热情，有问必答，无论是在面试还是入职过程中都帮了我很多忙，有需要的可以尽管来找她\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/588343711214452736?sourceSSR=users",
        "title": "大数据工程师面试 - 如何选择对的岗位提高通过率？",
        "content": "> 我是**大数据欧老师** ，曾在互联网某大厂任大数据负责人，从业大数据领域近 10 年，全网粉丝\n> 5000+，从很多候选人的面试和咨询中复盘了**大数据工程师的面试全流程** ，如果你有求职大数据工程师的计划，欢迎找我聊一聊！\n\n## 你是否有这样的问题？\n\n大部分人，包括我自己在工作第一次跳槽时，也会有类似的疑问：\n\n  * 岗位这么多，我应该挑选什么样的岗位来投递呢？\n  * 当前方向不感兴趣，想做另一个大数据方向怎么投递?\n  * 感觉这家公司的岗位描述和我不太契合，但我很想去，怎么办？\n  * 怎么感觉每家公司的岗位描述都写的要求这么高？\n\n## 好的岗位 = 人（自我定位） x 岗（岗位拆解）\n\n一个好的岗位，是人岗匹配的结果，“人”表示的是清晰的自我定位，包括对个人兴趣、方向的认知等；“岗”表示的是对岗位的了解，包括岗位要求拆解、公司研究等。\n\n### 错误姿势 - 永远不要海投\n\n很多咨询我的同学里，尤其是应届生，很容易犯一个错误，就是海投岗位，拿着自己写好的简历到处瞎投，结果要么是面试机会收不到，要么是面试时的考察内容和自己的预期差距太大。在互联网大厂，对于不同部门的岗位都是存在“锁定”关系，也就是说，你投递\nA 部门的同时，相当于放弃了 B 部门的机会，如果你在 A 部门面试通过，你只有拒绝掉 A 部门的 Offer 才能去面试 B\n部门，这个机制就带来了很大的机会成本，如果不仔细考量，你很有可能在遇到合适岗位前，就留下了不好的面评或者选到不合适的岗位。\n\n仔细想想，如果你曾经有过以下经历，那都或多或少，是因为对「选择岗位」理解不透彻：\n\n  1. 海投岗位，见一个投一个；\n  2. 面试过了，发现岗位不是自己喜欢的；\n  3. 问的问题咋全都是自己不会的呢；\n  4. 自己明明是初级，结果问的全是高阶问题；\n  5. 明明想做 A 岗位的事儿，结果问的全是 B 岗位的内容；\n\n### 人岗匹配 - 自我定位和岗位分类\n\n面试是什么？本质上就是「人」和「岗位」的匹配度，匹配的对，那面试成功概率就大；匹配不对，那面试失败概率就大。上面提到：\n\n**好的岗位 = 人（自我定位） x 岗（岗位拆解）**\n\n好的岗位因人而异，对于财富自由的大厂员工，可能新业务、高风险高收益的岗位更适合；对于应届毕业生，稳扎稳打，进入一个相对成熟的部门岗位会更快的积累起自己的职业优势。不同的人，不同的岗，就会有不同的组合，只有找到适合自己的岗位，才能够事半功倍。我们这里可以按照我个人常用的维度来拆解一下：\n\n![](https://uploadfiles.nowcoder.com/images/20240218/763464184_1708264286439/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n#### 候选人分类\n\n  * **零基础的候选人** ：这类候选人主要寻求校招或者实习的工作机会。由于缺乏相关的工作经验，他们对面试岗位的了解往往比较少。因此，选择与自己兴趣和未来发展密切相关的面试或实习岗位非常重要。一旦进入这个岗位，接下来的面试经历就会参考你的实习经历，所以最初的选择至关重要，因为它可能会决定你未来的实习和工作方向。\n  * **社招换公司** ，不换岗位的候选人：这类候选人需要明确自身所在的公司的岗位，然后在新公司中寻找相关岗位。这时，你的面试岗位选择已经相对明确。\n  * **社招换公司** ，且换岗位的候选人：这类候选人需要清楚的了解自己当前的岗位类型，并找到自己的兴趣点——也就是说要知道自己下一份工作想要换到的岗位方向。在这里，我们需要提醒一句，每一次改变方向对候选人来说都是一个需要三到五年来付出的大成本。因此，在改变方向时，一定要慎重考虑自己是否真的对当前的方向不感兴趣，或者当前的方向是否真的没有发展前景。\n\n#### 面试岗位分类\n\n面试岗位可大致分为四个方向：\n\n  * **大数据平台岗** ：这类岗位以搭建大数据平台为核心，主要技术栈是后端，涉及关于Spark、Flink、OLAP 等引擎的使用。\n  * **数据仓库岗** ：这类岗位主要以 SparkSQL 和 FlinkSQL 为主，用来进行离线或实时数据仓库的构建，核心工作就是围绕业务场景进行数据的ETL，也就是我们常说的清洗数据的工作。\n  * **数据与场景结合的岗位** ：这类岗位主要是使用大数据的能力来为某一个场景赋能，对候选人的要求相对来说会比较综合，比如大数据和机器学习的结合点，就会有特征工程的岗位，样本工程的岗位，这类岗位既需要候选人具有大数据计算的能力，同时也需要有特征、样本等机器学习的了解。\n  * **底层开发岗** ：这类岗位主要需要候选人深入研究和开发某一大数据引擎的源码。虽然涉及的大数据组件较少，但是对引擎的理解和使用都要求非常深入。\n\n上面是我在接受相关同学咨询时，常用的分析框架，当然，对于岗位和人的分析维度，除了经验、内容之外，还有方向、管理、潜力等多重维度，大家可以针对自己的情况来做一个拆解，如果还不理解，欢迎找我咨询了解。\n\n## 选择岗位的技巧 - Find Your Mr.Right\n\n既然明确了「人岗匹配」的概念之后，我们立刻要做两件事情：\n\n  1. 明确个人定位（找到自己的兴趣、优势等）\n  2. 寻找合适岗位（有机会的、感兴趣的）\n\n### 明确个人方向\n\n这里的个人方向主要分类两类，一是你的硬实力，二是你的兴趣点。\n\n  * 硬实力包括自己的专长、所接触的业务等。对于应届毕业生，这可能是学校实验室的一些研究项目；对于社招求职者，这就是他们在现有公司的工作内容。并且，我们需要把这部分信息记录下来，通过对比各种岗位的需求，我们可以明确自己是否适合该岗位，以及在面试中通过的可能性有多大。\n  * 兴趣点也非常重要，但不是每个人都能容易的找到自己兴趣点。对于那些对自己兴趣不太了解的求职者，我们可以采取一个负面的方式来找到我们不感兴趣的东西。你可以查看腾讯、字节跳动等公司的招聘列表里的岗位描述，看看哪些是你绝对不感兴趣的，然后记录下来，投递时避开。\n\n#### 找到个人兴趣\n\n通过上面的方法，我们能够初步认识到自己明确不想去的岗位，以及跟自己八杆子打不着的岗位，下一步，我们需要寻求更多的意见来决定我们应该投递哪个岗位。提前说一句，这个问题的答案因人而异，找到准确答案很难，但是期望看到这篇文章的同学可以按照下面的方式用心想一想：\n\n  1. **工作反馈** ：在接受工作反馈时，你可以留意哪些工作内容让你感到压力或者是不愿意去长期面对的挑战。这些压力源可能就揭示了你不感兴趣的方向。\n  2. **用心体验** ：在做任何事情时，都要用心去体验和理解个中过程和结果，看这些经验是不是真正吸引你。如果在做一项工作或完成一项任务时，你发现自己感到无聊或者困扰，那就可能是你不感兴趣的领域。\n  3. **多次尝试** ：不管是在学校、职场，都有不少机会可以接触到其他领域的内容，我们完全可以可以多尝试不同类型的工作，了解来自各个职业领域的基本信息。\n  4. **咨询过来人** ：咨询“过来人”是一个非常好用的办法，因为大家的职业上升路径都比较类似，当你去咨询一个有着成功经验的“过来人”，那他的话也更容易让你信服。当然了，并不是所有人都有这个资源，如果非常想聊一聊，欢迎找我。\n\n### 寻找合适岗位\n\n寻找合适岗位的第一步，我们要来拆解一下岗位描述，往这个方向下功夫，你便可以清晰地理解这个岗位到底需要一个怎样的候选人，并能据此定制你的面试准备策略和简历内容。为何这一步如此关键？因为所谓岗位描述（JD）通常由招聘部门的负责人亲自拟写，他们用\nJD 描述的理想应聘者，正是他们团队里所急需的人才。如果万一招错人，对他们来说，将将是一个沉重的负担。\n\n![](https://uploadfiles.nowcoder.com/images/20240217/763464184_1708144025807/3546CB36749C99BA01F88074AD5C3B24)\n\n上面是一份我在腾讯招聘网站上找到的大数据开发工程师岗位信息，我们将会着重了解以下几个部分：岗位名称、岗位职责和岗位要求：\n\n**岗位名称**\n：虽然都属于大数据工程师，但是不同的岗位它的名字会有些许的差别，比如说这里叫“大数据平台开发工程师“，那它的这个侧重点会。更加倾向于大数据的平台。还有大数据应用工程师呢，他的侧重点就会更倾向于和业务的结合应用，当然这个也不是绝对的，所以我们岗位名称的话，主要是看他在公司内部的一个定位，或者是内部的一个名字；\n\n**岗位职责**\n，这个岗位职责通常会直接描述这个岗位在部门里负责的业务，我们一定要仔细分析这个业务内容啊。比如这里，就是负责微信支付里的大数据平台，如果你之前是做其他领域，比如汽车，外卖的大数据平台，那你的方向就很匹配对吧，那你面试这个岗位，就已经有很大的优势了，然后他里面提到的一些模块，比如元数据管理，计算资源管控，你如果之前搞过这些，那你就更牛逼了，说不定有些点，你在之前的公司，会比这个微信支付做的更好，面试的时候还能反向输出；\n\n**岗位要求** ：通常岗位要求里面，有很多都是套话，比如这里的第三点，xx，这些基本每个JD都是重复的，但是我们抓关键点，什么是关键点呢？ 我们要挖掘这个\njD 里出现的点，哪些是特殊的点呢？第一，技术专有名词，比如这里的\nHadoop，Flink，其次，和业务相结合的内容，比如金融项目经验，机器学习平台建设经验，这些都是面试官比较看重的点，也是你需要去做准备的点。\n\n学会了如何拆解岗位，我们逐步就能知道，一个岗位的定位、需求是怎么样，那么结合你的个人定位，其实你也就能知道你通过这个岗位的概率大概是多少了。\n\n## 不要追求 100% 的确定性\n\n如果你能完全的了解到自己的实际情况和岗位的实际需求，那你肯定是能找到不错的机会，并且利用自己的优势来通过面试的。然而，在真正的实践里就会发现，由于信息差的原因，对自己的优势并不能挖掘到\n100%（因为你并不知道什么能力才是对方最需要的），对岗位的分析也不能做到 100%（JD\n展示的信息，会有产生信息差），所以在这种情况下，我们在「人岗匹配」这一步尽力做好之后，需要从其他方面来提高我们的面试成功率，比如我后面会讲到的：\n\n  * 优化自己的简历，从简历层面来引导面试官问问题；\n  * 挖掘自己的优势，制定不同的简历和面试技巧；\n  * 针对性的做面前准备；\n  * ...\n\n期望通过这篇文章之后，你能学习到「人岗匹配」的重要性，并且已经改正了“海投简历”的错误习惯，在自我认知和岗位分析上养成习惯，在面试中更有自信和把握！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/588484821098188800?sourceSSR=users",
        "title": "百面嵌入式专栏（面试题）请详细介绍下网络协议的分层？",
        "content": "![](https://uploadfiles.nowcoder.com/files/20240217/5503357_1708177659581/cba818e89d4046688e93618483a59bb4.png)\n\n> 沉淀、分享、成长，让自己和他人都能有所收获！😄\n\n📢对于多数的应用和用户而言，使用互联网的一个基本要求就是数据可以无损地到达。用户通过应用进行网络通信，应用启动之后就变成了进程。因此，所有网络通信的本质目标就是进程间通信。世界上有很多进程需要通信，我们要找到一种通用的，每个进程都能认可和接受的通信方式，这就是协议。\n\n# 一、应用层\n\n从分层架构上看，应用工作在应用层（Application\nLayer）。应用的功能，都在应用层实现。所以应用层很好理解，说的就是应用本身。当两个应用需要通信的时候，应用（进程中的线程）就调用传输层进行通信。从架构上说，应用层只专注于为用户提供价值即可，没有必要思考数据如何传输。而且应用的开发商和传输库的提供方也不是一个团队。\n\n![](https://uploadfiles.nowcoder.com/files/20240217/5503357_1708177659424/9d1d233b349041f7bd90deb2417c3913.png)\n\n# 二、传输层\n\n为应用层提供网络支持的，就是传输层（Transport Layer）。\n\n传输层控制协议（Transmission Control\nProtocol）是目前世界上应用最广泛的传输层协议。传输层为应用提供通信能力。比如浏览器想访问服务器，浏览器程序就会调用传输层程序；Web\n服务接收浏览器的请求，Web 服务程序就会调用传输层程序接收数据。\n\n考虑到应用需要传输的数据可能会非常大，直接传输不好控制。传输层需要将数据切块，即使一个分块传丢了、损坏了，可以重新发一个分块，而不用重新发送整体。在 TCP\n协议中，我们把每个分块称为一个 TCP 段（TCP Segment）。\n\n![](https://uploadfiles.nowcoder.com/files/20240217/5503357_1708177659543/9ed0805aee3f4ef4bbb24237afcec95b.png)传输层负责帮助应用传输数据给应用。考虑到一台主机上可能有很多个应用在传输数据，而一台服务器上可能有很多个应用在接收数据。因此，我们需要一个编号将应用区分开。这个编号就是端口号。比如\n80 端口通常是 Web 服务器在使用；22\n端口通常是远程登录服务在使用。而桌面浏览器，可能每个打开的标签栏都是一个独立的进程，每个标签栏都会使用临时分配的端口号。TCP 封包（TCP\nSegment）上携带了端口号，接收方可以识别出封包发送给哪个应用。\n\n# 三、网络层\n\n接下来你要思考的问题是：传输层到底负不负责将数据从一个设备传输到另一个设备（主机到主机，Host To\nHost）。仔细思考这个过程，你会发现如果这样设计，传输层就会违反简单、高效、专注的设\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/588071547051462656?sourceSSR=users",
        "title": "网易雷火暑期实习 客户端面经 一二三面+hr面（大概内容）",
        "content": "# 大概内容，有些记不太清楚了\n\n# 一面 12.27\n\n1、上来先做了五个填空选择题，一道算组合数的题，一道链表插入，两道C\n++虚函数相关的题，最后是一个算加密的。时间差不多二十多分钟，后来也没做完，就继续问下去了。\n\n2、问项目 问了问怎么实现UI 怎么实现关闭一个页面同时关掉其他页面 怎么关闭页面后同时回到上一个页面\n\n3、结构体和类的区别\n\n4、协程原理\n\n# 二面 1.4\n\n狂问八股就对了，问的八股都挺常规的，有的很简单的不太记得了\n\n1、C#：说说面向对象、了解委托吗、拆箱装箱了解吗\n\n2、操作系统：进程线程的区别、进程间通信\n\n3、计网：三次握手四次挥手\n\n4、数据结构：树的遍历方式、图的遍历、图优化的遍历方式（dijkstra什么的）、A*算法、如何判断链表是否有环、哈希表的工作方式\n\n5、图形学：懂向量和矩阵吗、怎么判断一条射线是否与球相交\n项目里怎么判断子弹碰到了物体、mipmap了解吗、drawcall了解吗、怎么减少drawcall（就图集打包那些）后来答得不太好就不问了\n\n6、计算机系统：浮点数的存储、逻辑移位和算术移位、函数调用的过程、程序编译过程、怎么存储负数，怎么表示-1\n\n7、C++：很意外没考多少。讲一下new和delete、new 和\nmalloc的区别、左值右值、强制转化类型、智能指针、说一下重载和重写、静态联编和动态联编、菱形继承\n\n8、手撕string类：问了一下用C++熟还是C#熟，我选的C++。实现构造函数、拷贝构造、拷贝复制、析构函数、移动构造。最后有一个小应用，怎么把左值变为右值，std::move()\n即可\n\n# 主程面 1.9\n\n面试官人非常非常好！在思考的时候会尽量讲清楚背景，之后还会发表自己的看法。\n\n问项目就问了快半个小时吧。中间穿插着问了一些应用。\n\n怎么实现人物的拖拽，用了哪些组件。\n\n怎么实现无限循环列表。\n\nMonobehavior的生命周期。大概答了一下，着重问了几个。问了lateupdate里会用来干什么，举一个例子，我说的相机跟随，为什么要在lateupdate里才实现相机跟随。我答的因为lateupdate在之后调用，不会造成拍不到人物的现象。\n\n脚本调用顺序。一个物体挂多个脚本的执行顺序，一个脚本绑定在多个物体上会怎样，是否在unity里改变过脚本顺序（Edit -> Project\nSettings -> Script Execution Order改）\n\n最后是个开放题，也挺常见的。怎么实现排行榜。要求前100名非常精准，后面的排名不要求非常精准，给出在百分之几即可。桶排序里面再分桶。\n\n# HR面 1.17\n\n虽然但是，聊了十分钟hr才发现我25年毕业，一直以为我是24届的。\n\n平时玩什么类型游戏，有没有玩过雷火游戏\n\n逆水寒玩的什么角色，战力多少\n\n有没有玩过别家的游戏\n\n为什么玩那个游戏，是为了求职吗\n\n平时是怎么学习的\n\n职业规划是什么\n\n来杭州家里同意吗\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/587791259427782656?sourceSSR=users",
        "title": "嵌入式系统安全C语言面试集",
        "content": "# Perface\n\n实在是没有想到也会准备面试，毕业的时候想着找一个大厂，好好的一辈子都干下去。\n\n如果把工作比作对象，那我年轻的时候曾认真对她许诺：\n\n**你若不离，我定不弃**\n\n然而我们最后也不是谁变了心，**只是经历了一些事情，发现彼此可能不是合适的结婚对象吧** 。\n\n到现在她在想着多久删掉我合适，而我必须得开始找备胎了。不然我的对象真的得离我而去了。\n\n回到正题，说说以下几个点你可能比较感兴趣：\n\n  * 1、个人情况\n  * 2、技术栈\n  * 3、专栏内容\n\n**以下如有怀疑、纯属虚构；如有兴趣，欢迎交流。**\n\n# 个人情况\n\n我是毕业于一所普通的985的理工科硕士，其实如果是早期wordpress或者hexo用户甚至可能在某个时间我们已经见过了（by\nblog），最开始玩博客的时候是八年前的事情了。\n\n那个时候担心国内的朋友访问网站比较慢，从Github迁移到gitee，后面这玩意不给免费搭网站了，也不给免费做图床了。\n\n> 小声吐槽国内真的是没有真的让我感受到正儿八经有开源精神的技术公司。\n\n一直是比较喜欢写点东西，因此在最近的这两年开始在CSDN和微信公众号继续分享一些知识，和大家一起学习。\n\n爱好不多，写文章、读书、健身、打篮球、看“学习资料”；\n\n# 技术栈\n\n  * 筑基期：焊电路、驱动开发、网页设计、APP开发、后端开发、快应用、分布式云容器、数据分析。\n\n  * 结丹期：系统安全、基础安全、IC验证、原型验证\n\n**下个阶段**\n\n  * 元婴期：Who Knows! 期待下个阶段的自己！\n\n# 专栏内容\n\n内容的结构布局：\n\n  * 最基础的C语言开始打下基础（只讲面试常考的几个关键点，不会大面积展开很基础的东西）\n  * 其次是驱动结合硬件\n  * 操作系统\n  * 解决方案、业界完整的解决方案与实现\n  * 结合项目与实际应用\n\n这是四个大的方向，其中很多东西我会根据留言来做补充，如果没有要求，我就不一一展开了，因为要想面面俱到可真的太多啦。\n\n关于专栏递进布局：\n\n  * 打下常见的基础\n\n  * **寻找真实的面试案例来着手**\n\n  * 结合案例于理论知识来延申、加深了解对应的知识点\n\n> 毕竟知识装进脑子里的感觉真的还是不错\n\n有什么建议与意见可以留言与私信，常沟通。\n\n基础与实践结合、理论与实践结合！！！\n\n感兴趣的小伙伴关注别错过哦！！！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/588483801282531328?sourceSSR=users",
        "title": "百面嵌入式专栏（面试题）GPIO有哪些调试方法",
        "content": "![](https://uploadfiles.nowcoder.com/files/20240217/5503357_1708177387608/7b60c0e4ea914b48a04617cc11d03278.png)\n\n> 沉淀、分享、成长，让自己和他人都能有所收获！😄\n\n📢本篇将介绍 GPIO调试手段。\n\n#\n\ndebugfs 是 Linux 内核提供的一个调试文件系统，可以用于查看和调试内核中的各种信息，包括 GPIO 的使用情况。通过挂载 debugfs\n文件系统，并查看/sys/kernel/debug/目录下的相关文件，可以获取 GPIO\n的状态，配置和其他调试信息。如下图所示，我们进入/sys/kernel/debug/目录下。\n\n![](https://uploadfiles.nowcoder.com/files/20240217/5503357_1708177387598/b7469a73194b46aa99cf3674443aa99a.png)\n\n如果上图目录/sys/kernel/debug 目录下没有文件，需要在 Linux 内核源码配置 debugfs，如下图所示：\n\n![](https://uploadfiles.nowcoder.com/files/20240217/5503357_1708177387641/c8f956ea090148228d54ca013f530d82.png)\n\n配置好之后，重新编译内核源码，烧写内核镜像。\n\n如果没有 debugfs，可以使用以下命令进行挂载:\n\n    \n    \n    mount -t debugfs none /sys/kernel/debug/\n    \n    \n\n如果有 debugfs，可以使用以下命令查看 GPIO 的信息。\n\n    \n    \n    cat /sys/kernel/debug/gpio\n    \n    \n\n![](https://uploadfiles.nowcoder.com/files/20240217/5503357_1708177387680/0b618988d1574343883745fecda73add.png)\n\n#\n\n当你进入`/sys/kernel/debug/pinctrl` 目录时，你可以获取有关 `GPIO` 控制器的调试信息。在该目录下，通常会有以下文件和目录：\n\n  1. `/sys/kernel/debug/pinctrl/*/pinmux-pins`：这些文件列出了每个 `GPIO` 引脚的引脚复用配置。你可以查看每个引脚的功能模式、引脚复用选择以及其他相关的配置信息。我们进入到`/sys/kernel/debug/pinctrl/pinctrl-rockchip-pinctrl/`下面，输入“`cat pi`”，如下图所示：\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/587652335585742848?sourceSSR=users",
        "title": "面试官：介绍一下MVC框架",
        "content": "## 前言\n\n**大家好，我是chowley，MVC相信大家都听说过，今天我就记录一下我心中的MVC框架**\n\nMVC（Model-View-\nController）是一种软件设计模式，用于将应用程序分为三个核心部分：模型（Model）、视图（View）和控制器（Controller）。每个部分有着不同的责任和角色，有助于降低代码耦合度，提高代码的可维护性和可扩展性。\n\n### 1\\. 模型（Model）\n\n模型代表应用程序的数据和业务逻辑。它负责管理应用程序的数据，响应对数据的请求，并根据需要更新数据。模型通常包括以下功能：\n\n  * 数据持久化：将数据存储到数据库或其他持久化存储中。\n  * 数据操作：提供对数据的增删改查等操作。\n  * 业务逻辑：处理业务规则和逻辑，确保数据的正确性和一致性。\n\n### 2\\. 视图（View）\n\n视图负责呈现模型的数据给用户，并将用户的操作转发给控制器或模型。视图通常是用户界面的一部分，但也可以是其他形式的数据展示。视图具有以下功能：\n\n  * 数据展示：将模型的数据以用户友好的方式展示给用户。\n  * 用户交互：接收用户的输入或操作，并将其转发给控制器或模型。\n  * 页面渲染：根据需要生成页面或其他形式的数据展示。\n\n### 3\\. 控制器（Controller）\n\n控制器充当模型和视图之间的中介，负责处理用户的输入和业务逻辑。控制器通常包括以下功能：\n\n  * 用户请求处理：接收用户的请求，并根据请求调用相应的模型或视图。\n  * 路由管理：管理不同请求的路由和处理逻辑。\n  * 数据处理：处理模型的数据，并将其传递给视图展示给用户。\n\n### MVC框架的优势\n\n  * 分离关注点：将应用程序分为三个部分，每个部分负责不同的功能，降低了代码的耦合度，提高了代码的可维护性。\n  * 提高开发效率：通过使用现有的MVC框架，开发人员可以快速搭建应用程序的基础架构，减少重复性工作。\n  * 支持多种技术栈：MVC框架通常支持多种技术栈，开发人员可以根据需要选择合适的技术栈。\n\n在实际应用中，许多现代的Web框架和技术栈都采用了MVC模式，包括Ruby on Rails、Django（Python）、Spring\nMVC（Java）、ASP.NET MVC（.NET）等。每个框架都有其特点和适用场景，但它们共同遵循的MVC原则有助于简化Web应用程序的开发和管理。\n\n此外，这种模式支持并发开发。例如，一个团队可以专注于视图的设计，而另一个团队可以同时工作在数据模型上。这种分离也使得修改或更新应用程序的某一部分而不影响其他部分变得更加容易，从而提高了代码的可重用性和可维护性。\n\n## 总结\n\nMVC模式的优点在于它促进了应用程序的模块化，使得开发、测试、维护和扩展应用程序变得更加容易。通过分离应用程序的不同方面，开发者可以更专注于特定组件的开发，而不需要对整个应用程序的工作方式了解透彻。\n\n**好了，以上就是本文的全部内容，如有问题欢迎留言讨论。**\n\n**本人正在组建测试开发方向的交流社区，如果您对软件质量管理方面感兴趣，欢迎私信我了解。**\n\n**我是chowley，一个专注互联网技术和软件质量保障领域的博主，我们下次再见！**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/587578464316694528?sourceSSR=users",
        "title": "管氏二面",
        "content": "1。cas的底层原理\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/587369256459739136?sourceSSR=users",
        "title": "2024 要跳槽大数据工程师岗位该怎么做？",
        "content": "> **我是大数据欧老师，曾在互联网某大厂任大数据负责人，从业大数据领域近 10 年，全网粉丝\n> 5000+，从很多候选人的面试和咨询中复盘了大数据工程师的面试全流程，如果你有求职大数据工程师的计划，欢迎找我聊一聊！**\n\n2024\n年的求职情况，很多小伙伴都已经感受到了，虽然企业逐步放开了招聘规模，但是裁员造成的人才涌入加速了求职内卷。所以我们不能期望像以前一样，随便扔个简历都能被捞起来面试，或者不针对性的准备就想拿到\noffer。\n\n大纲介绍：\n\n  1. 误区：面试 != 基础知识题问答\n  2. 分析人岗匹配度\n  3. 利用简历引导面试官\n  4. 挖掘自己的核心竞争力\n  5. 常见知识点准备\n  6. 面试细节小 tips\n  7. 长期主义选 offer\n\n### 1\\. 误区：面试 > 基础知识题问答\n\n这个是很多小伙伴的误区，每天在刷题、刷基础知识的痛苦中自我陶醉，但是真正让面试泡汤的又是其他方面的因素。当然也不是说基础知识不重要，只是面试的本质是远远大于几道基础题的考察：\n\n  1. **面试是一个全流程的考核** ，翻到上面看看提纲，基础知识只占 1/7，面试还包括选岗位、写简历、自我优势挖掘、讲项目、谈 offer 等等阶段；\n  2. **基础知识要和项目结合** ，单纯复习基础知识用处不大，即使你把题库背下来，面试官可以给你无数种变种题，那你还能回答的上来吗？\n  3. **面试不需要面面俱到** ，除非你面试底层引擎开发，需要很扎实的底层知识，否则过于深入的了解各种基础知识，反而浪费了你准备其他东西的时间；\n\n小伙伴们要明白上面的几个点，从全流程的维度来看面试过程，这样才能一点点提升自己面试成功到心仪岗位的机会。\n\n### 2\\. 分析人岗匹配度\n\n这一步最重要的是明确自己的个人发展方向和市场上已有的岗位，从而得出应该投递什么样的岗位，大数据岗位分为 4 种，\n\n![](https://uploadfiles.nowcoder.com/compress/mw1000/images/20240214/763464184_1707911680072/DADBF5FE0D7FE969F7DA8E193B0ED585)\n\n  * 大数据平台岗\n  * 数仓岗\n  * 数据 x 场景岗\n  * 底层开发岗\n\n候选人也要分析自己的情况，比如校招同学要思考自己的职业发展方向，社招同学做离线数仓的，需要考虑是否需要往实时数仓去靠一靠。不同的岗位，不同的候选人情况，是需要有不同的面试准备，包括简历、竞争力方向等等。\n\n**选择合适的岗位，在最开始就可以奠定自己拿到好 Offer 的基础。**\n\n### 3\\. 利用简历引导面试官\n\n简历我们可以拆解为五个部分：\n\n  * 个人信息\n  * 教育经历\n  * **工作经历和角色**\n  * **项目经历**\n  * 相关技术栈\n\n这 5 个部分其中最重要的是「工作经历」和「项目经历」。这里说一个讲项目经历的黄金方法-STAR 法则。\n\n![](https://uploadfiles.nowcoder.com/compress/mw1000/images/20240214/763464184_1707911689328/EAA5F2913F9EAFC726F4E086BE08757F)\n\nSTAR 模型是一种常用于面试里项目描述的框架，用来组织和呈现项目经历。STAR 是 Situation（情境）、Task（目标）、Action（行动）和\nResult（结果）的首字母缩写。这个概念网上可以搜到，很多企业高管都会用这个模型来做汇报，所以这个模型能够帮助你以清晰、有逻辑的方式叙述经历，尤其是在回答面试问题时非常有效。\n\n以我的学员简历为例，这里就是利用了 STAR\n模型，将背景、行动、收益描述的比较清楚。这个项目经历里，讲到的东西和细节比较多，你看下来是不是还挺感兴趣的，你就会问他里面的东西对不对，那一下就把面试官给带到他自己擅长的领域里去了。\n\n**这就是我们好的一份简历，能够引导面试官来问问题，问的还全是你擅长的，那你的面试能不通过吗。**\n\n### 4\\. 挖掘自己的核心竞争力\n\n一个候选人的竞争力我们拆解到 5 个维度：\n\n  1. 技术广度\n  2. 技术深度\n  3. 业务场景结合力\n  4. 面试沟通力\n  5. 背景和经历\n\n有的同学是做系统的集成，那在技术广度上的竞争力就会比较强，有的同学喜欢钻研技术，那可能在技术深度上就会有竞争力。不同竞争力的同学，在选岗位、准备简历、以及面试的表现中，需要通过不一样的方式来展现自己的能力。\n\n举个例子，对于有技术广度优势的同学，要从两个层面去复习自己的经历和项目：\n\n  1. 系统层面：系统级别知识点中，你要讲明白这个系统是什么，系统里各组件之间的依赖关系，另外在你项目中会提到很多关键词，例如归因模型，在这些架构上，我们要能清晰的表达出来这个架构的组成成分，以及架构内部各模块是如何连接的。\n  2. 技术栈层面：简历中**少而精的专有名词** ，比如对于 bitmap 知识点，我们就需要知道 bitmap 的实现原理，这些问题很容易在网上找到，也有很多技术面试题。\n\n**你可以这样来判断自己是不是已经复习到位了：在这两个层面向自己提出十个问题，如果这些问题你都能比较流畅的回答出来，并且在回答过程中没有任何的疑问点，那可以认为这样就是准备充分了。**\n\n### 5\\. 常见知识点准备\n\n这里不同岗位知识点的准备，非常建议大家使用我们的小程序来进行刷题，不过要记住，知识点的准备不在泛，而在精，并且准备的知识点要和自己的经历、项目相结合。\n\n![](https://uploadfiles.nowcoder.com/images/20240214/763464184_1707911705028/CEF1E67ABAD96424F0C3461A90FF5188)\n\n### 6\\. 面试细节小 tips\n\n面试细节这里提一个点 -\n你应该问面试官什么样的问题？有一小部分同学，会放弃提问的机会，这个很可惜。要记住，面试永远是一次双向选择，不是你一厢情愿去求别人录取你。\n\n两类问题可以问：\n\n  1. 提前准备的问题：包括组织架构、工作内容、技术栈等。用来判断工作和发展是否符合你对未来的预期。\n  2. 面试内容的拓展：项目难点、技术难点的探讨，和面试官主动探讨一些你擅长或者他感兴趣的内容，是非常能给面试加分的。\n\n### 7\\. 长期主义选 offer\n\n影响 Offer 的因素太多了，我们可以分为薪资、行业前景、岗位内容、公司、稳定性、汇报对象等 6 个方面。这里说“长期主义选\noffer”，为什么要长期主义？因为新工作是你未来的跳板，如果这个跳板选错了，那很有可能是一步错，步步错。\n\n![](https://uploadfiles.nowcoder.com/images/20240214/763464184_1707911713380/A6C0C23451DBFEC91356B67FC9045F26)\n\n不同阶段的小伙伴，在不同的职业阶段都有不同诉求。对于职场小白，最重要的肯定是赛道和公司，在自己没有积累的情况下，早点进入到一个好的赛道和公司，为自己后续的求职打下最有确定性的基础。对于工作好几年，薪资、晋升机会，可能是一个更大的考虑因素。\n\n**长期主义选 Offer，让自己站在一个更高的跳板上。**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/587352224582451200?sourceSSR=users",
        "title": "华为校招面经",
        "content": "三面每面1h，从上午九点面到中午十二点。\n\n本人项目就是牛客论坛，没错就是那个广为流传的牛客论坛，额外加上一个b站上的秒杀项目\n\n一面主要问项目，会扣的很细，问具体一个请求怎么从前端发起到后端处理再返回给前端的过程，我面的这个部门有sql题，还有手撕\n\n二面问一些八股，数据库范式，https，面试官问完就听着，我就一直自己说说到不能说为止。最后一道手撕\n\n三面问经历，问看过的书，问跟人合作过的项目都有什么，问班级社团经历，问在合作过程中遇到过的最难的问题是什么（投递华为的简历里面最好要写上相关经历，就算没有拿奖参与过的也完全没有问题），还会问未来自己的职业规划\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/587578014276296704?sourceSSR=users",
        "title": "管氏面试",
        "content": "hashmap原理\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/587064510351953920?sourceSSR=users",
        "title": "面试官：介绍一下Exception和Error之间的区别",
        "content": "## 前言\n\n**大家好，我是chowley，在我之前的面试中，遇到过这样一个问题：Exception和Error之间有什么区别？今天我就来好好地总结一下！**\n\n## 主体\n\n在Java编程中，Exception和Error都是Java中的可抛出对象，它们都是Throwable类的子类，但在使用和处理上有着不同的特点。\n\n### Exception\n\nException代表了在程序执行过程中可能出现的异常情况，通常是由程序错误或者外部条件导致的。它分为受检查异常（Checked\nException）和非受检查异常（Unchecked Exception）两种类型。\n\n  * 受检查异常（Checked Exception）： 是指在编译时必须要处理的异常，即在方法声明中必须要声明throws关键字或在方法内部进行try-catch块的处理。典型的受检查异常包括IOException、SQLException等。\n  * 非受检查异常（Unchecked Exception）： 是指编译器在编译时不会强制要求进行处理的异常，通常是由程序逻辑错误导致的，例如空指针异常（NullPointerException）、数组越界异常（ArrayIndexOutOfBoundsException）等。这些异常通常是RuntimeException的子类。\n\n### Error\n\nError通常表示严重的问题，它通常是由于系统错误或者资源耗尽等无法处理的情况导致的。与Exception不同，Error通常不应该捕获和处理，而是应该让程序终止或者让虚拟机进行处理。典型的Error包括OutOfMemoryError、StackOverflowError等。\n\n### 区别总结\n\n  1. 处理方式： Exception必须要在代码中显式地处理，要么通过throws关键字声明抛出，要么通过try-catch块捕获处理；而Error通常不应该被捕获和处理，而应该让程序终止或者交由虚拟机处理。\n  2. 类型： Exception包括了受检查异常和非受检查异常，而Error通常表示严重的系统错误。\n\n## 总结\n\n在面试中，面试官可能会针对Exception和Error之间的区别进行提问，希望求职者能够清晰地理解和解答这两者之间的区别，并举例说明各自的应用场景和处理方式。\n\n**好了，以上就是本文的全部内容，如有问题欢迎留言讨论。**\n\n**本人正在组建测试开发方向的交流社区，如果您对软件质量管理方面感兴趣，欢迎私信我了解。**\n\n**我是chowley，一个专注互联网技术和软件质量保障领域的博主，我们下次再见！**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/586986670843609088?sourceSSR=users",
        "title": "大数据工程师面试题 - Spark 调优（九）",
        "content": "> **我是****大数据欧老师****，曾在互联网某大厂任大数据负责人，从业大数据领域近 10 年，全网粉丝\n> 5000+，从很多候选人的面试和咨询中复盘了****大数据工程师的面试全流程****，如果你有求职大数据工程师的计划，欢迎找我聊一聊！**\n\n#\n\n## 数据倾斜的解决方案\n\n### 解决方案八：参数调优\n\n#### shuffle相关参数调优\n\n以下是Shffule过程中的一些主要参数，这里详细讲解了各个参数的功能、默认值以及基于实践经验给出的调优建议。\n\n## Spark 参数优化详解\n\n以下列举了Spark参数调优的一些关键参数及其优化建议：\n\n#### 1\\. spark.shuffle.file.buffer (默认值：32k)\n\n该参数用于设置 shuffle write task 的 BufferedOutputStream 的 buffer\n缓冲大小。合理增大该参数的值，可以有效减少磁盘IO次数，进而提升性能。\n\n#### 2\\. spark.reducer.maxSizeInFlight (默认值：48m)\n\n该参数用于设置 shuffle read task 的 buffer 缓冲大小。合理增加该参数的值可以减少网络传输的次数，进而提升性能。\n\n#### 3\\. spark.shuffle.io.maxRetries (默认值：3)\n\n该参数表示 shuffle read task 从 shuffle write task 所在节点拉取属于自己的数据时，可以重试的最大次数。对于包含大量\nshuffle 操作的作业，建议增加重试最大次数，以提升作业的稳定性。\n\n#### 4\\. spark.shuffle.io.retryWait (默认值：5s)\n\n该参数代表了每次重试拉取数据的等待间隔。建议加大间隔时长（比如60s），以增加 shuffle 操作的稳定性。\n\n#### 5\\. spark.shuffle.memoryFraction (默认值：0.2)\n\n该参数表示 Executor 内存中，分配给 shuffle read task\n进行聚合操作的内存比例。如果内存充足，而且很少使用持久化操作，建议调高这个比例，以提高性能。\n\n#### 6\\. spark.shuffle.manager (默认值：sort)\n\n对于业务逻辑不需要对数据进行排序，可以考虑使用 bypass 机制或优化的 HashShuffleManager 来提高性能。\n\n#### 7\\. spark.shuffle.sort.bypassMergeThreshold (默认值：200)\n\n当 ShuffleManager 为 SortShuffleManager 时，如果 shuffle read task\n的数量小于这个阈值（默认是200），则 shuffle write 过程中不会进行排序操作。合理调大此参数可以减少排序的性能开销。\n\n#### 8\\. spark.shuffle.consolidateFiles (默认值：false)\n\n如果使用 HashShuffleManager，该参数有效。开启 consolidate 机制可以合并 shuffle write\n的输出文件，减少磁盘IO开销，提升性能。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/587563864699457536?sourceSSR=users",
        "title": "管氏面试",
        "content": "1。请谈一谈hashmap底层原理\n\n2。concurrenthashmap底层原理\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/586839875723239424?sourceSSR=users",
        "title": "百面嵌入式专栏（面试题）如何查看Linux 内核打印",
        "content": "![](https://uploadfiles.nowcoder.com/images/20240213/5503357_1707785511415/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n### 文章目录\n\n  * 一、方法一：dmseg 命令\n  * 二、方法二：查看 kmsg 文件\n  * 三、方法三：调整内核打印等级\n\n# 一、方法一：dmseg 命令\n\n在终端使用 `dmseg` 命令可以获取内核打印信息，该命令的具体使用方法如下所示：\n\n![](https://uploadfiles.nowcoder.com/files/20240213/5503357_1707785404794/a0a86d6033d14f5fa8420b378af80f97.png)\n\n首先在串口终端使用 “`dmseg`”命令，可以看见相应的内核打印信息已经加载了出来，如下图所示：\n\n![](https://uploadfiles.nowcoder.com/files/20240213/5503357_1707785404889/c564a1121d8b4b98b786360262bbd9e0.png)\n\n然后使用以下组合命令查找`nfs`相关的打印信息，如下图所示：\n\n    \n    \n    dmesg | grep nfs \n    \n    \n\n![](https://uploadfiles.nowcoder.com/files/20240213/5503357_1707785404771/822f9b0dcbe64bb4b58f54c7d54eb38a.png)\n\n至此关于 `dmesg` 命令就讲解演示完成了。\n\n# 二、方法二：查看 kmsg 文件\n\n内核所有的打印信息都会输出到循环缓冲区 ‘’，为了能够方便的在用户空间读取内核打印信息，内核驱动将该循环缓冲区映射到了目录下的文件节点。通过cat\n或者其他应用程序读取的时候可以不断的等待新的，所以访问的方式适合长时间的读取，一旦有新的就可以被\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/586975441475452928?sourceSSR=users",
        "title": "大数据工程师面试题 - Spark 调优（八）",
        "content": "> **我是****大数据欧老师****，曾在互联网某大厂任大数据负责人，从业大数据领域近 10 年，全网粉丝\n> 5000+，从很多候选人的面试和咨询中复盘了****大数据工程师的面试全流程****，如果你有求职大数据工程师的计划，欢迎找我聊一聊！**\n\n## 数据倾斜的解决方案\n\n### 解决方案五：将reduce join转为map join\n\n  * 方案适用场景：在对RDD使用join类操作，或者是在Spark SQL中使用join语句时，而且join操作中的一个RDD或表的数据量比较小（比如几百M或者一两G），比较适用此方案。\n  * 方案实现思路：不使用join算子进行连接操作，而使用Broadcast变量与map类算子实现join操作，进而完全规避掉shuffle类的操作，彻底避免数据倾斜的发生和出现。将较小RDD中的数据直接通过collect算子拉取到Driver端的内存中来，然后对其创建一个Broadcast变量；接着对另外一个RDD执行map类算子，在算子函数内，从Broadcast变量中获取较小RDD的全量数据，与当前RDD的每一条数据按照连接key进行比对，如果连接key相同的话，那么就将两个RDD的数据用你需要的方式连接起来。\n  * 方案实现原理：普通的join是会走shuffle过程的，而一旦shuffle，就相当于会将相同key的数据拉取到一个shuffle read task中再进行join，此时就是reduce join。但是如果一个RDD是比较小的，则可以采用广播小RDD全量数据+map算子来实现与join同样的效果，也就是map join，此时就不会发生shuffle操作，也就不会发生数据倾斜。具体原理如下图所示。\n\n#### 方案优缺点\n\n  * 方案优点：对join操作导致的数据倾斜，效果非常好，因为根本就不会发生shuffle，也就根本不会发生数据倾斜。\n  * 方案缺点：适用场景较少，因为这个方案只适用于一个大表和一个小表的情况。毕竟我们需要将小表进行广播，此时会比较消耗内存资源，driver和每个Executor内存中都会驻留一份小RDD的全量数据。如果我们广播出去的RDD数据比较大，比如10G以上，那么就可能发生内存溢出了。因此并不适合两个都是大表的情况。\n\n    \n    \n    // 首先将数据量比较小的RDD的数据，collect到Driver中来。\n    List<Tuple2<Long, Row>> rdd1Data = rdd1.collect()\n    // 然后使用Spark的广播功能，将小RDD的数据转换成广播变量，这样每个Executor就只有一份RDD的数据。\n    // 可以尽可能节省内存空间，并且减少网络传输性能开销。\n    final Broadcast<List<Tuple2<Long, Row>>> rdd1DataBroadcast = sc.broadcast(rdd1Data);\n      \n    // 对另外一个RDD执行map类操作，而不再是join类操作。\n    JavaPairRDD<String, Tuple2<String, Row>> joinedRdd = rdd2.mapToPair(\n            new PairFunction<Tuple2<Long,String>, String, Tuple2<String, Row>>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Tuple2<String, Tuple2<String, Row>> call(Tuple2<Long, String> tuple)\n                        throws Exception {\n                    // 在算子函数中，通过广播变量，获取到本地Executor中的rdd1数据。\n                    List<Tuple2<Long, Row>> rdd1Data = rdd1DataBroadcast.value();\n                    // 可以将rdd1的数据转换为一个Map，便于后面进行join操作。\n                    Map<Long, Row> rdd1DataMap = new HashMap<Long, Row>();\n                    for(Tuple2<Long, Row> data : rdd1Data) {\n                        rdd1DataMap.put(data._1, data._2);\n                    }\n                    // 获取当前RDD数据的key以及value。\n                    String key = tuple._1;\n                    String value = tuple._2;\n                    // 从rdd1数据Map中，根据key获取到可以join到的数据。\n                    Row rdd1Value = rdd1DataMap.get(key);\n                    return new Tuple2<String, String>(key, new Tuple2<String, Row>(value, rdd1Value));\n                }\n            });\n      \n    // 这里得提示一下。\n    // 上面的做法，仅仅适用于rdd1中的key没有重复，全部是唯一的场景。\n    // 如果rdd1中有多个相同的key，那么就得用flatMap类的操作，在进行join的时候不能用map，而是得遍历rdd1所有数据进行join。\n    // rdd2中每条数据都可能会返回多条join后的数据。\n    \n    \n\n### 解决方案六：采样倾斜key并分拆join操作\n\n  * 方案适用场景：两个RDD/Hive表进行join的时候，如果数据量都比较大，无法采用“解决方案五”，那么此时可以看一下两个RDD/Hive表中的key分布情况。如果出现数据倾斜，是因为其中某一个RDD/Hive表中的少数几个key的数据量过大，而另一个RDD/Hive表中的所有key都分布比较均匀，那么采用这个解决方案是比较合适的。\n  * 方案实现思路： * 对包含少数几个数据量过大的key的那个RDD，通过sample算子采样出一份样本来，然后统计一下每个key的数量，计算出来数据量最大的是哪几个key。 * 然后将这几个key对应的数据从原来的RDD中拆分出来，形成一个单独的RDD，并给每个key都打上n以内的随机数作为前缀，而不会导致倾斜的大部分key形成另外一个RDD。 * 接着将需要join的另一个RDD，也过滤出来那几个倾斜key对应的数据并形成一个单独的RDD，将每条数据膨胀成n条数据，这n条数据都按顺序附加一个0~n的前缀，不会导致倾斜的大部分key也形成另外一个RDD。 * 再将附加了随机前缀的独立RDD与另一个膨胀n倍的独立RDD进行join，此时就可以将原先相同的key打散成n份，分散到多个task中去进行join了。 * 而另外两个普通的RDD就照常join即可。 * 最后将两次join的结果使用union算子合并起来即可，就是最终的join结果。\n  * 方案实现原理：对于join导致的数据倾斜，如果只是某几个key导致了倾斜，可以将少数几个key分拆成独立RDD，并附加随机前缀打散成n份去进行join，此时这几个key对应的数据就不会集中在少数几个task上，而是分散到多个task进行join了。具体原理见下图。\n\n#### 方案优缺点\n\n  * 方案优点：对于join导致的数据倾斜，如果只是某几个key导致了倾斜，采用该方式可以用最有效的方式打散key进行join。而且只需要针对少数倾斜key对应的数据进行扩容n倍，不需要对全量数据进行扩容。避免了占用过多内存。\n  * 方案缺点：如果导致倾斜的key特别多的话，比如成千上万个key都导致数据倾斜，那么这种方式也不适合。\n\n    \n    \n    // 首先从包含了少数几个导致数据倾斜key的rdd1中，采样10%的样本数据。\n    JavaPairRDD<Long, String> sampledRDD = rdd1.sample(false, 0.1);\n      \n    // 对样本数据RDD统计出每个key的出现次数，并按出现次数降序排序。\n    // 对降序排序后的数据，取出top 1或者top 100的数据，也就是key最多的前n个数据。\n    // 具体取出多少个数据量最多的key，由大家自己决定，我们这里就取1个作为示范。\n    JavaPairRDD<Long, Long> mappedSampledRDD = sampledRDD.mapToPair(\n            new PairFunction<Tuple2<Long,String>, Long, Long>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Tuple2<Long, Long> call(Tuple2<Long, String> tuple)\n                        throws Exception {\n                    return new Tuple2<Long, Long>(tuple._1, 1L);\n                }     \n            });\n    JavaPairRDD<Long, Long> countedSampledRDD = mappedSampledRDD.reduceByKey(\n            new Function2<Long, Long, Long>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Long call(Long v1, Long v2) throws Exception {\n                    return v1 + v2;\n                }\n            });\n    JavaPairRDD<Long, Long> reversedSampledRDD = countedSampledRDD.mapToPair( \n            new PairFunction<Tuple2<Long,Long>, Long, Long>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Tuple2<Long, Long> call(Tuple2<Long, Long> tuple)\n                        throws Exception {\n                    return new Tuple2<Long, Long>(tuple._2, tuple._1);\n                }\n            });\n    final Long skewedUserid = reversedSampledRDD.sortByKey(false).take(1).get(0)._2;\n      \n    // 从rdd1中分拆出导致数据倾斜的key，形成独立的RDD。\n    JavaPairRDD<Long, String> skewedRDD = rdd1.filter(\n            new Function<Tuple2<Long,String>, Boolean>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Boolean call(Tuple2<Long, String> tuple) throws Exception {\n                    return tuple._1.equals(skewedUserid);\n                }\n            });\n    // 从rdd1中分拆出不导致数据倾斜的普通key，形成独立的RDD。\n    JavaPairRDD<Long, String> commonRDD = rdd1.filter(\n            new Function<Tuple2<Long,String>, Boolean>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Boolean call(Tuple2<Long, String> tuple) throws Exception {\n                    return !tuple._1.equals(skewedUserid);\n                } \n            });\n      \n    // rdd2，就是那个所有key的分布相对较为均匀的rdd。\n    // 这里将rdd2中，前面获取到的key对应的数据，过滤出来，分拆成单独的rdd，并对rdd中的数据使用flatMap算子都扩容100倍。\n    // 对扩容的每条数据，都打上0～100的前缀。\n    JavaPairRDD<String, Row> skewedRdd2 = rdd2.filter(\n             new Function<Tuple2<Long,Row>, Boolean>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Boolean call(Tuple2<Long, Row> tuple) throws Exception {\n                    return tuple._1.equals(skewedUserid);\n                }\n            }).flatMapToPair(new PairFlatMapFunction<Tuple2<Long,Row>, String, Row>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Iterable<Tuple2<String, Row>> call(\n                        Tuple2<Long, Row> tuple) throws Exception {\n                    Random random = new Random();\n                    List<Tuple2<String, Row>> list = new ArrayList<Tuple2<String, Row>>();\n                    for(int i = 0; i < 100; i++) {\n                        list.add(new Tuple2<String, Row>(i + \"_\" + tuple._1, tuple._2));\n                    }\n                    return list;\n                }\n                  \n            });\n     \n    // 将rdd1中分拆出来的导致倾斜的key的独立rdd，每条数据都打上100以内的随机前缀。\n    // 然后将这个rdd1中分拆出来的独立rdd，与上面rdd2中分拆出来的独立rdd，进行join。\n    JavaPairRDD<Long, Tuple2<String, Row>> joinedRDD1 = skewedRDD.mapToPair(\n            new PairFunction<Tuple2<Long,String>, String, String>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Tuple2<String, String> call(Tuple2<Long, String> tuple)\n                        throws Exception {\n                    Random random = new Random();\n                    int prefix = random.nextInt(100);\n                    return new Tuple2<String, String>(prefix + \"_\" + tuple._1, tuple._2);\n                }\n            })\n            .join(skewedUserid2infoRDD)\n            .mapToPair(new PairFunction<Tuple2<String,Tuple2<String,Row>>, Long, Tuple2<String, Row>>() {\n                            private static final long serialVersionUID = 1L;\n                            @Override\n                            public Tuple2<Long, Tuple2<String, Row>> call(\n                                Tuple2<String, Tuple2<String, Row>> tuple)\n                                throws Exception {\n                                long key = Long.valueOf(tuple._1.split(\"_\")[1]);\n                                return new Tuple2<Long, Tuple2<String, Row>>(key, tuple._2);\n                            }\n                        });\n     \n    // 将rdd1中分拆出来的包含普通key的独立rdd，直接与rdd2进行join。\n    JavaPairRDD<Long, Tuple2<String, Row>> joinedRDD2 = commonRDD.join(rdd2);\n     \n    // 将倾斜key join后的结果与普通key join后的结果，uinon起来。\n    // 就是最终的join结果。\n    JavaPairRDD<Long, Tuple2<String, Row>> joinedRDD = joinedRDD1.union(joinedRDD2);\n    \n    \n\n### 解决方案七：使用随机前缀和扩容RDD进行join\n\n  * 方案适用场景：如果在进行join操作时，RDD中有大量的key导致数据倾斜，那么进行分拆key也没什么意义，此时就只能使用最后一种方案来解决问题了。\n  * 方案实现思路： * 该方案的实现思路基本和“解决方案六”类似，首先查看RDD/Hive表中的数据分布情况，找到那个造成数据倾斜的RDD/Hive表，比如有多个key都对应了超过1万条数据。 * 然后将该RDD的每条数据都打上一个n以内的随机前缀。 * 同时对另外一个正常的RDD进行扩容，将每条数据都扩容成n条数据，扩容出来的每条数据都依次打上一个0~n的前缀。 * 最后将两个处理后的RDD进行join即可。\n  * 方案实现原理：将原先一样的key通过附加随机前缀变成不一样的key，然后就可以将这些处理后的“不同key”分散到多个task中去处理，而不是让一个task处理大量的相同key。该方案与“解决方案六”的不同之处就在于，上一种方案是尽量只对少数倾斜key对应的数据进行特殊处理，由于处理过程需要扩容RDD，因此上一种方案扩容RDD后对内存的占用并不大；而这一种方案是针对有大量倾斜key的情况，没法将部分key拆分出来进行单独处理，因此只能对整个RDD进行数据扩容，对内存资源要求很高。\n\n#### 方案优缺点\n\n  * 方案优点：对join类型的数据倾斜基本都可以处理，而且效果也相对比较显著，性能提升效果非常不错。\n  * 方案缺点：该方案更多的是缓解数据倾斜，而不是彻底避免数据倾斜。而且需要对整个RDD进行扩容，对内存资源要求很高。\n  * 方案实践经验：曾经开发一个数据需求的时候，发现一个join导致了数据倾斜。优化之前，作业的执行时间大约是60分钟左右；使用该方案优化之后，执行时间缩短到10分钟左右，性能提升了6倍。\n\n    \n    \n    // 首先将其中一个key分布相对较为均匀的RDD膨胀100倍。\n    JavaPairRDD<String, Row> expandedRDD = rdd1.flatMapToPair(\n            new PairFlatMapFunction<Tuple2<Long,Row>, String, Row>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Iterable<Tuple2<String, Row>> call(Tuple2<Long, Row> tuple)\n                        throws Exception {\n                    List<Tuple2<String, Row>> list = new ArrayList<Tuple2<String, Row>>();\n                    for(int i = 0; i < 100; i++) {\n                        list.add(new Tuple2<String, Row>(0 + \"_\" + tuple._1, tuple._2));\n                    }\n                    return list;\n                }\n            });\n      \n    // 其次，将另一个有数据倾斜key的RDD，每条数据都打上100以内的随机前缀。\n    JavaPairRDD<String, String> mappedRDD = rdd2.mapToPair(\n            new PairFunction<Tuple2<Long,String>, String, String>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Tuple2<String, String> call(Tuple2<Long, String> tuple)\n                        throws Exception {\n                    Random random = new Random();\n                    int prefix = random.nextInt(100);\n                    return new Tuple2<String, String>(prefix + \"_\" + tuple._1, tuple._2);\n                }\n            });\n      \n    // 将两个处理后的RDD进行join即可。\n    JavaPairRDD<String, Tuple2<String, Row>> joinedRDD = mappedRDD.join(expandedRDD);\n    \n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/585534852527669248?sourceSSR=users",
        "title": "新年送福利，互联网大厂内部招聘资料免费送！",
        "content": "今天大年三十，新的一年祝福所有找工作的同学都能拿到理想的offer！职场的同学新的一年顺利成长。感谢同学们和家长一直的支持。今天涛哥拿出互联网大厂内部招聘要求资料，这份资料是大厂内部为面试官总结的面试细节要求，详细总结了每一轮面试侧重点内容及如何考察，非常有参考意义。这份新年礼物免费分享给大家，新的一年加油！\n\n![](https://uploadfiles.nowcoder.com/images/20240209/80264001_1707474102301/CD34F872CA2E197B407B3042C3F8A72C)\n\n校招面试分为技术面非技术面，技术面一般都是1v1,\n非技术岗位有些公司可能涉及群面环节。面试一般分为三面，一面主要考察技术基础，即考察所面试岗位的基础能力。二面主要考察综合素质，即总体系统性能力的考察，三面主要考察软性实力。\n\n![](https://uploadfiles.nowcoder.com/images/20240209/80264001_1707474187018/A8911D2FD24814A74488E4E50551469B)\n\n一面技术基础考察，考察基本技术能力，包括但不限于语言掌握，数据结构/算法、代码编写等。对应我们之前讲解的专业知识的学习，正如我之前课程讲解的，扎实的专业知识复习是保证笔试不挂，一面顺利通过的有力保障。一般一面是工作3年左右的工程师来面试。\n\n二面综合素质面试，考察系统知识、项目经验，判断其逻辑思维，理解学习能力及团队合作意识。对应我之前讲解的项目准备，整体系统知识准备，互联网思想的分解等。请同学们仔细体会。一般二面是工作5年左右的工程师面试。\n\n三面软性实力面试，综合考察自我认知，管理经验，受管理成本，发展潜力等方面考察。我解释下这几个词语。\n\n自我认知，指的是对自己的洞察和理解，包括自我观察和自我评价。考察候选人对自我的认识。\n\n管理经验，候选人是否有管理事物的经验，理论上，有管理经验的人更会了解和遵守组织的特点。\n\n受管理成本，简单说就是是否听话，管理这个人成本预估有多大。\n\n发展潜力，评估候选人在此岗位的发展潜力。一般三面是工作5年以上的管理层manager面试。\n\n![](https://uploadfiles.nowcoder.com/compress/mw1000/images/20240209/80264001_1707474216274/DB67A7247F837EF72CC751D9553506BA)\n\n一面面试要点分析\n\n编程语言：语言掌握情况，实际代码编写能力，写代码是肯定要写的，熟练掌握一门语言，一般考察的代码量不会很大，重点是逻辑的实现，多数人会选择\nc/c++,java\n作答。这块是硬功夫，大家一定多练，而且在纸上和调试环境写代码都要熟悉，有些同学在电脑调试写代码，面对线下面试在纸上反而不会写代码了，这点注意专项训练。\n\n抽象能力：对于问题本身如何抽象，能否映射到具体的方法，算法上去，这点跟我之前讲的互联网三大思维方法，机器语言转换，分解，迭代思想非常相像。考察的形式是我们一般会提出某个实际的题目，让大家分析并最后写出代码实现。\n\n数据结构：对数据结构的理解、应用，能否根据问题进行数据结构变换及解决复杂问题。数据结构是用机器程序化解决问题的第一步，如何将客观世界转换为机器能够高效使用的数字化结构是非常重要的，通常会跟抽象能力一起通过具体题目分析、解答，代码实现来考察。\n\n算法掌握：重点考察对于算法题目的解决思路，以及候选人对问题的理解和判断，注意关键词，解决思路，并没有说完全实现，所以思路和问题的理解、分析是我们最看重的。大家务必重视并理解。\n\n系统知识：系统的整体认识及核心问题理解，如 Linux 内存分配方法，CPU 调度，tcp/ip实现等。这里指的就是操作系统，网络等知识。大家务必注意。\n\n从一面的考察点可以看到，完美的跟我之前跟大家讲的复习内容及思想契合，同时大家一定要注意，你们的专业课才是最核心的东西，很多同学都告诉我他对于找工作很慌张，感觉目前流行的技术都不会，比如某个框架，某个最新的技术等，其实这些不是我们最看中，这些更多是锦上添花的事情，多会一些我们会认为这个同学学习能力强，主动性强，有特长，但是基础的数据结构，算法等专业基础知识及运用的能力才是最重要的。大家一定要正确理解，避免复习走偏方向。\n\n![](https://uploadfiles.nowcoder.com/compress/mw1000/images/20240209/80264001_1707474232907/C7240C44492CF39B65AFDB8D0FE9320F)\n\n二面面试要点分析\n\n技术广度与深度，考察候选人在广度或深度上的认识和表现。考察技术的广度和深度，比如你会 java，广度上会 java 的 web\n开发，spring框架，服务器开发等等广度技术，深度，比如深入了解 jvm 虚拟机，研究过源码等。通常根据简历擅长内容或项目中用到的技术来展开考察。\n\n主动性：工作积极主动，善于获得资源来解决问题。这种能力是我面试比较看中的，做事情主动机灵的同学我比较喜欢。\n\n项目经验：项目本身的复杂程度，和岗位的相关性，面试者在项目里面的职责，是否负责架构设计，核心程序编写等。此处是项目经验，之前我已经详细讲解过此处的内容和备战方法，这里就不在细讲了，请同学们认真准备。\n\n学习能力：积极的获取与工作有关的信息和知识，并对其进行加工和理解，以不断更新知识结构，提高能力。互联网发展很快，技术层出不穷，同时系统不断演化，需要快速迭代，需要学习能力强的同学，这点会\nmerge 到项目中或在简历中来考察。比如我会问候选人最近在看什么技术类书籍，里面核心观点和启发讲一讲自己的思考等。\n\n团队合作：能够有效倾听，清晰的表达自己的观点，愿意帮助或协助他人做事，喜欢集体活动，与周围人和谐相处。这些内容在面试聊的过程中我们会逐步展开，大家在表述和简历呈现上要适当的表现。\n\n![](https://uploadfiles.nowcoder.com/compress/mw1000/images/20240209/80264001_1707474254839/2470005DEAC51BF790E3AE1BAA14FDE7)\n\n三面面试要点分析\n\n责任心：回答问题诚实、负责，办事自信，对以往工作负责。通过对问题及项目考察，交流中考察或察觉候选人的责任心状态。\n\n抗压能力：有耐心，韧劲，在遇到批评、指责、压力或受到冲击时，能够克制、容忍、理智的对待。此处考察主要体现在两方面，一方面通过对问题及项目考察，交流中考察候选人此方面的状态。另一方面通过抗压考察，如轮番提问，打击式提问等考察候选人的现场抗压能力。\n\n自我认知：能够客观、正确的评价自己的优势和不足，并努力改进。\n\n适应性：能够根据变化灵活采取应对方式，达成目标。\n\n管理经验及职业意识，是否具有大局观，领导力，判断力，执行力等。\n\n总之就是从各方面考察候选人在性格、做事，抗压、责任心、自我认识等各个详细的子方面候选人是否符合公司选人标准。面试官希望看到的是一个责任心强，做事自信认真，抗压能力强，客观认识自我，努力上进，有很强适应能力等等的一个完美的候选人，同学们在准备和面试过程中重点要尽可能摆事实讲道理的展现自己这些方面的能力。\n\n![](https://uploadfiles.nowcoder.com/images/20240209/80264001_1707474274880/5CF0CF99E0324896123564A1AE562E5E)\n\n对同学们的表现，需要面试官给出评分，按照评分标准给出是否通过及优秀的参考。\n\n![](https://uploadfiles.nowcoder.com/images/20240209/80264001_1707474290057/488D84B191BD0366007BC90F646C2E87)\n\n面试过程要求面试官给出整个过程的面试记录，作为下一轮面试及定级定薪的参考。\n\n![](https://uploadfiles.nowcoder.com/images/20240209/80264001_1707474309365/E36CEBA2CD1170248D72DD5122E392C7)\n\n最后面试官给出面试结论，此面试结论会作为后续或其他面试的参考依据。\n\n新的一年，加油！祝大家新年快乐，龙行龘龘！\n\n******************。\n\n我是涛哥，曾任某互联网大厂技术总监，十年面试过500人，*************************，24年目标帮助1000人求职和成长。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/585209373132103680?sourceSSR=users",
        "title": "小红书｜后端开发日常实习｜一二面（OC）",
        "content": "## 流程\n\n> 2月6号一面，当天二面+OC，2月8号offer\n\n## 一面\n\n全程都在基于项目和实习问\n\n答得不够好的部分问题：\n\n  1. 日志表设计\n  2. 主键为什么一般设置为自增 id（开始思路不清晰，提醒从数据结构和存储角度想后答出来了）\n  3. dynamictp 怎么动态修改线程池参数的，底层原理\n  4. redis 使用 lua 脚本会有什么缺点（单线程阻塞）\n\n反问\n\n1h 后约当天二面\n\n## 二面\n\n也是基于项目和实习，几乎没有八股\n\n实习遇到的难点\n\n讲讲实习中遇到的设计模式\n\n如果把小红书中的\"发布\"功能这个需求给你，你会怎么开发\n\n算法：\n\n买卖股票最佳时机\n\n反问\n\n一二面面试官人都很好，会不时引导思路，氛围也比较轻松，二面反问之后还闲聊了一会，直接表示offer没问题，感恩遇到好面试官\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/586289731063889920?sourceSSR=users",
        "title": "大数据工程师面试题 - Spark 调优（七）",
        "content": "> ​**我是****大数据欧老师****，曾****在互联网某大厂任大数据负责人，从业大数据领域近 10 年，全网粉丝\n> 5000+，从很多候选人的面试和咨询中复盘了****大数据工程师****的面试全流程****，如果你有求职大数据工程师的计划，欢迎找我聊一聊！**\n\n## 某个task莫名其妙内存溢出的情况\n\n这种情况下去定位出问题的代码就比较容易了。我们建议直接看yarn-client模式下本地log的异常栈，或者是通过YARN查看yarn-\ncluster模式下的log中的异常栈。一般来说，通过异常栈信息就可以定位到你的代码中哪一行发生了内存溢出。然后在那行代码附近找找，一般也会有shuffle类算子，此时很可能就是这个算子导致了数据倾斜。\n\n但是大家要注意的是，不能单纯靠偶然的内存溢出就判定发生了数据倾斜。因为自己编写的代码的bug，以及偶然出现的数据异常，也可能会导致内存溢出。因此还是要按照上面所讲的方法，通过Spark\nWeb UI查看报错的那个stage的各个task的运行时间以及分配的数据量，才能确定是否是由于数据倾斜才导致了这次内存溢出。\n\n## 查看导致数据倾斜的key的数据分布情况\n\n知道了数据倾斜发生在哪里之后，通常需要分析一下那个执行了shuffle操作并且导致了数据倾斜的RDD/Hive表，查看一下其中key的分布情况。这主要是为之后选择哪一种技术方案提供依据。针对不同的key分布与不同的shuffle算子组合起来的各种情况，可能需要选择不同的技术方案来解决。\n\n此时根据你执行操作的情况不同，可以有很多种查看key分布的方式：\n\n  1. 如果是Spark SQL中的group by、join语句导致的数据倾斜，那么就查询一下SQL中使用的表的key分布情况。\n  2. 如果是对Spark RDD执行shuffle算子导致的数据倾斜，那么可以在Spark作业中加入查看key分布的代码，比如RDD.countByKey()。然后对统计出来的各个key出现的次数，collect/take到客户端打印一下，就可以看到key的分布情况。\n\n举例来说，对于上面所说的单词计数程序，如果确定了是stage1的reduceByKey算子导致了数据倾斜，那么就应该看看进行reduceByKey操作的RDD中的key分布情况，在这个例子中指的就是pairs\nRDD。如下示例，我们可以先对pairs采样10%的样本数据，然后使用countByKey算子统计出每个key出现的次数，最后在客户端遍历和打印样本数据中各个key的出现次数。\n\n    \n    \n    val sampledPairs = pairs.sample(false, 0.1)\n    val sampledWordCounts = sampledPairs.countByKey()\n    sampledWordCounts.foreach(println(_))\n    \n\n## 数据倾斜的解决方案\n\n### 解决方案一：使用Hive ETL预处理数据\n\n  * 方案适用场景：导致数据倾斜的是Hive表。如果该Hive表中的数据本身很不均匀（比如某个key对应了100万数据，其他key才对应了10条数据），而且业务场景需要频繁使用Spark对Hive表执行某个分析操作，那么比较适合使用这种技术方案。\n  * 方案实现思路：此时可以评估一下，是否可以通过Hive来进行数据预处理（即通过Hive ETL预先对数据按照key进行聚合，或者是预先和其他表进行join），然后在Spark作业中针对的数据源就不是原来的Hive表了，而是预处理后的Hive表。此时由于数据已经预先进行过聚合或join操作了，那么在Spark作业中也就不需要使用原先的shuffle类算子执行这类操作了。\n  * 方案实现原理：这种方案从根源上解决了数据倾斜，因为彻底避免了在Spark中执行shuffle类算子，那么肯定就不会有数据倾斜的问题了。但是这里也要提醒一下大家，这种方式属于治标不治本。因为毕竟数据本身就存在分布不均匀的问题，所以Hive ETL中进行group by或者join等shuffle操作时，还是会出现数据倾斜，导致Hive ETL的速度很慢。我们只是把数据倾斜的发生提前到了Hive ETL中，避免Spark程序发生数据倾斜而已。\n\n#### 方案优缺点\n\n  * 方案优点：实现起来简单便捷，效果还非常好，完全规避掉了数据倾斜，Spark作业的性能会大幅度提升。\n  * 方案缺点：治标不治本，Hive ETL中还是会发生数据倾斜。\n  * 方案实践经验：在一些Java系统与Spark结合使用的项目中，会出现Java代码频繁调用Spark作业的场景，而且对Spark作业的执行性能要求很高，就比较适合使用这种方案。将数据倾斜提前到上游的Hive ETL，每天仅执行一次，只有那一次是比较慢的，而之后每次Java调用Spark作业时，执行速度都会很快，能够提供更好的用户体验。\n  * 项目实践经验：在美团·点评的交互式用户行为分析系统中使用了这种方案，该系统主要是允许用户通过Java Web系统提交数据分析统计任务，后端通过Java提交Spark作业进行数据分析统计。要求Spark作业速度必须要快，尽量在10分钟以内，否则速度太慢，用户体验会很差。所以我们将有些Spark作业的shuffle操作提前到了Hive ETL中，从而让Spark直接使用预处理的Hive中间表，尽可能地减少Spark的shuffle操作，大幅度提升了性能，将部分作业的性能提升了6倍以上。\n\n### 解决方案二：过滤少数导致倾斜的key\n\n  * 方案适用场景：如果发现导致倾斜的key就少数几个，而且对计算本身的影响并不大的话，那么很适合使用这种方案。比如99%的key就对应10条数据，但是只有一个key对应了100万数据，从而导致了数据倾斜。\n  * 方案实现思路：如果我们判断那少数几个数据量特别多的key，对作业的执行和计算结果不是特别重要的话，那么干脆就直接过滤掉那少数几个key。比如，在Spark SQL中可以使用where子句过滤掉这些key或者在Spark Core中对RDD执行filter算子过滤掉这些key。如果需要每次作业执行时，动态判定哪些key的数据量最多然后再进行过滤，那么可以使用sample算子对RDD进行采样，然后计算出每个key的数量，取数据量最多的key过滤掉即可。\n  * 方案实现原理：将导致数据倾斜的key给过滤掉之后，这些key就不会参与计算了，自然不可能产生数据倾斜。\n\n#### 方案优缺点\n\n  * 方案优点：实现简单，而且效果也很好，可以完全规避掉数据倾斜。\n  * 方案缺点：适用场景不多，大多数情况下，导致倾斜的key还是很多的，并不是只有少数几个。\n  * 方案实践经验：在项目中我们也采用过这种方案解决数据倾斜。有一次发现某一天Spark作业在运行的时候突然OOM了，追查之后发现，是Hive表中的某一个key在那天数据异常，导致数据量暴增。因此就采取每次执行前先进行采样，计算出样本中数据量最大的几个key之后，直接在程序中将那些key给过滤掉。\n\n#### 解决方案三：提高shuffle操作的并行度\n\n  * 方案适用场景：如果我们必须要对数据倾斜迎难而上，那么建议优先使用这种方案，因为这是处理数据倾斜最简单的一种方案。\n  * 方案实现思路：在对RDD执行shuffle算子时，给shuffle算子传入一个参数，比如reduceByKey(1000)，该参数就设置了这个shuffle算子执行时shuffle read task的数量。对于Spark SQL中的shuffle类语句，比如group by、join等，需要设置一个参数，即spark.sql.shuffle.partitions，该参数代表了shuffle read task的并行度，该值默认是200，对于很多场景来说都有点过小。\n  * 方案实现原理：增加shuffle read task的数量，可以让原本分配给一个task的多个key分配给多个task，从而让每个task处理比原来更少的数据。举例来说，如果原本有5个key，每个key对应10条数据，这5个key都是分配给一个task的，那么这个task就要处理50条数据。而增加了shuffle read task以后，每个task就分配到一个key，即每个task就处理10条数据，那么自然每个task的执行时间都会变短了。具体原理如下图所示。\n\n#### 方案优缺点\n\n  * 方案优点：实现起来比较简单，可以有效缓解和减轻数据倾斜的影响。\n  * 方案缺点：只是缓解了数据倾斜而已，没有彻底根除问题，根据实践经验来看，其效果有限。\n  * 方案实践经验：该方案通常无法彻底解决数据倾斜，因为如果出现一些极端情况，比如某个key对应的数据量有100万，那么无论你的task数量增加到多少，这个对应着100万数据的key肯定还是会分配到一个task中去处理，因此注定还是会发生数据倾斜的。所以这种方案只能说是在发现数据倾斜时尝试使用的第一种手段，尝试去用嘴简单的方法缓解数据倾斜而已，或者是和其他方案结合起来使用。\n\n#### 解决方案四：两阶段聚合（局部聚合+全局聚合）\n\n  * 方案适用场景：对RDD执行reduceByKey等聚合类shuffle算子或者在Spark SQL中使用group by语句进行分组聚合时，比较适用这种方案。\n  * 方案实现思路：这个方案的核心实现思路就是进行两阶段聚合。第一次是局部聚合，先给每个key都打上一个随机数，比如10以内的随机数，此时原先一样的key就变成不一样的了，比如(hello, 1) (hello, 1) (hello, 1) (hello, 1)，就会变成(1_hello, 1) (1_hello, 1) (2_hello, 1) (2_hello, 1)。接着对打上随机数后的数据，执行reduceByKey等聚合操作，进行局部聚合，那么局部聚合结果，就会变成了(1_hello, 2) (2_hello, 2)。然后将各个key的前缀给去掉，就会变成(hello,2)(hello,2)，再次进行全局聚合操作，就可以得到最终结果了，比如(hello, 4)。\n  * 方案实现原理：将原本相同的key通过附加随机前缀的方式，变成多个不同的key，就可以让原本被一个task处理的数据分散到多个task上去做局部聚合，进而解决单个task处理数据量过多的问题。接着去除掉随机前缀，再次进行全局聚合，就可以得到最终的结果。具体原理见下图。\n\n#### 方案优缺点\n\n  * 方案优点：对于聚合类的shuffle操作导致的数据倾斜，效果是非常不错的。通常都可以解决掉数据倾斜，或者至少是大幅度缓解数据倾斜，将Spark作业的性能提升数倍以上。\n  * 方案缺点：仅仅适用于聚合类的shuffle操作，适用范围相对较窄。如果是join类的shuffle操作，还得用其他的解决方案。\n\n    \n    \n    // 第一步，给RDD中的每个key都打上一个随机前缀。\n    JavaPairRDD<String, Long> randomPrefixRdd = rdd.mapToPair(\n            new PairFunction<Tuple2<Long,Long>, String, Long>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Tuple2<String, Long> call(Tuple2<Long, Long> tuple)\n                        throws Exception {\n                    Random random = new Random();\n                    int prefix = random.nextInt(10);\n                    return new Tuple2<String, Long>(prefix + \"_\" + tuple._1, tuple._2);\n                }\n            });\n      \n    // 第二步，对打上随机前缀的key进行局部聚合。\n    JavaPairRDD<String, Long> localAggrRdd = randomPrefixRdd.reduceByKey(\n            new Function2<Long, Long, Long>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Long call(Long v1, Long v2) throws Exception {\n                    return v1 + v2;\n                }\n            });\n      \n    // 第三步，去除RDD中每个key的随机前缀。\n    JavaPairRDD<Long, Long> removedRandomPrefixRdd = localAggrRdd.mapToPair(\n            new PairFunction<Tuple2<String,Long>, Long, Long>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Tuple2<Long, Long> call(Tuple2<String, Long> tuple)\n                        throws Exception {\n                    long originalKey = Long.valueOf(tuple._1.split(\"_\")[1]);\n                    return new Tuple2<Long, Long>(originalKey, tuple._2);\n                }\n            });\n      \n    // 第四步，对去除了随机前缀的RDD进行全局聚合。\n    JavaPairRDD<Long, Long> globalAggrRdd = removedRandomPrefixRdd.reduceByKey(\n            new Function2<Long, Long, Long>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public Long call(Long v1, Long v2) throws Exception {\n                    return v1 + v2;\n                }\n            });\n    \n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584989027674103808?sourceSSR=users",
        "title": "百面嵌入式专栏（面试题）常用的硬件工具用过哪些？",
        "content": "面试题：常用的硬件工具用过哪些？\n\n答案：\n\n### 文章目录\n\n  * 一、万⽤表\n  * 二、逻辑分析仪\n  * 三、示波器\n\n作为⼀名嵌⼊式开发⼯程师，是有必要对各类常⽤的硬件⼯具有⼀定了解的，你可以不懂怎么使⽤它，但你必须知道它是什么，有什么⽤，在什么时候可以⽤得上。\n\n# 一、万⽤表\n\n万用表可以帮助你测量电压、电阻、电流、导通是否等等，可以说是作为底层开发必备的⼯具之⼀，可以说了解怎么使⽤万⽤表，是嵌⼊式底层开发最基本的技能点。\n\n![](https://uploadfiles.nowcoder.com/files/20240208/5503357_1707344179342/4e90430c149c4fda8a423a222088c59f.png)\n\n  1. 用于\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584896596123435008?sourceSSR=users",
        "title": "24届秋招心得总结（双非本c9硕）",
        "content": "  1. bg[潜水][潜水][潜水]\n  2. 双非本，华五硕，两段大厂实习，后端研发，主攻南方城市（深圳、东莞、广州）。\n  3. 深圳的机会真少，相比上海和北京少太多了，如果对地域没有那么执念的话，去北京和上海的话，工作应该好找多了。\n  4. 秋招收获[静装][静装][静装]﻿﻿\n  5. offer情况（按照时间线）：招行银行【深圳nx _15】、vivo【深圳nx_ 15】，美团【北京（n+4）*15+5】、得物【上海（n+6）*16】、百度【北京（n+8）*16+6】，字节【深圳（n+8）*15+1】。池子中：华为【东莞，要的15级，保温了，投的最晚的一批，开的也比较晚】。\n  6. 排序挂的：阿里国际电商（自我感觉英语口语没回答好挂的）、腾讯视频三面排序一周挂（hr和我说下个面试者更听话些，由于我自己嘴贱说自己字节已经有offer了，导致面试官不确定我会过去）、顺丰二面过后没有消息了。\n  7. 秋招过程[打气][打气][打气]\n  8. 投了六十几家，主攻深圳和南方城市的，面试数不是特别多，大约不超过18家公司约面。目前已经卡双非的学历厂有阿里、oppo、大疆（互联网卡、硬件还好）、tp-link、京东、网易。（1）做了笔试和测评后没消息：中国航信、交融银科、大疆、小红书、科大讯飞、猿辅导、4399、迅雷、虾皮....。（2）直接挂：影石创新、网易雷火、小马智行、拓竹科技、万得、荣耀、oppo、tp-link、创维、真我、微众银行、灵犀互娱、诺瓦星云、哈喽、klook...。还有一些比如中兴、深信服由于笔试没做导致没有面试。\n  9. 做笔试特别浪费时间，很多时候笔试都冲突了，需要抉择一个。我是从2023年5、6月份开始面试的，提前批也投递了一些，像百度是提前批的，早早拿下了，但是结果是真的慢，一直在泡池子。陆陆续续一直在面试，一天多的时候会有三次面试，面试是煎熬的，等待是痛苦的。\n  10. 秋招总结[等offer][等offer][等offer]\n  11. （学历很有用，但没有项目经历管用，能做事比学历管用。这句话是我总结出来的，挂了很多次，基本是由于项目不匹配和项目没回答好挂的）\n  12. 关于准备：后端研发基本就是四大块，面试技巧＞项目＝算法＞八股。 1\\. 第一个是面试技巧，建议没面试过的同学先找找小厂刷个面试经验，增加一点面试技巧，必须准备好的：自我介绍，项目介绍。然后就是自信和说话稳，这里有个小技巧就是不要慌，尽量放慢语速，第一可以消耗面试时间，第二慢语速会让面试官觉得你很稳，自己经常练习一下或者对着镜子练一练。 2\\. leetcode需要刷高热和常见体系体型，一定要保证自己刷过的题目会做。面试的时候会经常出现做过的题目不会做的现象。 3\\. 项目经验和算法可以持平了，你能不能做事，你的项目经历就能体现，当你的简历上项目经历满满的时候，面试官不会问你八股的，就算你算法没有最优答案，你的项目出色，完全可以挑动面试官的心旋，不一定要特别有难度，要体现出技术点，工作量和研发过程。 4\\. 最后一个是八股，八股是必须有前两者的基础可以弱化的，如果算法和项目不够好的话，还是好好打好八股基础，这里推荐一个八股面镜：小林coding讲的比较全面、java的guide，go的可以多看看书。\n  13. 关于薪资 1\\. 脸皮得厚，得学会大胆，先最好调研一下行情，不要被hr带了节奏，hr问你目标薪资多少，先不要急着回答，可以先问一下薪资结构，然后继续展示你的优势，然后可以访问下hr这边可以开到多少，一般hr开出来的是可以让你继续a的薪资，你需要拿出一些offer来argue，并一定要存在，可以拿出相近的互联网公司来a薪资，我有好几家都是说少了，有点可惜。\n  14. 关于公司 1\\. 海投，看着时间点，可以关注一些秋招相关的公众号，会有相关的秋招信息推送，或者可以关注下代码随想录的博主，他那边整理了秋招信息的合集，先尽量准备好了在冲自己心仪的公司，以免自己脏了面评。\n  15. 祝大家都能拿到自己心意的offer。[羞涩][羞涩][羞涩]﻿﻿﻿\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/585964565314150400?sourceSSR=users",
        "title": "大数据工程师面试题 - Spark 调优（六）",
        "content": "#\n\n## 调优概述\n\n有的时候，我们可能会遇到大数据计算中一个最棘手的问题——数据倾斜，此时Spark作业的性能会比期望差很多。数据倾斜调优，就是使用各种技术方案解决不同类型的数据倾斜问题，以保证Spark作业的性能。\n\n## 数据倾斜发生时的现象\n\n绝大多数task执行得都非常快，但个别task执行极慢。比如，总共有1000个task，997个task都在1分钟之内执行完了，但是剩余两三个task却要一两个小时。这种情况很常见。\n\n原本能够正常执行的Spark作业，某天突然报出OOM（内存溢出）异常，观察异常栈，是我们写的业务代码造成的。这种情况比较少见。\n\n## 数据倾斜发生的原理\n\n数据倾斜的原理很简单：在进行shuffle的时候，必须将各个节点上相同的key拉取到某个节点上的一个task来进行处理，比如按照key进行聚合或join等操作。此时如果某个key对应的数据量特别大的话，就会发生数据倾斜。比如大部分key对应10条数据，但是个别key却对应了100万条数据，那么大部分task可能就只会分配到10条数据，然后1秒钟就运行完了；但是个别task可能分配到了100万数据，要运行一两个小时。因此，整个Spark作业的运行进度是由运行时间最长的那个task决定的。\n\n因此出现数据倾斜的时候，Spark作业看起来会运行得非常缓慢，甚至可能因为某个task处理的数据量过大导致内存溢出。\n\n下图就是一个很清晰的例子：hello这个key，在三个节点上对应了总共7条数据，这些数据都会被拉取到同一个task中进行处理；而world和you这两个key分别才对应1条数据，所以另外两个task只要分别处理1条数据即可。此时第一个task的运行时间可能是另外两个task的7倍，而整个stage的运行速度也由运行最慢的那个task所决定。\n\n## 如何定位导致数据倾斜的代码\n\n数据倾斜只会发生在shuffle过程中。这里给大家罗列一些常用的并且可能会触发shuffle操作的算子：distinct、groupByKey、reduceByKey、aggregateByKey、join、cogroup、repartition等。出现数据倾斜时，可能就是你的代码中使用了这些算子中的某一个所导致的。\n\n## 某个task执行特别慢的情况\n\n首先要看的，就是数据倾斜发生在第几个stage中。\n\n如果是用yarn-client模式提交，那么本地是直接可以看到log的，可以在log中找到当前运行到了第几个stage；如果是用yarn-\ncluster模式提交，则可以通过Spark Web UI来查看当前运行到了第几个stage。此外，无论是使用yarn-client模式还是yarn-\ncluster模式，我们都可以在Spark Web\nUI上深入看一下当前这个stage各个task分配的数据量，从而进一步确定是不是task分配的数据不均匀导致了数据倾斜。\n\n比如下图中，倒数第三列显示了每个task的运行时间。明显可以看到，有的task运行特别快，只需要几秒钟就可以运行完；而有的task运行特别慢，需要几分钟才能运行完，此时单从运行时间上看就已经能够确定发生数据倾斜了。此外，倒数第一列显示了每个task处理的数据量，明显可以看到，运行时间特别短的task只需要处理几百KB的数据即可，而运行时间特别长的task需要处理几千KB的数据，处理的数据量差了10倍。此时更加能够确定是发生了数据倾斜。\n\n知道数据倾斜发生在哪一个stage之后，接着我们就需要根据stage划分原理，推算出来发生倾斜的那个stage对应代码中的哪一部分，这部分代码中肯定会有一个shuffle类算子。精准推算stage与代码的对应关系，需要对Spark的源码有深入的理解，这里我们可以介绍一个相对简单实用的推算方法：只要看到Spark代码中出现了一个shuffle类算子或者是Spark\nSQL的SQL语句中出现了会导致shuffle的语句（比如group by语句），那么就可以判定，以那个地方为界限划分出了前后两个stage。\n\n这里我们就以Spark最基础的入门程序——单词计数来举例，如何用最简单的方法大致推算出一个stage对应的代码。如下示例，在整个代码中，只有一个reduceByKey是会发生shuffle的算子，因此就可以认为，以这个算子为界限，会划分出前后两个stage。\n* stage0，主要是执行从textFile到map操作，以及执行shuffle write操作。shuffle\nwrite操作，我们可以简单理解为对pairs RDD中的数据进行分区操作，每个task处理的数据中，相同的key会写入同一个磁盘文件内。 *\nstage1，主要是执行从reduceByKey到collect操作，stage1的各个task一开始运行，就会首先执行shuffle\nread操作。执行shuffle\nread操作的task，会从stage0的各个task所在节点拉取属于自己处理的那些key，然后对同一个key进行全局性的聚合或join等操作，在这里就是对key的value值进行累加。stage1在执行完reduceByKey算子之后，就计算出了最终的wordCounts\nRDD，然后会执行collect算子，将所有数据拉取到Driver上，供我们遍历和打印输出。\n\n    \n    \n    val conf = new SparkConf()\n    val sc = new SparkContext(conf)\n     \n    val lines = sc.textFile(\"hdfs://...\")\n    val words = lines.flatMap(_.split(\" \"))\n    val pairs = words.map((_, 1))\n    val wordCounts = pairs.reduceByKey(_ + _)\n     \n    wordCounts.collect().foreach(println(_))\n    \n    \n\n通过对单词计数程序的分析，希望能够让大家了解最基本的stage划分的原理，以及stage划分后shuffle操作是如何在两个stage的边界处执行的。然后我们就知道如何快速定位出发生数据倾斜的stage对应代码的哪一个部分了。比如我们在Spark\nWeb\nUI或者本地log中发现，stage1的某几个task执行得特别慢，判定stage1出现了数据倾斜，那么就可以回到代码中定位出stage1主要包括了reduceByKey这个shuffle类算子，此时基本就可以确定是由educeByKey算子导致的数据倾斜问题。比如某个单词出现了100万次，其他单词才出现10次，那么stage1的某个task就要处理100万数据，整个stage的速度就会被这个task拖慢。\n\n**大家好，我是大数据欧老师，就职于互联网某头部大厂，超过 8\n年的大数据从业经历。如果你有面试大数据工程师的打算，欢迎找我聊一聊！**[#大数据#](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fsubject%2F6ed2459962cb496f934f559e029799cd)[#大数据工程师#](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fsubject%2F46d84766e27c460a9ec6c92c45f3afdb)[#大数据知识体系#](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fsubject%2F9a2b21c04c094155abf17d0555ab38e6)[#大数据面试#](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fsubject%2Fb11d42e47306432591cd7a97faab9384)[#大数据面经#](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fsubject%2F113b10e760914c6781aaf2b97de143ad)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584910458969243648?sourceSSR=users",
        "title": "百面嵌入式专栏（面试题）什么是Linux路由",
        "content": "![](https://uploadfiles.nowcoder.com/files/20240208/5503357_1707325487020/20210206192444841.gif)\n\n问题：什么是Linux路由\n\n详解如下：\n\n### 文章目录\n\n  * 一、什么是路由\n  * 二、路由配置命令\n\n> 沉淀、分享、成长，让自己和他人都能有所收获！😄\n\n# 一、什么是路由\n\n一张路由表中会有多条路由规则。每一条规则至少包含这三项信息。\n\n  * 目的网络：这个包想去哪儿？\n  * 出口设备：将包从哪个口扔出去？\n  * 下一跳网关：下一个路由器的地址。![](https://uploadfiles.nowcoder.com/files/20240208/5503357_1707325486970/01a657ada36a41c2b987c18ea6b13d89.png)通过 route 命令和 ip route 命令都可以进行查询或者配置。例如，我们设置 ip route add 10.176.48.0/20 via 10.173.32.1 dev eth0，就说明要去 10.176.48.0/20 这个目标网络，要从 eth0 端口出去，经过 10.173.32.1。\n\n# 二、路由配置命令\n\n在Linux中，有几个常用的命令用于查询路由信息。以下是一些常见的路由查询命令：\n\n  * ip route:ip route 命令用于显示和操作路由表。它能够列出系统的当前路由表，包括静态路由和动态路由。示例：\n\n    \n    \n    ip route show\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/585159557572206592?sourceSSR=users",
        "title": "大数据工程师面试题 - Spark 基础调优（五）",
        "content": "#\n\n## 调优概述\n\n在开发完Spark作业之后，就该为作业配置合适的资源了。Spark的资源参数，基本都可以在spark-\nsubmit命令中作为参数设置。很多Spark初学者，通常不知道该设置哪些必要的参数，以及如何设置这些参数，最后就只能胡乱设置，甚至压根儿不设置。资源参数设置的不合理，可能会导致没有充分利用集群资源，作业运行会极其缓慢；或者设置的资源过大，队列没有足够的资源来提供，进而导致各种异常。总之，无论是哪种情况，都会导致Spark作业的运行效率低下，甚至根本无法运行。因此我们必须对Spark作业的资源使用原理有一个清晰的认识，并知道在Spark作业运行过程中，有哪些资源参数是可以设置的，以及如何设置合适的参数值。\n\nSpark作业基本运行原理:![](https://uploadfiles.nowcoder.com/images/20240208/763464184_1707384872122/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n当我们使用spark-\nsubmit提交一个Spark作业后，作业会启动一个对应的Driver进程，Driver进程的位置取决于我们使用的部署方式。Driver进程的任务是占用一定数量的内存和CPU核心，然后申请作业需要的资源。\n\n**资源申请**\n\nDriver进程首先向集群管理器申请资源，这些资源包括在各个工作节点上启动必要数量的Executor进程，每个Executor进程都拥有特定数量的内存和CPU核心。\n\n**任务调度和执行**\n\n获得资源后，Driver进程根据我们编写的作业代码将作业分拆成多个stage，每个stage包含一批task。Driver进程将这些task分配到各个Executor进程执行。task是执行我们编写的一段代码片段的计算单元，每个task处理不同的数据。\n\n**stage及数据处理**\n\n作业以shuffle类算子划分stage，每个stage的所有task完成后，Driver启动下一个stage。下一个stage的task读取上一个stage的输出结果作为输入。当代码执行cache/persist等持久化操作时，每个task计算出的数据也会保存到Executor进程的内存或保存在节点的磁盘文件中。\n\n**Executor内存分布**\n\nExecutor的内存主要有三部分；执行我们的代码默认占用20%的内存，shuffle过程中task对结果进行聚合操作占用20%的内存，RDD持久化占用60%内存。\n\n**task执行速度**\n\ntask的执行速度和每个Executor进程的CPU核心数量直接相关。如果CPU核心数量充足，并且分配给的task数量合理，通常可以快速高效地执行这些task。\n\n### 资源参数调优\n\n了解完了Spark作业运行的基本原理之后，对资源相关的参数就容易理解了。所谓的Spark资源参数调优，其实主要就是对Spark运行过程中各个使用资源的地方，通过调节各种参数，来优化资源使用的效率，从而提升Spark作业的执行性能。以下参数就是Spark中主要的资源参数，每个参数都对应着作业运行原理中的某个部分，我们同时也给出了一个调优的参考值。\n\n  * num-executors： 这个参数设置Spark作业的执行器(Executor)数量。默认情况下，如果不设置，系统只会启动少量的Executor进程，影响作业运行速度。一般情况下，设置50-100个Executor进程比较合适。\n  * executor-memory： 这个参数设置每个Executor进程的内存，对Spark作业的性能有直接影响。常规来说，设置4G - 8G内存是比较合适的，但具体值还需要根据队列的最大内存限制来决定。\n  * executor-cores： 这个参数用于设置每个Executor进程的CPU core数量，它决定了每个Executor进程并行执行任务的能力。理想值在2-4个，但具体数量需要根据队列的最大CPU core限制和Executor数量来确定。\n  * driver-memory： 这个参数用于设置Driver进程的内存。常规来说，不设置也可以，或者设置1G内存。只有在使用collect算子将RDD的数据全部拉取到Driver上处理时，需要确保Driver的内存足够大。\n  * spark.default.parallelism： 这个参数设置了每个stage的默认task数量，对于Spark作业性能非常关键。推荐的task数量设置为500-1000个。Spark会根据HDFS的block数量设置task数量，如果task数量偏少，前面的Executor设置参数就会失效。\n  * spark.storage.memoryFraction： 这个参数用于设置RDD持久化数据在Executor内存中的占比，默认值是0.6。如果Spark作业中有较多的RDD持久化操作，该参数的值可以适当提高一些。\n  * spark.shuffle.memoryFraction： 这个参数用于设置shuffle操作过程中，进行聚合操作时能够使用的Executor内存的比例，默认值是0.2。如果Spark作业中的RDD持久化操作较少，shuffle操作较多，应降低持久化操作的内存占比，提高shuffle操作的内存占比比例。\n\n资源参数参考示例以下是一份spark-submit命令的示例，大家可以参考一下，并根据自己的实际情况进行调节：\n\n    \n    \n    ./bin/spark-submit \\\n      --master yarn-cluster \\\n      --num-executors 100 \\\n      --executor-memory 6G \\\n      --executor-cores 4 \\\n      --driver-memory 1G \\\n      --conf spark.default.parallelism=1000 \\\n      --conf spark.storage.memoryFraction=0.5 \\\n      --conf spark.shuffle.memoryFraction=0.3 \\\n    \n    \n\n根据实践经验来看，大部分Spark作业经过本次基础篇所讲解的开发调优与资源调优之后，一般都能以较高的性能运行了，足以满足我们的需求。但是在不同的生产环境和项目背景下，可能会遇到其他更加棘手的问题（比如各种数据倾斜），也可能会遇到更高的性能要求。为了应对这些挑战，需要使用更高级的技巧来处理这类问题。在后续的《Spark性能优化指南——高级篇》中，我们会详细讲解数据倾斜调优以及Shuffle调优。\n\n**大家好，我是大数据欧老师，就职于互联网某头部大厂，超过 8 年的大数据从业经历。如果你有面试大数据工程师的打算，欢迎找我聊一聊！**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584905789962231808?sourceSSR=users",
        "title": "百面嵌入式专栏（面试题）如何迅速分析CPU 的性能瓶颈？",
        "content": "![](https://uploadfiles.nowcoder.com/files/20240208/5503357_1707324329892/eda56a76e73648bd900f4dfa36a25185.png)\n\n### 文章目录\n\n  * 一、如何迅速分析CPU 的性能瓶颈\n  * 二、性能指标相互的关联\n  * 三、CPU性能排查工具汇总\n\n> 沉淀、分享、成长，让自己和他人都能有所收获！😄\n\n#\n\n# 问题：如何迅速分析CPU 的性能瓶颈？\n\n解答如下：\n\n# 一、如何迅速分析CPU 的性能瓶颈\n\n📢下图将列出了 `top`、`vmstat` 和 `pidstat` 分别提供的重要的 `CPU`\n指标，并用虚线表示关联关系，对应出了性能分析下一步的方向。\n\n![](https://uploadfiles.nowcoder.com/files/20240208/5503357_1707324329861/17b0e8e39f2e41958b2ba222158de3af.png)\n\n通过这张图你可以发现，这三个命令，几乎包含了所有重要的 CPU 性能指标，比如：\n\n  * 从 `top` 的输出可以得到各种 `CPU` 使用率以及僵尸进程和平均负载等信息。\n  * 从 `vmstat` 的输出可以得到上下文切换次数、中断次数、运行状态和不可中断状态的进程数。\n  * 从 `pidstat` 的输出可以得到进程的用户 `CPU` 使用率、系统 `CPU` 使用率、以及自愿上下文切换和非自愿上下文切换情况。\n\n# 二、性能指标相互的关联\n\n另外，这三个工具输出的很多指标是相互关联的，所以，我也用\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584905759314419712?sourceSSR=users",
        "title": "大数据工程师面试题 - Spark 基础调优（四）",
        "content": "#\n\n## 原则六：使用高性能的算子\n\n除了shuffle相关的算子有优化原则之外，其他的算子也都有着相应的优化原则。\n\n  * 使用reduceByKey/aggregateByKey替代groupByKey:详情见“原则五：使用map-side预聚合的shuffle操作”。\n  * 使用mapPartitions替代普通map:mapPartitions类的算子，一次函数调用会处理一个partition所有的数据，而不是一次函数调用处理一条，性能相对来说会高一些。但是有的时候，使用mapPartitions会出现OOM（内存溢出）的问题。因为单次函数调用就要处理掉一个partition所有的数据，如果内存不够，垃圾回收时是无法回收掉太多对象的，很可能出现OOM异常。所以使用这类操作时要慎重！\n  * 使用foreachPartitions替代foreach: 原理类似于“使用mapPartitions替代map”，也是一次函数调用处理一个partition的所有数据，而不是一次函数调用处理一条数据。在实践中发现，foreachPartitions类的算子，对性能的提升还是很有帮助的。比如在foreach函数中，将RDD中所有数据写MySQL，那么如果是普通的foreach算子，就会一条数据一条数据地写，每次函数调用可能就会创建一个数据库连接，此时就势必会频繁地创建和销毁数据库连接，性能是非常低下；但是如果用foreachPartitions算子一次性处理一个partition的数据，那么对于每个partition，只要创建一个数据库连接即可，然后执行批量插入操作，此时性能是比较高的。实践中发现，对于1万条左右的数据量写MySQL，性能可以提升30%以上。\n  * 使用filter之后进行coalesce操作: 通常对一个RDD执行filter算子过滤掉RDD中较多数据后（比如30%以上的数据），建议使用coalesce算子，手动减少RDD的partition数量，将RDD中的数据压缩到更少的partition中去。因为filter之后，RDD的每个partition中都会有很多数据被过滤掉，此时如果照常进行后续的计算，其实每个task处理的partition中的数据量并不是很多，有一点资源浪费，而且此时处理的task越多，可能速度反而越慢。因此用coalesce减少partition数量，将RDD中的数据压缩到更少的partition之后，只要使用更少的task即可处理完所有的partition。在某些场景下，对于性能的提升会有一定的帮助。\n  * 使用repartitionAndSortWithinPartitions替代repartition与sort类操作:repartitionAndSortWithinPartitions是Spark官网推荐的一个算子，官方建议，如果需要在repartition重分区之后，还要进行排序，建议直接使用repartitionAndSortWithinPartitions算子。因为该算子可以一边进行重分区的shuffle操作，一边进行排序。shuffle与sort两个操作同时进行，比先shuffle再sort来说，性能可能是要高的。\n\n## 原则七：广播大变量\n\n有时在开发过程中，会遇到需要在算子函数中使用外部变量的场景（尤其是大变量，比如100M以上的大集合），那么此时就应该使用Spark的广播（Broadcast）功能来提升性能。\n\n在算子函数中使用到外部变量时，默认情况下，Spark会将该变量复制多个副本，通过网络传输到task中，此时每个task都有一个变量副本。如果变量本身比较大的话（比如100M，甚至1G），那么大量的变量副本在网络中传输的性能开销，以及在各个节点的Executor中占用过多内存导致的频繁GC，都会极大地影响性能。\n\n因此对于上述情况，如果使用的外部变量比较大，建议使用Spark的广播功能，对该变量进行广播。广播后的变量，会保证每个Executor的内存中，只驻留一份变量副本，而Executor中的task执行时共享该Executor中的那份变量副本。这样的话，可以大大减少变量副本的数量，从而减少网络传输的性能开销，并减少对Executor内存的占用开销，降低GC的频率。\n\n广播大变量的代码示例\n\n    \n    \n    // 以下代码在算子函数中，使用了外部的变量。\n    // 此时没有做任何特殊操作，每个task都会有一份list1的副本。\n    val list1 = ...\n    rdd1.map(list1...)\n    \n    // 以下代码将list1封装成了Broadcast类型的广播变量。\n    // 在算子函数中，使用广播变量时，首先会判断当前task所在Executor内存中，是否有变量副本。\n    // 如果有则直接使用；如果没有则从Driver或者其他Executor节点上远程拉取一份放到本地Executor内存中。\n    // 每个Executor内存中，就只会驻留一份广播变量副本。\n    val list1 = ...\n    val list1Broadcast = sc.broadcast(list1)\n    rdd1.map(list1Broadcast...)\n    \n    \n\n## 原则八：使用Kryo优化序列化性能\n\n在Spark中，主要有三个地方涉及到了序列化：\n\n  * 在算子函数中使用到外部变量时，该变量会被序列化后进行网络传输（见“原则七：广播大变量”中的讲解）。\n  * 将自定义的类型作为RDD的泛型类型时（比如JavaRDD，Student是自定义类型），所有自定义类型对象，都会进行序列化。因此这种情况下，也要求自定义的类必须实现Serializable接口。\n  * 使用可序列化的持久化策略时（比如MEMORY_ONLY_SER），Spark会将RDD中的每个partition都序列化成一个大的字节数组。\n\n对于这三种出现序列化的地方，我们都可以通过使用Kryo序列化类库，来优化序列化和反序列化的性能。Spark默认使用的是Java的序列化机制，也就是ObjectOutputStream/ObjectInputStream\nAPI来进行序列化和反序列化。但是Spark同时支持使用Kryo序列化库，Kryo序列化类库的性能比Java序列化类库的性能要高很多。官方介绍，Kryo序列化机制比Java序列化机制，性能高10倍左右。Spark之所以默认没有使用Kryo作为序列化类库，是因为Kryo要求最好要注册所有需要进行序列化的自定义类型，因此对于开发者来说，这种方式比较麻烦。\n\n以下是使用Kryo的代码示例，我们只要设置序列化类，再注册要序列化的自定义类型即可（比如算子函数中使用到的外部变量类型、作为RDD泛型类型的自定义类型等）：\n\n    \n    \n    // 创建SparkConf对象。\n    val conf = new SparkConf().setMaster(...).setAppName(...)\n    // 设置序列化器为KryoSerializer。\n    conf.set(\"spark.serializer\", \"org.apache.spark.serializer.KryoSerializer\")\n    // 注册要序列化的自定义类型。\n    conf.registerKryoClasses(Array(classOf[MyClass1], classOf[MyClass2]))\n    \n    \n\n## 原则九：优化数据结构\n\nJava中，有三种类型比较耗费内存：\n\n  * 对象，每个Java对象都有对象头、引用等额外的信息，因此比较占用内存空间。\n  * 字符串，每个字符串内部都有一个字符数组以及长度等额外信息。\n  * 集合类型，比如HashMap、LinkedList等，因为集合类型内部通常会使用一些内部类来封装集合元素，比如Map.Entry。\n\n因此Spark官方建议，在Spark编码实现中，特别是对于算子函数中的代码，尽量不要使用上述三种数据结构，尽量使用字符串替代对象，使用原始类型（比如Int、Long）替代字符串，使用数组替代集合类型，这样尽可能地减少内存占用，从而降低GC频率，提升性能。\n\n但是在笔者的编码实践中发现，要做到该原则其实并不容易。因为我们同时要考虑到代码的可维护性，如果一个代码中，完全没有任何对象抽象，全部是字符串拼接的方式，那么对于后续的代码维护和修改，无疑是一场巨大的灾难。同理，如果所有操作都基于数组实现，而不使用HashMap、LinkedList等集合类型，那么对于我们的编码难度以及代码可维护性，也是一个极大的挑战。因此笔者建议，在可能以及合适的情况下，使用占用内存较少的数据结构，但是前提是要保证代码的可维护性。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584891854827667456?sourceSSR=users",
        "title": "嵌入式面经111题答案汇总_含技术答疑_嵌入式三大项目分享",
        "content": "> 111道嵌入式面试题答案汇总专栏链接（承诺免费技术答疑） -->\n> [《嵌入式/C++面试题解析大全》](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.nowcoder.net%2Fzhuanlan%2F3m2ONj)\n\n# 1、简介\n\n本人是2020年毕业于广东工业大学研究生：许乔丹，有国内大厂CVTE和世界500强企业工作经验，整理**超全面111道嵌入式面试题目答案解析（承诺提供专栏内容免费技术答疑）**\n，本专栏内容主要有：\n\n  * 面试过程口头提问的问题答案汇总，承诺提供免费技术答疑，以及其他的交流，如要怎么入门c++，简历如何写，算法题如何刷等等，实现校招全陪伴！\n\n# 2、项目经验\n\n如果你找的是单片机，那就只要单片机的项目，如果你是嵌入式linux，你可以最多写一个单片机项目，其他都要写嵌入式linux的项目。\n\n如果你找嵌入式linux应用开发工作，也可以写linux驱动项目，但必须有一个应用层的项目。\n\n如果你找嵌入式linux驱动开发项目，最好也要有一个应用层项目，突出你对多进程多线程那些知识点有所了解。\n\n项目数量2-4个，此时就需要靠过往的经验积累了，如果确实没有项目，可以向身边做嵌入式的同学请教一下，快速掌握，同时也分享几个项目供参考：\n\n### 2.1 基于人脸属性识别的嵌入式电影推荐系统（嵌入式人工智能项目、可提供源码）\n\n1）情况：为解决“信息过载”问题，提出基于人脸属性识别的广告推荐系统。\n\n2）目标：独立负责，摄像头捕捉人脸并预测年龄、性别，显示屏可输入用户职业，系统根据此三大信息推荐8部电影并在显示屏显示。\n\n3）行动：搭建RK3399开发板开发环境，通过OpenCV获取摄像头图像，Dlib检测人脸，采用WRN神经网络预测年龄、性别，结合基于用户的协同过滤以及决策树模型进行电影推荐。使用PyQt5设计人机交互界面实现职业获取和电影信息显示。\n\n4）成果：在RK3399开发板可实时获取被推荐人年龄、性别、职业，据此推荐8部电影并将其电影名字和海报图显示在屏幕上。\n\n![alt](https://uploadfiles.nowcoder.com/images/20230830/545613072_1693410727968/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n### 2.2 基于Linux6818开发板的视频播放器（最好的入门项目，可提供源码）\n\n本项目基于嵌入式linux6818开发板，制作一个音视频播放器。开发板移植安装好mplayer，我提前下载了5个mv，使用mplayer命令分别在5个视频里截取某一秒的画面，共得到5张图片，也就是所谓的视频缩略图，将5个缩略图显示在显示屏的右边，当作是播放列表，支持上下滑动浏览播放列表，点击其中某个图片，即可播放对应视频，并实现播放器常见的开始、停止、上下首、音量调节、进度调节、全屏、静音等功能。使用到多进程技术：有名管道、消息队列、信号量；使用到多线程技术：互斥锁、条件变量。\n\n![alt](https://uploadfiles.nowcoder.com/images/20230830/545613072_1693410608066/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n### 2.3 基于Linux6818开发板的智能车库项目（进阶项目，可提供源码）\n\n没错，也是粤嵌6818开发板，搭配触摸屏、USB摄像头、音响，模拟实现真实场景中的智能车库常见功能:\n\n  * 实时视频监控\n  * 自动识别车牌\n  * 自动语音播报\n  * 停车计费\n\n需要使用到V4L2子系统，FrameBuffer子系统、OpenCV、多进程多线程编程、ALSA子系统、智能语音引擎、网络编程、数据库编程等。\n\n![alt](https://uploadfiles.nowcoder.com/images/20230831/545613072_1693411280940/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n# 3、嵌入式111道高频面试题\n\n> **八股文不在于量多，熟悉以下111道题就够啦** 。\n\n整理**超全面111道嵌入式面试题目答案解析（承诺提供专栏内容免费技术答疑）** ，本专栏内容主要有：\n\n  * 面试过程口头提问的问题答案汇总，承诺提供免费技术答疑，以及其他的交流，如要怎么入门c++，简历如何写，算法题如何刷等等，实现校招全陪伴！\n\n## 第一章 进程线程\n\n### 1.1 进程线程的基本概念\n\n  * 1.1.1 什么是进程，线程，彼此有什么区别⭐⭐⭐⭐⭐\n  * 1.1.2多进程、多线程的优缺点⭐⭐⭐⭐\n  * 1.1.3什么时候用进程，什么时候用线程⭐⭐⭐\n  * 1.1.4多进程、多线程同步（通讯）的方法⭐⭐⭐⭐⭐\n  * 1.1.5进程的空间模型⭐⭐⭐⭐\n  * 1.1.6进程线程的状态转换图 什么时候阻塞，什么时候就绪⭐⭐⭐\n  * 1.1.7父进程、子进程的关系以及区别⭐⭐⭐⭐\n  * 1.1.8什么是进程上下文、中断上下文⭐⭐\n  * 1.1.9一个进程可以创建多少线程，和什么有关⭐⭐\n\n### 1.2 并发，同步，异步，互斥，阻塞，非阻塞的理解\n\n  * 1.2.1什么是线程同步和互斥⭐⭐⭐⭐⭐\n  * 1.2.2线程同步与阻塞的关系？同步一定阻塞吗？阻塞一定同步吗？⭐⭐⭐⭐\n  * 1.2.3并发，同步，异步，互斥，阻塞，非阻塞的理解⭐⭐⭐⭐⭐\n\n### 1.3 孤儿进程、僵尸进程、守护进程的概念\n\n  * 1.3.1基本概念⭐⭐⭐⭐⭐\n  * 1.3.2如何创建守护进程：⭐⭐\n  * 1.3.3正确处理僵尸进程的方法⭐⭐⭐⭐\n\n## 第二章 C/C++高频面试题\n\n### 2.1 c和c++区别、概念相关面试题\n\n  * 2.1.1 new和malloc的区别⭐⭐⭐⭐⭐\n  * 2.1.2 malloc的底层实现⭐⭐⭐⭐\n  * 2.1.3在1G内存的计算机中能否malloc(1.2G)？为什么？⭐⭐\n  * 2.1.4指针与引用的相同和区别；如何相互转换？⭐⭐⭐⭐⭐\n  * 2.1.5 C语言检索内存情况 内存分配的方式⭐⭐⭐\n  * 2.1.6 extern”C” 的作用⭐⭐⭐\n  * 2.1.7头文件声明时加extern定义时不要加 因为extern可以多次声明，但只有一个定义⭐⭐⭐⭐\n  * 2.1.8函数参数压栈顺序，即关于__stdcall和__cdecl调用方式的理解⭐⭐⭐\n  * 2.1.9重写memcpy()函数需要注意哪些问题⭐⭐\n  * 2.1.10数组到底存放在哪里⭐⭐⭐\n  * 2.1.11 struct和class的区别 ⭐⭐⭐⭐⭐\n  * 2.1.12 char和int之间的转换；⭐⭐⭐\n  * 2.1.13 static的用法（定义和用途）⭐⭐⭐⭐⭐\n  * 2.1.14 static的用法（定义和用途）⭐⭐⭐⭐⭐\n  * 2.1.15const常量和#define的区别（编译阶段、安全性、内存占用等） ⭐⭐⭐⭐\n  * 2.1.16 volatile作用和用法 ⭐⭐⭐⭐⭐\n  * 2.1.17有常量指针 指针常量 常量引用 没有 引用常量⭐⭐⭐\n  * 2.1.18没有指向引用的指针，因为引用是没有地址的，但是有指针的引用⭐⭐⭐\n  * 2.1.19c/c++中变量的作用域⭐⭐⭐⭐⭐\n  * 2.1.20 c++中类型转换机制？各适用什么环境？dynamic_cast转换失败时，会出现什么情况？⭐⭐⭐\n\n### 2.2 继承、多态相关面试题 ⭐⭐⭐⭐⭐\n\n  * 2.2.1继承和虚继承 ⭐⭐⭐⭐⭐\n  * 2.2.2多态的类，内存布局是怎么样的 ⭐⭐⭐⭐⭐\n  * 2.2.3被隐藏的基类函数如何调用或者子类调用父类的同名函数和父类成员变量 ⭐⭐⭐⭐⭐\n  * 2.2.4多态实现的三个条件、实现的原理 ⭐⭐⭐⭐⭐\n  * 2.2.5对拷贝构造函数 深浅拷贝 的理解 拷贝构造函数作用及用途？什么时候需要自定义拷贝构造函数？⭐⭐⭐\n  * 2.2.6析构函数可以抛出异常吗？为什么不能抛出异常？除了资源泄露，还有其他需考虑的因素吗？⭐⭐⭐\n  * 2.2.7什么情况下会调用拷贝构造函数（三种情况）⭐⭐⭐\n  * 2.2.8析构函数一般写成虚函数的原因⭐⭐⭐⭐⭐\n  * 2.2.9构造函数为什么一般不定义为虚函数⭐⭐⭐⭐⭐\n  * 2.2.10什么是纯虚函数⭐⭐⭐⭐⭐\n  * 2.2.11静态绑定和动态绑定的介绍⭐⭐⭐⭐\n  * 2.2.12 C++所有的构造函数 ⭐⭐⭐\n  * 2.2.13重写、重载、覆盖的区别⭐⭐⭐⭐⭐\n  * 2.2.14成员初始化列表的概念，为什么用成员初始化列表会快一些（性能优势）？⭐⭐⭐⭐\n  * 2.2.15如何避免编译器进行的隐式类型转换；（explicit）⭐⭐⭐⭐\n\n## 第三章 网络编程\n\n### 3.1 TCP UDP\n\n  * 3.1.1 TCP、UDP的区别 ⭐⭐⭐⭐⭐\n  * 3.1.2 TCP、UDP的优缺点⭐⭐⭐\n  * 3.1.3 TCP UDP适用场景⭐⭐⭐\n  * 3.1.4 TCP为什么是可靠连接⭐⭐⭐⭐\n  * 3.1.5典型网络模型，简单说说有哪些；⭐⭐⭐\n  * 3.1.6 Http1.1和Http1.0的区别⭐⭐⭐\n  * 3.1.7 URI（统一资源标识符）和URL（统一资源定位符）之间的区别⭐⭐\n\n### 3.2 三次握手、四次挥手\n\n  * 3.2.1什么是三次握手⭐⭐⭐⭐⭐\n  * 3.2.2为什么三次握手中客户端还要发送一次确认呢？可以二次握手吗？⭐⭐⭐⭐\n  * 3.2.3为什么服务端易受到SYN攻击？⭐⭐⭐⭐\n  * 3.2.4什么是四次挥手⭐⭐⭐⭐⭐\n  * 3.2.5为什么客户端最后还要等待2MSL？⭐⭐⭐⭐\n  * 3.2.6为什么建立连接是三次握手，关闭连接确是四次挥手呢？⭐⭐⭐⭐\n\n## 第四章 常见算法\n\n### 4.1 排序算法\n\n  * 4.1.1各种排序算法的时间空间复杂度、稳定性⭐⭐⭐⭐⭐\n  * 4.1.2各种排序算法什么时候有最好情况、最坏情况（尤其是快排） ⭐⭐⭐⭐\n  * 4.1.3冒泡排序⭐⭐⭐⭐\n  * 4.1.4选择排序⭐⭐⭐⭐\n  * 4.1.5插入排序⭐⭐⭐⭐\n  * 4.1.6希尔排序⭐⭐⭐⭐\n  * 4.1.7归并排序⭐⭐⭐⭐\n  * 4.1.8快速排序⭐⭐⭐⭐⭐\n  * 4.1.9快排的partition函数与归并的Merge函数⭐⭐⭐\n\n### 4.2 STL库相关\n\n  * 4.2.1 vector list异同⭐⭐⭐⭐⭐\n  * 4.2.2 vector内存是怎么增长的vector的底层实现⭐⭐⭐⭐\n  * 4.2.3 vector和deque的比较⭐⭐⭐⭐\n  * 4.2.4为什么stl里面有sort函数list里面还要再定义一个sort⭐⭐⭐\n  * 4.2.5 STL底层数据结构实现⭐⭐⭐⭐\n  * 4.2.6利用迭代器删除元素会发生什么？⭐⭐⭐⭐\n  * 4.2.7 map是如何实现的，查找效率是多少⭐⭐⭐⭐⭐\n  * 4.2.8几种模板插入的时间复杂度 ⭐⭐⭐⭐⭐\n\n## 第五章 Linux操作系统常见面试题\n\n### 5.1 Linux内核相关\n\n  * 5.1.1 Linux内核的组成⭐⭐\n  * 5.1.2用户空间与内核通信方式有哪些？⭐⭐⭐⭐⭐\n  * 5.1.3系统调用read()/write()，内核具体做了哪些事情⭐⭐\n  * 5.1.4系统调用的作用⭐⭐⭐⭐⭐\n  * 5.1.5内核态，用户态的区别⭐⭐⭐⭐⭐\n  * 5.1.6 bootloader内核 根文件的关系⭐⭐⭐⭐\n  * 5.1.7 Bootloader多数有两个阶段的启动过程：⭐⭐⭐\n  * 5.1.8 linux的内核是由bootloader装载到内存中的？⭐⭐⭐\n  * 5.1.9为什么需要BootLoader⭐⭐⭐⭐\n  * 5.1.10 Linux内核同步方式总结⭐⭐⭐⭐\n  * 5.1.11为什么自旋锁不能睡眠 而在拥有信号量时就可以？⭐⭐⭐⭐\n  * 5.1.12 linux下检查内存状态的命令⭐⭐⭐\n\n### 5.2 其他操作系统常见面试题\n\n  * 5.2.1大小端的区别以及各自的优点，哪种时候用⭐⭐⭐⭐⭐\n  * 5.2.2 一个程序从开始运行到结束的完整过程（四个过程）⭐⭐⭐⭐⭐\n  * 5.2.3什么是堆，栈，内存泄漏和内存溢出？⭐⭐⭐⭐\n  * 5.2.4堆和栈的区别⭐⭐⭐⭐⭐\n  * 5.2.5死锁的原因、条件 创建一个死锁，以及如何预防⭐⭐⭐⭐⭐\n  * 5.2.6硬链接与软链接的区别；⭐⭐⭐⭐⭐\n  * 5.2.7虚拟内存，虚拟地址与物理地址的转换⭐⭐⭐⭐\n  * 5.2.8计算机中，32bit与64bit有什么区别⭐⭐⭐\n  * 5.2.9中断和异常的区别⭐⭐⭐⭐⭐\n  * 5.2.10中断怎么发生，中断处理大概流程⭐⭐⭐⭐\n  * 5.2.11 Linux 操作系统挂起、休眠、关机相关命令⭐⭐\n  * 5.2.12数据库为什么要建立索引，以及索引的缺点⭐⭐\n\n## 第六章 单片机常见面试题\n\n  * 6.1 CPU 内存 虚拟内存 磁盘/硬盘 的关系⭐⭐⭐\n  * 6.2 CPU内部结构⭐⭐⭐⭐\n  * 6.3 ARM结构处理器简析 ⭐⭐\n  * 6.4波特率是什么，为什么双方波特率要相同，高低波特率有什么区别；⭐⭐⭐⭐\n  * 6.5arm和dsp有什么区别⭐⭐\n  * 6.6 ROM RAM的概念浅析⭐⭐⭐\n  * 6.7 IO口工作方式：上拉输入 下拉输入 推挽输出 开漏输出⭐⭐⭐⭐\n  * 6.8扇区 块 页 簇的概念⭐⭐⭐⭐\n  * 6.9简述处理器在读内存的过程中，CPU核、cache、MMU如何协同工作？画出CPU核、cache、MMU、内存之间的关系示意图加以说明⭐⭐\n  * 6.10请说明总线接口USRT、I2C、USB的异同点（串/并、速度、全/半双工、总线拓扑等）⭐⭐⭐⭐⭐\n  * 6.11什么是异步串口和同步串口⭐⭐⭐⭐⭐\n  * 6.12 I2C时序图⭐⭐⭐⭐⭐\n\n![alt](https://uploadfiles.nowcoder.com/images/20230206/545613072_1675674726255/0761E04C9A30D48C6C719FF49D3CC5ED)\n\n## 高级系列专栏：\n\n## 安卓（安卓系统开发也要掌握）\n\n  * 想通关安卓面试，请看：[《150道安卓高频面试题目录及答案链接》](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F396383934924292096)\n  * 想通关安卓系统面试，请看：[《140道安卓系统Framework面试题目录及答案链接》](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F456922214454091776)\n  * 想进阶安卓开发，请看：[《Android进阶知识体系解析_15大安卓进阶必备知识点》](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F462666906584043520)\n  * 想了解安卓APP完整开发流程，请看：[《安卓APP完整开发流程》](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.nowcoder.net%2Fzhuanlan%2FMQ2yE0)\n  * 想掌握安卓App性能优化，请看：[《安卓性能优化讲解和实战专栏》](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F483578208504250368)\n  * 想掌握Gradle语法，制作Gradle插件，请看：[《安卓Gradle语法解析和实践大全》](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F483578554362380288)\n\n## 嵌入式\n\n  * 想通关嵌入式面试，请看： [《111道嵌入式面试题目录及答案链接》](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F419423154676789248)\n  * 想多掌握几个嵌入式项目，请看：[《6个嵌入式项目交流分享（附源码）》](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F389554189238751232)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584883861381750784?sourceSSR=users",
        "title": "百面嵌入式专栏（面试题）USB设备枚举流程介绍一下？",
        "content": "![](https://uploadfiles.nowcoder.com/files/20240207/5503357_1707319094086/ea207d954eb94881be2683083d00aaf6.png)\n\n> 沉淀、分享、成长，让自己和他人都能有所收获！😄\n\n面试题：USB设备枚举流程介绍一下？\n\n解答：\n\n📢\nUSB协议定义了设备的6种状态，仅在枚举过程种，设备就经历了4个状态的迁移：上电状态(Powered)，默认状态(Default)，地址状态(Address)和配置状态(Configured)（其他两种是连接状态和挂起状态（Suspend））\n\n![](https://uploadfiles.nowcoder.com/files/20240207/5503357_1707319094472/b6a3891dc2e44d3d9ed8049e629f701d.png)\n\n# 一、USB设备的枚举过程分析\n\n![](https://uploadfiles.nowcoder.com/files/20240207/5503357_1707319094010/646bf4b0d072424995ca8fa105edf746.png)\n\n  1. 主机集线器检测到新设备主机集线器监视着每个端口的信号电压，当有新设备接入时便可觉察\n  2. 主机发送GET_STATUS请求每个集线器用中断传输来报告在集线器上的事件。当主机知道了这个事件，它给集线器发送一个GET_STATUS请求来了解更多的消息。返回的消息告诉主机一个设备是什么时候连接的。\n  3. 主机发送SET_FEATURE请求，集线器重启端口当主机知道有一个新的设备时，主机给集线器发送一个SET_FEATURE请求，请求集线器来重启端口。集线器使得设备的USB数据线处于重启（Reset）状态至少10ms。\n  4. 集线器在设备和主机之间建立一个信号通路主机发送一个GET_STATUS请求来验证设备是否激起重启状态。返回的数据有一位表示设备仍然处于重启状态。当集线器释放了重启状态，设备就处于默认状态了，设备已经准备好通过Endpoint 0 的默认流程响应控制传输，即设备现在使用默认地址\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584869081673650176?sourceSSR=users",
        "title": "得物JAVA国际技术实习面经 30min",
        "content": "第一次面试，不过没考算法，面试官没开摄像头，面完之后HR无联系只有邮件发了个问卷，盲猜KPI，发出来攒人品。\n\n自我介绍，主要围绕项目问的问题\n\n1.Citus数据库物流项目\n\n介绍7张表和基本业务逻辑，仓库、订单、顾客、订单、商品、订单项、库存。。。。一些字段的类型简要说了一下\n\n分库分表：为什么要使用仓库id和地区id拼接作为分片键？\n\n\\--\n之前的方案导致了分布不均匀，影响耗时（说了下怎么排查和select看节点的shard_size）保证节点数据分布均衡，缓解数据倾斜情况对于业务耗时的影响，分片键原则（尽量在共有列分片）\n\n当前的分片方案下，之后业务中是否仍然会出现数据倾斜情况？\n\n\\--\n有可能，但是当前分片是在课题给定数据情况下的较优解，如果新增的订单均来自相同的仓库&地区，那么仍然会出现问题，不过项目主要围绕DAO层面SQL完成业务的实现，对于上一层的服务来说，要避免这个情况需要新建订单时，根据库存表、地区表来分配新Order的主键，一方面要保证对应地区的库存够，一方面要让新建的Order尽量均匀的散步到不同节点（我临时想的）\n\n具体是怎么通过索引优化查询的？\n\n\\-- 先讲了一下理论，对所有业务中所有的SQL语句的order by,\nwhere等条件排查，涉及到复合索引的查询要注意顺序（最左匹配），用explain来查看执行计划，对没有覆盖上索引的键，评估具体业务内容之后再单独建立索引，举了个例子，查询欠款额最高的用户，分析了一下这类业务占总量的多少，在balance上构建索引，优化了多少百分比。。。。\n\n2.牛客论坛项目\n\n简单介绍，主要的技术栈是Redis和Kafka，但是面试官没问kafka\n\nRedis数据类型？\n\n\\-- 八股，顺道提了一下网站用bitmap和hyperlog统计DAU和UV\n\n哪里用了redis？\n\n\\-- 保存登录凭证（自动过期，频率高），点赞（去重），二级缓存（redis+caffeine）\n\n点赞功能怎么做的？\n\n\\-- 点赞数用redis来存，为什么？去重，两次点击为取消点赞，两个key-value结构，实体id-点赞用户id，实体id-获赞数量。\n\n点赞怎么持久化？\n\n\\-- 用来给帖子打分的定时任务顺道刷到MySQL的帖子表中\n\n为什么做二级缓存，缓存怎么做的？\n\n\\-- 主要在热门的帖子榜单上做，一个是因为更新稳定，一个是访问频繁，另外本地缓存快，讲了一下网络开销，caffeine+redis，先后怎么访问巴拉巴拉\n\n你的缓存怎么保证一致性？\n\n\\-- 有点宽泛，我分了两点，一个是一致性要求高的情况 --\nrefer黑马点评抢券，一个是一致性可延时的情况，本项目榜单属于后者，定时任务刷盘即可，做修改和删除，如果存在热榜中，那么MQ发一个消息做异步缓存删，然后请求过来重新到数据库更新一道缓存\n\n3.Spring\n\n有了解过AOP吗，底层原理？\n\n\\-- 有的，胡扯了了一下定义和作用，原理是反射获取类中的方法，延申具体应用场景，一个是操作日志记录，一个是统一异常捕获，一个是公共字段填充 --\nrefer苍穹外卖\n\n有了解过动态代理吗？\n\n\\-- 知道这个词但没背，直接坦白，笑\n\n反问：\n\n1.组里做什么业务？\n\n得物国际版的库存方面，对接国内卖家和进口卖家，SaaS短链（听说过，但是具体是啥不知道，不懂装懂点头）\n\n2.有没有二面？\n\n\\-- 问hr，补充说一般技术面是有两面，太极拳？\n\n3.我5月才能回国，日常实习可以那个时候入职吗？\n\n\\-- 问hr\n\n没考算法有点惊讶，对于第一次面试来说，面试官声音比较年轻，给人的感觉很好，个人感觉答的还行，除了动态代理那个问题，其他都扯了一会儿。\n\n年前投了一片，就得物回应了我，安排了面试，年后再说吧，明天去看间谍过家家剧场版了。[摸鱼中]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584802049246740480?sourceSSR=users",
        "title": "2.7 快手边缘bu Java 一面 50min",
        "content": "KPI不解释😥😥\n\n八股:\n\n  * Redis问题, 解决方式\n  * MySQL最左匹配\n  * 实习\n  * Go为什么适合高并发\n  * TCP三次四次\n  * HTTP与RPC区别\n\n算法:\n\n  * 合并俩有序数组\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584868054249619456?sourceSSR=users",
        "title": "百面嵌入式专栏（面试题）华为嵌入式岗位面试题12道",
        "content": "![](https://uploadfiles.nowcoder.com/files/20240207/5503357_1707315373384/2aa41589e2a64491b787048aeb3c0482.png)\n\n### 文章目录\n\n  * 题目：static有什么用途？（请至少说明两种）\n  * 题目：引用与指针有什么区别？\n  * 题目：描述实时系统的基本特性\n  * 题目：全局变量和局部变量在内存中是否有区别？如果有，是什么区别？\n  * 题目：什么是平衡二叉树？\n  * 题目：堆栈溢出一般是由什么原因导致的？\n  * 题目：什么函数不能声明为虚函数？\n  * 题目：冒泡排序算法的时间复杂度是什么？\n  * 题目：Internet采用哪种网络协议？该协议的主要层次结构？\n  * 题目：IP地址的编码分为哪俩部分？\n  * 题目：用户输入M,N值，从1至N开始顺序循环数数，每数到M输出该数值，直至全部输出。写出C程序。\n  * 题目：某32位系统下, C++程序，请计算sizeof 的值.\n\n> 沉淀、分享、成长，让自己和他人都能有所收获！😄\n\n📢本篇我们将对大疆嵌入式工程师【通信/流媒体】岗位进行分析 。\n\n# 题目：static有什么用途？（请至少说明两种）\n\n标准答案：\n\n  1. 在函数体，一个被声明为静态的变量在这一函数被调用过程中维持其值不变。\n  2. 在模块内（但在函数体外），一个被声明为静态的变量可以被模块内所用函数访问，但不能被模块外其它函数访问。它是一个本地的全局变量。\n  3. 在模块内，一个被声明为静态的函数只可被这一模块内的其它函数调用。那就是，这个函数被限制在声明它的模块的本地范围内使用\n\n# 题目：引用与指针有什么区别？\n\n  1. 引用必须被初始化，指针不必。\n  2. 引用初始化以后不能被改变，指针可以改变所指的对象。\n  3. 不存在指向空值的引用，但是存在指向空值的指针。\n\n# 题目：描述实时系统的基本特性\n\n在特定时间内完成特定的任务，实时性与可靠性。\n\n# 题目：全局变量和局部变量在内存中是否有区别？如果有，是什么区别？\n\n全局变量储存在静态数据库，局部变量在堆栈。\n\n# 题目：什么是平衡二叉树？\n\n左右子树都是平衡二叉树 且左右子树的深度差值的绝对值不大于1。\n\n# 题目：堆栈溢出一般是由什么原因导致的？\n\n没有回收垃圾资源。\n\n# 题目：什么函数不能声明为虚函数？\n\nconstructor函数不能声明为虚函数。\n\n# 题目：冒泡排序算法的时间复杂度是什么？\n\n时间复杂度是O(n^2)。\n\n# 题目：Internet采用哪种网络协议？该协议的主要层次结构？\n\nTcp/Ip协议\n\n主要层次结构为： 应用层/传输层/网络层/数据链路层/物理层。\n\n# 题目：IP地址的编码分为哪俩部分？\n\nIP地址由两部分组成，网络号和主机号。不过是要和“子网掩码”按位与上之后才能区分哪些是网络位哪些是主机位。\n\n# 题目：用户输入M,N值，从1至N开始顺序循环数数，每数到M输出该数值，直至全部输出。写出C程序。\n\n循环链表，用取余操作做：\n\n    \n    \n    #include <stdio.h>\n    #i\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584606700427132928?sourceSSR=users",
        "title": "shopee dbaas一二面面经",
        "content": "# 一面\n\n  * 自我介绍\n  * 聊了一下毕业时间问题，投的时候hr说是社招，但我没法尽快入职\n  * 聊实习经历，shopee这个组跟我实习经历很match，问的还挺多\n  * 一道简单的dp\n  * 反问环节：问了一下大概是做什么业务\n\n# 二面\n\n跟一面问的内容基本一样，也是针对实习经历问了很多问题，然后就是聊天，问了一些BQ啥的，比如为什么工作一年去留学，为什么回来之类的\n\n最难绷的是跟我吐槽国内互联网公司，说除了字节和拼多多，其他互联网公司现在的业务都很难。但shopee是东南亚外企，没有北美外企和国内互联网的问题...又跟我说了一堆什么北美华人职场受歧视啥的问题。感觉一股阿里味...\n\n最后问了一下一面面试官说的入职时间问题，面试官说他会跟hr沟通，后面按校招流程去推进。\n\n# hr面\n\n  * 自我介绍\n  * 为什么留学，为什么回来\n  * 什么时间回国，有其他公司offer吗\n  * 期望薪资\n  * 说了一下shopee的薪资结构\n\n# 结果\n\n过了一周问了一下hr，听起来像是排序挂了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584774782969823232?sourceSSR=users",
        "title": "2.7 春招 教育初创三面 Golang 1h40min",
        "content": "面试官人非常好, 在我面试的里面是一个比较重实际 同时自己了解底层的原理, 结束时道新年快乐.\n\n八股(闲聊):\n\n  * 学了什么课, 有编译原理 计算机组成吗(没有)\n  * 为什么要写Raft, 有什么应用\n  * Kafka使用了Raft吗, 我说前面用zk, 后面KRaft, 问我确定吗我说是\n  * Kafka中的KRaft与Raft什么不同(面试官觉得差不多, 我说了一些ISR)\n  * Kafka保证的是CP还是AP, etcd呢(我说看参数)\n  * 我看RPC框架有一个reqID, 怎么实现幂等性(我说db或者redis写id)\n  * 如果多个机器同时收到reqID怎么保证幂等性, 我说没有考虑\n  * 那考虑一下呢, 我说加锁或者撤销写入的id\n  * 如果多个请求同时打, 延迟到下一次失败重试吗(是)\n  * 这种消耗带宽了, 怎么优化(我说id标记两个阶段, 1阶段循环等, **这时候已经很难绷住了**)\n  * 公司有微服务监控吗, 怎么重试一个流程\n  * Go的Cond和select用来干嘛的, 可以相互替换吗(含糊其辞)\n  * Cond chan可以共用吗(我说不可以 一个要mutex)\n  * select怎么监听的多个chan, 阻塞的时候会调度吗()\n  * 我说会, 那谁来通知这个读写事件(可能sysmon??绷不住了, 我说不会, 终于换问题了)\n  * TCP和UDP服务同时用一个端口可以运行吗, 会有什么问题(我说不会)\n\n手撕:\n\n  * 本地IDE写一个server监听端口, 一个client读tcp字节流(api不熟, 但是写出来了)\n\n继续八股:\n\n  * tcp建立的过程中, os层面怎么做的处理(我说了一些fd和处理句柄吧可能)\n  * 建立链接之后传输完成需要做什么处理(我defer关闭了一些链接)\n  * 直接defer会不会有什么问题(我不太会, 说可能panic, 但是也会关闭)\n  * 判断代码执行结果: 一个go协程里面赋值 + Unlock, 主协程Lock + print. (我答错了, 跑了一下说原因)\n  * 怎么修改, 我改成了wg, 他说用Lock怎么实现\n  * 我Lock两次成功了, 他说会不会有什么问题....\n  * SELECT a FROM b WHERE c IN (1,2,3) AND d LIKE 'str%' ORDER BY e DESC 怎么加索引....(不怎么会 我说d a, 讨论了几分钟)\n  * 这一条SELECT在MYSQL里面怎么执行\n  * 你刚说的宏观层的优化器 存储引擎, 这些子句具体怎么执行(...不会)\n  * 建立索引, 是否走索引是第一考虑因素吗...(我说是, 他说也可以考虑快速缩小结果集)\n\n反问:\n\n  * 规模: 研发总共40人\n  * 三面过后还有技术面吗: 还有一面😅\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584865007981056000?sourceSSR=users",
        "title": "百面嵌入式专栏（面试题）内存管理相关面试题10道题",
        "content": "![](https://uploadfiles.nowcoder.com/files/20240207/5503357_1707314649825/484275b8175a44fa8cb3d9afeb7a3a94.png)\n\n> 沉淀、分享、成长，让自己和他人都能有所收获！😄\n\n📢本篇我们将介绍内存管理相关面试题 。\n\n# 一、内存管理相关面试题\n\n  1. page数据结构中的_refcount和_mapcount有什么区别？\n  2. 匿名页面和高速缓存页面有什么区别？\n  3. page数据结构中有一个锁，我们称为页锁，请问trylock_page()和lock_page()有什么区别？\n  4. 请画出page数据结构中flags成员的布局示意图。\n  5. 请列举page数据结构中_refcount和_mapcount计数的使用案例。\n  6. 请简述page数据结构中mapping成员的作用。\n  7. 在Linux 2.4.x内核中，如何从一个页面中找到所有映射该页面的VMA？RMAP可以带来哪些便利？\n  8. 阅读Linux 5.0内核RMAP机制的代码，画出父子进程之间VMA、AVC、AV以及page等数据结构之间的关系图。\n  9. 在Linux 2.6.34内核中，RMAP机制采用了新的实现，Linux 2.6.33内核和之前的版本中的RMAP机制称为旧版本RMAP机制。那么在旧版本RMAP机制中，如果父进程有1000个子进程，每个子进程都有一个VMA，每个VMA里面有1000个匿名页面，当所有的子进程的VMA同时发生写时复制时会是什么情况呢？\n  10. kswapd内核线程何时会被唤醒？\n\n# 二、\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584601186871918592?sourceSSR=users",
        "title": "boss直聘-推荐工程组-一二面面经",
        "content": "# 一面\n\n听hr说搜广推应该是有三轮技术面试，但看我简历还可以，一面直接安排了推荐团队的主管面试，省了一轮。\n\n  * 自我介绍\n  * 聊实习项目和美团的工作内容\n  * 聊开源项目\n  * 有点类似系统设计，设计朋友圈功能，朋友圈feed流，一个用户有10w个好友的情况下，如何尽量减少计算量，获得他所有好友发的朋友圈中的最新十条朋友圈\n  * 实习公司的技术风格和氛围和国内有啥区别\n  * 对未来两年有什么预期和规划吗\n  * 反问环节\n\n# 二面\n\n二面是交叉面，hr找的做推荐算法的同事面的。\n\n  * 自我介绍\n  * 为什么想回国\n  * 再详细讲一下实习项目\n  * 实习项目主要挑战是什么\n  * 美团全职的一年主要做了什么\n  * 讲一下Java的GC吧\n  * 算法题，查找数组中某个元素第一次出现的位置（二分模板）\n  * 你对想找的工作，工作内容、业务方向啥的有什么预期吗？\n  * 反问环节\n\n# hr面\n\n  * 自我介绍\n  * 为什么本科毕业工作一年之后出国\n  * 在美团全职一年最大的收获/成长是什么\n  * 留学的感受跟出国前的预期有啥差别吗\n  * 准备毕业就回国吗，为什么\n  * 有职业规划吗，大概什么样\n  * 想过互联网工作几年后的退路之类的吗\n  * 说两三个自己的优点\n  * 有什么爱好吗\n  * 现在还有哪些公司在流程中，这些公司如果都offer了你会怎么选\n\n一周之后offer谈薪了\n\n整体体验还不错，一面二面面试官感觉人都挺好的，比大厂更有诚意一些。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584498112740216832?sourceSSR=users",
        "title": "大数据工程师面试题 - Spark 基础调优（三）",
        "content": "#\n\n## 原则四：尽量避免使用shuffle类算子\n\n如果有可能的话，要尽量避免使用shuffle类算子。因为Spark作业运行过程中，最消耗性能的地方就是shuffle过程。shuffle过程，简单来说，就是将分布在集群中多个节点上的同一个key，拉取到同一个节点上，进行聚合或join等操作。比如reduceByKey、join等算子，都会触发shuffle操作。\n\nshuffle过程中，各个节点上的相同key都会先写入本地磁盘文件中，然后其他节点需要通过网络传输拉取各个节点上的磁盘文件中的相同key。而且相同key都拉取到同一个节点进行聚合操作时，还有可能会因为一个节点上处理的key过多，导致内存不够存放，进而溢写到磁盘文件中。因此在shuffle过程中，可能会发生大量的磁盘文件读写的IO操作，以及数据的网络传输操作。磁盘IO和网络数据传输也是shuffle性能较差的主要原因。\n\n因此在我们的开发过程中，能避免则尽可能避免使用reduceByKey、join、distinct、repartition等会进行shuffle的算子，尽量使用map类的非shuffle算子。这样的话，没有shuffle操作或者仅有较少shuffle操作的Spark作业，可以大大减少性能开销。\n\nBroadcast与map进行join代码示例：\n\n    \n    \n    // 传统的join操作会导致shuffle操作。\n    // 因为两个RDD中，相同的key都需要通过网络拉取到一个节点上，由一个task进行join操作。\n    val rdd3 = rdd1.join(rdd2)\n    \n    // Broadcast+map的join操作，不会导致shuffle操作。\n    // 使用Broadcast将一个数据量较小的RDD作为广播变量。\n    val rdd2Data = rdd2.collect()\n    val rdd2DataBroadcast = sc.broadcast(rdd2Data)\n    \n    // 在rdd1.map算子中，可以从rdd2DataBroadcast中，获取rdd2的所有数据。\n    // 然后进行遍历，如果发现rdd2中某条数据的key与rdd1的当前数据的key是相同的，那么就判定可以进行join。\n    // 此时就可以根据自己需要的方式，将rdd1当前数据与rdd2中可以连接的数据，拼接在一起（String或Tuple）。\n    val rdd3 = rdd1.map(rdd2DataBroadcast...)\n    \n    // 注意，以上操作，建议仅仅在rdd2的数据量比较少（比如几百M，或者一两G）的情况下使用。\n    // 因为每个Executor的内存中，都会驻留一份rdd2的全量数据。\n    \n    \n\n## 原则五：使用map-side预聚合的shuffle操作\n\n如果因为业务需要，一定要使用shuffle操作，无法用map类的算子来替代，那么尽量使用可以map-side预聚合的算子。\n\n所谓的map-side预聚合，说的是在每个节点本地对相同的key进行一次聚合操作，类似于MapReduce中的本地combiner。map-\nside预聚合之后，每个节点本地就只会有一条相同的key，因为多条相同的key都被聚合起来了。其他节点在拉取所有节点上的相同key时，就会大大减少需要拉取的数据数量，从而也就减少了磁盘IO以及网络传输开销。通常来说，在可能的情况下，建议使用reduceByKey或者aggregateByKey算子来替代掉groupByKey算子。因为reduceByKey和aggregateByKey算子都会使用用户自定义的函数对每个节点本地的相同key进行预聚合。而groupByKey算子是不会进行预聚合的，全量的数据会在集群的各个节点之间分发和传输，性能相对来说比较差。\n\n比如如下两幅图，就是典型的例子，分别基于reduceByKey和groupByKey进行单词计数。其中第一张图是groupByKey的原理图，可以看到，没有进行任何本地聚合时，所有数据都会在集群节点之间传输；第二张图是reduceByKey的原理图，可以看到，每个节点本地的相同key数据，都进行了预聚合，然后才传输到其他节点上进行全局聚合。\n\n**大家好，我是大数据欧老师，就职于互联网某头部大厂，超过 8 年的大数据从业经历。如果你有面试大数据工程师的打算，欢迎找我聊一聊！**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584478325851144192?sourceSSR=users",
        "title": "百面嵌入式专栏（面试题）进程管理相关面试题1.0",
        "content": "![](https://uploadfiles.nowcoder.com/files/20240206/5503357_1707222449362/484275b8175a44fa8cb3d9afeb7a3a94.png)\n\n> 沉淀、分享、成长，让自己和他人都能有所收获！😄\n\n📢本篇我们将介绍进程管理相关面试题 。\n\n# 一、进程管理相关面试题\n\n  1. 进程是什么？\n  2. 操作系统如何描述和抽象一个进程？\n  3. 进程是否有生命周期？\n  4. 如何标识一个进程？\n  5. 进程与进程之间的关系如何？\n  6. Linux操作系统的进程0是什么？\n  7. Linux操作系统的进程1是什么？\n  8. 请简述fork()、vfork()和clone()之间的区别。\n  9. 请简述写时复制技术的工作原理。\n  10. 在ARM64的Linux内核中如何获取当前进程的task_struct数据结构？\n  11. 用户空间进程的页表是什么时候分配的？其中一级页表是什么时候分配的？二级页表呢？\n  12. 什么是进程调度器？早期Linux内核调度器（包括O(n)调度器和O(1)调度器）是如何工作的？\n  13. 以fork()接口函数为例，为什么会返回两次？其中父进程的返回值是子线程的PID，而子进程返回0。子线程是如何返回0的？\n  14. 第一次返回用户空间时，子进程返回哪里？\n\n# 二、答案解析\n\n  1. 进程是正在运行的程序的实例。它包括程序的执行状态、内存、资源和上下文信息。\n  2. 操作系统通过进程控制块（PCB）描述和抽象一个进程。PCB 包含了进程的重要信息，如进程状态、程序计数器、内存分配情况、打开的文件等。\n  3. 是的，进程有生命周期，包括创建、就绪、运行、阻塞和终止等阶段。\n  4. 进程可以通过唯一的标识符来标识，通常是进程ID（PID）。\n  5. 进程之间可以处于不同的关系，包括父子关系、同级关系等。父进程可以创建子进程，进程之间也可以通过进程间通信（IPC）来进行交互。\n  6. 在 Linux 操作系统中，进程0通常是内核线程，也称为 idle 进程。它在系统启动时创建，负责管理系统空闲时间。\n  7. 进程1通常是 init 进程，也称为系统初始化进程。它是用户空间进程的祖先，负责系统的初始化和进程的管理。\n  8. fork() 用于创建一个新进程，新进程是调用进程的副本；vfork() 创建一个新进程，但子进程共享父进程的地址空间；clone() 提供了更多的选项，允许创建更灵活的进程。\n  9. 写时复制（Copy-on-write，COW）技术允许进程在需要修改共享内存时才进行复制，而不是立即复制。当多个进程共享同一段内存时，它们实际上共享相同的物理页面，直到某个进程尝试修改该页面，系统才会为修改的进程复制一个新的页面。\n  10. 在 ARM64 的 Linux 内核中，可以通过当前进程的地址获取其 task_struct 数据结构。\n  11. 用户空间进程的页表在进程创建时分配。一级页表通常在进程创建时分配，而二级页表是在需要时按需分配。\n  12. 进程调度器负责决定哪个进程在某个时刻运行。早期的 Linux 内核调度器包括 O(n) 调度器和 O(1) 调度器。O(n) 调度器在所有进程中选择一个最佳进程来运行，而 O(1) 调度器通过多级反馈队列来实现更高效的调度。\n  13. fork() 返回两次是因为在调用 fork() 时，父进程会复制自身创建一个子进程，这两个进程在执行 fork() 后继续执行下面的代码。子进程通过 fork() 返回值判断是否为子进程，如果是，则返回0；而父进程则返回子进程的 PID。\n  14. 第一次返回用户空间时，子进程返回到 fork() 的下一条指令继续执行，即从 fork() 函数调用返回。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584599748175241216?sourceSSR=users",
        "title": "快手春招一二三面面经",
        "content": "**标题党一下，其实是秋招补录（x**\n\n数据工程组，说是给搜广推团队提供训练数据的。\n\n# 一面\n\n  * 自我介绍\n  * 聊实习项目和开源经历\n  * 问点八股，说一下对内核态和用户态的理解\n  * 死锁\n  * 使用过多线程吗，什么使用场景，设定线程数的标准\n  * 聊一下数据库索引，什么情况下适用和不适用索引\n  * 分布式锁\n  * 某个线程一直持有分布式锁或线程持有分布式锁的时候崩溃了，这些情况下该如何处理\n  * 面向对象的特性，java中多态的实现\n  * 反射的原理\n  * 了解springboot框架吗\n  * Redis中zset的原理\n  * 说一下了解的Redis中的数据结构\n  * leetcode原题，将二叉树展平成链表\n  * 反问环节\n\n# 二面\n\n  * 自我介绍\n  * 聊一下美团和实习经历\n  * 聊一下工作中用过的Redis数据结构\n  * 聊一下对Redis集群模式和集群如何保证一致性的原理\n  * 聊一下jvm分区和垃圾回收机制\n  * 出了道判断以下代码会创建几个string对象的题目\n  * 不含重复元素的大数据排序，数据范围是负100亿到正的100亿，内存空间较小（bitmap优化\n  * 用python简单表示一下如何实现bitmap排序的\n  * 反问环节\n\n# 三面\n\n  * 自我介绍\n  * 聊实习和开源项目\n  * 聊一道场景题：单机单线程，本地有一个大文件，每行都是一个字符串，然后这个线程每次从消息队列中接受一个消息，然后解析消息，然后根据解析结果去读本地的文件的某一行，然后根据解析结果和这一行的字符串做一个处理，将结果插入一个新文件的末尾。有什么优化方案（不考虑多机的情况，只在单机进行优化）\n  * 场景题聊的一般，之后就是随便问几个问题了，什么国内有别的公司offer吗之类的\n  * 反问环节\n\n**等了一周没消息，去问hr，发现hr跑路了...然后又等了一周，发现官网流程结束了...是我不配了🥲**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584455542798557184?sourceSSR=users",
        "title": "2.6 春招 武汉中厂 Golang 三面",
        "content": "一个小时问raft：模块；复制流程；一致性保证；压缩怎么实现；投票分裂。  \n为什么要学raft，怎么理解分布式。  \n看了什么书，最近在做什么，有什么。  \n  \n算法题：一个任务列表，一个任务占用1时间，相同任务必须间隔n，求最小时间。（完全不会写了30min）  \n  \nhr在旁边一起面了：  \n为什么实习离职；收获；与同事差距；怎么追赶  \n  \n总共接近2h，难绷\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584438891634008064?sourceSSR=users",
        "title": "江苏某科技公司 Java 面经",
        "content": "# 江苏某科技公司 Java 面经\n\n一个老板，一个员工，轮流面....50 分钟拷打，算是没面试上大厂前最长的面试了。\n\n下面的我就统一用面试官称呼，面试的问题顺序可能有出入，见谅，全凭记忆。\n\n1）\n\n面试官：自我介绍一下\n\n我：这块我就不写了，关键是大家要突出自己的亮点，最好是有实际经历，有实习经历可以说实习，有开源项目的可以说开源项目，开参加过竞赛，数模，等等的都可以具体阐述。\n\n2）\n\n面试官：介绍一下你的开源项目\n\n我：主要介绍制作项目初衷，项目制作过程，然后有哪些收获，再介绍了下主要的两个亮点功能，项目地址：[https://gitee.com/falle22222n-leaves/vue_-\nbook-manage-\nsystem，大一和大二的同学可以沉淀下，也开源个项目，但项目是要进行一定的宣传的，我本身是做自媒体的，然后大学学软工，转程序员.jpg。](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgitee.com%2Ffalle22222n-leaves%2Fvue_-\nbook-manage-\nsystem%25EF%25BC%258C%25E5%25A4%25A7%25E4%25B8%2580%25E5%2592%258C%25E5%25A4%25A7%25E4%25BA%258C%25E7%259A%2584%25E5%2590%258C%25E5%25AD%25A6%25E5%258F%25AF%25E4%25BB%25A5%25E6%25B2%2589%25E6%25B7%2580%25E4%25B8%258B%25EF%25BC%258C%25E4%25B9%259F%25E5%25BC%2580%25E6%25BA%2590%25E4%25B8%25AA%25E9%25A1%25B9%25E7%259B%25AE%25EF%25BC%258C%25E4%25BD%2586%25E9%25A1%25B9%25E7%259B%25AE%25E6%2598%25AF%25E8%25A6%2581%25E8%25BF%259B%25E8%25A1%258C%25E4%25B8%2580%25E5%25AE%259A%25E7%259A%2584%25E5%25AE%25A3%25E4%25BC%25A0%25E7%259A%2584%25EF%25BC%258C%25E6%2588%2591%25E6%259C%25AC%25E8%25BA%25AB%25E6%2598%25AF%25E5%2581%259A%25E8%2587%25AA%25E5%25AA%2592%25E4%25BD%2593%25E7%259A%2584%25EF%25BC%258C%25E7%2584%25B6%25E5%2590%258E%25E5%25A4%25A7%25E5%25AD%25A6%25E5%25AD%25A6%25E8%25BD%25AF%25E5%25B7%25A5%25EF%25BC%258C%25E8%25BD%25AC%25E7%25A8%258B%25E5%25BA%258F%25E5%2591%2598.jpg%25E3%2580%2582)\n\n3）\n\n面试官：SpringBoot 自动装配原理\n\n我：常见八股文不作阐述，可以看我前面几篇面经，基本都会问这个问题。\n\n4）\n\n面试官：HTTP 加密过程说一下\n\n我：也是一个八股文，不过后续面试官追问了，也就是第五项\n\n5）\n\n面试官：为什么要一次对称和多次非对称\n\n我：这边讲一下对称加密和多次非对称加密的优缺点和使用场景就可以了，然后我再介绍了下常见的对称加密算法和非对称加密的算法，以及算法优化的一个历史，这边说了一下有些历史算法是不安全的，已经被破解过。\n\n6）\n\n面试官：你的项目权限校验是怎么做的？\n\n我：开源项目我用的是 JWT + Redis + 拦截器，接口平台项目依旧是 AOP + Session，顺便后续说了下分布式 Session\n怎么配置，以及为什么要用 Token 不用 Session,主要是移动端和防止 CSRF。\n\n7）\n\n面试官：数据库的数据结构是怎么样的介绍一下？\n\n我：按不同分类介绍一下，比如底层物理存储，聚簇索引和非聚簇索引，按数据结构\n，R，Hash，B，全文索引，按应用维护，主键、普通、唯一、全文、范围等等，重点在 InnoDB 的 B +\n树，面试官追问了叶子节点存储的是什么？以及聚簇索引和非聚簇索引的不同，这些都是基础，还是挺好回答的。\n\n8）\n\n面试官：数据库的慢 SQL 怎么排查？\n\n我：怎么开启慢查询日志，Config，然后用 explain 命令，介绍下各个字段，有哪些连接，哪些索引，面试官追问数据库在生产环境怎么去查询慢\nSQL，听面试官说好像是用阿里云的一个可视化面板，又问执行慢查询日志在生产环境有什么问题，我就答了一个可能产生阻塞，以及 MySQL\n实例挂了，日志可能过大等。\n\n9）\n\n面试官：Redis 在你项目中是怎么使用的？\n\n我：介绍一下自己的 Token 使用\nRedis，以及定时任务做了一个缓存预热，然后面试官追问了下常见的八股文，缓存穿透，击穿、雪崩问题的解决方案，我也就按八股文进行回答。\n\n10）\n\n面试官：Redis 持久化有了解过吗，怎么实现的？\n\n我：RDB 和 AOF 都讲一下就行了，对比优缺点和使用场景，然后讲一下 RDB 的过程，比如 Fork 子进程等等，讲了下 AOF 重写机制， AOF\n刷盘机制，AOF 的流程，AOF 的校验和机制，总的来说都是介绍了一下八股文。\n\n11）\n\n面试官：我看你写了多线程，介绍一下你项目中有没有使用多线程？\n\n我：面试官其实想问 Parallel stream，因为我简历上写了 Stream 流，但我对并行流没怎么用过，讲了下 CompletableFuture\n工具的异步编排，其实就是 BI 项目中门面模式+异步编排，虽然没提高什么效率，有个短板效应，用的 allof().join()，还是介绍了一下。\n\n12）\n\n面试官：有什么想问的？\n\n我：反问公司的技术栈和业务，大体了解是 Java、Python、Go 为主要开发语言，而且 Java 不是原生的 JDK ，好像说了 AOT，还有用\nKafka 做一个数据收集的中间件等等功能，具体也没听清，另外还有 SocketIO,感觉这家公司对多线程和数据量的要求还是有的，听说 JDK 用的 11。\n\n开源项目地址：[https://gitee.com/falle22222n-leaves/vue_-book-manage-\nsystem](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgitee.com%2Ffalle22222n-leaves%2Fvue_-\nbook-manage-system)\n\n前后端总计已经 800+ Star，1.5W+ 访问！\n\n⭐点赞⭐收藏⭐不迷路！⭐\n\n面完口干舌燥，面完过了几天就说 OC 了，主要看我的意愿，接下来会继续分享一些面经，其实有很多小公司只有 10\n分钟的电话面，而且看了我开源项目和个人博客后直接就过技术面了，But，我：我想被拷打多问点问题，年后再战！关注我即可收获最新的面经.gif\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584593238049202176?sourceSSR=users",
        "title": "wxg秋招补录一二三面面经",
        "content": "*******************************\n\n# 一面\n\n## 三道算法题\n\n  * 给定一个整数 n ，返回 n! 结果中尾随零的数量。\n  * 给你两个链表 list1 和 list2 ，它们包含的元素分别为 n 个和 m 个。请你将 list1 中下标从 a 到 b 的全部节点都删除，并将list2 接在被删除节点的位置。\n  * 实现支持下列接口的「快照数组」- SnapshotArray：\n\n## 智力题\n\n有一个岛上住着一群人，m个原住居民眼睛是棕色的，n个外来居民眼睛是蓝色的。\n\n有一天岛主对所有蓝眼睛下达驱逐令，要求他们离开。驱逐令的要求是：\n\n  1. 每天早晨，岛主会公布是否还存在蓝眼睛（但不会公布具体数量）。\n  2. 蓝色眼睛的人一旦「确定」自己是蓝眼睛，必须乘坐当晚的渡船离开。\n  3. 大家都不知道m和n的准确数字。在白天，每个人都能清晰看到其他人眼睛的颜色。唯独看不到自己眼睛的颜色。\n  4. 为了防止骚乱，岛主要求居民之间不能有语言，文字甚至是肢体动作等任何形式的交流——这样每个人眼睛的颜色也没办法被别人告知。\n\n请问蓝眼睛们要经历多少天才能完全离开？\n\n## 八股\n\n  * 我们写的服务能否拿到用户端的ip，为什么可以拿到\n  * 有没有可能拿到的ip不是用户真实ip（挂梯子、代理ip\n  * 可以伪造ip跟服务端交互吗（可以发出请求，但没法建立连接，需要握手）；linux有工具修改交互时数据包里的ip，有了解吗\n  * 介绍一下进程和线程的内存结构\n  * 聊一下数据库索引\n  * 反问环节\n\n# 二面\n\n二面面试官人挺好的，没拷打八股，就随便聊了一下实习经历，参与的开源项目，然后问了一些为啥回国，为什么北美难找工作，为什么不去美国找工作之类的问题（只能再跟面试官说一下今年北美有多难...），当时为什么出国，既然对湾区有想法，以后还会不会再出国（不会了，以后再出来太折腾了）。聊了半个小时就结束了，比较轻松。\n\n# 三面\n\n整体跟二面差不多，就是聊实习，聊开源项目，问几个常见BQ，最后面试官说还有一个面试，所以就聊了半个小时就结束了。主要问题是我一开始以为三面要一个小时，自我介绍介绍的比较详细（拖点时间，少点八股），面试官觉得应该先抽象总结一下，不然他听不过来抓不住重点，三面整体感觉还好。最后反问了一下面试流程，说wxg是三轮部门面，一到两轮面委面。\n\n然后三面完hr打电话说安排面委面，直接排了两轮...\n\n# 面委第一轮\n\n## 三道算法题\n\n  * x^7+0.5*x = y，给定y求x\n  * 二叉树中子树和最大的值\n  * 三数之和\n\n然后就是聊实习项目；聊完实习项目说就再问一个场景题，一个100G的文件中，每一行都是一个字符串，只有10G内存，如何统计总共有多少个不同的字符串；场景题答得一般，当时忘了外部归并排序了，先说了每个字符串都生成一个文件，通过文件名进行去重处理，面试官不满意，我说可以看看bitmap能不能放下这么多字符串（把字符串看成36进制的数字），然后发现也就支持长度为10的字符串，不大够，面试官看不下去了，提示了一下归并排序，然后算是磕磕绊绊把场景题答完了。\n\n# 面委第二轮\n\n第二轮的面委面试安排在上午九点半，结果因为堵车迟到了十几分钟，不过也好，这样就主要在路上问一下经历的问题，没时间拷打八股和算法。\n\n  * 自我介绍\n  * 重点聊一下实习经历\n  * 聊一下开源的项目\n  * 对协程的理解（讲完自己的理解后面试官觉得有点偏差，然后举例子引导，面试官对协程的理解是引入协程主要是为了解决开发模式的问题\n  * 了解raft和paxos协议吗（听过，但没看过\n  * 了解ES的基本原理吗\n  * docker的原理了解吗\n  * 平时除了上课和实习，还会如何学习编程呢\n  * 反问环节\n\n# hr面\n\nhr面安排在了国内周六晚上七点半，想了一下还是早起面了，担心快过年了，晚点排不上面试了。\n\n  * hr先解释一下因为自己快过年了有点事，所以安排在了周六晚上，不是公司太卷。\n  * 问毕业时间，确认应该不能回国提前实习；\n  * 还有其他在流程中的公司吗，对哪个更感兴趣（狂舔wxg呗，还能咋着\n  * 问我21年校招的offer情况；\n  * 当时为什么在美团工作一年再出国留学；\n  * 为什么回国，考虑过留加拿大吗（试着找过全职，实在找不到了\n  * 对工作地点在广州有啥想法吗\n  * 之前美团的工作，有啥喜欢和不喜欢的地方吗\n  * 21年你拿的offer薪资大概是什么情况方便说一下吗\n  * 你的期望薪资是怎样的\n  * 工作中有遇到过什么分歧或冲突吗，怎么处理的呢\n  * 现在还有哪些公司在流程中，你会怎么排序，说一下理由\n  * 反问：多久有消息（三个工作日内），毕业时间有什么影响吗（只是确认一下是否在腾讯24年校招窗口内）\n\n国内时间周六面完，周一就收到了云证的短信，又等了一周，今天周一谈薪了。不过好像今年不是实习转正的都是统一价烂白菜？还不给argue，挺无语的...\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584401413736800256?sourceSSR=users",
        "title": "面试经典：Java中list set map之间的区别",
        "content": "## 前言\n\n**大家好，我是chowley，最近正在复习Java集合，这次来总结一下list、set、map它们三个之间的区别。**\n\n## 1\\. List（列表）\n\n### 定义：\n\nList是一种有序集合，允许存储重复元素，每个元素都有一个索引，可以按照插入顺序获取。\n\n### 特点：\n\n  * 允许存储重复元素。\n  * 有序集合，保留元素的插入顺序。\n  * 可以通过索引访问元素。\n\n### 常见实现类：\n\n  * ArrayList：基于数组实现，适合随机访问和大量元素的存储。\n  * LinkedList：基于双向链表实现，适合频繁的插入、删除操作。\n  * Vector：线程安全的实现类，效率较低，一般不推荐使用。\n\n## 2\\. Set（集合）\n\n### 定义：\n\nSet是一种不允许存储重复元素的集合，可以用于去重。\n\n### 特点：\n\n  * 不允许存储重复元素。\n  * 无序集合，不保证元素的插入顺序。\n  * 通过哈希表实现，快速查找元素。\n\n### 常见实现类：\n\n  * HashSet：基于哈希表实现，性能较高，不保证顺序，依赖于hashCode()和equals()。\n  * LinkedHashSet：基于链表和哈希表实现，按照插入顺序排序。\n  * TreeSet：基于红黑树实现，按照元素的自然顺序或比较器顺序排序。\n\n## 3\\. Map（映射）\n\n### 定义：\n\nMap是一种键值对的集合，每个键对应一个值。\n\n### 特点：\n\n  * 键不能重复，值可以重复。\n  * 无序集合，不保证元素的插入顺序。\n  * 通过键快速查找值。\n\n### 常见实现类：\n\n  * HashMap：基于哈希表实现，键值对无序存储，效率高（线程不安全），允许null值。\n  * LinkedHashMap：基于链表和哈希表实现，用于保证有序集合（FIFO）。\n  * TreeMap：类似TreeSet，基于红黑树实现，按照键的自然顺序或比较器顺序排序。\n\n## 区别总结：\n\n  * List用于有序集合，允许存储重复元素，可以通过索引访问元素。\n  * Set用于无序集合，不允许存储重复元素，适合去重。\n  * Map用于键值对的映射，键不能重复，值可以重复，通过键快速查找值。\n\n## 总结\n\n在选择使用哪种集合类型时，要根据实际需求考虑元素是否需要排序、是否允许重复等因素。这方面的内容也是技术面试官非常喜欢提问和扩展的，大家有必要理清三者相关的区别。\n\n**好了，以上就是本文的全部内容，如有问题欢迎留言讨论。**\n\n**本人正在组建测试开发方向的交流社区，如果您对软件质量管理方面感兴趣，欢迎私信我了解。**\n\n**我是chowley，一个专注互联网技术和软件质量保障领域的博主，我们下次再见！**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584393561991397376?sourceSSR=users",
        "title": "❗【经验分享】银行面试的难度怎么样？",
        "content": "1\\. 竞争者情况\n\n-从今年的群面和单面的情况来看，知名院校学生数量上涨，求职人数比例增加，群面平均人数在10人，单面参与人数50-100人\n\n-难度加大\n\n2\\. 群面问题群面问题主要是两类：\n\n-就某一话题得出小组统一共识、辩论赛\n\n-难度主要在：群面人数多，但只有一两位入选时如何增加个人讲话时长和有效性\n\n-难度加大\n\n3\\. 单面问题\n\n-单面问题常规类型：求职规划、家庭背景、简历经历、个人性格及能力\n\n-难度点在于：家庭情况（异地考察最多）、个人性格（是否符合岗位特质）\n\n-难度持平\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584168749398237184?sourceSSR=users",
        "title": "大数据工程师面试题 - Spark 基础调优（二）",
        "content": "## 原则三：对多次使用的RDD进行持久化\n\n当你在Spark代码中多次对一个RDD做了算子操作后，恭喜，你已经实现Spark作业第一步的优化了，也就是尽可能复用RDD。此时就该在这个基础之上，进行第二步优化了，也就是要保证对一个RDD执行多次算子操作时，这个RDD本身仅仅被计算一次。\n\nSpark中对于一个RDD执行多次算子的默认原理是这样的：每次你对一个RDD执行一个算子操作时，都会重新从源头处计算一遍，计算出那个RDD来，然后再对这个RDD执行你的算子操作。这种方式的性能是很差的。\n\n因此对于这种情况，我们的建议是：对多次使用的RDD进行持久化。此时Spark就会根据你的持久化策略，将RDD中的数据保存到内存或者磁盘中。以后每次对这个RDD进行算子操作时，都会直接从内存或磁盘中提取持久化的RDD数据，然后执行算子，而不会从源头处重新计算一遍这个RDD，再执行算子操作。\n\n### 对多次使用的RDD进行持久化的代码示例\n\n    \n    \n    // 如果要对一个RDD进行持久化，只要对这个RDD调用cache()和persist()即可。\n    \n    // 正确的做法。\n    // cache()方法表示：使用非序列化的方式将RDD中的数据全部尝试持久化到内存中。\n    // 此时再对rdd1执行两次算子操作时，只有在第一次执行map算子时，才会将这个rdd1从源头处计算一次。\n    // 第二次执行reduce算子时，就会直接从内存中提取数据进行计算，不会重复计算一个rdd。\n    val rdd1 = sc.textFile(\"hdfs://192.168.0.1:9000/hello.txt\").cache()\n    rdd1.map(...)\n    rdd1.reduce(...)\n    \n    // persist()方法表示：手动选择持久化级别，并使用指定的方式进行持久化。\n    // 比如说，StorageLevel.MEMORY_AND_DISK_SER表示，内存充足时优先持久化到内存中，内存不充足时持久化到磁盘文件中。\n    // 而且其中的_SER后缀表示，使用序列化的方式来保存RDD数据，此时RDD中的每个partition都会序列化成一个大的字节数组，然后再持久化到内存或磁盘中。\n    // 序列化的方式可以减少持久化的数据对内存/磁盘的占用量，进而避免内存被持久化数据占用过多，从而发生频繁GC。\n    val rdd1 = sc.textFile(\"hdfs://192.168.0.1:9000/hello.txt\").persist(StorageLevel.MEMORY_AND_DISK_SER)\n    rdd1.map(...)\n    rdd1.reduce(...)\n    \n    \n\n对于persist()方法而言，我们可以根据不同的业务场景选择不同的持久化级别。\n\n### Spark的持久化级别：\n\n  * MEMORY_ONLY:这种策略使用未序列化的Java对象格式将数据存储在内存中。如果内存不足以保存所有数据，那么这些数据可能无法持久化。这就意味着，后续对RDD的操作会需要从数据源头重新计算这部分数据。当我们使用cache()方法时，实际上就是采用了这种持久化策略。\n  * MEMORY_AND_DISK: 这种策略也是使用未序列化的Java对象格式，但它会优先将数据存储在内存中。如果内存不足，则会将数据写入磁盘。因此，后续对RDD的操作需要从磁盘中读取这部分数据。\n  * MEMORY_ONLY_SER: 这种策略与MEMORY_ONLY大致相同，区别仅在于它会将RDD的数据序列化。这就意味着RDD的每个分区都将被序列化成一个字节数组。这种方式更为节省内存，因此可以避免因数据持久化导致的频繁GC。\n  * MEMORY_AND_DISK_SER: 这种策略与MEMORY_AND_DISK基本一致，区别仅在于它也会将RDD的数据序列化成一个字节数组。这同样是为了节省内存，并避免频繁的GC操作。\n  * DISK_ONLY: 这种策略全部依赖于未序列化的Java对象格式，将所有数据写入磁盘文件中。\n  * MEMORY_ONLY_2, MEMORY_AND_DISK_2, 等: 对于以上任一持久化策略，如果加上后缀\"_2\"，则意味着每个持久化的数据都会复制一份副本，并将副本保存到其他节点上。这种基于副本的持久化策略主要用于故障恢复。也就是说，如果某个节点失效，我们仍可以使用其他节点上的数据副本进行RDD计算，否则就只能从数据源头重新计算了。\n\n### 如何选择一种最合适的持久化策略\n\n以下是这段话的重写：\n\n  * 在所有的情况中，最高效的策略一般是MEMORY_ONLY。但这需要内存有足够的空间轻松存储整个RDD的所有数据。这样可以回避序列化和反序列化操作，减少性能损耗。对RDD的后续操作都会在内存中进行，无需将数据从磁盘中读取，大大提升了性能。此外，也无需复制数据并远程传输到其他节点。需要注意的是，在实际的生产环境中，直接使用这种策略的情景可能比较有限。当RDD中的数据量非常大（比如几十亿）时，直接使用这种持久化级别可能导致Java虚拟机内存溢出（OOM）。\n  * 当在使用MEMORY_ONLY策略时出现了内存溢出，可以尝试使用MEMORY_ONLY_SER策略。该策略会将序列化后的RDD数据存储在内存中，每个分区只是一个字节数组，大大节省了对象数量和内存使用。这种策略增加了序列化和反序列化的性能损耗，但后续操作能够在内存中完成，因此整体性能仍然很高。然而，同样需要注意的是，RDD中的数据过多可能还会导致内存溢出。\n  * 如果不能使用纯内存的策略，建议使用MEMORY_AND_DISK_SER策略，而不是MEMORY_AND_DISK。这一步意味着RDD的数据量过大，内存无法完全编写所有的数据。序列化的数据更加节约内存和磁盘空间。此外，这种策略会优先尝试将数据缓存在内存中，只有在内存不足的情况下才会将数据写入磁盘。\n  * 通常情况下，不建议使用DISK_ONLY和带有“_2”后缀的策略。因为完全基于磁盘进行数据的读写会导致性能急剧降低，有些情况下，不如重新计算所有RDD的结果。带有“_2”后缀的策略需要将所有数据复制一份，并发送到其他节点，可能会导致较大的性能开销。除非是对作业的可靠性有严格要求，否则无需使用这两种策略。\n\n**大家好，我是大数据欧老师，就职于互联网某头部大厂，超过 8 年的大数据从业经历。如果你有面试大数据工程师的打算，欢迎找我聊一聊！**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584393205110579200?sourceSSR=users",
        "title": "❗【经验分享】去银行面试需准备什么？",
        "content": "1\\. 服饰\n\n银行面试通常要求着正装，黑色职业正装是最合适的选择\n\n2\\. 妆容\n\n避免浓妆艳抹，干净整洁即可。\n\n银行柜员小姐姐是最佳参考！\n\n![](https://uploadfiles.nowcoder.com/images/20240206/799581998_1707202114960/ECC73AEA0A25EDEA73EFACABB4EF0E31)\n\n3\\. 面试（常考以下几类）\n\n1）行业认识\n\nA：行业发展历程+当前行业发展情况+行业发展前景\n\n2）公司认识\n\nA：公司在行业内地位+公司主要业务+公司发展规划+公司人才培养（官网）\n\n3）岗位认识\n\nA：工作内容+岗位要求的能力+此前经历与岗位相匹配的地方\n\n4）简历经历\n\nA：实习经历强调个人为公司实际贡献值，能和岗位匹配的主要成绩+能力\n\nA：在校经历强调自己解决问题的能力+和岗位的匹配度\n\nA：空档期强调自己在空档期的经历+在空白期的进步（和岗位匹配的地方）\n\n5）职业技能\n\nA：证书\n\n6）个人性格\n\nA：大优点、小缺点（可改正+正在改正的办法）\n\n7）问题解决\n\nA：情景化问题解决办法-找准问题出现的原因+避免矛盾激化+解决措施\n\n8）职业规划\n\nA：行业+岗位+能力+成绩\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/584392603085316096?sourceSSR=users",
        "title": "❗【经验分享】面试考场有哪些雷区？",
        "content": "1️⃣不贬不损\n\n-如果有问题问你不喜欢什么样的领导？不喜欢什么样的公司？\n\n-这类问题切忌用具体的公司去对比，可以转变成：从行业发展情况来看，行业发展到某一阶段时可以通过某种方式去解决在这个阶段出现的问题。这样的公司更有长期稳定发展的能力，更喜欢在这样的公司发展。\n\n2️⃣利大于弊\n\n-例如个人性格优缺点，或问到相较于其他同学，你觉得你有什么优劣势？\n\n-这类问题通常要讲大的优点，小的缺点，且缺点是可以改进的，目前正在改进。\n\n3️⃣积极争取\n\n-压力面，问到群面中想要淘汰哪个同学？\n\n-不要淘汰自己。如果觉得自己表现的好，就客观评价其他同学的特质，并表明这类特质不适配这个岗位的原因；如果自己表现的不好也要积极为自己争取，并表明自己其他更适合这个岗位的优势点在哪。\n\n"
    }
]