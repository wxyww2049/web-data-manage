[
    {
        "url": "https://www.nowcoder.com/discuss/576479562855378944?sourceSSR=users",
        "title": "小黑盒前端实习（已hr面）",
        "content": "## 一面-1.8\n\n  1. js类型\n  2. es6其他类型\n  3. map和object区别\n  4. map和weakmap区别\n  5. 为什么能被回收\n  6. weakmap的键的类型\n  7. css写的多吗（不多\n  8. 重绘和回流\n  9. 原型链 在链上加函数\n  10. prototype和proto区别\n  11. 请求一般怎么写\n  12. axios底层实现\n  13. axios出现解决了什么\n  14. 鉴权\n  15. 跨域\n  16. 简单/复杂请求\n  17. 浏览器事件循环\n\n## 二面-1.12\n\n  1. 项目相关\n  2. 写题 lc4\n  3. 写题 lc435\n  4. 讲一下一个url每个部分代表什么\n  5. get/post\n  6. post请求体格式有哪些\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576470981288423424?sourceSSR=users",
        "title": "华为客户经理面试—二面三面",
        "content": "       虽然我前期准备了很多华为的相关业务知识，以及toB项目的知识，但面试基本没问😂，甚至我简历都没看，感觉都是随机问，根据我的回答继续问我。  \n        二面：二面面试官很帅，看着很有气质，对我也是笑脸相迎，听完自我介绍感觉他对我很满意，然后就简单问了问我简历的一些实习经历，然后给我出了一个好玩的题目：问我怎么看待一个和尚挑水喝，两个和尚抬水喝，三个和尚没水喝。感觉挺好玩的，思考了一会从企业管理和团队配合的角度说了一下我的想法，面试官听完之后说感觉很满意，说我的想法的切入点很不错，之后呢就是问我职业规划啥的，从他的话中能听到他担心人才流失，因为他就有一个干的很好的徒弟跳槽到其他家公司了，但混的并不好，想回流但华为回流不了，所以他感觉很惋惜。那遇到这种，必须和他明确说明的职业规划就是待在华为呀哈哈哈哈，给他一个定心丸！  \n         主管面：主管面有的会是压力面，这个看主管，很不幸我的主管全程压力我…一直板着脸，一开始就是一个连环问，看我暑期在华为实习，问我暑期实习华为选择我的原因是什么？我回答完后他说还有吗，我继续说，他继续问还有吗，一连问了三个…其实我说完第一个就把我所有知道的都说了，后面他继续深挖，我的方法就是将前面说的大点拆分出来回答他。之后又继续问我华为的核心价值观是什么（实习培训时一直在背这个必须脱口而出），问我就继续深挖问我怎么理解以客户为中心，这个猜到他会问必须回答的明明白白的。然后他根据我的回答继续除了个场景题大致意思是我们这个项目对客户很重要，但客户预算不够，该怎么办……这个问题简单思考了一分钟和他说了一下我的想法，看的出来他挺满意的。之后就是进入一个稍微放松的时间段了，问我有没有女朋友，问我怎么追的，问我家里情况等等。之后就进入了人生问题的探讨，问我经历最大的挫折的一件事是什么，问我为了成功可以做到什么程度，问我人生的规划等等。当我以为问题差不多结束时，他突然说其实你让我有些犹豫，因为我感觉你太稳了，缺少那股劲儿，我现在给你一个机会，你说三个点告诉我为什么让我录用你？典型的压力面，之前也打过预防针，对于这种问题不卑不亢的展现自己与这个岗位匹配的点，就完全没有问题。然后又说en…你感觉你群面表现怎么样，我说能打90分以上吧，他说但我看你群面评价不是很好，阿哲……突然被无语到了，好吧，管他呢，全当压力面处理，再次不卑不亢说了一下我群面的贡献：首先提出方案框架的人，记录者，流程推进者，核心观点贡献者……也是被大家公认的leader，最后在时间把控上还有不足但是是可以改进的。等我说完，他这才满意的笑了笑，问我你是个自信的人吗，我有点停顿，因为现在分不清他想考我什么，这是他笑了笑和我说小伙子自信点，前面的说的一些不要太在意，是想考考你，咱们做销售的就是要面对很多否定哈，希望你进入华为在多多学习。  \n         至此，才松了一口气，感觉面试稳了！  \n     \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576441825813131264?sourceSSR=users",
        "title": "百度作者多元变现组-数据分析实习一二面",
        "content": "### 百度作者多元变现组_数据分析实习生\n\n**工作职责**\n\n-负责创作者权益变现业务的数据分析工作，对团队OKR目标预估和完成情况进行管理\n\n-搭建有效的业务核心指标监控体系，by周by月进行异动分析，对业务异动及时进行预警和归因分析 -支持团队的各类数据分析需求，通过数据分析的各种手段挖掘业务潜在的问题，对业务问题进行归因，形成有效的建议和结论，通过数据洞察牵引作者权益&变现策略的优化方向\n\n-不断总结提炼和迭代分析方法论，为提升分析效率完善数据基建\n\n**要求**\n\n-具备数学、统计、计算机相关专业，硕士以上优先\n\n-实习半年以上优先\n\n-优秀的结构化逻辑思维能力，独立搭建体系化的业务分析框架，较强的数据获取和预处理能力，精通SQL/Excel，熟悉Pyhton/R等工具；优秀的数据sense，能够洞察数据规律；良好的报告呈现能力和分析落地推动能力\n\n-自驱力强，勤于思考，上进心强，具备良好的沟通表达能力和协同推进能力，有团队合作精神\n\n### 一面\n\n  1. 自我介绍\n  2. 问自我介绍 工作室 这个事情怎么运作的 收费方式\n  3. 这件事情 做的时候 哪个地方困难比较大\n  4. 竞赛经历中选一个比较好的 大概的讲一个\n  5. 在当机器人队长的时候 协同的问题 如何解决这个事情的\n  6. 数据分析工具类 以及适用的场景\n  7. 实习经历 业务核心需求是什么\n  8. 指标异动 谈一下你的理解\n  9. 之后的规划 学习 工作\n  10. 反问：通过我的面试 对我有什么建议\n\n面试官回答 还ok 考察候选人的逻辑性 沟通能力\n\n沟通逻辑能力专业能力比较少专业能力训练好 多问为什么 洞察事情\n\n### 二面\n\n  1. 自我介绍\n  2. 为什么选择做数据分析师呢\n  3. 做过的数据分析的项目 你觉得最让你有成就感的 能展开介绍下吗\n  4. 树木径向生长数分项目 做得比较好点的部分 具体怎么做的\n  5. 为什么觉得数据预处理做得比较好\n  6. 对于实习的预期 希望通过实习收获什么\n  7. 你觉得你的专业能力还有什么需要去学习的呢\n  8. 学校的课多吗 实习一周保证多久\n  9. sql都会吗\n  10. 对于数据基建有了解 数仓有了解吗\n  11. 择业方面 会变动吗\n  12. 反问：针对我的面试表现 面试官觉得哪些地方还可以提升下\n\n回：场子有点冷，沟通能力还需要再提升；\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576428787361935360?sourceSSR=users",
        "title": "京东转推荐测开实习面试",
        "content": "1.讲讲实习经历和项目结构\n\n2.做过哪些测试，用的工具都是什么\n\n3.压测怎么做的，压测你看的哪些指标，打印的信息是什么\n\n4.我们是京东app的测试组，给你一个登录界面你会测什么，包括压测、安全、弱网断网、适配等\n\n5.给你一个主页搜索框你会测什么，包括压测、安全、弱网断网、适配等\n\n6.黑白盒测试怎么做的\n\n7.设计一个测试的流程是什么（八股，没看过测试相关的八股）\n\n8.你移动端和web端都用什么工具，本科学过网安，wireshark，fidder，charles等\n\n9.软件工程和软件工程质量评估的定义是什么（rz问题恶心人）\n\n10.用过自动化测试吗（用过锤子，不是专业测试，就听说过）\n\n11.有没有什么想反问的，你导师放你实习吗\n\n大概这些，其他还有忘了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576462897014927360?sourceSSR=users",
        "title": "华为客户经理面试—群面",
        "content": "接上文  \n       群面面试技巧：作为也是从群面小白，在各个大佬中不敢吱声到秋招可以坦然面对群面并尽力发挥拿到还不错的结果（秋招一共参加20+群面，包括线上线下，只有一家群面没有过），过程中也是在慢慢训练中找到一个适合自己的方式。  \n       首先我想说群面角色问题，关于网上各种经验贴提到的群面角色，leader，timekeeper，recorder，reporter………这些我理解是我们去理解群面的更好分工完成任务的方式，并不是说我一定要去当某某个角色，如果这些角色被别人占了我群面就凉了……从我的角度，群面即使你不是上面那些角色也没有什么影响，最重要的是你能在众多人七嘴八舌的讨论中你可以清晰有逻辑有框架把你的思考用简洁的语言展现出来，哪怕你全场只有几次发言，你依然会给面试官留下深刻的印象，通过面试。所以，从这个角度，我觉得你应该训练的是什么呢，是针对常见的群面题型，梳理出一套基础的分析框架，并且多积极参加模拟群面去锻炼你短时间内的分析梳理能力，并不需要去抢去争，只需要几次的发言机会，你就可以把你自己完全展现。  \n        我和大家分享一下我的训练思路：我分析我自身我其实并不是思考特别快的人，没法在短短五分钟的思考时间迅速整理出一套方案，甚至我也不擅长抢开局抢leader…我感觉这可能是大多数人的一个困境吧哈哈哈。所以从一开始我去选择做记录者这个角色，我觉得这是个很好帮你去锻炼你的结构化思维的途径，因为你要在每个人七嘴八舌的发言中迅速将这些人的发言进行概括，进行分类，进行整理。你接收到的点会很散，但你记录的时间有很短，因为会有人一直在说，所以前期会很痛苦😂但基本这个训练经过三四次之后，你的结构化思维和框架思维会有很大的提升，面对问题，你的脑海会迅速展开分析的框架，那这个时候你的记录就会快很多。这个时候你可以给自己加一个角色，就是总结者的身份，你可以在讨论中途某个节点，让大家暂停，你来总结一下大家之前的发言，这样你看，你是不是就不单纯是一个记录者了，你的发言机会就变多，你的发言质量也会提升，会让面试官对你的印象更加深刻。最后，汇报发言的时候，你大概率也是汇报发言的人，基于前面的总结，汇报发言就是一个很简单的东西，同时你也抓住了群面中最重要的展现环节！那其实到这种程度你基本在群面就可以脱颖而出了。但如果是那种十几进一的面试，做到这种程度只能让你排第二第三，无法稳坐顺位第一，那这个时候，你就需要多做一步，即在面试开始时提出你的框架思路，带着大家按照你的思路去分析题目，这个过程中为了提高效率减少工作量，你就可以把记录者这个角色让给其他人，你要做的就是开头提出框架和思路，中间时不时进行阶段性总结，推动下一步流程，结尾进行总结汇报或者补充发言。这样你就是这场群面完完全全的C！即使只进一个人，那个人妥妥也就是你。  \n       以上我是群面训练的一个心得，基本都是掰开揉碎了和大家分享，有方法也有心路历程，更希望是和大家分享交流，给大家一个借鉴和参考，帮助大家更好的通过群面，收获offer！ \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576441153155821568?sourceSSR=users",
        "title": "去哪儿数仓实习面试",
        "content": "岗位职责:\n\n1、机票业务数据仓库的建设与优化以及日常数据需求开发。\n\n2、有业务sense，理解并合理抽象业务需求，构建面向产品策略等相关的数据模型。\n\n3、协助产品人员基于数据驱动产品迭代。\n\n4、参与数据治理工作，提升数据易用性及数据质量，统一数据口径，制定数据标准化规则。\n\n5、负责 ETL 流程的优化及解决 ETL 相关技术问题。\n\n6、负责日常数据仓库的监控、分析、性能调优、故障诊断与排除等工作。\n\n职位要求:\n\n1、本科或以上学历，计算机相关专业:\n\n2、熟悉数据仓库各类建模理论，以及数据仓库数据层级关系，具备数据仓库逻辑模型和物理模型设计经验。\n\n3、熟练掌握 Java、Scala、Python、SQL、Shell 等一种或多种语言，具备编码能力。\n\n4、理解 Hadoop MR、Hive、Flink、Spark 等常用组件工作原理及熟练使用。\n\n5、熟悉数据标准管理，元数据管理，有数据治理相关经验优先。\n\n### 一面\n\n  1. 自我介绍\n  2. 数仓分层是怎么样的 每层的功能\n  3. DWD层有哪些表\n  4. 数据倾斜有遇到过吗 怎么解决\n  5. 自己扯到优化去了 具体说下优化\n  6. 最后是两道sql题\n  7. 后面反问，面试官对我有些什么建议，如果要通过接下来的面试或者是数仓面试\n\n反问回：\n\n  1. 之前做过的要梳理一遍 细节\n  2. sql题刷完 多练练\n  3. 框架原理 相关的知识概念 多了解了解\n\n### SQL题\n\n订单表：flight _order 字段名： order_ no --订单号,user _name --用户名 ,dep_ city --出发城市,arr\n_city --到达城市 ,flight_ no --航班号,dep _date --起飞日期 ,order_ date --订单日期\n\n1、统计下单最多的top100用户\n\n    \n    \n    select user_name,count(order_no) num\n    from flight_order\n    group by user_name\n    order by num desc\n    limit 100\n    \n\n2、按订单日期统计每天前100热门航线\n\n    \n    \n    select order_date, dep_city, arr_city, route_count\n    from (\n        select order_date, dep_city, arr_city, count(*) route_count,\n               row_number() over (partition by order_date order by count(*) desc) as row_num\n        from flight_order\n        group by order_date, dep_city, arr_city\n    ) ranked\n    where row_num <= 100\n    order by dep_date, route_count desc\n    \n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576426180539084800?sourceSSR=users",
        "title": "京东实习面经",
        "content": "1.项目架构，项目模块有哪些，你做的内容\n\n2.调优包括哪些方面？讲讲索引、限流、缓存、代码优化等实操，包括是如何测试的\n\n3.多线程方式有哪些，runable，callable，future，循环栅栏，信号量，completablefuture，各自讲讲\n\n4.两个sql命令，给你一个订单表，id，订单日期，统计每天、每小时的订单数量\n\n5.redis命令，获得所有的string，获得所有的hash，获得前10个hash，以及后端redistemplate的方法\n\n6.你的紧急联系人是谁，为什么不是女朋友，没有女朋友吗，为什么不找一个女朋友，如果来工作下班到家打两把游戏就夜里2点了，为什么不选择国企央企，你实习的国企央企工作氛围和勾心斗角你如何处理的\n\n7.你喜欢什么运动，乒乓球羽毛球，怪不得你气势这么足，喜欢1v1的运动，为什么不打篮球，不喜欢团队合作吗\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576209659879518208?sourceSSR=users",
        "title": "快手 - 电商后端日常实习面经",
        "content": "### **Timeline：12.26一面、12.28二面**\n\n**一面（感觉面试官像八股机器，45min）：**\n\n**计算机网络**\n\n  * Ping的过程\n  * ARP协议的过程\n\n**JUC**\n\n  * HashMap和CurrentHashMap的区别\n  * 公平锁与非公平锁\n\n**Redis**\n\n  * 常用数据结构\n  * ZSet底层结构\n  * 持久化方式\n  * 缓存穿透、缓存击穿、缓存雪崩\n\n**Spring**\n\n  * SpringAOP的实现原理\n\n**RPC**\n\n  * RPC的流程\n  * 常用的RPC框架和他们的区别\n\n**MySQL**\n\n  * 事务的四大隔离级别，分别解决什么问题\n  * 分库分表了解吗\n  * 联合索引的一个场景题：(a,b,c)联合索引，(b,c)是否会走索引\n\n**算法**\n\n找出一个List里每个数的左边小于该数且最靠右的数（单调栈）\n\n**二面（45min）：**\n\n1、项目\n\n2、缓存不一致的解决方案\n\n3、一个好的后端开发人员应该具备哪些软技能\n\n4、算法：二叉树的Z形遍历\n\n****\n\n二面差不多结束的时候，面试官说昨天被告知杭州没有HC，问北京意向如何，遂拒...\n\n****\n\n**并非面试过程中的所有问题** ，仅记录一些印象较深或没答好的问题\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576438586489204736?sourceSSR=users",
        "title": "脉脉大数据开发实习生一面",
        "content": "岗位JD\n\n使用大数据组件对海量数据进行建模，参与数据仓库的的开发、维护及优化\n\n岗位要求\n\n  1. 计算机相关专业，对大数据有浓烈的兴趣 \n  2. 扎实的计算机基础，熟练使用python/java/scala其中至少一种语言 \n  3. 熟悉Hadoop生态体系，包括但不限于Hadoop/Hive/Spark/Clickhouse \n  4. 学习能力强，强烈的责任心，具有较强的沟通能力及团队合作精神，细致耐心、积极主动 \n  5. 有大规模数据/日志处理经验，熟悉离线计算者优先\n\n#### 一面\n\n  1. 自我介绍\n  2. 对数仓分层、维度建模有什么相关的了解。数仓分层答的不是很好 磕磕绊绊 得加强 维度建模还行\n  3. 项目是都跟着走完了还是？\n  4. 维度建模分数据域和分层 主题域 分了哪些数据域 数据是怎么流向的 大概讲解下 数据域(交易域 流量域 用户域 工具域 互动域)\n  5. 对hive的优化有什么了解？具体的优化措施\n  6. 本科和硕士都是大数据相关 数仓大数据类相关的知识学过哪些\n  7. hadoop三大件有哪些\n  8. 简单讲一下mapreduce怎么跑起来的 mapreduce的流程 这个没讲好\n  9. 简单讲一下shuffle的原理？\n  10. 两道hive sql题 简单题 1:排名函数 2 多行转多列\n  11. 反问：我问了 工作时间(早10晚7)和工作氛围(和蔼平和)怎么样？最近部分有项目在忙吗？\n\n以后可以问 面试官对我有一些什么建议吗？技术上，简历上，面试上等？\n\nSQL题总结\n\n第一题 窗口函数\n\n    \n    \n    select a,second_c\n    from (\n      select a,second_c,\n      row_number() over (partition by a order by b) rank\n      from t2\n    where rank=2\n    )t\n    group by a\n    \n    问题 子查询里面的 where 不能直接用rank判断 这样会报错 where 应该写在外面 且是c列 不是second_c\n    \n    \n\n第二题\n\n    \n    \n    select \n        year,\n        concat_ws(',', collect_list(case when department = 'A' then person_count else null end))  col_A,\n        concat_ws(',', collect_list(case when department = 'B' then person_count else null end))  col_B\n    from t\n    group by year;\n    \n    \n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576203796125138944?sourceSSR=users",
        "title": "c语言基础 嵌入式笔试题 面经",
        "content": "### 1.预处理&关键字（22道）\n\n**1.1****宏定义是在编译的哪个阶段被处理的？**\n\n**答案：** 宏定义是在编译预处理阶段被处理的。\n\n**解读：** 编译预处理：头文件包含、宏替换、条件编译、去除注释、添加行号。\n\n  \n\n**1.2****写一个****\"** **标准****\"****宏** **MIN** **，这个宏输入两个参数并返回较小的一个。**\n\n**答案：**\n\n    \n    \n    #define  MIN(\n                A, B)  ((A) <= (B)? (\n                    A) : (B))   \n\n**解读：**\n\n（1）注意这个题目要用三重条件操作符，在宏中要小心地把参数用括号括起来，并且整个宏也要用括号括起来，防止替换时出现错误。\n\n（2）注意若写\"least = MIN(*p++, b);\"这句代码会产生副作用，将*p++代入宏体，指针p会做两次自增操作。\n\n  \n\n**1.3****已知数组****table** **，用宏求数组元素个数。**\n\n**答案：**\n\n    \n    \n    #\n                define  COUNT(table)  (sizeof(\n                    table) / sizeof(table[\n                        0]))  \n\n**解读：** sizeof(table)得到数组长度，sizeof(table[0])得到数组元素长度，两者相除即可得到数组元素个数。\n\n  \n\n**1.4****带参宏和函数的区别？**\n\n（1）带参宏只是在编译预处理阶段进行简单的字符替换；而函数则是在运行时进行调用和返回。\n\n（2）宏替换不占运行时间，只占编译时间；而函数调用则占运行时间（分配单元、保留现      场、值传递、返回）。\n\n（3）带参宏在处理时不分配内存；而函数调用会分配临时内存。\n\n（4）宏不存在类型问题，宏名无类型，它的参数也是无类型的；而函数中的实参和形参都要定义类型，二者的类型要求一致。\n\n（5）而使用宏定义次数多时，宏替换后源程序会变长；而函数调用不使源程序变长。\n\n  \n\n**1.5****内联函数的优缺点和适用场景是什么？**\n\n（1）优点：内联函数与宏定义一样会在原地展开，省去了函数调用开销，同时又能做类型检查。\n\n（2）缺点：它会使程序的代码量增大，消耗更多内存空间。\n\n（3）适用场景：函数体内没有循环（执行时间短）且代码简短（占用内存空间小）。\n\n  \n\n**1.6****关键字****volatile** **的作用是什么？给出三个不同的例子。**\n\n（1）作用：告诉编译器不要去假设（优化）这个变量的值，因为这个变量可能会被意想不到地改变。精确地说就是，优化器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。\n\n（2）例子：\n\n①并行设备的硬件寄存器（如：状态寄存器）。\n\n②一个中断服务子程序中会访问到的非自动变量。\n\n③多线程应用中被几个线程共享的变量（防止死锁）。\n\n  \n\n  \n\n**以上内容摘自专刊《嵌入式岗位笔试面试真题讲解》，该专刊不仅有真题讲解，还有经验分享，不清楚嵌入式该学什么的同学，想找嵌入式实习/正式工作的同学，都可以来看看：**  \n\n###\n\n[https://blog.nowcoder.net/zhuanlan/v0ELPM](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fblog.nowcoder.net%2Fzhuanlan%2Fv0ELPM)\n\n  \n\n嵌入式推荐公司：华为、    小米\n、[OPPO](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3DOPPO)、VIVO、荣耀、一加、\n[CVTE](https://www.nowcoder.com/jump/super-jump/word?word=CVTE)、\n[大疆](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E5%25A4%25A7%25E7%2596%2586) 、insta360影石、\n[美的](https://www.nowcoder.com/jump/super-jump/word?word=%E7%BE%8E%E7%9A%84) 、\n[TCL](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3DTCL)    、 海信、创维、烽火、比亚迪\n、吉利、长安、大众、[经纬恒润](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E7%25BB%258F%25E7%25BA%25AC%25E6%2581%2592%25E6%25B6%25A6)\n、小鹏、    [图森未来](https://www.nowcoder.com/jump/super-\njump/word?word=%E5%9B%BE%E6%A3%AE%E6%9C%AA%E6%9D%A5)、\n[百度](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E7%2599%25BE%25E5%25BA%25A6) 、\n[滴滴](https://www.nowcoder.com/jump/super-\njump/word?word=%E6%BB%B4%E6%BB%B4)、蔚来、理想、 联发科、\n[紫光展锐](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E7%25B4%25AB%25E5%2585%2589%25E5%25B1%2595%25E9%2594%2590)\n、全志、\n[寒武纪](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E5%25AF%2592%25E6%25AD%25A6%25E7%25BA%25AA)\n、[晶晨半导体](https://www.nowcoder.com/jump/super-\njump/word?word=%E6%99%B6%E6%99%A8%E5%8D%8A%E5%AF%BC%E4%BD%93) 、汇顶、\n[华为](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E5%258D%258E%25E4%25B8%25BA)、\n[中兴](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E4%25B8%25AD%25E5%2585%25B4)、\n[浪潮](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E6%25B5%25AA%25E6%25BD%25AE) 、[TP-\nLINK](https://www.nowcoder.com/jump/super-jump/word?word=TP-LINK)、讯飞、商汤、\n[海康威视](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E6%25B5%25B7%25E5%25BA%25B7%25E5%25A8%2581%25E8%25A7%2586)\n、浙江[大华](https://www.nowcoder.com/jump/super-jump/word?word=%E5%A4%A7%E5%8D%8E)\n、360、小马智行、元戎启行    、深信服      、移动、联通、电信、旷视     、四维图新      、中芯国际      、复旦微电子、极氪\n\n  \n\n![QSWp7XkShEuNKArT7CnOKHBIhjGLeBcP.jpg](https://uploadfiles.nowcoder.com/images/20221202/581229029_1669974563015/000E73F23CDF4E4931626EC9D5C21F5A)  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576054109338398720?sourceSSR=users",
        "title": "小红书 - Java后端开发日常实习面经",
        "content": "### **Timeline：12.21一面、12.25二面、12.27OC （已拒）**\n\n**一面（45min）：**\n\n1、怎么理解HTTP的无状态\n\n2、除了进程，线程还有哪些？\n\n3、大文件的上传方式（个人项目里的问题）\n\n4、在Java中，A线程调用B线程做某些工作，对于B的结果，A线程只想等待特定的时间而非一直等待，应该怎么做？\n\n5、Spring MVC的执行流程\n\n6、索引的分类（数据结构层面，B+树，Hash etc）\n\n**二面（45min）：**\n\n1、为什么有了HTTP还要有RPC\n\n2、RPC有服务注册中心，HTTP中有类似的东西吗？\n\n3、算法：在一个list中，给定一个值target，输出所有和为target的子序列（两个数据范围，两种解法）\n\n**并非面试过程中的所有问题** ，仅记录一些印象较深或没答好的问题\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575933780607692800?sourceSSR=users",
        "title": "特斯拉-软件开发岗-面经",
        "content": "# 一面\n\n  * 英文自我介绍\n  * 英文聊了一下实习项目的问题\n  * 英文聊了点模块设计的问题\n  * 中文聊了个设计用户登录模块的问题\n  * 问了几个美团工作中的问题\n  * 缓存更新策略\n  * 线程池\n  * 美团如何实现链路跟踪的\n  * 反问环节\n\n# 二面\n\n  * 英文自我介绍\n  * 中文介绍实习项目\n  * 问了几个实习项目的问题\n  * 实习项目中的最大技术挑战\n  * 介绍一下在美团的工作内容\n  * 问了几个美团工作内容的问题\n  * 一道简单的算法题\n  * 职业规划\n  * 平时是如何学习技术的\n  * 反问环节\n\n# 三面\n\n  * 全中文聊的，说是因为一二面英文聊过了，评价英文可以就直接中文聊了\n  * 讲一个你经历过觉得最复杂的项目（讲了一下实习项目\n  * 你在美团全职工作过，也在外企实习过，你觉得两家公司有哪些好的地方，有哪些不好的地方\n  * 你刚才提到了work life balance，我印象里美团加班不多啊，说一下你当时加班的情况吧\n  * 为什么出国留学，现在为什么回国\n  * 反问环节\n\n只能说三面体验巨差。我想着特斯拉好歹是外企，就提了句美团加班比实习的外企多，体验不是很爽，面试官就抓着不放，来回问接不接受加班啥的，好像我提了work\nlife balance后印象不是很好...面试完hr也打电话针对我提到了work life\nbalance问了对wlb的看法，对加班的看法啥的。四个工作日后问hr结果，hr说暂不推进了。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575834970720104448?sourceSSR=users",
        "title": "哔哩哔哩SRE-后端开发面经",
        "content": "电话面，无算法，40min\n\n## 拷打\n\n  1. 自我介绍\n  2. 说说项目，分为哪些模块\n  3. CI、CD简单说说\n  4. 操作系统熟悉吗\n  5. Rocketmq 5.0 SDK 相比 4.x 做了哪些优化，什么区别\n  6. 说说 Rocketmq 整合 Spring 的过程，为什么要重新整合一套 5.0 starter 出来\n  7. 对比其他消息队列，不同mq分别用在什么场景\n  8. 说说 Raft 算法\n  9. 有了解其他一致性算法吗\n  10. Leader选举过程\n  11. Split-Vote 怎么处理的\n  12. 选举投票的条件\n  13. 说说集合（吧啦吧啦，ArrayList，LinkedList，HashMap，HashTable，ConcurrenHashMap）\n  14. 线程的状态\n  15. 线程状态的转换\n  16. Future获得结果怎么处理\n  17. JUC工具类用过哪些\n  18. Jvm实战过吗，说说命令\n  19. Jstack可以查看哪些参数\n  20. 自己开发过程中有遇到过哪些问题或者难点（说了 jepsen 框架检验 raft 线性一致性）\n  21. 你们经常用Docker吗\n  22. 镜像怎么管理的\n  23. 实习的话，学校的课怎么办\n\n## **反问**\n\n  1. 部门干什么的\n  2. 面试评价如何\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575814590479548416?sourceSSR=users",
        "title": "❗【经验分享】CVTE一面",
        "content": "时长：30min\n\n形式：群面\n\n问题类型：\n\n1.个人介绍1min\n\n2.辩论赛：人工智能会否影响艺术产品的创作？\n\n给定一长段材料，就这个话题得出结论。\n\n-人数：6人\n\n-每人30s陈述个人观点\n\n-被分成两组对此问题进行讨论\n\n-无需得出一致意见\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575778448283615232?sourceSSR=users",
        "title": "滴滴国际化数分实习凉经",
        "content": "1.英文自我介绍\n\n2.git rebase怎么使用\n\n3.编程题 sql窗口函数 python二分查找\n\n4.衡量点击率如何做AB测试（非常详细，包括原理公式等，例如二项分布方差）\n\n5.智力题 可以百度傻子坐飞机\n\n年前机会好少，好久没面试了，重新开始复习顺便准备下后面的春招了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575731145740939264?sourceSSR=users",
        "title": "字节中台算法",
        "content": "秋招挂遂投了实习，hr说有转正机会，多模态大模型方向，主要是问项目和撕题，感觉题的难度有点为难我这个力扣50题选手了，一道都没撕出来🥲每面都是第二个工作日给结果\n\n  \n\n一面：手势解锁，类似lc351，具体题目记不清了，应该是nxn网格，走m步的所有路径，不能重复，每次只能走相邻或对角线\n\n二面：开根号＋self attention＋大模型八股，还算正常，但我手撕没撕全，八股细节答得也不好\n\n三面：lc103二叉树的锯齿型层序遍历＋圆环回原点（好像是字节高频题），本鼠鼠都没见过：lc103想的是分奇偶分别用队列和栈，调了半天也不对；[圆环回原点]一个环有10个点，编号0-9，每步可以顺时针/逆时针，求经过n步又回到原点有多少种走法（只想到思路大概是动态规划）\n\n1.11 hr面：等结果\n\n  \n\n蛮震惊的，首先是算法菜鸡被志杰代码题吓到了；其次是没手撕出来竟然能通过三面，许愿oc，千万别是kpi呀🥹\n\n\\-----------------------------\n\n更新：已offer\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575814158663364608?sourceSSR=users",
        "title": "❗【经验分享】民生银行一面",
        "content": "时长：30min\n\n形式：群面\n\n问题类型：1.个人介绍1min\n\n2.辩论赛：全球化的优劣势给定一长段材料，就这个话题得出结论。\n\n-人数：12人\n\n-每人30s陈述个人观点\n\n-被分成两组对此问题进行讨论\n\n-得出一致意见后进行总结\n\n辩论赛注意点：\n\n1.能抢先发言，先抢先发言，表达个人观点，往后大家观点相似\n\n2\\. 在辩论回合记下对方的问题，在辩论时及时反驳\n\n3\\. 把话题往个人熟悉的话题上引利用对方话题中与我方观点模糊的地方，向我方观点引导\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575681300665810944?sourceSSR=users",
        "title": "天星数科 1.11 Java后端实习一面",
        "content": "自我介绍\n\n# 项目\n\n你是怎么优化你的系统的？\n\n你在复用代码时有考虑过返回一个泛型而不是返回一个Object吗？\n\n说一下你项目中遇到的比较困难的问题\n\n# 数据库\n\n数据库中B+树索引和哈希索引的区别\n\nB+树的叶子结点存储的是什么？\n\nB+树的叶子结点存储的一定是整行结点吗？\n\n讲一下聚簇索引跟非聚簇索引的区别\n\n讲一下Redis的持久化机制\n\n什么是多线程的上下文切换？\n\n# 计算机基础\n\n操作系统中的线程是怎么切换的？\n\n在浏览器中访问一个地址，说一下其会经历的所有过程\n\n# 总结\n\n公司比较小，所以面试的内容也少，不过的确问了很多我之前没学过的，给我增加了些经验。希望能尽早找到我理想的工作吧\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575813229700530176?sourceSSR=users",
        "title": "❗【经验分享】宁波银行一面",
        "content": "时长：10-15min\n\n形式：单面\n\n问题类型：1.个人介绍1min\n\n限定：个人学习背景+家庭背景+个人优缺点\n\n2\\. 个人经历\n\n-在校期间某件事情是怎么解决的？\n\n-为什么选择在宁波工作？\n\n-能否到线下参加面试？\n\n-能否做具有销售性质的岗位？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575647735349592064?sourceSSR=users",
        "title": "借贷宝一面二面（oc)",
        "content": "一面（40分钟）：\n\n1.自我介绍\n\n2.项目\n\n3.非对称加密和对称加密的区别\n\n4.linux的命令（用过啥ps ,top等）\n\n5.已知pid如何查询哪一个进程\n\n6.如何修改文件等\n\n7.https的ssl/tsl协议\n\n8.mysql的实际操作（两个表left join后的结果，如何添加索引等）\n\n9.java基础八股\n\n10.线程池的参数，拒绝策略，队列\n\n11.假设有1个线程池，参数是4个核心线程，1个非核心，然后有界队列（容量1），此时有5个任务，调度情况\n\n12.实习时间\n\n13.反问：基础还行\n\n一面完第二天就约二面\n\n二面(30分钟）：\n\n1.自我介绍\n\n2.项目\n\n3.非对称加密和对称加密\n\n4.知道哪些加密协议\n\n5.项目中ThreadLocal的使用以及原理\n\n6.实习时间\n\n7.平时看什么书\n\n8.反问：整体还不错\n\n二面完隔天hr面，oc\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575626211104157696?sourceSSR=users",
        "title": "懂车帝日常实习一，二，hr面",
        "content": "# 一面\n\n  1. 自我介绍\n  2. 多路复用，epoll,poll\n  3. Liunx查询指令\n  4. 计网：HTTPS,TCP, HTTP和 TCP的关系HTTPS握手过程ping 的原理\n  5. redis 常见数据结构\n  6. 跳表的实现\n  7. MYSQl：讲讲对 索引的理解inodb 索引的实现聚餐索引和非聚簇索引组合索引， a = x,b=x,c>20,d=x , 需要怎么样设置索引\n  8. kafka 架构\n  9. 算法： 三数之和\n\n# 二面\n\n  1. 自我介绍和项目介绍\n  2. 项目拷打项目是怎么分工的,谁主导项目刷题模块数据库表是怎么设计的为什么要这样设计卷子的功能没有实现没有实现 分数的记录鉴权设计,token ...\n  3. 给一个数组,组成 小于n 的最大数\n  4. MVCC\n  5. HTTPS 过程\n\n# hr面\n\n  1. 优缺点\n  2. 上一份实习为什么这么短\n  3. 。。。\n\n# 感受\n\n  * 一面没有录音，所以可能记的不是很准，但是问的都是一些常规八股，没有问项目\n  * 二面深挖项目，回答的很差，确实很多场景和设计自己没有考虑但是后续的 算法和 八股都 还可以感觉字节很注重 计算机基础，比如 计网，数据库，操作系统，redis 这 四个方面\n  * hr面 摆正态度回答，没啥问题\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575624284391948288?sourceSSR=users",
        "title": "字节搜索 Android岗 日常实习 面经 二面挂",
        "content": "二面面试评价：基础知识不扎实，计网不会，Android基础不扎实。  \n  \n目标：加强学习操作系统和计网，加强基础知识巩固，继续努力  \n  \n一面用时1h，已过  \n我还没学操作系统和计网，我在自我介绍中让他不要问太深，多问点Android，没想到还是问了一些[牛泪]。  \n  \n\\- 自我介绍  \n\\- 聊项目  \n\\- TCP UDP  \n\\- 三次握手 四次挥手  \n\\- 网站打开流程  \n\\- mvp mvc mvvm（我顺便提了一嘴mvi）  \n\\- 生命周期（我直接activity fragment service全说了）  \n\\- 由a到b的生命周期（透明不透明都说了）  \n\\- 为什么透明要这样实现（用户体验更好？如果透明的去stop观感不太好，我是这么想的）  \n\\-\ncontext是什么（我当时脑子抽了，说分theme的context和无theme的context，一种用于activity一种用于application啥的，其实我应该说token的，那个时候我满脑子都是那个contextthemewrapper类）  \n\\- 如何从service里去调用dialog（这个我真没想到，结束后网上查好像是可以调什么系统级dialog）  \n\\- 线程进程区别  \n\\-\n协程怎么理解（我从kotlin入手，顺便谈了谈go的，说明他们两个的不一样，但把go的协程实现说错了！！！，当时光从实现方式入手了，忘提有栈无栈状态机等等了）  \n\\- 问操作系统（不会）  \n\\- 聊家常  \n\\-\n聊我的断点续传下载功能（不是很好解释，我估计面试官也一头雾水，但是我总体感觉我这个还是有点想法的，给他展示了代码也没解释透，整条鱼我只给他介绍了个鱼头）  \n  \n算法题：链表大数加法  \n我用的反转法做出来的，面试官似乎不是特别满意，他想让我不反转方式，我没想到，但复杂度都一样啊  \n  \n有一说一我觉得像KPI面，我还以为会问好难的，其实无论计网还是操作系统还是Android基础（虽然我没答上），基本都是八股文题。  \n  \n二面凉经 45min  \n答的很差劲，估计要凉  \n  \n\\- 自我介绍  \n\\- http https区别  \n\\- mvvm和mvc区别  \n\\- 事件分发，长按如何实现  \n\\- fragment怎么构造  \n\\- gc算法原理（完全不会）  \n\\- hashmap原理  \n  \n编程题：实现单例  \n问我volatile synchronized作用  \n  \n算法题：二数之和  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575470205015453696?sourceSSR=users",
        "title": "写给熟人的面试经验总结",
        "content": "主要是写给熟人看的，防定位，个人信息会写的模糊一些。以前通篇都是基于本人的一些理解，可能会略有一些**主观** 。\n\n#\n\n# 背景\n\n求职方向：后端开发\n\n学历背景：985本+211硕 均非科班\n\n#\n\n# 战绩\n\n今年比较狂，只面了10余家有名有姓的大公司，索性没有翻大车。\n\n几个package在40w-65w，base在24k-35k的offer。（好吧其实直接拒了两个开的低的）\n\n我大约是做出选择了，选的既不是package最大的，也不是background最好的公司，综合了氛围以及base和工作强度（不想太卷，另外考虑到package会比较虚，不如高base）。\n\n#\n\n# 面试细节\n\n## 自我介绍\n\n几乎每一场面试都是从候选人的自我介绍开始。我理解自我介绍可以是一个简历的翻版，一个充满自信的流畅的自我介绍可以在面试之初给面试官留下一个好印象。也可以在自我介绍中更加突出一些你想强调的重点，也可以一定程度上引导面试官进行之后的提问。\n\n所以我觉得重点首先应该是不断打磨出一个2-5分钟的精炼的自我介绍，然后是不断地练习进行表达，以争取一个好的初印象，也能帮助面试官快速的抓住你的重点。\n\n## 基础知识\n\n这里讲一些比较通用的基础知识的点，可能有空也会不断补充。\n\n### 语言\n\n首先从语言的**选择** 开始吧。Java？Go？C++？讲道理你的职业生涯不该局限于一门语言，但总要从某一门语言入手。这里给出一些我的理解\n\n  1. 非科班转码：这里推荐Java吧，毕竟网上关于Java的课程和“面经”铺天盖地，各类培训班机构的视频也层出不穷。（我一开始是学的Java）。\n  2. 找到合适的实习机会：那组里写什么你直接转什么就行了，相信自己的学习能力！很多面试当中面试官会和你深入沟通的细节其实你平常语言多用多思考比到处找面经看有用。（我是实习直接转Go的）\n  3. 考虑一些其他的就业方向：比如想也看看嵌入式就学C++之类的。\n\n然后就是可能会问的一些所谓的**八股**\n。在这个面经满天飞的时代我就不额外整理自己的面经了。我觉得看别人的面经意义不会很大（主要是你的面试其实基本是根据你的自我介绍和经历展开的），推荐先进行系统的学习，然后实践的时候多思考。这里仅列出一些我面试中遇到的比较高频的点：（可能会不断补充）\n\n  1. 语言特性（比如Go并发用协程）\n  2. 数据结构（底层，建议读一读源码）\n  3. 并发（锁机制等等）\n  4. 实战相关（比如你用过哪些库，有没有一些调优情况）\n  5. 对语言的理解（不同语言的差异）\n\n### 计算机基础\n\n这里我说两门课：《计算机网络》、《操作系统》。建议先系统学习，再刷一些比较好的总结。这两门课至少要有一门学的比较好，另一门也别太拉垮。\n\n### 数据库\n\nMySQL和Redis，关系型数据库和非关系型数据库的两员大将。有机会可以实操一下，平常也可以练习一下SQL（尊嘟可能会让写SQL，我面了40多场面试写过两次）。也建议当两门课系统学习一下。\n\n## 项目\n\n这一点其实很难讲，但怎么说呢，现在比较卷，没个像样的项目可能实习面试也不一定有很大机会。\n\n感觉可以用这个路线吧：网红项目 -> 实习项目。\n\n我觉得网上找的项目要是不好包装，实在不行咱就别包装了。。我以前尝试包装过，然后被面试官上来问了一些技术选型的考量直接问懵了。还不如一开始就明牌是网上跟的项目，然后咱好好做好好跟，相关用到的一些中间件什么的也了解了解。面试就告诉面试官你学到了什么就行。\n\n然后就是实习的项目，实习的时候很多时候你可能会做很多杂活，其实不一定有机会接触很好很完整的项目，这里我建议首先积极沟通吧，可以主动和领导要求一些工作。另外一个就是一个项目哪怕你只负责一些边边角角的地方，多去从整体的角度研究学习，也可以学习一下其他同事的代码，实在不行咱们去问。\n\n聊一聊我觉得很重要的两点吧。一是项目介绍，我是参考了STAR法则给项目做了介绍。二是介绍项目，写完项目介绍之后可以找个同学朋友练手，练习一下语言表达，你要让人能明白你做了什么，然后也可以适当的表明一些重点吸引注意。\n\n最后我想说的就是作为校招生不要觉得自己做的东西很弱智难以启齿，大家都是从0开始的，重要的是要展现你的学习能力、思维能力、解决问题的能力等等。有一些很高概率被问到的比如“遇到的困难？如何解决的？”这些比较泛泛的问题还是可以提前准备的。\n\n##\n\n## 代码考核\n\n首先我想解释一下这个环节为什么不叫算法题。因为其实实际上我面试40多场技术面里，有大约八成的面试轮次涉及了Coding，这其中大约六成的场次的题目是传统意义上的算法题（leetcode常见的），还有一小半的时候会有一些业务场景题（往往会考察你的业务思维和能力，是否能优雅地处理并发等等）。有几次面试官让我写完就直接告诉我这就是他们的一些业务场景的简化版。只能说有些顶尖大厂的面试官可能会在乎你的基本功。\n\n然后讲讲算法题吧。面试的时候做过的传统算法题很多应该就是leetcode原题，偶尔有hard，大多应该是medium的水平。感觉把hot100来回刷几遍（可以不做hard），能做到举一反三的话应该能应对大多数面试的算法题。但是偶尔有时候面试官其实也会追问一些别的。算法题不是写完就行的，要能把思路讲清楚，有时候面试官可能也会让你先说思路再开始写。\n\n# 实习\n\n兄弟，相信我，想要找到好的开发工作就给我出去实习，越早越好。现在比较卷，建议可以从中小厂实习->大厂实习。昨天和一个熟悉的hr聊天，她和我说她除了关注学历就会关注是否有大厂实习经历，当然如果是一些特别的中小公司你又学到了很多东西也可以。\n\n没什么好多说的，第一份实习找不到大厂就先中小厂，然后补充能力和简历再去大厂实习。把你的实习经历转换成简历上优雅动人的项目经历和你的一身本领。\n\n# 笔试\n\n不得不说，现在的笔试有点难的夸张了。不过按我的经验，其实很多大公司不一定很看重笔试成绩。不过小小炫耀一下，今年笔试笔者基本都AK了。但是除了某Top电商面试的时候面试官告诉我他们可能会根据笔试排序，大多数公司面试官完全不知道你的笔试情况。甚至有个别公司后面走招聘软件投的简历直接没有让我笔试就面试了，最后也offer了。\n\n说这么多就是想说不要把重心放在为了过笔试不停地刷算法题上。作为开发，打好基本功更为重要。\n\n# 互联网之外的方向\n\n比如车企、银行等，其实需要开发的不仅仅只有互联网公司，如果互联网没有太多机会也可以看看外面的世界。现在的行情并不很好，先入行，保持学习，未来再跳槽去更理想的地方也不失为一种策略。\n\n# 写在最后\n\n写一堆不知道怎么分类的话吧。也算是我的一些血的教训和经验？\n\n  * 心态要好，这很重要。不要把找工作当成生活的全部，该吃吃该喝喝该玩玩。\n  * 找工作其实可能很看缘分，我接到的一些offer让我惊喜地很意外，也许你的答案会自己找到你。\n  * 慢就是快。扎实的打基础可能看起来很慢，但是更稳健的基石可以让你更快速的成长。\n\n最后就是最近真的很多公司补录的机会，建议大家也可以多刷刷招聘软件，或许有意外之喜。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575411580263809024?sourceSSR=users",
        "title": "校招-阿里面试篇连载2",
        "content": "# 1 请解释下为什么鹿晗发布恋情的时候，微博系统会崩溃，如何解决？\n\n**出题人** ：阿里巴巴出题专家：江岚／阿里巴巴数据技术高级技术专家\n\n**参考答案** ：\n\nA. 获取微博通过 pull 方式还是 push 方式\n\nB. 发布微博的频率要远小于阅读微博\n\nC. 流量明星的发微博，和普通博主要区分对待，比如在 sharding的时候，也要考虑这个因素\n\n# 2 现有一批邮件需要发送给订阅顾客，且有一个集群（集群的节点数不定，会动态扩容缩容）来负责具体的邮件发送任务，如何让系统尽快地完成发送？请详述技术方案！\n\n**出题人** ：阿里巴巴出题专家：江岚／阿里巴巴数据技术高级技术专家\n\n**参考答案** ：\n\nA. 借助消息中间件，通过发布者订阅者模式来进行任务分配\n\nB. master-slave 部署，由 master 来分配任务\n\nC. 不借助任何中间件，且所有节点均等。通过数据库的 update-returning，从而实现节点之间任务的互斥\n\n# 3 有一批气象观测站，现需要获取这些站点的观测数据，并存储到 Hive 中。但是气象局只提供了 api\n查询，每次只能查询单个观测点。那么如果能够方便快速地获取到所有的观测点的数据？\n\n**出题人** ：阿里巴巴出题专家：江岚／阿里巴巴数据技术高级技术专家\n\n**参考答案** ：\n\nA. 通过 shell 或 python 等调用 api，结果先暂存本地，最后将本地文件上传到 Hive 中。\n\nB. 通过 datax 的 httpReader 和 hdfsWriter 插件，从而获取所需的数据。\n\nC. 比较理想的回答，是在计算引擎的 UDF 中调用查询 api，执行UDF\n的查询结果存储到对应的表中。一方面，不需要同步任务的导出导入；另一方面，计算引擎的分布式框架天生提供了分布式、容错、并发等特性。\n\n# 4 如何实现两金额数据相加（最多小数点两位）？\n\n**出题人** ：阿里巴巴出题专家：御术／蚂蚁金服数据可视化高级技术专家\n\n**参考答案** ：\n\n其实问题并不难，就是考察候选人对 JavaScript\n数据运算上的认知以及考虑问题的缜密程度，有很多坑，可以用在笔试题，如果用在面试，回答过程中还可以随机加入有很多计算机基础的延伸。\n\n回到这个问题，由于直接浮点相与加会失精，所以要转整数；（可以插入问遇到过吗？是否可以举个例子？）。\n\n转整数是第一个坑，虽然只有两位可以通过乘以100转整数，但由于乘以一百和除以一百都会出现浮点数的运算，所以也会失精，还是要通过字符串来转；（可以插入问字符串转整数有几种方式？）字符串转整是第二个坑，因为最后要对齐计算，如果没考虑周全先toFixed(2)，对于只有一位小数点数据进入计算就会错误；转整数后的计算是个加分点，很多同学往往就是直接算了，如果可以考虑大数计算的场景，恭喜同学进入隐藏关卡，这就会涉及如何有效循环、遍历、算法复杂度的问题。\n\n# 5 关于并行计算的一些基础开放问题。\n\n◼ 如何定义并计算，请分别阐述分布式内存到共享内存模式行编程的区别和实现（例子代码）？\n\n◼ 请使用 MPI 和 OpenMP 分别实现 N 个处理器对 M 个变量的求和？\n\n◼ 请说明 SIMD 指令在循环中使用的权限？向量化优化有哪些手段？\n\n◼ 请用 Amdahl\n定律说明什么是并行效率以及并行算法的扩展性？并说明扩展性的性能指标和限制因素，最后请说明在共享内存计算机中，共享内存的限制？OpenMP\n是怎样实现共享内存编程环境的？MPI 阻塞和非阻塞读写的区别？\n\n**出题人** ：阿里巴巴出题专家：何万青／阿里云高性能计算资深技术专家\n\n**参考答案** ：\n\n（简要答案，但必须触及，可以展开）◼\n同时执行多个/算法/逻辑操作/内存访问/IO，相互独立同时运行，分三个层次：进程级，多个节点分布式内存通过MPI通信并行；线程级，共享内存的多路机器，通过OpenMP实现多线程并行；指令集：通过SIM指令实现单指令多数据。。。。举例吧啦吧啦。\n\n◼ MPI代码，，，OpenMP代码，分别写出来 M个元素，N个处理器的累加，后者注意private 参数。\n\n◼ SIMD在循环中的应用，限制在于 SIMD指令处理的每一个数组的长度，cache line利用，内部循环间的依赖和条件调用等。\n\n◼ 向量化，主要看SSE和AVX指令占比率，通过编译器优化...... 在loop代码中使用。\n\n◼ 性能和计算规模随处理器增加的变化曲线，实测HPL和峰值HPL比率，能用用Amdahl定律表达Tpar(N) = (an + (1-a)n/N )t +\nC (n,N), 能够讲明白串行部分对整个并行的天花板效应，扩展性能够解释清楚算法的扩展性=并行效率随处理器数目的变化关系，画出来。\n\n◼ 共享内存计算机OpenMP对变量的限制描述，EREW，CREW，ERCW，CRCW等区别，NUMA概念，如何保持coherent等。\n\n◼ 写出OpenMP和MPI的核心函数，回答问题即可。\n\n**题目** ：请计算XILINX公司VU9P芯片的算力相当于多少TOPS，给出计算过程与公式。\n\n**出题人** ： 阿里巴巴出题专家：隐达／阿里云异构计算资深专家\n\n**参考答案**\n：基于不同的算法，这个值在十几到几百之间。但是，如果只是单纯比算力，FPGA和ASIC、GPU相比并无太大优势，甚至大多时候有较大劣势。FPGA的优势在于高度的灵活性和算法的针对性。\n\n# 6 一颗现代处理器，每秒大概可以执行多少条简单的MOV指令，有哪些主要的影响因素？\n\n**出题人** ：阿里巴巴出题专家：子团／创新产品虚拟化&稳定性资深技术专家\n\n**参考答案** ：\n\n**及格：** 每执行一条mov指令需要消耗1个时钟周期，所以每秒执行的mov指令和CPU主频相关。\n\n**加分：**\n在CPU微架构上，要考虑数据预取，乱序执行，多发射，内存stall(前端stall和后端stall)等诸多因素，因此除了cpu主频外，还和流水线上的效率(IPC)强相关，比较复杂的一个问题。\n\n# 7 请分析 MaxCompute 产品与分布式技术的关系、当前大数据计算平台类产品的市场现状和发展趋势。\n\n出题人：阿里巴巴出题专家：云郎／阿里 MaxCompute 高级产品专家\n\n参考答案：\n\n开放性问题，无标准答案。\n\n# 7 对大数据平台中的元数据管理是怎么理解的，元数据收集管理体系是怎么样的，会对大数据应用有什么样的影响。\n\n**出题人** ： 阿里巴巴出题专家：映泉／阿里巴巴高级技术专家\n\n**参考答案** ：开放性问题，无标准答案。\n\n# 8 你理解常见如阿里，和友商大数据平台的技术体系差异以及发展趋势和技术瓶颈，在存储和计算两个方面进行概述。\n\n**出题人** ： 阿里巴巴出题专家：映泉／阿里巴巴高级技术专家\n\n**参考答案** ：开放性问题，无标准答案。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575363010131193856?sourceSSR=users",
        "title": "美团实习面经",
        "content": "1.项目架构，项目模块有哪些，你做的内容\n\n2.你如何用redis做缓存，分布式锁（rredisson），限流，压测的\n\n3.100层楼扔两个鸡蛋问题，谷歌原题，但是没准备过，我说了二分，暴力，动态规划，步长，问了我最优情况最坏情况，平均复杂度\n\n4.手撕环形链表，写一半忘了，最后讲了讲快慢指针思路\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575361017933283328?sourceSSR=users",
        "title": "快手日常实习一面【研发效能】",
        "content": "  1. 你写了个简单的 Spring 框架，谈谈对于 IoC 和 AOP 的理解，你是怎么实现的 IoC 和 AOP。\n  2. 循环依赖问题的解决\n  3. Map 接口的实现类有哪些，说一下应用场景(就说了 HashMap 和 ConcurrentHashMap）。\n  4. 读过 HashMap 源码吗，讲讲 HashMap 源码(从初始化、数组长度、扩容机制、哈希冲突解决说了说)。\n  5. 如果 HashMap 中传入的初始容积为是 1 或者 2 这种，那么 HashMap 中的数组实际大小是多少（秒回答16，但回来看源码应该是2）\n  6. 事务的特性有哪些\n  7. MySQL 有哪些隔离级别，分别解决和存在什么问题\n  8. **Java 的基本数据类型和他们分别占用的位数**\n  9. JUC 常用的工具类你了解哪些，应用场景？(我主要说了 Condition 可以实现生产者消费者)\n  10. **那你说说 Condition 的 await 和 signal 与 Object 的 wait 和 notify 有什么区别** （没回答出来）\n  11. SQL 优化的策略\n  12. 设计模式了解哪些？\n  13. 说说单例模式有几种实现(我说熟知的有三种，有的博客上看见过五种)\n  14. 冒泡和快排的时间复杂度和空间复杂度\n  15. 算法：Leetcode 206.反转链表\n\n反问环节：\n\n  1. 部门业务是什么\n  2. 几面\n  3. 有什么建议（面试官说都挺好的，但是面完看自己错了三四个小问）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575341951378026496?sourceSSR=users",
        "title": "go后端华顺信安面试（2024）",
        "content": "## 笔试\n\n  * 算法题 一个矩阵，每个位置上有一个数字，任意选择一个起点，上下左右走，每一步路径上的数字之差必须为1的最长路径长度是多少。\n  * 简答题\n  * 进程和线程的区别，如何通信\n  * TCP/UDP的区别和特点\n  * sql语句\n  * go中defer的顺序\n  * append\n  * ...还有五个记不起来了\n\n## 一面\n\n  * 项目\n  * 数据库的索引类型，使用过那些索引，还有那些索引\n  * 索引的数据结构\n  * redis 有哪些数据类型\n  * OSI七层模型\n  * go语言中的主进程被杀掉后，剩下的线程会怎么办？怎么回收\n  * 一个int类型的数据，它的存储大小和什么有关\n  * sql 语句的执行顺序，select、from、where、group by、having如何排序，join在哪里（使用子查询大忌？设计数据库有问题）\n  * 反问环节：入职后会要做哪方面或者业务的事情？到岗时间？ 答：go后端开发，写各种接口，但是可能会和数据库方面的东西比较多。（大概）\n\n## hr面\n\n  * 自我介绍，校园经历\n  * goland 学习经历，什么时候开始的\n  * 学习中遇到的困难，解决问题后最开心的一次经历\n  * 类似上面的一些问题...\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575334679356665856?sourceSSR=users",
        "title": "中证登，中国结算中国证券登记结算，上海分公司。运维岗一面经验",
        "content": "十点半已经是最后一批了，候场半个小时开始面试。技术类的大家穿的都很随意，旁边西装革履的都是金融人士，我们主打一个随性。\n\n社招，面试是5V5，每个人依次自我介绍，然后面试官根据兴趣任意提问。看上去没有提问的大纲或标准的问题。主要内容还是问过去的工作经验，几乎每个人都被问了“为什么要从上一份工作离职？”，“为什么三年换了四份工作？”，“你现在工资那么高，为什么想要跳槽？”技术问题只问了其中一个人，是否可以做异地机房的kafka通讯（？），然后回答者结合了自己曾经的项目讲了一下。简而言之，都是泛泛的谈论过去做过的项目和使用过的技术，在哪里干什么，不需要太多技术细节。以及没有问纯技术的题目。每个人大概三到四个问题，经验越多越复杂问的就越多。我才毕业一年半，就没怎么问我。\n\n面试如果是异地的可以报销车票。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575283879913799680?sourceSSR=users",
        "title": "软件测试实习生的最后一天，四个小时四场技术面试（三）",
        "content": "​原来分别时真的会心痛，总结一下我作为软件测试实习生的最后几天的工作\n\n## 周三上午\n\n早上有些迷糊，地铁还做错了，险些迟到，大家上车之前记得先看方向哦\n\n刚到工位，ld就找大家开会，对我们的产品进行性能测试，用的软件是阿里的SoloPi\n\n我当时就问前辈咋把电脑里的apk安装到测试机上，前辈说adb install\n\n然后我就回去装环境，把手机连上开始debugging，吭哧吭哧连了半个小时，发现还是识别不到设备，感觉哪里出了问题，搜了半天，原来是用的数据线不对...我用的是充电的那种三头的线，换一根USB转Type-C，直接就齐活了\n\n连上之后就开始熟悉SoloPi，贴个官网链接[SoloPi](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgithub.com%2Falipay%2FSoloPi)，是好用的，阿里出品，必出精品（bushi）\n\n熟悉完了就开始测，也顺便熟悉了性能测试里面常见的几个指标，CPU、内存、响应时间等等，贴个图大家自己看吧\n\n​​​\n![](https://uploadfiles.nowcoder.com/images/20240112/262196079_1705030301848/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n然后看了一会mock测试，看了半天不太懂，感觉就是你要测哪个部分，就模拟所有和他有关的输入接口，就是mock了\n\n## 周三下午\n\n前两天约所有的面试都排到今天下午了，一共四场，三点开始，六点半结束\n\n问题重复的有些多，总结了一些比较经典的放在下面\n\n  1. 如何设计并执行回归测试？ 新功能+老功能测试\n  2. 用例设计方法，最常用的是哪些？ 等价类划分、边界值分析、场景法、状态转换法、错误推测法\n  3. web端常见的安全漏洞有哪些？ XSS注入、SQL注入、DOS攻击、CSRF\n  4. Git操作流程？ 初始化，添加文件，提交，查看、创建、合并分支等\n  5. 数据库事务，举例应用 答：事务特性ACID，购物时，下单后的待支付页面选择取消订单，就是回滚\n  6. MySQL是什么类型数据库？ 关系型数据库\n  7. count（1）和count（*）的区别？ 都为统计所有记录数，包括null，主要区别在查询速度上，少量数据count 1，大量数据count *\n  8. get和post区别？ 安全性、传输效率、是否可缓存\n  9. http状态码有哪些？ 10-有信息 20-成功 30-重定向 40-客户端错误 50-服务端错误\n  10. http和tcp的区别？ http应用层，tcp传输层\n  11. http请求的方法有哪几种？ get、post、delete、put等\n  12. 如何区分前后端问题？ 前端-兼容性、传输数据、UI方面，后端-业务逻辑、响应数据等\n  13. 性能测试关注哪些参数？ CPU、内存、响应时间、设备温度等\n\n## 周四\n\n测试开发工程师技术二面、HR面、OC、与未来部门ld通话\n\n决定离职，和当前ld、HR、技术主管沟通，得到准许\n\n## 周五\n\n**小牛互联-游戏测试实习生-lastday**\n\n今天来到公司，不知道要做点什么，从昨天和ld表达离职开始，就陷入了我是渣男的心理状态\n\n60天内换了三家实习公司...\n\n第一份初创软件测试，入职第三周公司破产，刚过onboarding..\n\n第二份游戏测试，公司待遇和团队氛围非常好，因为lz想做点测开方向工作，第六周申请离职\n\n第三份测开实习，下周一firstday，到时更新\n\n## 软件测试实习总结\n\n这估计是我最后一份纯软件客户端测试的实习了，在过去的两个月内，我真正的理解了软件测试（QA）要做哪些工作，也尽职尽责的完成了上级派给我的工作内容\n\n### 负责的工作\n\n包括但不限于：web端、app端功能和兼容性测试，弱网测试，性能测试\n\n### 工作中涉及到的角色\n\n产品经理（发起需求的）、开发（实现需求和改bug的）、交互（研究竞品和提高产品体验感的）、UI（设计产品样式图，包括帮忙一起review的）、测试（质量管理QA，和前面所有角色沟通交流，找bug、定位bug、描述bug的）\n\n### 团队氛围和工作体验\n\n我过去的两份实习，团队氛围和工作体验感都是非常nice的\n\n第一份公司灵活加班，需要发版ld经常熬到凌晨，当然我不需要\n\n第二份游戏公司，基本不加班，六点半下班，七点公司就找不到人了，同时团队氛围和待遇都非常好，只可惜和我职业发展选择没有那么契合，遂申请quit\n\n## 未来规划\n\n经过这两份实习，我是真的理解了QA（俗称点工）的工作了，内容重复，但是对产品质量十分重要，我预估是未来的新方向\n\n下一份测试开发实习，希望我能承担更重要的工作吧，面试的时候也和ld表达了\n\n大家加油，24校招远没有结束，努力就有机会，我们下次再见！\n\n**好了，以上就是本文的全部内容，如有问题欢迎留言讨论。**\n\n**本人正在组建测试开发方向的交流社区，如果您对软件质量管理方面感兴趣，欢迎私信我了解。**\n\n**我是chowley，一个专注互联网技术和软件质量保障领域的博主，我们下次再见！**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.** ​\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575125768431284224?sourceSSR=users",
        "title": "moka二面hr面",
        "content": "自我介绍\n\n实习中遇到的难题，配合场景题。\n\n幂等接口实现，分布式锁，本地锁。使用场景和原理\n\n（二面主要问的都是上段实习中问题）\n\nsass系统场景题\n\n反问\n\nhr面\n\n深刻的事\n\n评价自己之类balabala\n\n反问\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575085946429796352?sourceSSR=users",
        "title": "百度 深度学习框架开发实习生（12.25）",
        "content": "我太菜了，C++需要恶补才行，面试完基本上就知道自己寄，面试官特别好给我说了很多，也让我充分认识到自己的不足\n\n  * 如果是项目的话，会问你项目背景以及项目最终的实现结果等等\n  * 如果是自己学习的项目的话，会问你对这个项目的学习心得\n  * 最后问对C++对掌握程度\n  * 实现vector\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575085805421543424?sourceSSR=users",
        "title": "校招-阿里面试篇连载1",
        "content": "由于版面的原因，校招-阿里面试篇总共分三篇，持续更新中，后续还有其他公司的面试题供参考。\n\n# 1 如何实现一个高效的单向链表逆序输出？\n\n**出题人** ：阿里巴巴出题专家：昀龙／阿里云弹性人工智能负责人\n\n**参考答案** ：下面是其中一种写法，也可以有不同的写法，比如递归等。供参考。\n\n    \n    \n    typedef struct node{\n        int           data;\n        struct node*  next;\n        node(int d):data(d), next(NULL){}\n    }node;\n    \n    void reverse(node* head)\n    {\n        if(head == NULL){\n            return;\n        }\n    \n        node* pleft = NULL;\n        node* pcurrent = head;\n        node* pright = head->next;\n    \n        while(pright){\n            pcurrent->next = pleft;\n            node *ptemp = pright->next;\n            pright->next = pcurrent;\n            pleft = pcurrent;\n            pcurrent = pright;\n            pright = ptemp;\n        }\n    \n        while(pcurrent != NULL){\n            cout<< pcurrent->data << \"\\t\";\n            pcurrent = pcurrent->next;\n        }\n    }\n    \n    \n    \n    \n    \n    class Solution<T> {\n    \n        public void reverse(ListNode<T> head) {\n           if (head == null || head.next == null) {\n        \t   return ;\n           }\n           ListNode<T> currentNode = head;\n           Stack<ListNode<T>> stack = new Stack<>();\n           while (currentNode != null) {\n        \t   stack.push(currentNode);\n        \t   ListNode<T> tempNode = currentNode.next;\n        \t   currentNode.next = null; // 断开连接\n        \t   currentNode = tempNode;\n           }\n           \n           head = stack.pop();\n           currentNode = head;\n           \n           while (!stack.isEmpty()) {\n        \t   currentNode.next = stack.pop();\n        \t   currentNode = currentNode.next;\n           }\n        }\n    }\n    \n    class ListNode<T>{\n    \tT val;\n    \tpublic ListNode(T val) {\n    \t\tthis.val = val;\n    \t}\n    \tListNode<T> next;\n    }\n    \n\n# 2 已知 sqrt (2)约等于 1.414，要求不用数学库，求 sqrt (2)精确到小数点后 10 位。\n\n**出题人** ：——阿里巴巴出题专家：文景／阿里云 CDN 资深技术专家\n\n**参考答案** ：\n\n**考察点**\n\n  1. 基础算法的灵活应用能力（二分法学过数据结构的同学都知道，但不一定往这个方向考虑；如果学过数值计算的同学，应该还要能想到牛顿迭代法并解释清楚）\n  2. 退出条件设计\n\n## 二分法\n\n**1\\. 已知 sqrt(2)约等于 1.414，那么就可以在(1.4, 1.5)区间做二分**\n\n查找，如：a) high=>1.5b) low=>1.4c) mid => (high+low)/2=1.45d) 1.45*1.45>2 ?\nhigh=>1.45 : low => 1.45e) 循环到 c)\n\n**2\\. 退出条件**\n\na) 前后两次的差值的绝对值<=0.0000000001, 则可退出\n\n    \n    \n    const double EPSILON = 0.0000000001;\n    \n    double sqrt2() {\n        double low = 1.4, high = 1.5;\n        double mid = (low + high) / 2;\n    \n        while (high - low > EPSILON) {\n            if (mid * mid > 2) {\n                high = mid;\n            } else {\n                low = mid;\n            }\n            mid = (high + low) / 2;\n        }\n    \n        return mid;\n    }\n    \n    \n\n## 牛顿迭代法\n\n**1.牛顿迭代法的公式为：**\n\n![](https://uploadfiles.nowcoder.com/images/20240111/331468064_1704982639120/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n对于本题，需要求解的问题为：![](https://uploadfiles.nowcoder.com/images/20240111/331468064_1704982648339/D2B5CA33BD970F64A6301FA75AE2EB22)\n的零点\n\n    \n    \n    EPSILON = 0.1 ** 10\n    def newton(x):\n        if abs(x ** 2 - 2) > EPSILON:\n            return newton(x - (x ** 2 - 2) / (2 * x))\n        else:\n            return x\n    \n    \n\n# 3 给定一个二叉搜索树(BST)，找到树中第 K 小的节点。\n\n**出题人** ：阿里巴巴出题专家：文景／阿里云 CDN 资深技术专家\n\n**参考答案** ：\n\n#####  考察点\n\n  1. 基础数据结构的理解和编码能力\n  2. 递归使用\n\n##### 示例\n\n    \n    \n           5\n          / \\\n         3   6\n        / \\\n       2   4\n      /\n     1\n     \n    \n    \n\n说明：保证输入的 K 满足 1<=K<=(节点数目）\n\n解法1：树相关的题目，第一眼就想到递归求解，左右子树分别遍历。联想到二叉搜索树的性质，root 大于左子树，小于右子树，如果左子树的节点数目等于\nK-1，那么 root 就是结果，否则如果左子树节点数目小于 K-1，那么结果必然在右子树，否则就在左子树。因此在搜索的时候同时返回节点数目，跟 K\n做对比，就能得出结果了。\n\n    \n    \n    /**\n     * Definition for a binary tree node.\n     **/\n    \n    public class TreeNode {\n        int val;\n        TreeNode left;\n        TreeNode right;\n        TreeNode(int x) { val = x; }\n    }\n    \n    class Solution {\n        private class ResultType {\n        \n            boolean found;  // 是否找到\n            \n            int val;  // 节点数目\n            ResultType(boolean found, int val) {\n                this.found = found;\n                this.val = val;\n            }\n        }\n    \n        public int kthSmallest(TreeNode root, int k) {\n            return kthSmallestHelper(root, k).val;\n        }\n    \n        private ResultType kthSmallestHelper(TreeNode root, int k) {\n            if (root == null) {\n                return new ResultType(false, 0);\n            }\n    \n            ResultType left = kthSmallestHelper(root.left, k);\n    \n            // 左子树找到，直接返回\n            if (left.found) {\n                return new ResultType(true, left.val);\n            }\n    \n            // 左子树的节点数目 = K-1，结果为 root 的值\n            if (k - left.val == 1) {\n                return new ResultType(true, root.val);\n            }\n    \n            // 右子树寻找\n            ResultType right = kthSmallestHelper(root.right, k - left.val - 1);\n            if (right.found) {\n                return new ResultType(true, right.val);\n            }\n    \n            // 没找到，返回节点总数\n            return new ResultType(false, left.val + 1 + right.val);\n        }\n    }\n    \n    \n    \n\n解法2：基于二叉搜索树的特性，在中序遍历的结果中，第k个元素就是本题的解。最差的情况是k节点是bst的最右叶子节点，不过`每个节点的遍历次数最多是1次`。遍历并不是需要全部做完，使用计数的方式，找到第k个元素就可以退出。下面是go的一个简单实现。\n\n    \n    \n    // BST is binary search tree\n    type BST struct {\n    \tkey, value  int\n    \tleft, right *BST\n    }\n    \n    func (bst *BST) setLeft(b *BST) {\n    \tbst.left = b\n    }\n    \n    func (bst *BST) setRight(b *BST) {\n    \tbst.right = b\n    }\n    \n    // count 查找bst第k个节点的值，未找到就返回0\n    func count(bst *BST, k int) int {\n    \tif k < 1 {\n    \t\treturn 0\n    \t}\n    \n    \tc := 0\n    \tok, value := countRecursive(bst, &c, k)\n    \n    \tif ok {\n    \t\treturn value\n    \t}\n    \n    \treturn 0\n    }\n    \n    // countRecurisive 对bst使用中序遍历\n    // 用计数方式控制退出遍历，参数c就是已遍历节点数\n    func countRecursive(bst *BST, c *int, k int) (bool, int) {\n    \tif bst.left != nil {\n    \t\tok, value := countRecursive(bst.left, c, k)\n    \t\tif ok {\n    \t\t\treturn ok, value\n    \t\t}\n    \t}\n    \n    \tif *c == k-1 {\n    \t\treturn true, bst.value\n    \t}\n    \n    \t*c++\n    \n    \tif bst.right != nil {\n    \t\tok, value := countRecursive(bst.right, c, k)\n    \t\tif ok {\n    \t\t\treturn ok, value\n    \t\t}\n    \t}\n    \n    \treturn false, 0\n    }\n    \n    // 下面是测试代码，覆盖了退化的情况和普通bst\n    \n    func createBST1() *BST {\n    \tb1 := &BST{key: 1, value: 10}\n    \tb2 := &BST{key: 2, value: 20}\n    \tb3 := &BST{key: 3, value: 30}\n    \tb4 := &BST{key: 4, value: 40}\n    \tb5 := &BST{key: 5, value: 50}\n    \tb6 := &BST{key: 6, value: 60}\n    \tb7 := &BST{key: 7, value: 70}\n    \tb8 := &BST{key: 8, value: 80}\n    \tb9 := &BST{key: 9, value: 90}\n    \n    \tb9.setLeft(b8)\n    \tb8.setLeft(b7)\n    \tb7.setLeft(b6)\n    \tb6.setLeft(b5)\n    \tb5.setLeft(b4)\n    \tb4.setLeft(b3)\n    \tb3.setLeft(b2)\n    \tb2.setLeft(b1)\n    \n    \treturn b9\n    }\n    \n    func createBST2() *BST {\n    \tb1 := &BST{key: 1, value: 10}\n    \tb2 := &BST{key: 2, value: 20}\n    \tb3 := &BST{key: 3, value: 30}\n    \tb4 := &BST{key: 4, value: 40}\n    \tb5 := &BST{key: 5, value: 50}\n    \tb6 := &BST{key: 6, value: 60}\n    \tb7 := &BST{key: 7, value: 70}\n    \tb8 := &BST{key: 8, value: 80}\n    \tb9 := &BST{key: 9, value: 90}\n    \n    \tb1.setRight(b2)\n    \tb2.setRight(b3)\n    \tb3.setRight(b4)\n    \tb4.setRight(b5)\n    \tb5.setRight(b6)\n    \tb6.setRight(b7)\n    \tb7.setRight(b8)\n    \tb8.setRight(b9)\n    \n    \treturn b1\n    }\n    \n    func createBST3() *BST {\n    \tb1 := &BST{key: 1, value: 10}\n    \tb2 := &BST{key: 2, value: 20}\n    \tb3 := &BST{key: 3, value: 30}\n    \tb4 := &BST{key: 4, value: 40}\n    \tb5 := &BST{key: 5, value: 50}\n    \tb6 := &BST{key: 6, value: 60}\n    \tb7 := &BST{key: 7, value: 70}\n    \tb8 := &BST{key: 8, value: 80}\n    \tb9 := &BST{key: 9, value: 90}\n    \n    \tb5.setLeft(b3)\n    \tb5.setRight(b7)\n    \tb3.setLeft(b2)\n    \tb3.setRight(b4)\n    \tb2.setLeft(b1)\n    \tb7.setLeft(b6)\n    \tb7.setRight(b8)\n    \tb8.setRight(b9)\n    \n    \treturn b5\n    }\n    \n    func createBST4() *BST {\n    \tb := &BST{key: 1, value: 10}\n    \tlast := b\n    \n    \tfor i := 2; i < 100000; i++ {\n    \t\tn := &BST{key: i, value: i * 10}\n    \t\tlast.setRight(n)\n    \n    \t\tlast = n\n    \t}\n    \n    \treturn b\n    }\n    \n    func createBST5() *BST {\n    \tb := &BST{key: 99999, value: 999990}\n    \tlast := b\n    \n    \tfor i := 99998; i > 0; i-- {\n    \t\tn := &BST{key: i, value: i * 10}\n    \t\tlast.setLeft(n)\n    \n    \t\tlast = n\n    \t}\n    \n    \treturn b\n    }\n    \n    func createBST6() *BST {\n    \tb := &BST{key: 50000, value: 500000}\n    \tlast := b\n    \n    \tfor i := 49999; i > 0; i-- {\n    \t\tn := &BST{key: i, value: i * 10}\n    \t\tlast.setLeft(n)\n    \n    \t\tlast = n\n    \t}\n    \n    \tlast = b\n    \n    \tfor i := 50001; i < 100000; i++ {\n    \t\tn := &BST{key: i, value: i * 10}\n    \t\tlast.setRight(n)\n    \n    \t\tlast = n\n    \t}\n    \n    \treturn b\n    }\n    \n    func TestK(t *testing.T) {\n    \tbst1 := createBST1()\n    \tbst2 := createBST2()\n    \tbst3 := createBST3()\n    \tbst4 := createBST4()\n    \n    \tcheck(t, bst1, 1, 10)\n    \tcheck(t, bst1, 2, 20)\n    \tcheck(t, bst1, 3, 30)\n    \tcheck(t, bst1, 4, 40)\n    \tcheck(t, bst1, 5, 50)\n    \tcheck(t, bst1, 6, 60)\n    \tcheck(t, bst1, 7, 70)\n    \tcheck(t, bst1, 8, 80)\n    \tcheck(t, bst1, 9, 90)\n    \n    \tcheck(t, bst2, 1, 10)\n    \tcheck(t, bst2, 2, 20)\n    \tcheck(t, bst2, 3, 30)\n    \tcheck(t, bst2, 4, 40)\n    \tcheck(t, bst2, 5, 50)\n    \tcheck(t, bst2, 6, 60)\n    \tcheck(t, bst2, 7, 70)\n    \tcheck(t, bst2, 8, 80)\n    \tcheck(t, bst2, 9, 90)\n    \n    \tcheck(t, bst3, 1, 10)\n    \tcheck(t, bst3, 2, 20)\n    \tcheck(t, bst3, 3, 30)\n    \tcheck(t, bst3, 4, 40)\n    \tcheck(t, bst3, 5, 50)\n    \tcheck(t, bst3, 6, 60)\n    \tcheck(t, bst3, 7, 70)\n    \tcheck(t, bst3, 8, 80)\n    \tcheck(t, bst3, 9, 90)\n    \n    \tcheck(t, bst4, 1, 10)\n    \tcheck(t, bst4, 2, 20)\n    \tcheck(t, bst4, 3, 30)\n    \tcheck(t, bst4, 4, 40)\n    \tcheck(t, bst4, 5, 50)\n    \tcheck(t, bst4, 6, 60)\n    \tcheck(t, bst4, 7, 70)\n    \tcheck(t, bst4, 8, 80)\n    \tcheck(t, bst4, 9, 90)\n    \n    \tcheck(t, bst4, 99991, 999910)\n    \tcheck(t, bst4, 99992, 999920)\n    \tcheck(t, bst4, 99993, 999930)\n    \tcheck(t, bst4, 99994, 999940)\n    \tcheck(t, bst4, 99995, 999950)\n    \tcheck(t, bst4, 99996, 999960)\n    \tcheck(t, bst4, 99997, 999970)\n    \tcheck(t, bst4, 99998, 999980)\n    \tcheck(t, bst4, 99999, 999990)\n    }\n    \n    func check(t *testing.T, b *BST, k, value int) {\n    \tt.Helper()\n    \n    \tcheckCall(t, b, k, value, count)\n    \t// 此处可添加其他解法的实现\n    }\n    \n    func checkCall(t *testing.T, b *BST, k, value int, find func(bst *BST, kth int) int) {\n    \tt.Helper()\n    \n    \tgot := find(b, k)\n    \tif got != value {\n    \t\tt.Fatalf(\"want:%d, got:%d\", value, got)\n    \t}\n    }\n    \n    \n\n# 4 LRU 缓存机制\n\n设计和实现一个 LRU（最近最少使用）缓存数据结构，使它应该支持一下操作：get 和 put。get(key) - 如果 key 存在于缓存中，则获取\nkey 的 value（总是正数），否则返回 -1。put(key,value) - 如果 key 不存在，请设置或插入\nvalue。当缓存达到其容量时，它应该在插入新项目之前使最近最少使用的项目作废。\n\n**出题人** ：文景／阿里云 CDN 资深技术专家\n\n**参考答案** ：\n\npython版本的：\n\n    \n    \n    class LRUCache(object):\n        def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        self.cache = {}\n        self.keys = []\n        self.capacity = capacity\n        \n        def visit_key(self, key):\n            if key in self.keys:\n                self.keys.remove(key)\n            self.keys.append(key)\n        \n        def elim_key(self):\n            key = self.keys[0]\n            self.keys = self.keys[1:]\n            del self.cache[key]\n            \n        def get(self, key):\n            \"\"\"\n            :type key: int\n            :rtype: int\n            \"\"\"\n            if not key in self.cache:\n                return -1\n            self.visit_key(key)\n            return self.cache[key]\n        \n        def put(self, key, value):\n            \"\"\"\n            :type key: int\n            :type value: int\n            :rtype: void\n            \"\"\"\n            if not key in self.cache:\n            if len(self.keys) == self.capacity:\n            self.elim_key()\n            self.cache[key] = value\n            self.visit_key(key)\n    \n    def main():\n        s =\n        [[\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"],[[1,1],[2,2],[1],[3,3],[2],[\n        4,4],[1],[3],[4]]]\n        obj = LRUCache(2)\n        l=[]\n        for i,c in enumerate(s[0]):\n            if(c == \"get\"):\n                l.append(obj.get(s[1][i][0]))\n            else:\n                obj.put(s[1][i][0], s[1][i][1])\n        print(l)\n    \n    if __name__ == \"__main__\":\n        main()\n    \n    \n    \n\nc++版本的：\n\n    \n    \n    class LRUCache{\n        public:\n            LRUCache(int capacity) {\n                cap = capacity;\n            }\n            \n            int get(int key) {\n                auto it = m.find(key);\n                if (it == m.end()) return -1;\n                l.splice(l.begin(), l, it->second);\n                return it->second->second;\n            }\n            \n            void set(int key, int value) {\n                auto it = m.find(key);\n                if (it != m.end()) l.erase(it->second);\n                l.push_front(make_pair(key, value));\n                m[key] = l.begin();\n                if (m.size() > cap) {\n                    int k = l.rbegin()->first;\n                    l.pop_back();\n                    m.erase(k);\n                }\n            }\n    }\n    \n    \n    \n\n# 5 关于 epoll 和 select 的区别，哪些说法是正确的？（多选）\n\nA. epoll 和 select 都是 I/O 多路复用的技术，都可以实现同时监听多个 I/O 事件的状态。\n\nB. epoll 相比 select 效率更高，主要是基于其操作系统支持的I/O事件通知机制，而 select 是基于轮询机制。\n\nC. epoll 支持水平触发和边沿触发两种模式。\n\nD. select 能并行支持 I/O 比较小，且无法修改。\n\n出题人：阿里巴巴出题专家：寈峰／阿里技术专家\n\n参考答案：A，B，C\n\n【延伸】那在高并发的访问下，epoll使用那一种触发方式要高效些？当使用边缘触发的时候要注意些什么东西？\n\n# 6 从 innodb 的索引结构分析，为什么索引的 key 长度不能太长？\n\n出题人：阿里巴巴出题专家：近秋／阿里云数据库产品技术部技术专家\n\n参考答案：key 太长会导致一个页当中能够存放的 key 的数目变少，间接导致索引树的页数目变多，索引层次增加，从而影响整体查询变更的效率。\n\n# 7 MySQL 的数据如何恢复到任意时间点？\n\n**出题人** ：阿里巴巴出题专家：近秋／阿里云数据库产品技术部技术专家参考答案\n\n**参考答案** ：恢复到任意时间点以定时的做全量备份，以及备份增量的 binlog\n日志为前提。恢复到任意时间点首先将全量备份恢复之后，再此基础上回放增加的 binlog 直至指定的时间点。\n\n# 8 NFS 和 SMB 是最常见的两种 NAS（Network Attached Storage）协议，当把一个文件系统同时通过 NFS 和 SMB\n协议共享给多个主机访问时，以下哪些说法是错误的：（多选）\n\nA. 不可能有这样的操作，即把一个文件系统同时通过 NFS 和 SMB协议共享给多个主机访问。\n\nB. 主机 a 的用户通过NFS 协议创建的文件或者目录，另一个主机 b的用户不能通过 SMB 协议将其删除。\n\nC. 在同一个目录下，主机 a 通过 NFS 协议看到文件 file.txt，主机b 通过 SMB 协议也看到文件 file.txt，那么它们是同一个文件。\n\nD. 主机 a 通过 NFS 协议，以及主机 b 通过 SMB 协议，都可以通过主机端的数据缓存，提升文件访问性能。\n\n**出题人** ：阿里巴巴出题专家：起影／阿里云文件存储高级技术专家\n\n**参考答案** ：A，B，C\n\n# 9 输入 ping IP 后敲回车，发包前会发生什么？\n\n**出题人** ：阿里巴巴出题专家：怀虎／阿里云云效平台负责人\n\n**参考答案** ：\n\nping目标ip时，先查路由表，确定出接口\n\n  * 如果落在直连接口子网内，此时若为以太网等 _多路访问网络_ 则先查询arp缓存，命中则直接发出，否则在该接口上发arp询问目标ip的mac地址，取得后发出，若为ppp等 _点对点网络_ ，则直接可以发出；\n  * 如果查表落在缺省路由上，此时若为以太网等 _多路访问网络_ 则先查询网关arp缓存，命中则直接发出，否则在该接口上发arp询问网关的mac地址，取得后发出，若为ppp等 _点对点网络_ ，则直接可以发出；\n  * 若查表未命中，则返回不可达。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575055683293360128?sourceSSR=users",
        "title": "小红书后端开发实习一二面（已oc）",
        "content": "四个月之前的面经了，目前实习已结束，再回顾一下。\n\n# 一面\n\n## 八股\n\n  1. ArrayList和LinkedList区别\n  2. 为什么Linkedlist的插入会比ArrayList插入效率高\n  3. HashMap知道吧，他有什么问题（说了线程不安全，头插死循环、同时put覆盖，并发put、get可能为空）\n  4. 说说头插法和尾插法\n  5. HashTable为什么线程安全\n  6. ConcurrentHashMap1.7和1.8线程安全怎么做的（分段锁->sychronized+CAS）\n  7. JDK1.8里的 sychronized 锁是锁的哪里（数组节点）\n\n## **项目**\n\n  1. token无感刷新怎么做的\n  2. 前端每次发请求都要带两个token吗？\n  3. 说说布隆过滤器的结构\n  4. 布隆过滤器有什么缺点（查询误判）\n  5. 布隆过滤器的元素能否删除\n  6. 布隆过滤器如何提高容错能力\n  7. 知不知道布谷鸟过滤器？\n  8. 全局异常处理器怎么做的？\n  9. 怎么没用Spring自带的@ExceptionHandler\n  10. 项目用mq做了什么\n  11. mq除了解耦，还有哪些功能？\n  12. mq怎么保证事务的\n  13. 喜欢看什么书（我说计算机，或者人文社科？他说这不是看了就睡着了吗）\n  14. 有什么爱好\n\n## 算法\n\n  1. 前序遍历二叉树\n  2. 层序遍历二叉树\n\n## 反问\n\n  1. 部门做什么\n  2. 技术栈有哪些\n  3. 面试评价如何\n\n# 二面\n\n## 拷打\n\n  1. 一面自我评价怎么样？\n  2. 觉得一面面试官怎么样？\n  3. 为什么会想做开源，说说做开源的契机\n  4. 如果小红书内部需要做一个starter，你会从哪些方面去考虑、设计\n  5. Rocketmq延迟消息底层是怎么设计的\n  6. 那你说说ScheduleMessageService怎么拉延时消息的\n  7. mysql的查询能做哪些优化\n  8. 知道哪些中间件用到了raft算法\n  9. 算法刷得咋样了，会不会接雨水\n  10. 学校那些课咋办\n  11. 手里有不有其他offer，你愿意来上海吗？\n\n## **场景题**\n\n  1. 坐过高铁吧，有抢过票吗。你说说抢票会有哪些情况？（线程安全问题，比如同时读写共享变量）\n  2. 那你说的是一种情况，读到的值是正确的，还有其他情况吗？（读的缓存，缓存没更新，mysql和redis数据不一致）\n  3. 那对于数据不一致我们一般怎么处理？\n  4. 现在我们来给12306抢票系统设计一个缓存，kv存什么？\n\n第四题花了大概十多分钟，被绕进去了，不过面试官一直在引导我。\n\n## **反问**\n\n  1. 面试评价怎样\n  2. 部门做什么的\n  3. 面试官您怎么看基架和业务\n\n##\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/575040983914590208?sourceSSR=users",
        "title": "绿盟一面-Java",
        "content": "面试其实也就一面，前两天刚面完，两个面试官拷打\n\n第一个面试官：\n\n1、自我介绍\n\n2、问我第二个项目一个关于ak、sk的签名算法\n\n3、问我dubbo在项目里面怎么用的\n\n4、spring事务\n\n5、问我第一个项目做了什么（两个模块）\n\n6、Jvm垃圾回收的过程（项目中提到了jvm）\n\n7、双亲委派机制\n\n8、tomcat是否打破了双亲委派机制\n\n9、为什么打破\n\n10、说一下策略模式\n\n11、说一下ElasticSearch，为什么要用（说了MySQL模糊查找，索引失效，用es做了一个全文索引，提高查询效率）\n\n12、如何使用的（用的springdata的starter，boolquerybulider）\n\n13、Docker怎么部署一个镜像的\n\n14、问了我是否自己创建过镜像（答的没有，学的时候只是稍微看过，还没实践过）\n\n第二个面试官：\n\n因为我在第一个面试官哪里答的挺多的不知道问我什么了\n\n1、mybatis-plus，如果出现就是主键本来写的1，存入的时候变成10亿，这是什么问题。\n\n当时直接懵逼，然后面试官加了一句，按照我的经验怎么解决，我就说了我一般解决问题的方式：Gpt、百度，还说了mybatis-\nplus有一个可以自动增长主键的，我会先打开这个试一试\n\n2、沉默了几分钟，在我简历上找东西，问我redis怎么使用的（答了一啪啦，用的是springdata 的redistemplate）\n\n3、redis缓存雪崩、穿透\n\n后面就没问了，然后说的是1-2天出结果，昨天憋了一天没问，今天就问了，面试过了，说的是年后才入职，也不知道是什么意思，还没给实习offer，懂得大佬解答一下\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574991853695631360?sourceSSR=users",
        "title": "天美一面 后台开发（凉）",
        "content": "# 天美一面 后台开发（凉）\n\n### 自我介绍\n\n### C++用什么版本？\n\nC++11\n\n### 3个全局变量相互依赖，在程序中该如何初始化\n\n答：手动分析、依赖关系转为类间的继承关系\n\n反问：3个变量手动分析，那300个变量呢？\n\n答：不会\n\n### 全局静态变量和函数静态变量的初始化顺序\n\n全局静态变量先初始化，第一次调用函数时，初始化函数内的静态变量\n\n### 全局静态变量和全局非静态变量的初始化顺序\n\n这个当时说的是先初始化全局静态，再全局非静态，说错了。\n\n应该是无特定顺序，先定义则先初始化。\n\n### 谈一下对多态的理解\n\n静态多态：函数重载，函数名相同但参数列表不同，简单说了下使用场景\n\n动态多态：子类对父类的虚函数重写，虚函数表\n\n### 虚函数表的存储位置\n\n### 运行时刻能把虚函数表拿出来吗\n\n### 虚函数表指针存储位置\n\n对象的头部字节\n\n### 拿到虚函数表地址后，是否可以改写虚函数表的内容\n\n虚函数表在代码段，不可以被修改，否则会引发段错误。\n\n### 题目一\n\n    \n    \n    class Test\n    {\n    public:\n        void hello() {\n            printf(\"hello\\n\");\n        }\n    };\n    \n    int main()\n    {\n        Test *p = nullptr;\n        p->hello();\n    \treturn 0;\n    }\n    \n\n问：上述代码可以编译通过吗？可以执行吗？\n\n答：虽然p指向空，但其类型被编译器解释为Test，可以正常调用hello函数，但这种空悬挂指针实际上是未定义行为。\n\n问：p可以正常调用hello吗？可以正常执行吗\n\n答：（内心OS：？？？）可以执行\n\n问：假如Test有个父类，hello函数重写了父类的hello函数，还能执行吗？\n\n答：可以\n\n### 说一下虚拟内存\n\n### Linux上有个二进制程序一直在运行，修改代码后重新编译把原来的二进制程序覆盖了，会怎么样？\n\n当时答的是原程序被操作系统加载进内存，不会受到影响，但好像不对。\n\n### 进程占用的内存比较多，该怎么调试是什么情况？\n\nfree可以查看已使用/已分配/已缓存的内存大小\n\nhtop查看每个进程的虚拟内存/物理内存使用大小\n\n### 定位到一个进程的内存比较异常，该如何进一步查找为什么内存会异常\n\n答：valgrind/asan可以给出内存泄漏的位置和大小\n\n问：一般是不太精确的，该怎么找出是哪一段代码引起泄漏\n\n答：工具+人工看代码\n\n问：代码量太大，人工不现实\n\n### 外网用户连接不到服务器，该怎么排查是什么原因造成的\n\n不会，完全瞎扯。\n\n一开始从客户端的角度去说，能否ping通服务器，dns设置等等，但面试官表示不应该让用户去做这些。\n\n然后又从服务器角度说，可能用户被服务器黑名单封禁。但面试官也不满意。\n\n### 题目二，lc460 LFU缓存，15min\n\n### 题目三，atoll，10min\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574982388518756352?sourceSSR=users",
        "title": "商汤智能座舱一面（社招）",
        "content": "1.自我介绍\n\n2.介绍人脸识别项目（DeepID）\n\n3.介绍实习项目\n\n4.有没有别的项目可以介绍（得找两个项目做一做啊，项目太少了）\n\n5.最新的深度学习相关的东西（例如transformer和一些最新的框架）\n\ntransformer， attention， bert\n\ntransformer结构和LSTM的区别和优势，transformer怎么体现时序信息\n\nencoder和decoder的输入输出和结构\n\n位置编码\n\n大语言模型\n\n6.简历里面写到的东西（介绍batch Norm），简历里面的东西不要乱写，会的多写点，不会的不要写，写了之后要好好复习你写的东西\n\n统计参数和可训练参数\n\nLayerNorm & BatchNorm的作用以及区别\n\nbatchnorm更多用在视觉上，layernorm更多用在语言上，为什么\n\n7.写题\n\n跳跃游戏（leetcode55）\n\n跳跃游戏2（leetcode45）\n\n总结：\n\n刷题得加强，项目得加强，简历需要修改，把自己熟悉的内容写到简历上，深度学习的最新进展得了解。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574957396125122560?sourceSSR=users",
        "title": "❗【经验分享】南方出版传媒集团新媒体营销一面",
        "content": "****\n\n时长：10-15min\n\n形式：群面\n\n问题类型：\n\n1.个人介绍1min\n\n2.环节\n\n-看面试官兴趣挑选人进行提问\n\n3.我的问题\n\n-我的同学、老师、父母都是怎么评价我的？\n\n-我在这个岗位上有什么优势？\n\n-还有另一个岗位是内容编辑，为什么选择新媒体营销编辑而不是内容编辑？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574926686777573376?sourceSSR=users",
        "title": "字节跳动-抖音直播-后端开发校招面经",
        "content": "大家好，**我是程序员王不错，**************发现更多分享，开启你的技术进阶之路！**\n\n今天为大家分享的是不错在今年24届秋招面试字节跳动抖音直播的后端开发岗位的校招面经。在分享题目的同时，我也将根据查找到的资料整理出答案，方便大家快速学习。\n\n1\\. **首先还是千年不变的自我介绍环节。**\n\n自我介绍阶段仍然是交代清楚自己的基本信息、项目经历、实习经历等。\n\n2\\. **接下来是针对项目的提问，这里只总结通用问题。**\n\n（1）cookie和session是什么，有什么区别？\n\ncookie：\n\ncookie和session用来进行身份验证以及跟踪会话（通过身份确定是否是同一用户的同一会话请求）。\n\nCookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份。\n\nHTTP协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。即用户A购买了一件商品放入购物车内，当再次购买商品时服务器已经无法判断该购买行为是属于用户A的会话还是用户B的会话了。要跟踪该会话，必须引入一种机制。\n\nCookie就是这样的一种机制。它可以弥补HTTP协议无状态的不足。在Session出现之前，基本上所有的网站都采用Cookie来跟踪会话。\n\nCookie是保存在客户端的一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。\n\nsession：\n\n客户端请求服务端，服务端会为这次请求开辟一块内存空间，这个对象就是session。session把这次请求的用户信息记录在服务端的。这种存储方式相对cookie来说更安全。\n\nsession需要和cookie搭配使用来判断是否是同一个会话。\n\nserver第一次收到请求，开辟session空间，生成一个session-ID，并通过响应头“set-\ncookie”向客户端发送要求设置cookie的响应。\n\nclient接收到响应后，在本地客户端设置了一个cookie消息，cookie过期时间为浏览器会话结束。\n\nclient每次向同一个server发送请求时，请求头中都包含一个cookie信息，Server从中得到session-ID。\n\nsession过期要被删除，防止过多占用服务器资源。\n\n（2）用户登录的流程。\n\n在登录页面中，用户输入账号、密码等相关信息，以POST形式将请求发送给服务器。（可以详细说一下请求包经过七层网络发送到服务器的过程）\n\n经过前端验证，如验证账号密码是否合法。\n\n前端验证不通过的话，用户会收到提示，不需要发送请求给后端。\n\n验证通过，服务器会向后端发送请求，验证用户是否存在以及密码是否正确。\n\n如果用户不存在或密码不正确，服务器会返回相应的错误提示给前端。\n\n如果用户存在且密码正确，服务器会返回登录成功的信息给前端，并携带用户的相关信息。\n\n前端接收到服务器返回的信息后，将用户的登录状态保存在本地或者存储在Cookie中，以便后续的页面访问可以使用已保存的用户信息。\n\n（3）向服务器发送登录请求后，服务器做了哪些工作？\n\n首先服务器拿到用户的用户名和密码，与数据库中的进行比对；\n\n比对成功之后，会给客户端一个cookie（设置一个响应头），客户端拿到这个响应头之后自动将cookie存在本地，下次在访问这个页面时，会自动带有本地的全部cookie信息，服务器拿到这个请求头的cookie信息，验证通过后将数据返回给用户；\n\n当然，服务器还会设置一个过期时间，比方说10分钟，当客户端10分钟没有访问服务器，则需要重新登录。\n\n3\\. **hashmap是怎么实现的？**\n\nHashMap是基于哈希表的Map接口的实现，其底层数据结构是数组和链表的结合体。在HashMap中，每个元素都是一个键值对（key-value\npair），称为一个Entry。每个Entry都有一个键和一个值，以及指向下一个Entry的引用。\n\nHashMap的实现主要包括以下几个部分：\n\n1）数组部分：HashMap底层是一个数组结构，数组的每个元素都是一个Entry对象。数组的大小在初始化时确定，并且在运行时可以动态调整。\n\n2）哈希函数：每个Entry都有一个哈希值，用于确定该元素在数组中的位置。HashMap使用哈希函数将键转换成数组的索引位置，从而实现O(1)的平均查找时间复杂度。\n\n3）链表部分：当两个或多个Entry具有相同的哈希值时，它们会在数组中形成链表。在这种情况下，HashMap通过链表解决键冲突的问题。\n\n4）扩容机制：当HashMap中的元素数量超过了一定的阈值（默认是8）时，会进行扩容操作。扩容时，HashMap会创建一个新的数组，大小通常是原数组大小的2倍，并将所有元素重新哈希到新数组中。\n\n5）迭代器机制：HashMap提供了用于遍历集合的迭代器（Iterator）方法。迭代器按照元素的插入顺序或访问顺序进行遍历。\n\n4\\. **假如有一个8G的程序，但是只有4G的内存，程序可以运行吗？**\n\n内存只有4G无法一次性读入8G文件，需要分批读入数据且记录每次读入数据的位置。分批每次读取数据的大小，太小的话会在读取操作花费过多时间。\n\n**5\\. 虚拟内存是什么？**\n\n虚拟内存是一个由存放在磁盘中的N个连续的字节大小的单元组成的数组，每个字节都有唯一的虚拟地址，作为数组的索引。磁盘上数组的内容被缓存到主存中。\n\n虚拟内存会被分割成块，每一块称为虚拟页；物理内存也会被分割为与虚拟页大小相等的块，称为物理页，也叫页帧。\n\n**6\\. 说说你知道的页面置换算法？**\n\n（1）最优替换策略：替换内存中最远将来才会被访问到的页\n\na. 优点：缓存未命中率最低\n\nb. 缺点：需要预测未来，无法实现，但可以用来衡量其他置换算法。\n\n（2）先进先出替换策略（FIFO，First In First Out）\n\n先进先出调度算法是根据页面进入内存的时间先后选择调度页面，该算法实现时需要将页面按照进入的时间先后组成一个队列，每次优先淘汰队首页面。\n\na. 优点：比较容易实现，能够利用主存储器中页面调度情况的历史信息，\n\nb. 缺点：没有反映程序的局部性，因为最先调入主存的页面，很可能也是经常要使用的页面。\n\n（3）随机策略：随机选择一个页进行替换\n\n（4）最不经常使用策略(LFU, Least Frequently Used)\n\n淘汰一定时期内被访问次数最少的页面，LFU关键是看一定时间段内页面被使用的频率。\n\n（5）最少最近使用（LRU，Least Recently Used）\n\n首先淘汰最长时间未被使用的页面，LRU关键是看页面最后一次被使用到发生调度的时间长短。\n\n**7\\. LRU的底层是怎么实现的？**\n\n数据结构：哈希链表\n\n在哈希链表中，key 和 value 具有固定的排列顺序，就像双向链表一样，每一个键值对都有一个前驱，一个后驱。\n\n如果访问一个数据，首先查看哈希链表中是否存在，如果存在则把它删除，然后添加到哈希链表的尾部，如果要查找的元素不存在哈希链表中，则进行数据库的查询，然后添加到哈希链表的尾部，这样一来，最近最少使用的数据就在哈希链表的头部了，然后就可以直接删除了。\n\n**8\\. SQL里面的内连接和外连接是什么，有什么区别？**\n\n内连接（INNER JOIN）:\n\n当两个表的指定列有匹配的值时，内连接会返回这两个表的行。\n\n如果某个表的某行在另一个表中没有匹配的行，那么该行不会出现在结果集中。\n\n外连接（OUTER JOIN）:\n\n外连接包括两种类型：左外连接（LEFT JOIN 或 LEFT OUTER JOIN）和右外连接（RIGHT JOIN 或 RIGHT OUTER\nJOIN）。\n\n左外连接（LEFT JOIN 或 LEFT OUTER JOIN）:\n返回左表中的所有行，以及右表中与左表匹配的行。如果右表中没有匹配的行，则结果集中对应的列将包含NULL值。\n\n右外连接（RIGHT JOIN 或 RIGHT OUTER JOIN）:\n与左外连接相反，返回右表中的所有行，以及左表中与右表匹配的行。如果左表中没有匹配的行，则结果集中对应的列将包含NULL值。\n\n区别:\n\n内连接只返回两个表中具有匹配值的行。如果某个表的某行在另一个表中没有匹配的行，那么该行不会出现在结果集中。\n\n外连接会返回左表或右表中的所有行，即使在另一个表中没有匹配的行。未匹配的列将包含NULL值。\n\n**9\\. SQL注入是什么，怎么避免？**\n\nSQL注入是一种注入攻击手段，通过将恶意的字符串拼接到SQL中进行数据库查询，使攻击者能够控制Web应用程序后台的数据库服务器。一般SQL注入是通过在代码里通过拼接字符串执行SQL语句导致的。\n\n如：用户登录场景，要执行的语句是：SELECT * FROM userinfo WHERE username ='\"+username+\"'AND\npassword ='\"+password\"'\n\n假如用户在输入框输入随意的username和password，后面加上\"or 1 = 1\",\n\n因为1=1永远是对的，就可以查询出数据表中所有数据了。\n\n防止SQL注入的最有效方法是使用参数化查询：参数化查询可以确保用户输入被当作数据而不是SQL代码处理。大多数现代编程语言和数据库框架都支持参数化查询。\n\n10\\. Go的多态是什么？\n\n多态是指代码可以根据类型的具体实现采取不同行为的能力。这种多态性是通过接口和类型实现来实现的。\n\n在Go中，接口是一种类型，它定义了一组方法的集合。一个类型如果实现了某个接口的所有方法，那么该类型就被认为实现了该接口。通过接口，可以实现多态性。\n\n**11\\. 数据库索引是什么，如何实现的，为什么用索引更加高效？**\n\n数据库索引是一种数据结构，用于快速检索数据库表中的数据。类似于书的目录，可以帮助数据库系统快速定位到所需的数据，而不需要逐行扫描整个表。\n\n索引的实现方式中最常见的是B+树。在B+树中，所有的键值都存储在叶子节点上，并且叶子节点之间通过指针相互连接，形成一个链表结构，方便顺序访问。\n\n通过索引，数据库系统可以快速定位到所需的数据，避免了对整个表的逐行扫描，从而大大提高了查询效率。\n\n**12\\. 算法题**\n\n字符串减法（大数相减）\n\n给定两个字符串形式的非负整数 num1 和num2 ，计算它们的差。\n\n注意：\n\nnum1 和num2 都只会包含数字 0-9\n\nnum1 和num2 都不包含任何前导零\n\n你不能使用任何內建 BigInteger 库\n\n最后是反问环节。\n\n**我是程序员王不错，**************发现更多分享，开启你的技术进阶之路！**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574881552220299264?sourceSSR=users",
        "title": "智慧互通-WEB开发工程师-唐山-社招一面",
        "content": "  * 自我介绍\n  * 做过原生小程序没？uniapp?\n  * 问了Vue的知识\n  * 周期\n  * 父子组件通信方式有哪些\n  * if和show\n  * 箭头函数与普通函数的区别\n  * 知道哪些ES6特性\n  * computed和watch\n  * store状态\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574744206443384832?sourceSSR=users",
        "title": "Apache APISix 商业公司后端实习",
        "content": "Apache APISIX 背后的商业公司，远程实习岗位\n\n时间：1h\n\n# 拷打\n\n1.自我介绍\n\n2.Hard 算法题：滑动窗口最大值\n\n3.愿不愿意转go语言\n\n4.实习做了什么\n\n5.知道哪些设计模式（单例、工厂、模版方法、策略、代理）\n\n6.消息透传怎么做\n\n7.介绍下RocketMQ架构\n\n8.RocketMQ客户端是什么线程模型\n\n9.如果让你给客户端设计线程模型，怎样设计跟broker交互\n\n10.RocketMQ的ACK机制是什么\n\n11.RocketMQ上传broker失败会重试吗，会不会自动重试发给其他broker\n\n12.线程和进程的区别\n\n13.阻塞式IO和非阻塞式IO\n\n14.select、poll、epoll\n\n15.google.com键入网址到网页显示会发生什么\n\n# 反问\n\n1.部门做什么？Apache APISix背后的商业公司，做商业版dashboard的后端开发，语言是go\n\n2.有机会给Apache APISix提交代码吗？源码是lua写的，肯定需要了解APISix\n\n3.总共几面？总共三轮技术面，没有hr面\n\n4.实习地点是？远程实习\n\n5.出勤时间？早上9点到晚上6点要求在线\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574733747203964928?sourceSSR=users",
        "title": "名创优品  数据平台面经",
        "content": "Timeline：\n\n10.19 投递\n\n11.10 笔试\n\n11.28 技术 主管 HR面\n\n1.10 OC\n\n1.实习经历\n\n2.主实时还是离线\n\n3.hdfs命令\n\n4.数仓分层\n\n5.数仓建模\n\n6.数据采集方案\n\n7.数据倾斜 怎么解决\n\n8.调度运行过慢怎么解决\n\n9.数据有错怎么排查\n\n10.处理过一整条数据链路吗\n\n11.可视化\n\n12.flinkcdc读取数据漏数据怎么处理\n\n13.flink流批一体\n\n14.竞赛经历\n\n15.实习最大的收获\n\n16.找工作最看重的\n\n需提前实习 发实习和正式offer\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574688721530880000?sourceSSR=users",
        "title": "哈啰前端二面",
        "content": "  1. 自我介绍\n  2. 数组去重（有七种）\n  3. vue3中watch与watchEffect的区别\n  4. 前端白屏可能的原因\n  5. 现在在做的项目\n  6. 闲聊\n  7. 反问\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574616478742315008?sourceSSR=users",
        "title": "滴滴-业务运营-后端实习一二面",
        "content": "又是被疯狂拷打的两轮面试，求求放过鼠鼠吧[牛泪]\n\n# 一面\n\n时间：40min，无算法\n\n面试官没开摄像头，跟我解释说是他电脑的原因。\n\n## 项目八股\n\n1.自我介绍\n\n2.讲讲实习做的东西，遇到了哪些问题，怎么解决的\n\n3.讲讲mq吧，如何保证消息不丢失、高可用、或者顺序消费的一些东西\n\n4.你提到了链路追踪，那你说说Trace_id、Span_id 还有 Parent_id 的基本含义\n\n5.Trace_id怎么生成的\n\n6.说说雪花算法/UUID\n\n7.讲讲AOP，CGLib和JDK动态代理区别\n\n## 数据库\n\n1.详细讲讲索引\n\n2.MySQL事务\n\n3.缓存和数据库的一致性问题\n\n## 锁\n\n1.分布式锁\n\n2.乐观锁和悲观锁\n\n## 开源\n\n1.对你开源做的东西挺感兴趣的，讲讲你遇到的困难以及怎么解决的\n\n## 反问\n\n1.部门做什么的（toC的用户增长）\n\n2.几轮技术面（2轮）\n\n# 二面\n\n时间：1h40min，两道算法\n\n## 项目八股\n\n1.面试官自我介绍\n\n2.自我介绍\n\n3.介绍SPI\n\n4.SPI具体怎么用的，为什么要用SPI\n\n5.ThreadLocal有哪些问题，为什么使用线程池会存在复用问题\n\n6.SpringBoot和SpringMVC的区别\n\n7.Spring启动为什么能够自动装配\n\n8.为什么spring启动能找到Main上面的注解？通过什么方式？\n\n## 计算机网络\n\n1.长连接和短连接的区别，\n\n2.Http传输层能用UDP吗，具体怎么用？\n\n3.TCP拥塞控制，什么时候会拥塞，具体表现是什么\n\n## 操作系统\n\n1.操作系统启动时的底层过程（从开机到用户登录）\n\n2.进程的结构\n\n3.进程和线程的区别\n\n## JVM\n\n1.了解哪些垃圾回收器\n\n2.这些垃圾回收器都只能回收一个代（新生代、老年代）吗，有不有可以联合使用的，哪些能联合使用？\n\n3.使用的jdk版本\n\n## JUC\n\n1.说说拒绝策略，哪些情况对应用什么拒绝策略\n\n2.线程池在使用的时候需要注意什么\n\n## 算法\n\n**算法1：** 给定一个含有 n 个正整数的数组和一个正整数 target 。找出该数组中满足其总和 大于等于 target 的长度最小的 连续子数组\n[numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0\n\n**算法2：**\n有三个队列，编号为1、2、3，现在要从队列中取任意数量的元素。要求：第一个元素从1号队列取，第二个元素从2号队列取，第三个元素从3号队列取，第四个元素从1号队列取...如果选中的队列中没有元素则从下一个编号对应的队列中取，3号队列的下一个队列是1号队列。如果2号队列是空，3号队列需要取出2个，若三号队列空，则累计从1号队列中取3个。（ps：感觉像是面试官自己出的题）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574588215777132544?sourceSSR=users",
        "title": "字节跳动  Dev Infra算法实习二面面经",
        "content": "1、自我介绍\n\n2、深挖腾讯实习项目(又问了20min，感觉两面的面试官都很感兴趣)\n\n3、如何在实习项目中进行prompt调优的？\n\n4、介绍第一段实习\n\n5、描述项目中自己实现的聚类算法，为什么不用dbscan聚类算法？\n\n6、决策树节点分裂算法？(只说了信息熵的算法)\n\n7、多线程和多进程适用的场景和区别？\n\n8、介绍rpc框架\n\n9、go语言的基础？\n\n10、go语言的异常处理？\n\n11、是否用过defer?介绍它的原理(没了解过原理)\n\n12、go的协程sleep时会占cpu嘛？\n\n13、根据简历的第三个小项目引申出如果用户数量非常多，redis存不下如何解决？\n\n14、python中某个服务器请求量太大如何解决？\n\n15、代码题，手撕快排\n\n16、反问，简单介绍了下业务，主要服务于大模型的，然后说看我自己的意愿\n\n面试官是个女生，基本有半小时都在挖实习和项目，八股问的比较少，求字节给个offer呜呜呜！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574544513419509760?sourceSSR=users",
        "title": "顺丰测开社招一面面经，后续拒了",
        "content": "时间线：\n\n2024年1月9日\n\n**一面内容：**\n\n一面就面了25分钟，是不是凉了？\n\n1、自我介绍\n\n2、接口自动化怎么做的？\n\n3、UI自动化怎么做的？\n\n4、开发的测试提效平台的使用效果？讲解一下原理和背景？\n\n5、所有工具能力建设的goodcase举例说一下\n\n6、为什么离职？\n\n7、反问\n\n第一次面试时间这么短，但是整体聊得过程中没有磕绊，也很愉快。\n\n听劝了，感谢评论的两位大佬，后续面试已经拒绝了。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574573452871434240?sourceSSR=users",
        "title": "腾讯WXG公众号小程序实习一二面",
        "content": "感谢鹅厂给鼠鼠一个面试机会[潜水]\n\n但是还是太菜被挂掉了[阿巴阿巴]\n\n# 一面\n\n时间：1h30min\n\n面试官没开摄像头，上来就是四道算法题，给50min时间，能做多少算多少，吓鼠了，也许这就是微信吧[尴尬]\n\n## 算法题\n\n题一：给定n个正整数，求选出两个数拼接在一起能得到的最大整数\n\n例如：\n\n1、2 拼接得到 21\n\n4、3 拼接得 43\n\n123、4、5 拼接得 5123\n\n题二：合并两个有序链表（Lc21）\n\n题三：字符串解码（Lc394）\n\n题四：最多K次交换相邻数位后得到的最小化整数（Lc1505）\n\n## 项目\n\n1.聊聊Raft算法，给JRaft社区提的PR主要做了什么\n\n2.Flexible Raft 如果出现网络分区怎么办\n\n3.NWR模型怎么去取舍r和w\n\n4.聊聊CAS，自己开发过程中哪些地方用过CAS\n\n5.讲讲RocketMQ的使用场景\n\n6.实习项目优化了哪些东西\n\n7.学过C或C++吗\n\n8.学校任务怎么办，随时都能来实习吗\n\n## 反问\n\n1.部门做什么\n\n2.今后从哪些方面提升自己\n\n# 二面\n\n时间：1h10min\n\n面试官依旧没有开摄像头\n\n## 算法题\n\n面试官：一面做了哪些算法题？有没有及时回顾？觉得自己算法能力怎样？这次给你比较简单的三道题，限时20min写完。\n\n1.把字符串转换成整数 (atoi)（LCR192）\n\n2.删除排序链表中的重复元素 II（LC82）\n\n3.二叉树中和为目标值的路径（LCR153）\n\n## 项目\n\n面试官问的问题很宽泛，给一个大方向自己说\n\n1.介绍一下实习做了哪些东西\n\n2.实习学到了什么\n\n3.实习有没有超出预期的收获\n\n4.介绍下参加的开源活动，大概流程是什么样的\n\n5.开源活动学到了什么\n\n6.学校在广州？随时都能来实习？\n\n## 反问\n\n1.总共几轮技术面（每个人情况不一样，有可能2面、3面、4面）\n\n2.部门做什么\n\n3.今后从哪些方面提升自己（注意基础能力，三道题没在规定的时间写完，算法还要加强）\n\n面完四小时后挂。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574386275256377344?sourceSSR=users",
        "title": "原粒半导体 AI高性能算子开发实习生（12.20）",
        "content": "一面技术面，二面是HR面，主要说一下技术面吧，已经收到了offer，说的是三个月以上才有房补，最后还是没去了\n\n面试时长：30min\n\n面试内容：\n\n* 项目拷打\n\n* 说一下对SIMD的理解？以及常见CPU的SIMD指令集有哪些？\n\n  * 认为SIMD是一种CPU的扩展吧，一次指令完成多个数据的操作\n  * 常见的包括Intel的AVX指令集，arm的NEON指令集等\n\n* 循环展开为什么会对性能有提升？\n\n  * for循环消耗的减少\n  * 更适合于指令级流水线并行\n\n* 不同相加顺序的Reduce会不会影响到Reduce的结果？\n\n  * 会，不同顺序相加是会出现精度的丢失\n\n* IEEE754标准？\n\n  * 单精度浮点数（32位），1位浮点位，8位指数位，23位尾数位\n\n* 有哪些空间换时间的思想？\n\n  * 缓存，可以减少对主存的访问时间\n  * 哈希表\n\n* pingpang操作有了解吗？\n\n  * 我的理解就是一种双缓冲进行向量化读取的操作，有懂的小伙伴欢迎补充\n\n* 无手撕代码\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574361952063913984?sourceSSR=users",
        "title": "24日常实习面经记录",
        "content": "# **快手web前端实习生（一面 挂）**\n\n####  2023.12.27网申，01.08一面，01.09发拒信\n\n1、自我介绍\n\n2、Echarts底层支持哪些渲染方式？\n\n3、canvas、svg了解、使用过吗？\n\n4、Echarts用过哪些图表？\n\n5、对使用Echarts的感受是什么？\n\n6、如何解决Echarts难使用的问题？\n\n7、按照什么维度去划分你提到的可复用指标块？\n\n8、拆分组件，是一个仓库一个组件，还是一个仓库多个组件？这些组件有没有被其他项目使用？\n\n9、场景题：所有地区都要更新一个组件，需要如何实现？\n\n10、场景题：如果让你设计整个项目的架构，实现上线一个图表组件，让其他分支的项目也能够使用，你会怎么做？\n\n11、我看你做过移动端的开发，那么vue3和vue2什么区别？\n\n12、Android的四大组件？\n\n13、Android上有用图表吗？\n\n14、对毕设作品最后是否有实现？技术栈再讲一下？\n\n15、毕设为什么不考虑用h5/小程序来做？\n\n16、node也写过吗？\n\n17、客户端用微信小程序开发的吗？采用什么语法？\n\n18、为啥只用原生？（对应我的项目2）\n\n19、在实习中，做的最好的一些亮点、不好的地方分别是什么？\n\n20、场景题：打开店铺页面，有个模特，通过点击模特身上的衣服、裤子、包包，会跳转到相应界面，如何实现？为什么想到这个答案的？\n\n21、面试官介绍公司部门情况\n\n22、面试官对学习前端的建议\n\n****\n\n# **网易算法平台实习生（一面 挂）**\n\n####  2023.12.22网申，01.02业务初面，01.08发短信问hr，hr才反馈结果说挂了\n\n1、自我介绍\n\n2、问了留学硕士项目的情况，以后想往哪个领域发展？\n\n3、看你项目主要是前端的内容，那你对Java作为一种面向对象语言，了解吗？\n\n4、场景题：有一个日志文件，包含时间戳格式的time字段，long类型的用户id字段，统计每天用户登陆数（日志文件很大，不能通过一个进程来获取数据）\n\n5、数据结构中，介绍下Hash？\n\n6、http语言介绍一下。\n\n7、http与计网的七层、四层、五层体系的联系是什么？\n\n8、C语言平时用的多还是底层知识了解的多？\n\n9、（反问）您对后端学习有什么建议吗？\n\n# **腾讯wxg企业微信一面（一面 挂）**\n\n####  2024.01.10网申，当前下午发面邀，2024.01.12面试，80min\n\n1、编程题1（阅读高亮）\n\n2、编程题2（颜色字符串转换）\n\n3、编程题3（二叉树根节点到叶子节点的所有路径和）\n\n4、编程题4（最大子矩阵）\n\n5、基本情况（现在在学校吗？什么时候去读研？研究生方向有哪些？这些方向具体选什么？现在在上海吗？）\n\n6、实习遇到什么问题，怎么解决的？\n\n7、你谈到了flex弹性布局，你觉得这个为什么重要，你有什么感受？\n\n8、你实习用到vue2框架、echarts，讲一讲具体使用到什么程度？\n\n9、vue框架为什么流行，有什么特性？\n\n10、你谈到了双向绑定，有没有了解双向绑定的具体实现（底层逻辑）？为什么能够实现双向绑定？\n\n11、这里有一个掘金帖子，回去可以了解双向绑定底层实现逻辑\n\n12、ES6新增的两个声明方式，与之前的声明方式有什么区别？\n\n13、你谈到const定义常量，常量的值不变，那么具体如何实现？\n\n14、项目里有node.js服务器的搭建，讲讲服务器搭建内容？\n\n15、项目中服务器与数据库交互，数据库的表是怎样的？\n\n16、讲讲基本信息如何获取当前登录用户？\n\n17、反问1（公司技术栈）\n\n18、反问2（公司实习生负责什么业务）\n\n19、反问3（您对前端学习有什么建议吗？）\n\n**总结：**\n\n我太菜了，编程题没有一个全对的，第一题还看错了题目= =\n\n简历倒还好，拷打不严重；就是这编程题有点难绷= =\n\n继续努力吧！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574348085220933632?sourceSSR=users",
        "title": "美团后端面经",
        "content": "一面\n\n实习干了什么?\n\n内存溢出是什么?\n\n说一下垃圾回收机制?\n\nG1和CMS的区别?\n\nhashMap线程安全吗?线程不安全有什么问题?\n\nCAS的ABA问题?\n\nCAP理论?\n\n实习期间的公司选择的是一致性还是可用性?\n\n什么是倒排索引?\n\n什么是跳表?\n\n了解那些shell命令?\n\ngrep是什么命令?\n\n线程池的核心参数、执行流程?\n\n手写SQL: 查询班级前10名的分数,包括并列的分数\n\n#2、再进行范围score的查询\n\nselect * from student t1 WHERE score >=(\n\n#1、锁定最后一个的分数值\n\nselect distinct score FROM student t2 order by t2.score DESC LIMIT 9,1\n\n) order by t1.score DESC;\n\n数据库范式?\n\n1,2,3,4四个列建立联合索引,查询1,2,4 此时走索引吗?如果查3,1走索引吗?\n\n使用limit查询100w,这样查询有什么问题?\n\n什么叫回表?\n\nRabbitMQ的核心流程简单介绍一下?\n\nRedis的分布式锁怎么设计,底层实现原理?\n\n算法: 力扣25 K 个一组翻转链表\n\n二面\n\n介绍一下实习经历?\n\n深挖项目细节,一直追问,最后给自己绕迷了,开始道歉,危。。。\n\n实习过程中遇到的困难,怎么克服的，一直追问?\n\n算法\n\n原创题目,开始思路想错了,以为动态规划,后面经过提醒知道与力扣的三数之和差不多,没有运行起来,但是也讲清楚了,危。。。\n\n职业规划是怎么样?\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574337005773922304?sourceSSR=users",
        "title": "面试官问：“说说你对加班的看法?” 加还是不加啊",
        "content": "在面试过程中，当我不太能判断候选人性格特点时，我经常会问同学们一个问题，说说你对加班的看法?\n这个问题其他面试官也经常会问到。不少同学的回答不是很理想。今天讲讲这个高频问题如何回答。\n\n**面试官想问什么?**\n\n加班每个人肯定都不愿意加，但实际情况加班是不可避免存在的。面试官问这个问题，核心是想了解候选人对于加班的态度和意愿。其实是一种类似服从性测试，希望招到的是集体意识强，愿意付出的同学。\n\n类似华为的奋斗者协议，签了协议的人代表着愿意付出个人时间支持公司发展。这个问题目标是筛选出愿意付出的同学。\n\n**失败的回答**\n\n虽然加班大家都不愿意，但面试还是要表现出来积极态度。很多同学很刚，上来就说我接受不了996，接受不了加班。那结果可想而知。即使前面答的再好，面试官心里已经有了答案。\n\n**如何更好的回答**\n\n这个问题同学们也都知道，按照正能量愿意付出，愿意加班的思路去回答基本问题不大。告诉面试官1)正常的项目冲刺等需要加班，全力支持。\n\n2)无效的纯卷的低效加班，不提倡。\n\n3)自己作为新人肯定很多要学习的地方，线下自己加班学习也是必不可少的。这一点自己会坚持下去，迎头赶上。\n\n**讲讲互联网加班**\n\n互联网或企业都会有加班的现象，为什么有加班，核心还是竞争，互联网上一个充分竞争的行业，激烈竞争，唯快不破，只有比别人更快，才能走出来。\n\n当年第一家微信类产品并不是腾讯，而是小米，腾讯如果晚半年推出微信，今天移动互联网的微信产品应该是小米的。\n\n互联网一直讲究的是唯快不破，迭代打法。\n\n随着各行业竞争的不断加剧，国企加班也不例外，除过极少数的垄断型国企，常见的运营商，银行等也是经常性加班。不少本来想轻松点去国企的同学，也踩了坑。\n\n**加班有哪些情况？**\n\n工作岗位分工越来越细，大家协同工作，比如某个时间点完成产品发布，设计到产品，前端，后端，测试，运维，运营，商务等不同角色，每一个环节都不能delay，实际情况一定会由于各类原因造成delay，比如需求调整，紧急插入，预估不足等。发版前期加班情况非常常见。\n\n紧急bug修复，老板紧急需求等等，都会造成加班，主动或被动。\n\n**无效加班有哪些？**\n\n最烦的就是无效型加班，明明团队没有什么事，非要坐着晚走，表现出来加班。这种也是涛哥所不认同的。无效的卷没有任何意义，有时间可以多学习，提升自己，而不是装出来加班。\n\n**新人如何看待加班**\n\n作为新人，没技术，没经验，也不懂业务，要在团队活下来，脱颖而出，一定要有大量时间去学习，实战。应该更积极对待加班，更多时间，快速成长。花更多时间，与团队一起获得认可。花更多时间，自己默默提升，完成新人的过渡。\n\n**涛哥建议**\n\n总之，互联网公司普遍节奏比较快，加班在所难免，这个问题更多是想考察候选人对加班的态度和看法。同学们作为新人，需要花更多的时间在工作上，快速获取经验，提升技能。在加班问题上希望同学们正确看待，更多正能量去回答问题。\n\n我是涛哥，曾任某互联网大厂技术总监，十年面试过500人，培养新人超百人。24年目标帮助1000人求职和成长。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574335081032982528?sourceSSR=users",
        "title": "美团到店 后端 日常实习",
        "content": "一面\n\n1\\. 自我介绍\n\n2\\. 项目\n\n3\\. HashMap和ConcurrentHashMap介绍\n\n4\\. synchronized锁与ReentrantLock区别\n\n5\\. synchronized锁升级过程\n\n6\\. G1垃圾回收器介绍\n\n7\\. 给一个场景，cpu飙升如何排查\n\n8\\. 数据库与缓存一致性问题\n\n9\\. 缓存失效，多个线程打到数据库如何解决\n\n10\\. Redis基本类型及底层原理、应用\n\n11\\. 等等（记不清了）\n\n没做题，问的还是常规八股。我错了，不是形式面，是面试官太好了[羞涩]\n\n\\-----------------\n\n更新：\n\n二面聊了项目和普通聊天，没啥好记录的～\n\n已oc，如果有上海美团到店的uu，可以交个朋友哈[赞]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574311173659623424?sourceSSR=users",
        "title": "绿盟前端实习oc（base北京）",
        "content": "  1. 自我介绍\n  2. 实习经历\n  3. 虚拟列表\n  4. monorepo的优势\n  5. 包管理器npm、yarn、pnpm区别\n  6. 封装组件的思路\n  7. 简历上的项目\n  8. JWT\n  9. react 和 vue的区别\n  10. 后面就是和两个老哥聊天啦\n\n全程围绕着项目来问的。赶紧没什么参考意义\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574307903604097024?sourceSSR=users",
        "title": "❗【经验分享】头豹研究院行业研究员实习面试",
        "content": "时长：10-15min\n\n形式：电话面\n\n问题类型：\n\n1.个人介绍 2-3min\n\n2.实习经历\n\n-上一段实习中的研究内容是如何完成的？（我介绍了所写的框架和部分内容）\n\n-最后得出了什么样的结论？\n\n3\\. 个人特质\n\n-你自己的一个缺点是什么？\n\n4\\. 其他问题\n\n-还有什么想问的问题吗？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574309063463374848?sourceSSR=users",
        "title": "海康威视前端（一面+hr面）",
        "content": "# 一面\n\n  1. 自我介绍\n  2. 项目难点\n  3. vue组件通信\n  4. vuex和eventBus的区别，使用场景\n  5. 持久化储存\n  6. 垂直居中\n  7. flex：1\n  8. 二次封装axios\n  9. promise async/await promise.all\n  10. 如何实现拖动一个元素（mousemove）\n  11. 前端优化手段\n\n# hr面\n\n  1. 自我介绍\n  2. 自己的亮点\n  3. 优缺点 如何克服\n  4. 和学历高的人有什么优势\n  5. 到岗时间\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574307819432714240?sourceSSR=users",
        "title": "❗【经验分享】帆软实习市场研究员笔试+面试",
        "content": "笔试：对XX行业的现状和未来的发展做分析\n\n时长：2days\n\n形式：机考\n\n单面\n\n时长：20-30min\n\n形式：电话面\n\n问题类型：\n\n1.个人介绍 2-3min\n\n2.实习经历\n\n-在上一段实习里我的哪些内容是怎么完成的？（比如说我的企业方研究的内容包括哪些？）\n\n-是否有接触过客户？\n\n3\\. 个人特质\n\n-介绍一下自己的优点和缺点\n\n4\\. 学习经历\n\n-在学校最大的收获是什么？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574307703179280384?sourceSSR=users",
        "title": "❗【经验分享】毅都集团二面",
        "content": "时长：20-30min\n\n形式：单面\n\n题目：10-20道问题\n\n类型：\n\n1.就业规划\n\n-除了大连还报了哪些地方？更倾向于在哪些地方工作？\n\n-为什么投递这个岗位？投递这个岗位有哪些优势？\n\n-薪资要求\n\n2.家庭情况\n\n-父母工作\n\n-父母对你离家工作的态度和看法\n\n3.个人性格\n\n-介绍一下你自己的性格是什么样子的？\n\n4\\. 个人经历\n\n-实习经历\n\n✔几份实习中你印象比较深的是什么？为什么比较深？\n\n-在校经历\n\n✔在校期间完成的任务举例是怎么完成的\n\n5\\. 行为面\n\n-遇到某一类问题是怎么解决的？\n\n6\\. 反问\n\n-你还有什么问题想问的？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574306846014447616?sourceSSR=users",
        "title": "哈啰单车前端实习（一二面）",
        "content": "# 一面\n\n全程都是场景题，然后你说出如何解决，不会直接问你某个八股。\n\n  1. 自我介绍\n  2. element-plus开源pr的一些问题\n  3. 实习经历\n  4. 移动端适配（rem、e﻿m、vw、vh以及区别）\n  5. 两种盒子（IE和怪异）\n  6. eslint和prettier冲突如何解决？详细说明下某种情况（） 我说通过插件，优先去适配eslint的规则\n  7. 虚拟列表实现思路 ？ （首屏加载那块逻辑需要具体看一下 X）\n  8. 封装组件的思路，具体举个例子说说。\n  9. 自适应布局（媒体查询、flex、grid响应式布局）\n  10. flex:1，然后说出个场景题，如果flex:1 最后有元素被挤出屏幕外如何解决 （不用换行）（1. 设置最大宽度，2. 面试官说flex本身有个属性可以）\n  11. 尽可能多说水平居中\n  12. http vs https X\n  13. 三次连接\n  14. 四次挥手 X\n  15. map和foreach 实现map的思路\n  16. 深拷贝的思路\n  17. 闭包\n  18. 垃圾回收 垃圾回收的执行时机 X （没了解过\n  19. 宏任务和微任务\n  20. Promise\n  21. async await 以及执行时机\n  22. 优化渲染性能（我背的八股背面试官打断了[牛泪]，让我不要回答的这么表面）\n  23. 数组去重\n\n然后面试官就说一面给过了\n\n# 二面\n\n二面是简单的项目面，问了些简单问题，十五分钟左右结束~\n\n许愿hr面~\n\n[面试必过][面试必过][面试必过]\n\n  \n\n当天晚上约hr面，然后第二天面完晚上oc啦\n\n开心~\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574277649225228288?sourceSSR=users",
        "title": "成都moka二面hr面 oc",
        "content": "主管面30min:  \n1 disruptor 为什么要设计两个数组，怎么解决指令重排的安全问题  \n2 伪共享问题怎么解决，有没有其他更好的优化方式  \n3 同程实习业务深扒，问到汗流浃背（……）  \n  \nhr面 30min  \n1 自我介绍  \n2 实习期间最难忘的事情  \n3 实习期间的收获  \n4 三个字评价一下自己  \n5 为什么要来成都（其实我想说，因为offer在成都所以只能在成都，这是鼠鼠能决定的嘛？）  \n6 反问  \n第二天上午oc，隔了一小时offer\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574307637018238976?sourceSSR=users",
        "title": "❗【经验分享】能链集团二面",
        "content": "❗应该是业务主管面了\n\n时长：20-30min\n\n形式：单面问题\n\n类型：1.个人介绍 2-3min\n\n2.岗位认识\n\n-对数据产品经理（中后台）这个岗位的认识？\n\n-对这个岗位我有什么优势？\n\n-为什么要投递这个岗位？之后是对这个岗位的具体工作内容的介绍，需要具备的种种能力，以及面试官对我所认识的岗位错误认识的更正（一次美好的沟通，很愿意指出我们当前所认识的问题）\n\n3.个人经历\n\n-在校期间数据分析经历的具体内容（这里是有套路的，面试官一边问内容，也在分享他的经历，通过双方的沟通可以看出你在这个经历中的思考和判断是否符合面试官的要求，也是在看经历的真实性）\n\n-实习经验和岗位工作内容并不相关，为什么想换个岗位？\n\n4\\. 其他经历\n\n-问到申请学校的事情\n\n-有考过其他的证件吗？\n\n5.最后面试官总结该次面试对面试者的全部认识，判断是否符合要求\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574177379887710208?sourceSSR=users",
        "title": "华为OD-23届考研-测试面经",
        "content": "首先，介绍一下基本情况，本人23本，投的是测试岗，目前已经收到offer。感觉整个过程还是有点长的。当然，主要还是由于自己的算法刷题过程比较长以及放假过程有些耽搁。面试的整个过程可能在10天左右。假如准备充分的话过程还是比较快的。\n\n  * **机试：**\n\n第一道：\n\n求三个矩形的公共面积\n\n第二道：\n\n给定一个字符串s，请你找出其中不含有重复字符的最长子串的长度。\n\n第三道：\n\n有这么一款单人卡牌游戏，牌面由颜色和数字组成，颜色为红、黄、蓝、绿中的一种，数字为0-9中的一个。游戏开始时玩家从手牌中选取一张卡牌打出，接下来如果玩家手中有和他上一次打出的手牌颜色或者数字相同的手牌，他可以继续将该手牌打出，直至手牌打光或者没有符合条件可以继续打出的手牌。求连续打出的最大张数。\n\n前两条还是比较简单的，第三条在题库里好像也是有的，但是我没刷到，有点可惜吧。\n\n  * **一面：**\n\n一面问的比较简单。先是做的题目，题目内容是：给几个数字，求可以组成的最大的数。\n\n然后问了一些实习的时候的情况，像公司规模，参与的项目中主要工作是什么，测试方法用过哪些，有没有做过性能测试，其他的记不太清了。\n\n  * **二面：**\n\n感觉二面比一面更详细些。主要还是通过简历来询问的。简历上写了什么一般就会问什么，写的多可能就每个点都会问一些。首先面试官是介绍了面试流程。然后自我介绍之后开始问项目内容。我挑了项目中的一部分来讲，主要还是从流程上来讲的。然后面试官挑了其中的某个测试点详细问了下，此外问了有没有接触过性能测试。其他的还问了用例设计方法以及需求应该怎么覆盖完全之类的。其次Linux部分问了一个文件权限。Python问了个修饰器是什么，怎么用的。\n\n代码题目是：字符串至多删除一个字符，如果能构成回文输出true，否则false。\n\n  * **hr面：**\n\n这次面试没怎么设计技术问题。主要问了毕业之后的情况、目前的情况，接受薪资范围，目前有没有其他的offer。对华为有什么看法，有听到过些负面的评价吗；这个面试的话，我是根据栗栗姐给出的面试经验和注意事项大概准备了一下，感觉是比较简单的。\n\n  * **综合面试：**\n\n感觉领导看起来比较和蔼。上来先是问了项目的情况，简单介绍了下项目内容。随后是问了我在项目中实际是做了哪些工作的。有没有编写过自动化用例。然后问了项目最后的结果是通过了还是没通过，以及同事对我的工作有什么评价。然后问了平时的爱好以及自己的优缺点，了解了一下性格，觉得我不是很开放的性格，建议我工作中要多交流。此外就是问了我对于华为的价值观的看法，他自己也做了解释，还有就是加班问题。\n\n  * 最后，很感谢栗栗姐，感觉比我自己还上心，很负责任的引路人 lfyslp 。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/574008335536586752?sourceSSR=users",
        "title": "京东实习后端面经，被问麻了...",
        "content": "![](https://git.acwing.com/Hasity/interview_hunter/-/raw/master/2024/image/%E4%BA%AC%E4%B8%9Cyang%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F.png)\n\n## 1.mysql联合索引失效\n\nMySQL联合索引失效通常发生在以下情况：\n\n  1. **未使用最左前缀原则：** 联合索引的最左前缀原则指的是在查询中使用索引的时候，必须从联合索引的最左边列开始使用。如果查询不按照最左前缀的顺序使用索引，MySQL 可能无法充分利用这个索引。\n\n例如，如果有一个联合索引 (col1, col2)，而你的查询中只使用了 col2，那么这个索引就不会被用到。\n\n  2. **不符合索引顺序的查询：** 联合索引只在查询中按照索引的顺序使用时才会生效。如果你的查询中的条件不按照索引的顺序，MySQL 可能无法使用这个索引。\n\n例如，如果有一个联合索引 (col1, col2)，而你的查询中使用了 col2，col1 进行筛选，那么这个索引也可能无法生效。\n\n  3. **数据分布不均匀：** 如果索引列的数据分布不均匀，即某些值的出现频率远高于其他值，那么 MySQL 可能会选择不使用索引，而是进行全表扫描。\n\n  4. **数据类型不匹配：** 联合索引的列如果包含了不同的数据类型，可能会导致索引失效。例如，如果一个列是字符串类型，另一个列是数字类型，MySQL 在执行查询时可能无法有效使用这个索引。\n\n  5. **使用了函数或运算符：** 如果在查询条件中使用了函数或运算符，可能会导致索引失效。MySQL 无法直接在索引上执行函数或运算符，因此可能会选择不使用索引。\n\n为了避免这些问题，设计索引时应根据实际查询需求考虑最佳的索引顺序，并确保查询条件与索引一致。同时，确保索引列的数据类型和函数的使用方式符合索引的要求。在优化查询性能时，可以使用\n`EXPLAIN` 来查看 MySQL 的执行计划，以确定是否正确使用了索引。\n\n>\n> **[面经专栏直通车](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fmanager%2FcolumnDetail%2F0xKkDM)**\n\n>\n> **[面经专栏下载](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgit.acwing.com%2Flicw%2F24_job_hunter)**\n\n## 2.索引底层\n\nMySQL索引的底层实现主要依赖于B+树和哈希索引两种结构。\n\n  1. **B+树索引：**\n     * **B+树结构：** B+树是B树的一种变体，它在B树的基础上进行了优化。在B+树中，只有叶子节点存储实际的数据，而非叶子节点仅包含键值信息用于导航。这样的结构使得范围查询更加高效。InnoDB使用的索引即为B+树索引。\n  2. **哈希索引：**\n     * **哈希结构：** 哈希索引是将键的值通过哈希函数转换成一个固定大小的哈希值，然后将哈希值与存储实际数据的位置相对应。这种结构使得单个键的查找效率很高，但不支持范围查询。InnoDB不直接支持哈希索引，但可以通过Memory存储引擎来创建哈希索引。\n\n在InnoDB存储引擎中，使用的是B+树索引。每个InnoDB表都有一个聚簇索引（clustered\nindex），这是数据行的物理排序。聚簇索引在InnoDB中实际上就是一颗B+树，因此表的数据行实际上是按照聚簇索引的排序存储的。\n\n此外，InnoDB中的辅助索引也是B+树结构，这些辅助索引的叶子节点包含了指向聚簇索引中对应行的引用。\n\nMySQL通过使用不同的索引结构，使得它在处理各种类型的查询和数据操作时能够取得较好的性能。选择适当的索引结构取决于具体的应用场景和查询需求。\n\n## 3.说说分库分表\n\n分库分表是一种数据库水平拆分的策略，旨在应对数据库规模不断增长导致的性能瓶颈和存储容量限制。这种策略将一个大型数据库拆分成多个较小的数据库实例（分库）和表（分表），从而提高并行处理能力、降低单个数据库实例的负载，提升整体系统的性能和可伸缩性。\n\n以下是关于分库分表的一些要点：\n\n  1. **水平拆分：** 分库分表是水平拆分的一种形式，与垂直拆分（按照业务模块划分表）不同。水平拆分指的是将一个表中的数据按照某个规则分散存储在多个数据库实例或表中。\n\n  2. **分库：** 将原来的单个数据库拆分成多个独立的数据库。每个数据库实例都可以独立运行在不同的物理服务器上，从而提高并发处理能力。分库通常采用数据划分的规则，比如按照用户ID的取模或哈希值进行分库。\n\n  3. **分表：** 在每个数据库中，原来的大表被拆分成多个较小的表。分表的常见策略包括按照时间范围、按照业务模块或按照数据范围等。分表可以减小每个表的数据量，提高查询性能。\n\n  4. **数据一致性：** 在分库分表的架构中，需要考虑数据一致性的问题。因为数据分散在不同的数据库和表中，应用程序需要确保对跨库、跨表的事务有良好的处理机制。\n\n  5. **全局唯一标识：** 在分库分表的情况下，通常需要一个全局唯一的标识符，以便在多个数据库和表中唯一标识一条记录。这可以是通过分布式ID生成器、UUID等方式实现的。\n\n  6. **路由策略：** 应用程序需要实现合适的路由策略，确保查询时能够正确定位到需要的数据库和表。路由策略可以基于数据划分的规则，例如用户ID的哈希值。\n\n  7. **动态扩展：** 分库分表的优势之一是能够相对容易地进行水平扩展。当数据量增加时，可以通过增加新的数据库实例或表来进行扩展，而不必改变整体系统架构。\n\n分库分表的实现需要谨慎考虑业务需求、数据一致性、查询性能和扩展性等因素。这样的架构适用于大型、高并发的应用，但也带来了管理和维护的挑战。\n\n## 4.mysql事务\n\nMySQL事务和InnoDB引擎的实现方式涉及到ACID属性（原子性、一致性、隔离性、持久性）的保障。\n\n### MySQL事务：\n\n  1. **事务的开始和结束：** 事务是由`BEGIN`、`COMMIT`和`ROLLBACK`语句来标识的。`BEGIN`标志事务的开始，`COMMIT`标志事务的结束并提交，而`ROLLBACK`则用于事务的回滚。\n\n  2. **隔离级别：** MySQL支持不同的事务隔离级别，包括READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。这些级别决定了在事务执行过程中，对数据的读写是否会受到其他事务的影响。\n\n### InnoDB引擎：\n\n  1. **事务日志（Redo Log）：** InnoDB引擎使用事务日志（redo log）来实现事务的持久性。当事务对数据库进行更改时，这些更改首先被写入事务日志，然后再写入磁盘上的数据页。这样即使在事务提交之前系统崩溃，通过重放事务日志，可以将数据库恢复到崩溃前的状态。\n\n  2. **两阶段提交（Two-Phase Commit）：** InnoDB引擎使用两阶段提交来确保事务的原子性。在第一阶段，事务的更改被写入事务日志，但尚未将其应用到磁盘上的数据页。在第二阶段，如果事务成功完成，所有的更改都被写入磁盘；如果事务失败，所有的更改都会被回滚。\n\n  3. **MVCC（多版本并发控制）：** InnoDB使用MVCC来提供不同的事务隔离级别。MVCC通过在每行数据上维护多个版本，使得事务可以在不互相干扰的情况下并发执行。每个事务可以看到数据库在它开始之前已经提交的版本，但不会看到其他事务正在执行的版本。\n\n  4. **行级锁：** InnoDB引擎支持行级锁，这意味着事务在修改数据时只锁定涉及的行，而不是锁定整个表。这提高了并发性，减少了锁竞争，但也引入了一些额外的开销。\n\n总体来说，InnoDB引擎通过事务日志、两阶段提交、MVCC和行级锁等机制，实现了对事务的可靠支持，保证了ACID属性的满足。这使得InnoDB成为MySQL中常用的事务型存储引擎。\n\n## 5.MQ幂等性\n\n消息队列（MQ）中的幂等性是指无论消息被消费多少次，最终的效果应该是一致的。在分布式系统中，由于网络延迟、重试机制等原因，消息可能被处理多次，而幂等性可以确保系统的一致性。\n\n### 实现MQ幂等性的方法：\n\n  1. **唯一标识符：** 每条消息都应该包含一个唯一的标识符（Message ID），该标识符可以用来检测消息的重复。当消息处理完成后，可以记录已处理的消息标识符，下次收到相同标识符的消息时，直接判断为重复消息，不再处理。\n\n  2. **幂等性检测逻辑：** 在消息的处理逻辑中加入幂等性检测的逻辑，确保同一消息在多次处理时不会产生不一致的结果。例如，在数据库中存储已处理消息的信息，每次处理消息前检查是否已经处理过。\n\n  3. **版本号：** 每个消息可以包含一个版本号，表示消息的版本信息。消费者在处理消息时，可以检查消息的版本号，如果版本号相同，即使消息重复到达，也可以认为是幂等的。\n\n  4. **幂等性接口设计：** 对于消息的消费者，可以设计幂等性接口，确保相同输入产生相同的输出。通过合理设计接口，消费者可以在处理相同消息时返回相同结果，保证了幂等性。\n\n  5. **事务性操作：** 如果消息的处理涉及到事务性操作，可以利用数据库事务的特性来保证幂等性。通过将消息的处理和数据库的更新放在同一个事务中，可以确保即使消息多次到达，数据库的状态也能正确更新。\n\n  6. **分布式锁：** 使用分布式锁机制，确保在同一时间只有一个消费者能够处理消息。这可以避免多个消费者同时处理同一消息，从而保证幂等性。\n\n实现MQ的幂等性需要结合业务场景和具体的消息处理逻辑，采用合适的方式来防止重复处理相同的消息。选择合适的幂等性策略可以提高系统的可靠性和一致性。\n\n## 6.了解分布式吗\n\n分布式系统是由多台计算机（或节点）协同工作，共同完成某个任务或提供某种服务。分布式系统常用于处理大规模数据、提高系统的可扩展性和可靠性。以下是一些常用的分布式技术和框架：\n\n  1. **分布式存储系统：**\n\n     * **Hadoop Distributed File System (HDFS):** 用于存储和处理大规模数据的分布式文件系统，是Apache Hadoop的核心组件。\n     * **Amazon S3:** 亚马逊提供的分布式对象存储服务，适用于在云环境中存储和检索数据。\n  2. **分布式计算框架：**\n\n     * **Apache Spark:** 用于大规模数据处理的分布式计算框架，支持内存计算，适用于迭代式算法和复杂的数据流处理。\n     * **Apache Flink:** 分布式流处理引擎，支持事件时间处理和状态管理，适用于实时数据处理和分析。\n  3. **分布式消息队列：**\n\n     * **Apache Kafka:** 高吞吐量的分布式消息系统，用于构建实时数据流平台，支持发布/订阅模型。\n     * **RabbitMQ:** 开源的消息代理，实现了高级消息队列协议（AMQP），用于在分布式系统中传递消息。\n  4. **分布式数据库：**\n\n     * **Apache Cassandra:** 高度可扩展的分布式 NoSQL 数据库，适用于处理大规模的分布式数据。\n     * **MongoDB:** 非关系型的分布式数据库，支持水平扩展，适用于处理大量文档型数据。\n  5. **分布式缓存：**\n\n     * **Redis:** 高性能的内存键值存储系统，用于缓存和数据存储。\n     * **Memcached:** 分布式内存对象缓存系统，用于加速动态Web应用程序。\n  6. **容器与编排：**\n\n     * **Docker:** 轻量级容器技术，用于打包、分发和运行应用程序。\n     * **Kubernetes:** 开源的容器编排引擎，用于自动化容器的部署、扩展和管理。\n  7. **分布式事务：**\n\n     * **XA协议:** 提供了一种分布式事务的协议，可以在不同数据库管理系统之间确保事务的一致性。\n     * **TCC（Try-Confirm-Cancel）:** 一种补偿型分布式事务的设计模式，通过预留资源、确认和取消操作来保证事务的一致性。\n  8. **服务发现与治理：**\n\n     * **Consul:** 分布式服务发现和治理工具，用于服务注册、健康检查和动态路由。\n     * **etcd:** 分布式键值存储系统，常用于服务发现和配置管理。\n\n这些技术和框架在不同领域解决了分布式系统面临的各种问题，提供了可靠的基础设施和工具，帮助开发者构建高性能、可扩展和可靠的分布式应用。\n\n## 7.spring类如何使用的\n\nSpring框架提供了众多的类和功能，用于开发各种类型的应用程序，包括依赖注入、AOP（面向切面编程）、事务管理、数据访问、Web开发等。以下是Spring中一些核心类的使用方式：\n\n  1. **ApplicationContext：** ApplicationContext 是 Spring 中用于管理Bean的上下文对象。它可以通过配置文件或Java配置类加载并管理应用程序中的所有Bean。\n    \n        // 通过XML配置文件加载ApplicationContext\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n    \n    // 或者通过Java配置类加载ApplicationContext\n    AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\n    \n    // 通过ApplicationContext获取Bean\n    MyService myService = context.getBean(MyService.class);\n    \n\n  2. **Bean：** 在Spring中，Bean是由Spring容器管理的对象。通过配置文件或注解标记类为Bean，Spring容器负责实例化、配置和管理Bean。\n    \n        // 在XML配置文件中定义Bean\n    <bean id=\"myBean\" class=\"com.example.MyBean\"/>\n    \n    // 在Java配置类中定义Bean\n    @Configuration\n    public class AppConfig {\n        @Bean\n        public MyBean myBean() {\n            return new MyBean();\n        }\n    }\n    \n    // 使用@Component注解定义Bean\n    @Component\n    public class MyComponent {\n        // ...\n    }\n    \n\n  3. **依赖注入：** Spring通过依赖注入来管理对象之间的关系。可以通过构造函数、setter方法或字段注入的方式将依赖关系注入到Bean中。\n    \n        // 通过构造函数注入\n    public class MyClass {\n        private MyDependency myDependency;\n    \n        public MyClass(MyDependency myDependency) {\n            this.myDependency = myDependency;\n        }\n    }\n    \n    // 通过setter方法注入\n    public class MyClass {\n        private MyDependency myDependency;\n    \n        public void setMyDependency(MyDependency myDependency) {\n            this.myDependency = myDependency;\n        }\n    }\n    \n\n  4. **AOP（面向切面编程）：** Spring的AOP模块提供了面向切面编程的能力，通过定义切面和切点，可以在应用程序中插入横切关注点。\n    \n        // 定义切面\n    @Aspect\n    public class MyAspect {\n        @Before(\"execution(* com.example.MyService.*(..))\")\n        public void beforeMethod() {\n            // 在方法执行前执行的逻辑\n        }\n    }\n    \n\n  5. **事务管理：** Spring提供了对声明式事务的支持，通过配置可以简化事务管理的过程。\n    \n        // 在XML配置文件中声明事务\n    <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <tx:method name=\"*\" propagation=\"REQUIRED\" />\n        </tx:attributes>\n    </tx:advice>\n    \n    <aop:config>\n        <aop:pointcut id=\"serviceMethods\" expression=\"execution(* com.example.*Service.*(..))\" />\n        <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"serviceMethods\" />\n    </aop:config>\n    \n\n以上是一些Spring中核心类的基本使用方式。Spring框架提供了广泛的文档和示例，可以根据具体应用场景和需求深入学习和使用不同的功能。Spring框架提供了众多的类和功能，用于开发各种类型的应用程序，包括依赖注入、AOP（面向切面编程）、事务管理、数据访问、Web开发等。以下是Spring中一些核心类的使用方式：\n\n  1. **ApplicationContext：** ApplicationContext 是 Spring 中用于管理Bean的上下文对象。它可以通过配置文件或Java配置类加载并管理应用程序中的所有Bean。\n    \n        // 通过XML配置文件加载ApplicationContext\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n    \n    // 或者通过Java配置类加载ApplicationContext\n    AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\n    \n    // 通过ApplicationContext获取Bean\n    MyService myService = context.getBean(MyService.class);\n    \n\n  2. **Bean：** 在Spring中，Bean是由Spring容器管理的对象。通过配置文件或注解标记类为Bean，Spring容器负责实例化、配置和管理Bean。\n    \n        // 在XML配置文件中定义Bean\n    <bean id=\"myBean\" class=\"com.example.MyBean\"/>\n    \n    // 在Java配置类中定义Bean\n    @Configuration\n    public class AppConfig {\n        @Bean\n        public MyBean myBean() {\n            return new MyBean();\n        }\n    }\n    \n    // 使用@Component注解定义Bean\n    @Component\n    public class MyComponent {\n        // ...\n    }\n    \n\n  3. **依赖注入：** Spring通过依赖注入来管理对象之间的关系。可以通过构造函数、setter方法或字段注入的方式将依赖关系注入到Bean中。\n    \n        // 通过构造函数注入\n    public class MyClass {\n        private MyDependency myDependency;\n    \n        public MyClass(MyDependency myDependency) {\n            this.myDependency = myDependency;\n        }\n    }\n    \n    // 通过setter方法注入\n    public class MyClass {\n        private MyDependency myDependency;\n    \n        public void setMyDependency(MyDependency myDependency) {\n            this.myDependency = myDependency;\n        }\n    }\n    \n\n  4. **AOP（面向切面编程）：** Spring的AOP模块提供了面向切面编程的能力，通过定义切面和切点，可以在应用程序中插入横切关注点。\n    \n        // 定义切面\n    @Aspect\n    public class MyAspect {\n        @Before(\"execution(* com.example.MyService.*(..))\")\n        public void beforeMethod() {\n            // 在方法执行前执行的逻辑\n        }\n    }\n    \n\n  5. **事务管理：** Spring提供了对声明式事务的支持，通过配置可以简化事务管理的过程。\n    \n        // 在XML配置文件中声明事务\n    <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <tx:method name=\"*\" propagation=\"REQUIRED\" />\n        </tx:attributes>\n    </tx:advice>\n    \n    <aop:config>\n        <aop:pointcut id=\"serviceMethods\" expression=\"execution(* com.example.*Service.*(..))\" />\n        <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"serviceMethods\" />\n    </aop:config>\n    \n\n[原文连接](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Ffeed%2Fmain%2Fdetail%2Fbd57316efdef4208b11aa9e286451c9e%3FsourceSSR%3Dusers)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573987962703118336?sourceSSR=users",
        "title": "Moka实习",
        "content": "三段实习都是为什么离职?\n\n秋招参加了吗?\n\n实习过程中成长最大的点?\n\n实习期间使用大型分布式框架的感受?\n\n注册中心Nacos的底层原理?\n\n平时分布式框架是怎么学习的?\n\n网关的底层原理?\n\nhashMap扩容原理?\n\nJava线程池的流程、原理?\n\nMySQL的事务实现原理?\n\n创建一张表需要关注什么东西?\n\n怎么知道一条SQL语句使用的索引?\n\nMySQL中explain命令了解多少?\n\nredis大概介绍一下,先讲些概念的东西然后再聊细节?\n\nRedis中zset的应用场景?\n\nRedis的集群介绍一下?\n\nSpring、SpringMVC、SpringBoot自己挑几个感觉印象比较深的问题可以大概说一下\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573983583379922944?sourceSSR=users",
        "title": "哈啰前端一面（1个小时）",
        "content": "  1. js基本类型\n  2. instanceof与typeof\n  3. null与undefined的区别\n  4. 箭头函数与普通函数\n  5. 0.1+0.2 是否等于0.3，怎样让0.1+0.2等于0.3\n  6. 防抖、节流\n  7. Promise所有的api\n  8. ES6有哪些新特性\n  9. 场景：Promise，有一个请求，5s内没有结果就提示超时（经提示答案为race）\n  10. 手写Promise\n  11. 数组去重\n  12. 反转链表\n  13. 闭包以及闭包带来的问题\n  14. 浏览器事件循环\n  15. css隐藏元素有哪些方法\n  16. vue双向绑定原理\n  17. vue2、3对数组的监听\n  18. vue3与vue2对比\n  19. 浏览器状态码\n  20. 304状态码===>引出协商缓存\n  21. 前端性能优化\n  22. 反问\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573982836915539968?sourceSSR=users",
        "title": "❗【经验分享】能链集团一面",
        "content": "能链集团一面\n\n时长：20-30min\n\n形式：单面\n\n问题类型：\n\n1.个人介绍 2-3min\n\n2.简历问题\n\n-实习经历某段实习经历中的具体工作是怎么做的？（更偏向于和岗位相关）\n\n-在校经历和数据分析相关的实习经历的具体工作是怎么做的？最后得到了什么样的结果？（要结合岗位去看）\n\n3.其他问题\n\n-你的同学、老师和领导是怎么评价你的？\n\n-其他想问的问题？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573916616690335744?sourceSSR=users",
        "title": "1.08 得物一面 开发测试实习生",
        "content": "# 1.08 得物一面 开发测试实习生\n\n自我介绍\n\n你对测试开发有了解过吗？\n\n你为什么想转到做测试开发？\n\n测试开发具体会用到哪些测试手段？\n\n以登录为例，要如何测试登录功能是否正常？包括交付质量、高可用\n\n如何保证请求是通过前台传过来的而不是直接通过地址传接口的？\n\n异常测试你会想到哪些点？\n\nhttp请求常用的状态码？（404、504、502、301）\n\n常用的Linux命令有哪些 ？\n\nvi和vim有什么区别？\n\ngit常用的命令有哪些？\n\ngit查看历史提交记录命令？\n\n说说你的项目（任意一个）\n\n你常见一些异常类有哪些？\n\ntry...catch中如果catch加了return，那么finally还会执行吗？\n\n说一下你熟悉的设计模式？\n\nSpringBoot中什么是AOP？\n\nget和post方式的区别\n\n你个人的职业规划是什么？\n\n总结：\n\n老实说我都没搞懂我什么时候投得这个岗位，我去得物官网上也没看到我的投递记录，给我整不会了，不过既然收到这个面试通知了，我也是参与了，因为我是Java后端方向并没有多少软件测试的基础，所以也给面试官整不会了，问了我一些软件测试的问题发现我不会就问通用知识的问题了。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573981859684556800?sourceSSR=users",
        "title": "❗【经验分享】安踏2024战略岗秋招AI测评",
        "content": "1.测评形式：手机测评\n\n2.测评时长：20-30m\n\n3.测试方式：笔试+面试\n\n4.题目类型：\n\n1）个性特征：\n\n-题目个数：9\n\n-答题时长：不限时\n\n-出题方式：\n\n✔选项个数：4个\n\n✔问答方式：请阅读以下四句话，选出最像你的一句和最不像你的一句\n\n-举例：最像我：我有些固执，脾气较倔我坚信付出足够的时间和精力能够提高自己的智力水平我有时会因吃得过多而闹出肠胃病我通常保持我的物品井井有条最不像我：\n\n2）认知能力：·推理能手\n\n-题目个数：9\n\n-答题时长：12m\n\n-出题方式：图形规律\n\n✔题目：3X3矩阵，前八个图形呈现规律，推测最后一个图形是什么\n\n✔选项：8个\n\n✔规律：相加、相减等·译图达人\n\n-题目个数：9\n\n-答题时长：12m\n\n-出题方式：计算\n\n✔题目：一幅或多个图，计算百分比\n\n✔个数：3道大题，各包含3个小题\n\n-举例：Q：某互联网企业1994-2009年成本规模，包含人力成本和其他成本。1994：人力成本754，其他成本377；1999：人力成本1731，其他成本1024；其他年份数据省略。\n\n问：该互联网历年人力成本占总成本比例较稳定，其中哪一年比值与其他年份的比值相差较大？\n\nA：1994年B：1999年C：其他省略\n\n3）工作偏好：\n\n-题目个数：1\n\n-出题方式：Q：以下哪个选项最符合你的期待？A：我更倾向于“朝九晚五、周末双休”的有规律的工作节奏B：我认为用多余的时间去做自己本来就应该完成的任务是必要的C：工作应该是富有激情且充满干劲的，作为青年一代的我们应全身心投入，创造人生价值\n\n❗个人答题思路：主打积极向上，实现个人价值！\n\n4）行为能力：\n\n-题目个数：8\n\n-答题时长：30s读题 4-5分钟答题（共两次录屏机会，但一共只有4-5分钟）\n\n-出题方式：AI录屏\n\n✔题目：一个特定能力+三个场景（学习生活、实习生活、社团生活） 不同场景题目不同\n\n✔题目类型：学习、规划、沟通、抗压能力\n\n-举例：学习能力\n\nQ：请“选择一个场景”，您在该场景下的亲身经历能充分展现你的“学习能力”。○学习生活○实习经历○社团活动→学习生活：请讲述一段你学习难度较高的一门课程或一种技能的经历，你是如何学习的？经历了哪些困难？你是怎么克服的？最终结果如何？\n\n❗个人回答心得：提前准备内容并模拟，题目有点儿像宝洁八大问。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573915208175853568?sourceSSR=users",
        "title": "蔚来实习面试凉经",
        "content": "蔚来实习面试 电子硬件类岗位\n\n（估计凉）\n\nbg：985本 项目经历比较丰富\n\n基本上按照项目经历问\n\n1.直流有刷电机怎么控制，电机运转，停止的时候MOS的状态，为什么，介绍H桥电路✅\n\n2.介绍有刷电机驱动板，为什么需要驱动芯片，涉及自举电路✅\n\nMOS栅极电阻，GS极之间并联电阻。答出了有电阻和大概阻值。 电阻的作用忘了❌\n\n3.介绍SPI通信，介绍两种拓扑，菊花链的优点✅\n\n4.项目里板对板通信为什么用SPI 答：为实现高速率，相对于CAN，面试官表示质疑，说实际中不会这样用，板对板还是CAN❌\n\n5.项目为什么用MCU+FPGA  控制频率高，调用中断频率高，MCU性能有限✅\n\n6.电机控制项目怎么采集电流 答：用霍尔式 面试官表示疑惑 。为什么用外置AD转换器 答 精度高 分辨率高✅\n\n7.电机控制项目怎么采集位置信息 答：旋变\n面试官表示疑惑（不是电机控制岗位，面试官不了解永磁同步电机控制，我说主驱电机都用旋变，但他认为应该用霍尔/无感算法）❌面试官不了解这方面，但我的解释没让他信服\n\n8.介绍FOC （面试官不懂，简单介绍了一下）✅\n\n9\\. 了解PID吗，分别代表什么，如何调参✅\n\n最后面试官说，可能人力部门因为本科的问题卡。公司前一段比较动荡，流程可能很慢，部门有一段时间没招过人了。\n\n整体近一个小时，简历的项目没问完。最后一直问想不想去上海发展，想不想去蔚来工作。\n\n面完两个工作日没消息，估计因为本科被HR挂。\n\n还是得去考研了😭\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573906026945118208?sourceSSR=users",
        "title": "智臾科技面经 一面（凉）",
        "content": "自我介绍\n\n项目介绍\n\n面试官：你这个15445项目运用到了RAII思想，可以介绍一下RAII思想嘛.\n\n我：RAII思想就是利用生命周期来实现对资源控制.\n\n比如mutex_lock，智能指针。然后我项目中运用RALL思想，实现了page_guard类。\n\n面试官：RAII这么做的目的是什么？\n\n我：拿page_guard来说，在构造时上锁，drop或生命周期结束时释放锁,这样极大的简化编程难度。如果没有实现这个，编程难度会变大，忘记释放锁或忘记上锁，容易造成死锁，或者是占用更多性能。\n\n又或者是智能指针， 在智能指针没有出来之前，指针会经常遇到一些困境，比如 忘记delete造成内存泄漏，已经delete后指针忘记置空，变成野指针等问题。\n\n总而言之，RAII方便了我们的资源管理.\n\n面试官：15445中的做了事务隔离，可以简单介绍一下嘛.\n\n我：p4太难，放弃了。\n\n面试官：那你能介绍一下lab3中优化部分做了哪些嘛？\n\n我：首先是实现了topn优化和hash_join的优化. 原本是使用 nest loop\njoin方法，也就是一个两层循环，是最坏的情况，我们通过hash_join进行优化。\n\n面试官：了解B+树嘛？\n\n我：简历上写错了，因为2023 fall做的是可扩展哈希，所以没太了解B+树。\n\n面试官：C++的内存空间是怎样的结构\n\n我：栈区，堆区，全局/静态区，常量区。栈区相对较小,全局/静态区和堆区较大。\n\n面试官：哪些情况用栈，哪些情况用堆，哪些情况用全局/静态区？\n\n我：我们从main()函数执行前后来讲，在main函数执行之前，会先把 static变量，全局变量放进全局/静态区。\n\n然后我们平时写函数的时候，在里面定义的变量会放到栈里又或者是递归的时候会压栈。至于堆，是由程序员主动申请的空间,什么时候用堆呢？首先第一点，因为栈区比较小，所以当我们开一个大数组，或者是动态数据结构（如set，map,动态开点线段树等）时，是需要放到堆里的。第二点是，当需要对象需要被多个函数共享时，这时候我们把该对象放到堆里面，就可以实现共享.这样就减少了内存开销.\n\n面试官：堆和栈有什么差别？或者说栈相对与堆有什么优势？什么情况尽可能的放到栈上？什么情况尽可能的放到堆上？\n\n我：首先是堆的，我们刚才有讲到过，就是动态数据结构（如set，map,动态开点线段树等）或共享对象时，是需要放到堆里的。\n\n至于栈的话，比较小的变量就可以直接放。\n\n(这题应该是G了。哎)\n\n面试官：堆和栈在访问效率上有什么差别？\n\n我：堆会快一点。（这里答错了，因为我不知道，所以我随便答了一个,正确答案是栈）\n\n(面试官拿起来笔，在本本上画了两下。)\n\n搜了一下：\n\n优势和适用情况：\n\n  1. 栈的优势：快速分配和释放：栈上的内存分配和释放速度快，适用于需要频繁创建和销毁对象的情况。空间效率高：栈的空间有限，但是分配和释放的开销小，适用于存储较小的数据对象。\n  2. 堆的优势：动态分配：堆允许在程序运行时动态分配内存，适用于需要灵活管理对象生命周期的情况。大内存空间：堆的空间相对较大，适用于需要存储大型数据结构或对象的情况。共享数据：堆上的数据可以被多个模块或线程共享，适用于需要在不同的上下文中访问数据的情况。\n\n一般情况下，以下准则可以作为选择栈或堆的一些参考：\n\n  * 当数据对象的大小较小且生命周期可以确定时，优先考虑将其放到栈上。\n  * 当数据对象的大小较大、生命周期不确定或需要动态分配时，考虑将其放到堆上。\n  * 需要注意的是，在堆上分配内存后，需要及时释放以避免内存泄漏。\n\n面试官：还剩半小时我们来做一下算法题.\n\n算法题1：一个骰子有n面，投到每一面的概率相同，问每一面都至少出现一次，需要投几次。\n\n我：考了最不会的期望dp且一个月没写过题。。 想了20分钟，然后推了个期望方程。\n\n设dp[i]表示n面中有i面出现了至少一次需要投的次数。\n\ndp[i] = (n-i)/n *(dp[i+1] + 1) + i/n*(dp[i] +1 );\n\ndp[i+1] = (n/(n-i))+dp[i];\n\n算法题2：把至少出现一次改成至少两次。\n\n我：没写过来。\n\n面试官：其实算法题2跟算法题1是很像的，设dp[i][j]表示出现一次的有i面，至少出现了两面的有j面即可转移。\n\n反问环节。\n\n自我反思：\n\n1.算法题考虑期望dp，一个月没写题加上期望dp不熟，菜是原罪。\n\n2.项目最好完善一下，事务的隔离级别和B+树，就算没做也要了解一下。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573980487174070272?sourceSSR=users",
        "title": "❗【经验分享】联合利华2024届秋招AI测评",
        "content": "1.测评形式：手机测评\n\n2.测评时长：35分钟\n\n3.测试方式：笔试+面试\n\n4.题目类型：\n\n1）AI测评：\n\n-题目个数：5道题（第3题是第2题的延伸，类似安踏AI题）\n\n-答题时长：1分钟看题+理解4-5分钟录屏答题\n\n-出题方式：AI录屏\n\n✔题目类型：目标类、问题解决类、学习能力类、变化类\n\n✔题目语言：中文+英文（只有1道英文题目）\n\n-举例：学习能力Q：Describe how you acquired a new skill through self-learning in recent years.(Please answer this question in English）\n\n-这里的第二题我抽到的题是：不确定性最大的项目，我是如何应对这个变化、确保目标达成的？我具体做了什么？\n\n-延伸题是：就刚刚的题目，详细说明我都做了什么？（这道题的录制时间只有2分钟）\n\n2）认知能力：\n\n-题目个数：4-5道题\n\n-答题时长：10分钟\n\n-出题方式：图形规律\n\n✔题目：3X3矩阵，前八个图形呈现规律，推测最后一个图形是什么图\n\n✔选项：8个\n\n✔规律：相加、相减、一行总个数相同等\n\n❗和安踏应该是同一个认知能力的题库\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573905402467778560?sourceSSR=users",
        "title": "momenta项目管理实习一面与二面",
        "content": "# 1、momenta一面（24min）\n\n1、简单自我介绍\n\n2、我上一份实习的主要的工作内容是什么\n\n3、在上一份实习的项目当中，最终交付的情况是什么样的？项目的目标是什么？达成情况是什么样的？\n\n4、实习当中有对外的沟通对吧，那你是如何去进行信息的同步，信息的交接的？在这个过程当中有没有什么经验或者总结？\n\n5、面试官介绍他那边的岗位的情况：\n\nmomenta本身是做智能驾驶方案的一家公司，对于整个公司的交付是做一个智能驾驶的软件，在公司内部是有不同的协作方式。然后介绍了一下我们部门的定位，我们需要做的事情。\n\n岗位：项目管理主要是进行内外部需求的对接，对内部工作进行排期，追踪，和用户反馈等\n\n# 2、momenta二面（18min）\n\n1、自我介绍\n\n2、你对你个人未来职业发展的规划是这么想的？想做些什么？\n\n3、面试官说项目管理更多的是一个沟通协调为主的工作，本身需要对做的事情有一定的认知度，组织项目的相关资源。面试官的部门主要是车辆的，包括物料准备、调试、验收、软件版本等一系列复杂的工作，项目进展等，你是不是对这方面感兴趣？\n\n4、我本科专业核心的培养方向是什么？\n\n5、选一个你自己的项目，然后深入的介绍一下。（我介绍了自己的一个项目，在项目当中遇到的困难以及如何解决的）\n\n反问：\n\n  1. 实习生的绩效是如何算的，在什么情况下会拿到正常公司以下的工资\n\n这个问题是因为小红书说有人因为绩效被扣工资，面试官说基本没有，没有这回事。\n\n  1. 如果有幸能够成为实习生的话，是不是越快到岗越好，春节也会放假对吧。\n\n肯定的，越快越好。\n\n  1. 到时候可能需要请假一两周回学校进行毕业论文的答辩，不知道公司这边是否接受。\n\n可以的，接受\n\n  1. 公司中午有午休时间吗\n\n有，一般12-14点，但是可能也有人找你有事情，随机的\n\n注意：\n\n有加班，早10，晚19-22（看运气，实习生应该不会加班太严重）。\n\n面试官都希望能够实习久一些\n\n目前在等通知，不知道能不能拿到offer，是base广州的\n\n还蛮快的，我boss上投了之后，过十多分钟HR就打电话约一面（1.5），一面结束马上二面（1.8）。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573856434702581760?sourceSSR=users",
        "title": "字节跳动  Dev Infra算法实习一面面经",
        "content": "1、自我介绍\n\n2、深挖腾讯实习经历(聊了20min)\n\n3、介绍第一段实习经历\n\n4、指针和引用的区别\n\n5、什么时候用malloc，什么时候用new(这里没答上来，感觉cpp里基本都用new了吧)\n\n6、介绍智能指针(unique_ptr,shared_ptr,weak_ptr)\n\n7、智能指针的底层如何实现的\n\n8、如何排查内存泄露问题的\n\n9、介绍c++的内存分布\n\n10、静态链接和动态链接的区别\n\n11、动态链接时如何找到对应的函数的(这里瞎说了一番，也没反驳我)\n\n12、什么时候会由用户态切换为内核态？\n\n13、为什么文件io操作时要切换到内核态？\n\n14、介绍虚拟内存\n\n15、虚拟内存如何映射到物理内存的\n\n16、了解过哪些锁(只说了用过互斥锁)\n\n17、互斥锁的用途？\n\n18、实际问题中碰到的死锁现象(答了申请锁的顺序不当)\n\n19、python的深拷贝和浅拷贝\n\n20、python的可变对象和不可变对象\n\n21、多线程和多进程的区别？\n\n22、进程切换的开销为什么比线程更大，详细一些？\n\n23、两个线程申请同一把锁时，如何高效的实现两者切换(条件变量)\n\n24、如何解决python中的内存泄漏(没遇到过这种情况)\n\n25、代码题，leetcode98.验证二叉搜索树 (秒了)\n\n26、反问，组里主要做AI应用的，涉及到大模型的应用，js、java、go语言都有用到。\n\n基本都答上了，希望不是kpi面吧\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573979268686909440?sourceSSR=users",
        "title": "❗【经验分享】普华永道测评",
        "content": "❗淘宝买模拟系统一定要练手\n\n1.记图\n\n-题目个数：48道题（无障碍24、有障碍24）\n\n-题目形式：3*5的格内，蓝灯随机亮起，在灯停后按顺序点击灯亮起的格子\n\n-策略：趁着间隙时间画格子，记录下来\n\n2.发电\n\n-题目个数：大概可以按100次\n\n-题目形式：4个电路，2个50电压的、2个100电压的，按几次会不停增加电压总数，也会倒扣电压数。50电压中有一个扣25-70电压，一个扣100电压；100电压中一个扣250-750电压，一个扣1250电压\n\n-策略：开始每个电压按3-4次，确定4个电压表分别对应上述哪个电压范围，确定后多数按50电压但扣的少的那个\n\n3.指路\n\n❗模拟系统练手很有用，直接练\n\n4.定价\n\n-题目个数：忘了是几个周了\n\n-题目形式：双方都高价得200利润，双方都低价得50利润，一方高一方低，低价方得300利润，高价方得0利润\n\n-策略：先高价，如果对方出低价，我也出低价，之后再高价\n\n5.分票\n\n❗模拟系统练手\n\n6.充气\n\n-题目个数：45个气球，平均每类15个左右\n\n-题目形式：三类气球，爆点分别在0.05-0.2、0.6-0.8、2-3之间，我抽的比较离谱，两类在0.6-0.8之间，一点过就爆\n\n-策略：用4-5个气球判断出三类气球在哪个范围内，按其范围最低点收集气球\n\n7.识人\n\n-题目个数：50个\n\n-题目形式：判断以下人们得表情属于哪种？悲伤、愤怒、快乐、平淡等\n\n-策略：模拟题库里，把每类人的表情记录下来，可以发现规律，实战会好很多\n\n8.解锁\n\n-题目个数：6关\n\n-题目形式：每关5个数字，类似摆针得范围框在表内以某规律运转，框转到需要得数字时快速按空格，框住所需数字即可\n\n9.图案\n\n-题目个数：10-15个\n\n-题目形式：3*3图，依据所给图，判断图与图之间得变化过程，从所给选项中找出最后一幅图\n\n-策略：行测中有类似提，但普华得题型更单一、更简单\n\n10.分析\n\n-题目个数：10-15个\n\n-题目形式：每道大题下有3个小题，根据图表计算即可，每3道题大概3分钟。\n\n-策略:我赶不太急，平常练题的时候要注意一下这部分的速度\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573839349360369664?sourceSSR=users",
        "title": "灵犀 游戏引擎岗 timeline",
        "content": "12.19 技术一面\n\n12.22 技术二面\n\n12.26 三面（主管+hr）\n\n1.5 交叉面\n\n1.8 oc\n\n其实很想每次把面经给记录下来，但实在怕有潜在竞争对手，这个广州只剩1个hc的岗位对我来说真的很重要[牛泪]\n\n之前灵犀11月底发过冬季补录的邮件，但我写了之后没什么回应，转机竟然是实验室同门在boxx上被灵犀的人联系，然后转推了我，大半个月走完了流程；虽然在深圳这边只实习了一个月，但还是学到了很多东西，至少在面试时候更有自信了，灵犀的面试非常注重项目实践和对问题的思考，八股代码基本没有问到，可能也是因为我之前做过笔试4.6/5；现在应该等到正式offer下来就给mt说开溜吧，不过400一天坐着摸鱼还是很香的；然后贴个转租的广告，深圳南山创意科技大厦对面，合同到2月22号，无中介费，可以比价合同优惠个500哈，有意私聊\n\n最后说下天美这边实习体验，项目是比较成熟的，我一个实习生基本是搬编辑器的砖，然后修修烘焙方面的bug，mt技术上非常厉害，但可能不擅长带人，大多数时候是我在自学，总的来说就是了解了现在ue在实时全局光照这方面大致用了哪些技术吧。国内能有一个完整渲染组提供这方面实习机会的真不多，所以这边的工作方向和内容对于想做渲染的同学来说真的算很契合，但哥们实在等不到hc了，只想早点写完大论文回去过年，走到这里秋招也算结束了，能留在广州做喜欢的工作算是我最大的幸运，就这样吧\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573836300843843584?sourceSSR=users",
        "title": "PWC——战略分析，一面经验",
        "content": "问题：\n\n自我介绍\n\n对中台的理解\n\n对AIGC等新名词的理解\n\n业务主要是写文档，能否接受\n\n好想去四大[无语子]，滤镜加持\n\n算了写文档还是放弃了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573833135079653376?sourceSSR=users",
        "title": "美团——商业分析，一面凉经",
        "content": "自我介绍\n\n简历项目深挖\n\n人工仓储管理\n\nsql题2个（time）\n\n指标(日活，利润)下降后拆分维度\n\n指标下降后分析（高价值、低价值）\n\n仓库选址问题\n\n第一次面试就贡献给了大厂，现在回想我当时说的都是什么玩意[等offer][等offer][等offer]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573831908740665344?sourceSSR=users",
        "title": "蔚来——数据分析，二面经验",
        "content": "问题：\n\n自我介绍\n\n优缺点\n\n别人怎么评价你\n\n转向数据分析的契机\n\n实习和竞赛哪个更印象深刻\n\n实习中遇到的困难和解决的方法\n\n对岗位的期待\n\n反问\n\n会不会影响学业\n\n到岗时间\n\n非常快，加起来20分钟[羞涩]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573631565306068992?sourceSSR=users",
        "title": "美团 到店结算 后端实习 一面",
        "content": "补一个面经\n\n2023.12.20 美团 到店结算 java后端实习 一面 base上海\n\n下午一面完晚上就oc了，没有二面，感觉是急招，有点运气成分在\n\n面试官人很nice，有些问题我没有回答了得很细，面试官也没有深究，感觉就是在聊天\n\n部分面试内容：\n\n  1. 聊实习项目\n  2. 优化接口是如何优化的？\n  3. 我讲到了利用索引提高查询速度，然后问如何选择索引？\n  4. RPC项目\n  5. 项目里写了序列化，问json和java原生序列化的区别？\n  6. netty的io多路复用机制？讲了基本机制后问更深层的实现呢？回答了select/epoll，但不是很熟悉\n  7. mysql\n  8. 讲讲ACID以及分别是如何实现的？还有些其他常规八股\n  9. 有了redo log为什么还要undo log？回答了目的不一样，前者用于故障恢复，后者用于事务回滚和mvcc，但好像不是面试官想要的答案，继续追问，又说了前者是全量恢复，后者是部分恢复，面试官说还有一点是redo log是环形缓存\n  10. redis\n  11. stream了解吗？不了解，只知道能作为消息队列使用\n  12. redis的集群搭建？泛泛讲了下主从复制里的第一次同步、增量复制啥的\n  13. 算法题\n  14. 二叉搜索树删除节点？lc 450\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573623991206739968?sourceSSR=users",
        "title": "2024校招，京东科技测试开发工程师二面",
        "content": "## 前言\n\n东子约面还是很快的，一面是部门主管，一直聊实习和业务\n\n过了当天约二面，二面是纯技术面，可惜lz表现不加，未能通过\n\n今天来让我来回忆一下，当时都问了哪些问题，我又是为什么没有通过这次面试的吧！\n\n## 过程\n\n  1. 自我介绍\n  2. 什么机缘巧合让你选择了测开这个工作？\n  3. 目前对测开岗位的理解 懂技术-沟通表达到位-用户思维\n  4. 还有吗？测开岗位很包容，除了与产品和研发，还有哪些？ 细心-耐得住寂寞\n  5. 测开有技术能做什么？ 快速定位bug-评估优先级-和开发交流\n  6. 技术在测试中的应用，还有吗？ 常见场景利用工具，节省人力，接口测试-性能测试-压力测试\n  7. 还有吗？ 和开发沟通顺畅-能理解底层问题-懂技术的人在产品设计层面更加严谨\n  8. 实习工作\n  9. 主要负责哪方面测试？ 客户端-黑盒功能测试\n  10. 现在做原来的工作，有什么思路吗？ 二八定律-关键点仔细测试-转化自动化测试\n  11. 自动化实践方式？ selenium-获取表单，用Python写的\n  12. 怎么获取页面元素？ CSS-name-id-XPATH\n  13. 现在用的什么语言？ Python\n  14. 用的什么框架？ Django\n  15. 介绍项目经历 postman-请求服务\n  16. 面试官表示pytest更好，交互更加简单，可以批量获取\n  17. Java Junit-只知道断言，感觉就是这里寄了，Java了解的太少了，和他们技术栈不匹配\n  18. Django 基础语法\n  19. 学校实训系统，这里他还想问我Spring，但我之前表示不咋会Java\n  20. 实体怎么存储的，有多少个字段？ 这里我蒙蔽了，他说身份信息，存了多少字段，我当时脑子里都没有字段的概念，后来发现就是讲讲实体设计\n  21. 比赛经历 \n  22. 棋子定位怎么实现？ 横纵坐标定位，再处理逻辑\n  23. 毕业了之后，对工作内容的期望？ 运用技术-工作有意义-有成就感-团队沟通流程\n  24. 为了工作做了哪些准备？一到两年的目标？ 技术方向-将业余时间放在和工作匹配的方向上\n  25. 这两次实习中最大的收获？ 了解了测试工作-软件开发流程-涉及到的人员身份\n  26. 反问\n  27. 岗位业务 ToB ToC\n  28. 技术栈\n  29. 测试开发3-5年的发展？ 业务+技术，自研工具，业务老化怎么分析场景，验证测试结果有效性，测试人员之间的理解是不同的，团队知识怎么沉淀，CI/CD，精准测试，不同于研发\n  30. 大模型在测试中的应用？ 基础可以-复杂场景不行，语气、表情理解欠佳，继续发展\n  31. 自研测试工具？\n\n## 总结\n\n现在回顾其实我们两个聊得挺开心的，只是可惜技术栈没有那么匹配，和竞争者相比就差了一些，继续努力吧！\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573627633494196224?sourceSSR=users",
        "title": "哈啰——数据分析，一面经验",
        "content": "问题：\n\n自我介绍\n\n比起统计学专业的优势？\n\n交通专业为什么想做数据分析？\n\n四道sql题：\n\n①partition by相关\n\n②join函数相关\n\n③怎么查找连续五天登录的用户（做过这道题，但是怎么也想不起来了[发火]）\n\n④查找B表存在A表不存在（in,exists,left join）\n\n简历持续深挖，节奏很快，挖到露馅为止[掉小珍珠了][掉小珍珠了][掉小珍珠了]\n\n①介绍一下公交项目背景，内容\n\n②有什么落地措施，v/c为什么是0.9，用户画像怎么分析的，具体多少条路瓶颈，具体的算法逻辑\n\n③为什么不参加后面项目，然后说我做的东西非常的底层[等offer]\n\n面的稀巴烂，面到后面心态崩了，但是面试后20分钟打电话说通过了[秃头]\n\n感觉面试官还是有两下子的，不过听说实习生也要996，非常卷[懵][懵][懵]\n\n还有目前为止所有的面试都反馈了一个问题，项目不落地，没有结果分析，不完整！（可能也是科研和工作的差别吧）\n\n对自己的简历和项目一定要非常熟非常熟[牛泪]要重新包装了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573578842304946176?sourceSSR=users",
        "title": "成都moka一面25届勇闯春招 45min",
        "content": "hr面试去打了三次电话，向我确认25届，询问部门是否需要25届，最后约面  \n45min，是个大哥，整体聊得很愉快  \n1.介绍项目，业务  \n   为什么要使用disruptor，解决哪些问题，出现哪些问题，怎么权衡  \n    为什么要选择优先覆盖原数据，假如不覆盖出现什么问题  \n 2.场景题  \n    现有这么一个需求，Kafka堆积的情况下保证mq消费顺序，怎么处理  \n    设计一个有缓存的接口，怎么设计（连续被问n次了）  \n3.一个easy sql\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573614578416844800?sourceSSR=users",
        "title": "2024校招，网易互娱游戏测试工程师一面",
        "content": "## 前言\n\n大家好，今天回顾一下，我前段时间参加的游戏测试工程师技术面试\n\n两个面试官，一个提问，另一个负责记录\n\n## 过程\n\n  1. 自我介绍\n  2. 比赛经历\n  3. 介绍一下使用的博弈算法\n  4. 穷举算法对性能有什么影响\n  5. 怎么评估局面好坏\n  6. 出现的bug怎么解决的，为什么会出现？\n  7. 作为队长，怎么分工和协作\n  8. 队员工作有些重合，为什么？\n  9. 你负责哪些内容\n  10. 比赛一共进行了多久？怎么分配的？\n  11. 每个阶段的目标\n  12. 设计时有出现什么意外的情况吗？\n  13. why测试\n  14. 最近的测试工作-实习工作\n  15. 对目前工作感觉如何？\n  16. 这样的流程你满意吗？\n  17. 如果你是ld，会怎么改进？ 人力消耗上-技术提升上-游戏体验上\n  18. 现在需要你做白盒测试，你有方案吗？\n  19. 白盒测试需要做什么？ 静态-动态\n  20. 开发经历介绍，压力测试？\n  21. web项目，压力测试要注意哪些参数？\n  22. 从测试角度进行压力测试，给开发反馈压力报告，从哪些方面记录？ 定位问题-延伸出解决方案\n  23. 举例有哪些原因和处理方案？ 硬件层面-数据库读写压力\n  24. 假如你是淘宝QA，用户反馈网页进不去了，怎么分析和定位问题？ 看报错-定位问题（缩小范围）-开发者工具-抓包\n  25. HTTP协议 我说成了超文本链接协议.. 应用层-安全-效率-端口\n  26. HTTP协议package有哪些内容？ 响应头-状态码-版本号-响应体-链接-格式-数据\n  27. 常用状态码 30开头是重定向\n  28. Python，m*n的矩阵，从左上到右下有多少种路线，让我口头解释，我说的双循环dp赋值，他没听懂/听清，我重新解释状态转移方程\n  29. 在矩阵中的一些点不可到达，怎么设计？ 我一开始解释加判断，他说判断有点多，咋优化，我说变成负数\n  30. 你用过哪些数据结构，栈和队列的区别？\n  31. 用两个栈实现一个队列的功能，秒了\n  32. 分别解释出栈、入栈情况，他让我慢点说..，现在回忆确实应该慢慢思考，多说一些情况\n  33. 游戏经历，炉石-益智类-LOL\n  34. 怎么理解英雄联盟，为什么这么畅销？ 简化DOTA，正向思维，干就完了，团队合作，需要技术\n  35. 玩的什么位置，打野-盲僧-寡妇\n  36. 介绍一下盲僧的技能\n  37. 作为QA测试一下他的技能\n  38. Q-正常释放-特殊状态-伤害计算-能量CD计算-释放范围-BUFF叠加-二段状态-敌方净化-速度-地形\n  39. 二段有举例限制吗？ TP回家了能跟过去吗？\n  40. CD怎么计算的？ 边界值检测\n  41. 第二个面试官提问：你总结过测试的思路吗，怎么保证质量？\n  42. 测试用例-不同身份出发（用户、技术、产品）-测试计划-测试方法\n  43. 反问\n  44. 业务 黑盒+白盒+测试工具+制定计划\n  45. 技术栈 Python、Java、C#、C++\n  46. 游戏测试职业发展\n  47. 五个工作日内答复\n\n## 总结\n\n面试感受还是很不错的，尤其是最后聊游戏，同道中人惺惺相惜\n\n如果可以选，你最想从事什么工作？\n\n十年前的我，想每天打游戏赚钱，现在的我，以实现自我价值为目的寻找工作机会。\n\n谈谈你的看法\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573623906314027008?sourceSSR=users",
        "title": "蔚来——数据分析实习，一面经验",
        "content": "问题：\n\n自我介绍\n\n简历上指标选取原则\n\n优缺点\n\n对实习的期待\n\n常用的sql聚合函数\n\n项目落地的措施和策略\n\n怎么保证数据的准确性\n\n非常轻松愉悦的一次面试[喝可乐]\n\n期待二面[诶嘿]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573577761026052096?sourceSSR=users",
        "title": "得物JAVA训练营 30min",
        "content": "八股:  \n1.reentrantlock原理  \n2.coutdownlanuch 使用场景和原理  \n3.sql语句执行流程  \n项目:着重讨论多级缓存设计  \n1.基于业务为什么这样设计  \n2.脱离业务该怎么优化有哪些问题  \n  \n软问题:怎么看待实习，职业规划，得物风评不好，怎么看待加班\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573558406162776064?sourceSSR=users",
        "title": "实习面经",
        "content": "本着回馈牛客的初心，将最近两个月的实习面经总结如下，希望各位友友和我自己都能找到满意的工作！\n\n# 柠檬微趣c++后台实习生\n\n笔试（两个小时，4道编程题）  \n1、leecode290 单词规律  \n2、leecode556 下一个更大元素  \n3、leecode1477 找两个和为目标值且不重复的子数组  \n4、protoBuf编码与解码\n\n一面  \n写一个空类，编译器自动生成了哪些函数  \n对指针，字符数组求sizeof  \nvector内存扩容机制  \n手写实现vector的push_back()和remove()方法\n\n# 飞航智能\n\n主要问webServer项目：  \n为什么要用模拟proactor模式，它到底可以解决什么问题  \n用的什么http类库  \nsocket通信是直接将socket暴露出一个端口吗  \nsocket在计算机网络第几层  \nsocket能直接和http通信吗  \nsocket通信具体是什么意思  \n接受数据那一层用socket还是什么类库？  \n为啥要用事件处理模式  \nreactor和proactor区别  \n为什么要有主线程/从线程这种东西  \n主线程干了啥  \n为啥要用有限状态机  \n什么时候选TCP,什么时候选UDP  \nselect,poll,epoll区别\n\n# 深维智信\n\n编程题：  \n1、已经排好序的整数序列（升序，⽆重复项），序列中可能有正整数、负整数或者0，请⽤你认为最优的⽅法求序列中绝对值最⼩的数  \n2、有⼀座⾼度是k级台阶的楼梯，从下往上⾛，每跨⼀步只能向上1级或者3级台阶。请⽤你认为最优的⽅法求⼀共有多少种⾛法。  \n面试：  \n数据库四大特性，四种隔离安全机制  \n为啥是3次握手，4次挥手  \nhttps为啥比http安全  \ncookie怎么从服务端传给客户端  \n如何判断链表是否有环，如果有怎么找到环的入口位置\n\n# 经纬恒润\n\nC和C++两者各有什么优缺点，分别适合用在什么情况下\n\n    \n    \n    int fun()  \n    {\t\n      \tint* a=malloc(sizeof(int));  \n    \treturn *a; \n    }\n    问返回值是多少，这段代码有啥问题\n    \n\n智能指针解决内存泄漏问题的原理\n\nunique_ptr智能指针是如何做到独占的\n\n# 上海燧原\n\nusing关键字  \n类型转换  \n智能指针  \nmove函数  \nC++运行时存储结构  \ndocker  \n5-10条linux命令  \ngcc背后工作原理  \nAI,GPU  \n如何调试debug  \ncmake\n\n# ontim\n\n虚拟机中开了很多进程，可以保证这个服务器程序一直正常运行吗  \n提升进程优先级方法（高优先级调度，进程绑大核，放到一个空闲的CPU核上  \n堆和栈区别  \n内存动态分配 i++和++i的区别  \n数组名字可以作为指针吗  \n对文件操作时，打开，关闭，读写是用哪个函数  \nC++内存泄漏  \ntry-catch  \n冒泡排序\n\n# 北京算力大陆\n\n一面  \n值传递与引用传递  \ntypedef关键字  \n野指针  \n动态多态  \n创建线程用哪个依赖库  \ngit命令  \nGit进行版本控制，分支管理的方法  \nc++代码用什么构建（cmake还是makefile)  \n算法题 leecode268 丢失的数字\n\n二面：主要问项目上的一些东西\n\n# 作业帮\n\n笔试三道题，需要自己处理输出输出，题目也不告诉输入输出的格式，真的崩溃  \n第一题不记得了  \n第2道是拆分链表的题目，给定一个链表和一个基准值，要求将链表拆分为1小于基准值，2等于基准值和3大于基准值的三部分，三部分内各自保持链表原来的相对顺序，最后按照1->2->3返回  \n第3题是1~n围成一圈，数到3就退出，问最后留下的是几号\n\n# 易控智驾\n\n笔试  \n力扣1909 删除一个元素使数组严格递增  \n力扣1190 反转每对括号间的字串  \n分成前后两个链表\n\n# 百度\n\nC++开发的经验  \n项目相关：  \n服务器架构，缓存机制，中间件，上传下载服务是怎么实现的  \n为什么用哈希map存储当前处理状态，而不用其他数据结构  \n项目可取与不可取地方  \n做项目收获\n\nc++基础：  \nC++中STL或者新特性哪一块掌握的好  \nunique_ptr和shared_ptr差异  \n对unique_ptr进行std::move()操作  \nC和C++差别  \n排查内存泄漏  \nvector,list.map底层实现  \nvector的erase()方法用i++删除会有问题吗  \n进程，线程，协程区别  \n三种常见线程模型  \n有一个日志文件，大小为20GB,可用内存只有100MB,日志文件行长不固定，但是单行日志小于100MB。需要考虑边界问题，如何以最快的装载速率完成对日志文件的检索呢?  \ngcc编译失败找原因\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573283804727574528?sourceSSR=users",
        "title": "1.2好未来一面(47min) 已OC",
        "content": "## 一面\n\n  * 自我介绍\n\n### 项目相关\n\n  * 实习的后台项目登录是怎么实现的 ✅\n  * 从当前项目转换到另一个项目如何保持登录状态 ❌\n  * SSO单点登录，建议大家都好好看看这篇文章https://juejin.cn/post/7214759986802114620#heading-31\n  * 实习项目：说说七牛云上传组件的封装思路 ✅\n  * 大文件上传、完整性验证✅\n  * 说说http协议是哪一层协议，应用层协议还有什么✅\n  * Websocket协议的应用？相对于Http协议的优缺点？✅\n  * Http里怎么实现双向通信，对比Websocket协议存在什么问题✅ \n  * 短轮询（服务端无论有无数据更新都立即响应，不断建立http连接）\n  * 长轮询（服务端挂起，减少不必要的http请求） \n  * SSE（服务端声明发送流信息，视频播放；不需建立过多http请求，节约了资源）\n\n### 手写题\n\n  * 原生JS写登录界面记录密码输入错误次数并展示 ❌\n  * 冒泡排序（算法基础）✅\n  * 冒泡反向排序✅\n\n### 反问环节\n\n  * 技术栈：React和Vue都有，比较丰富，也有大模型项目\n  * 面试总体氛围不错，感觉还行\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573274666295369728?sourceSSR=users",
        "title": "百度内核数据研发一面凉经",
        "content": "### 1、上一份实习了4个月之后为什么不继续实习了？\n\n### 2、我看你上一份实习主要是做机器学习是吧？你机器学习使用的是什么模型？\n\n#### （1）具体调用哪些算法你有研究过吗？\n\n#### （2）你的这个项目主要是做什么工作？\n\n#### （3）是不是大概就是从数据库拿数据，然后对数据进行清洗，然后在进行自动化调度、自动化训练对吧？\n\n#### （4）你数据库拿数据是使用sql拿吗，还是使用Python拿？\n\n#### （5）mysql和heidisql的区别是什么？\n\n#### （6）你实习当中最多的是使用python对吧\n\n# 3、你这个大语言模型是调研还是在公司里面准备使用？\n\n#### （1）那就是这个大语言模型已经使用上了对吧？\n\n对，有嵌入系统\n\n#### （2）你们这个大语言模型的问答主要是做什么问答？\n\n代码提示、文档查询方面的\n\n#### （3）面试官点评：这个相当于是大语言模型的使用\n\n#### （4）你有使用过文心一言吗？你觉得文心一言和你们部署的大模型有什么差别？你有没有做过一些对比？\n\n#### （5）写过shell脚本吗？linux使用过一些对吧？\n\n# 4、SQL用的多吗？Python用的多？\n\n# 5、有没有写过一些面向对象的Python脚本库？\n\n# 6、数据库你用过哪些？\n\n# 7、大数据你用过哪些？\n\n# 8、你spark用过多长时间？\n\n# 9、接下来是4道sql的题目\n\n#### （1）100*（b-a）/a\n\n#### （2）我想把查询出来最近7天的日期，返回值是一列，并且将最近的倒数第三天的日期返回在第一行，我要返回七行数据，并且第一行是第三天的日期。\n\n    \n    \n    SELECT DATE_FORMAT(date_column, '%Y-%m-%d') AS recent_dates\n    FROM your_table\n    WHERE date_column >= CURDATE() - INTERVAL 7 DAY\n    ORDER BY date_column DESC\n    LIMIT 7;\n    \n\n# 10、开始问一些关于SQL的问题\n\n#### （1）你知道SQL的执行顺序是什么吗？\n\n书写顺序：\n\nSELECT -> DISTINCT -> FROM -> JOIN -> ON -> WHERE -> GROUP BY -> HAVING ->\nORDER BY -> LIMIT\n\n执行顺序：\n\nFROM -> JOIN -> ON -> WHERE -> GROUP BY -> HAVING -> SELECT -> DISTINCT ->\nORDER BY -> LIMIT\n\n执行顺序解释：\n\n1.from\n要做[数据分析](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.zhihu.com%2Fsearch%3Fq%3D%25E6%2595%25B0%25E6%258D%25AE%25E5%2588%2586%25E6%259E%2590%26search_source%3DEntity%26hybrid_search_source%3DEntity%26hybrid_search_extra%3D%257B%2522sourceType%2522%253A%2522answer%2522%252C%2522sourceId%2522%253A2756496499%257D)，得先有个表\n\n2.join\n一个表可能还不够，两个表甚至多个表都可以，关联条件啥也先不用，可以都来个[笛卡儿](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.zhihu.com%2Fsearch%3Fq%3D%25E7%25AC%259B%25E5%258D%25A1%25E5%2584%25BF%26search_source%3DEntity%26hybrid_search_source%3DEntity%26hybrid_search_extra%3D%257B%2522sourceType%2522%253A%2522answer%2522%252C%2522sourceId%2522%253A2756496499%257D)积先\n\n3.on\n在诸多表左右连接后，设定两个表之间的[关联键](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.zhihu.com%2Fsearch%3Fq%3D%25E5%2585%25B3%25E8%2581%2594%25E9%2594%25AE%26search_source%3DEntity%26hybrid_search_source%3DEntity%26hybrid_search_extra%3D%257B%2522sourceType%2522%253A%2522answer%2522%252C%2522sourceId%2522%253A2756496499%257D)，把不符合条件的全部筛掉\n\n4.where 上三步整合各表，形成一个统一大表；在此大表上，设置筛选条件\n\n[5.group](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2F5.group)\nby 把指定字段相同的行组合在一起，其余没有加入group\nby的字段，可以用[聚合函数](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.zhihu.com%2Fsearch%3Fq%3D%25E8%2581%259A%25E5%2590%2588%25E5%2587%25BD%25E6%2595%25B0%26search_source%3DEntity%26hybrid_search_source%3DEntity%26hybrid_search_extra%3D%257B%2522sourceType%2522%253A%2522answer%2522%252C%2522sourceId%2522%253A2756496499%257D)如max/min等合并\n\n6.having 在group by了之后，再度指定筛选条件；注意where和having是不同的，主要在于中间多了group by\n\n[7.select](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2F7.select)\n在行层面的处理暂告一段落，在列层面再来一波\n\n8.distinct 指定字段去重\n\n9.order by 指定字段排序，升降序\n\n10.limit 指定哪些行\n\n#### （2）窗口函数主要做什么？\n\n窗口函数是OLAP函数，是对数据库数据进行实时分析处理。每条记录都要在此窗口内执行函数。\n\n#### （3）你主要用过哪些窗口函数？\n\n聚合、跨行取值、排名函数\n\n#### （4）rank、row_number、dense_rank三者的区别？\n\n![](https://uploadfiles.nowcoder.com/files/20240106/503468174_1704551216262/.jpg)\n\n#### （5）count(*)和count(列名)和count(1)的区别？\n\n执行效果上：\n\n  * count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略为NULL的值。\n  * count(1)包括了忽略所有列，用1代表代码行，在统计结果的时候，不会忽略为NULL的值。\n  * count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是指空字符串或者0，而是表示null）的计数，即某个字段值为NULL时，不统计。\n\n执行效率上：\n\n  * 列名为主键，count(列名)会比count(1)快\n  * 列名不为主键，count(1)会比count(列名)快\n  * 如果表多个列并且没有主键，则 count(1 的执行效率优于 count（*）\n  * 如果有主键，则 select count（主键）的执行效率是最优的\n  * 如果表只有一个字段，则 select count（*）最优。\n\n#### （6）你有使用过mysql索引吗？\n\n#### （7）mysql如何查看索引？\n\n查看表的索引：\n\n    \n    \n    show index from table_name（表名）\n    \n\n#### （8）写了一个sql，如何查看是否有命中索引？\n\nMySQL提供了EXPLAIN语句来查看查询的执行计划，通过执行计划我们可以判断索引是否被命中。EXPLAIN语句可以使用以下方式执行:\n\n    \n    \n    explain select * from table_name where column_name='value';\n    \n\n执行上述语句后，MySQL会返回一张表，其中包含执行计划的相关信息。我们可以通过查看表中的一些字段来判断索引是否被命中。\n\n根据返回的执行计划，我们可以采用以下几种方法来判断索引是否命中:\n\n  * 检查type字段:如果type字段的值是index或range，表示索引被命中;如果type字段的值是ALL，则表示索引未被命中。\n  * 检查possible_keys字段和key字段:如果possible_keys字段和key字段都不为空，且其值相同，表示索引被命中;如果possible_keys字段和key字段都为空，表示索引未被命中。\n  * 检查Explain Extra字段:如果Extra字段中包含Using index或Using where，表示索引被命中;如果Extra字段中包含Using temporary或Using filesort，表示索引未被命中。\n\n#### （9）联合索引你知道吗？联合索引的匹配原则是什么？\n\n联合索引（Compound\nIndex）是一个包含多个列的索引。联合索引可以在多个列上同时进行查询优化，有助于提高多列查询的性能。在创建联合索引时，需要考虑列的顺序，因为索引的使用受到最左前缀原则的限制。\n\n对于索引中的字段，mysql会一直向右匹配直到遇到范围查询(>、<、between、like)就停止匹配，比如a = 1 and b = 2 and c >\n3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。\n\n# 11、问一些Python的问题\n\n#### （1）Python的局部变量和全局变量？\n\n  * 全局变量：所有函数之外定义的变量\n  * 局部变量：函数内部定义的变量 或者代码块里的变量\n\n1.函数内部的变量名如果第一次出现，且出现在=前面，即被视为定义了一个局部变量，不管全局域中有没有该变量名，函数中使用的将是局部变量。\n\n(即声明了一个新的局部变量。如果这个变量名字和全部变量名字相同，那么局部变量名字会覆盖全局变量名字。\n\n    \n    \n    #[demo1]\n    num = 100  \n    def func():  \n        newValue = 123   #一个全新的局部变量newValue \n        print(newValue)  \n    \n    func()  #输出局部变量newValue 即新的局部变量\n    \n    \n    #[demo2]\n    num = 100  \n    def func():  \n        num= 123  #声明一个全新的局部变量num，虽然名字和外界的全部变量相同 但是是新的一个变量且是局部有效的。屏蔽了外面的同名的全部变量\n        print(num)  \n    \n    func()  #输出局部变量num=123 即新的局部变量。\n    \n    \n\n#### （2）并发和并行的区别？（spark或者Python基本都会涉及这两个概念）\n\n并发是指一个处理器同时处理多个任务。\n\n并行是指多个处理器或者是多核的处理器同时处理多个不同的任务。\n\n并发是逻辑上的同时发生（simultaneous），而并行是物理上的同时发生。\n\n来个比喻：并发是一个人同时吃三个馒头，而并行是三个人同时吃三个馒头。\n\n#### （3）Python里面迭代器和生成器的理解？\n\n生成器是一种特殊类型的迭代器，但它的定义更为简单，可以直接使用函数语法。\n\n#### （4）Python当中yield关键词解释一下？（是和迭代器有关的）\n\n#### （5）Python正则表达式当中match和search的区别是什么？\n\n`re.match(pattern, string)`:\n\n  * 这个方法从字符串的开头开始匹配模式。\n  * 只在字符串的开头位置进行匹配，如果字符串开头没有匹配的模式，则返回None。\n  * 适合用于检查字符串是否以特定模式开头。\n\n    \n    \n    import re\n    \n    pattern = re.compile(r'\\d+')\n    result = pattern.match('123abc')\n    \n    if result:\n        print(\"Match found:\", result.group())\n    else:\n        print(\"No match at the beginning of the string.\")\n    \n\n`re.search(pattern, string)`:\n\n  * 这个方法在整个字符串中搜索匹配的模式。\n  * 可以在字符串的任意位置找到匹配，而不仅仅是在开头。\n  * 返回第一个匹配的对象，如果没有找到匹配的模式，则返回None。\n\n    \n    \n    import re\n    \n    pattern = re.compile(r'\\d+')\n    result = pattern.search('abc123xyz')\n    \n    if result:\n        print(\"Match found:\", result.group())\n    else:\n        print(\"No match in the entire string.\")\n    \n\n#### （6）正则表达式当中的贪婪匹配和非贪婪匹配的区别？\n\n贪婪匹配：\n\n  * 在贪婪匹配模式下，量词会尽可能多地匹配字符。例如，* 将匹配尽可能多的字符，+ 也会尽可能多地匹配，而 ? 会尽可能匹配。\n\n    \n    \n    import re\n    \n    text = \"abc123def456\"\n    pattern = re.compile(r'\\d+')\n    match = pattern.search(text)\n    \n    print(match.group())  # 输出: 123\n    \n\n在上面的例子中，**`\\d+`** 是贪婪匹配，它尽可能多地匹配数字字符，因此匹配到了整个数字序列 “123”。\n\n非贪婪匹配：\n\n  * 在非贪婪匹配模式下，量词会尽可能少地匹配字符。在量词后加上 ? 可以使其变成非贪婪匹配。\n\n    \n    \n    import re\n    \n    text = \"abc123def456\"\n    pattern = re.compile(r'\\d+?')\n    match = pattern.search(text)\n    \n    print(match.group())  # 输出: 1\n    \n\n  * 在上面的例子中，\\d+? 是非贪婪匹配，它会尽可能少地匹配数字字符，因此只匹配到了第一个数字 “1”。\n\n总体来说，贪婪匹配尽可能多地匹配字符，而非贪婪匹配尽可能少地匹配字符。这在处理模糊匹配时，特别是需要匹配最短或最长字符串时非常有用。\n\n#### （7）类和面向对象的区别？\n\n类（Class）：\n\n  * 类是一种抽象的数据类型，是对相似对象的共同特征和行为的抽象描述。它定义了对象的属性（数据成员）和方法（成员函数）。\n  * 类可以看作是创建对象的模板或蓝图，它定义了对象应该具有的属性和行为。\n  * 类本身并不占用内存空间，而是通过类创建的对象占用内存空间。\n\n示例代码：\n\n    \n    \n    class Car:\n        def __init__(self, brand, model):\n            self.brand = brand\n            self.model = model\n    \n        def drive(self):\n            print(f\"{self.brand} {self.model} is driving.\")\n    \n    # 创建一个Car类的对象\n    my_car = Car(\"Toyota\", \"Camry\")\n    \n    # 调用对象的方法\n    my_car.drive()\n    \n\n对象（Object）：\n\n  * 对象是类的实例，是类的具体实体。它是根据类的定义创建的，拥有类定义的属性和行为。\n  * 对象是具体的、实际存在的，占用内存空间。\n  * 一个类可以创建多个对象，每个对象都是独立的，拥有自己的属性值。\n\n示例代码：\n\n    \n    \n    class Person:\n        def __init__(self, name, age):\n            self.name = name\n            self.age = age\n    \n        def speak(self):\n            print(f\"{self.name} is speaking.\")\n    \n    # 创建两个Person类的对象\n    person1 = Person(\"Alice\", 25)\n    person2 = Person(\"Bob\", 30)\n    \n    # 调用对象的方法\n    person1.speak()\n    person2.speak()\n    \n\n总体而言，类是一种抽象的概念，描述了对象的属性和行为；而对象是类的实例，是具体存在的实体，拥有类定义的属性和行为。类和对象的使用使得代码更加模块化、可维护，同时提高了代码的重用性。\n\n#### （8）Python当中在写class的时候，有一个self，这个你见过吗？\n\n#### （9）dataframe当中如果要查看所有的数据要怎么写？\n\n在使用 pandas 库中的 DataFrame 时，要查看所有的数据，可以使用 **`print()`** 函数或直接输入 DataFrame\n的名称。如果 DataFrame 中的数据量较大，为了方便查看，可以使用以下方法：\n\n使用 `print()` 函数：\n\n    \n    \n    import pandas as pd\n    \n    # 假设 df 是你的 DataFrame\n    df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\n    \n    # 使用 print() 函数查看所有的数据\n    print(df)\n    \n\n#### （10）Python当中的异常，try,catch\n\n#### （11）python当中异常，如果想定位到具体的哪一行报错了，我需要怎么办？\n\n  1. 查看异常信息：\n\n当程序发生异常时，Python会打印出异常信息，包括异常的类型、描述以及发生异常的行号。例如：\n\n    \n    \n    try:\n        # 你的代码\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n    \n\n在异常信息中，会有类似于 **`File\"your_file.py\", line 10`** 的信息，其中 **`your_file.py`**\n是发生异常的文件名，而 **`line 10`** 是异常发生的行号。通过这些信息，你可以迅速定位到具体报错的位置。\n\n  1. 使用调试器：你可以使用Python的调试器（如pdb）来逐行执行代码并查看每一步的执行情况。在发生异常的地方设置断点，然后逐步执行，直到发现报错的行。以下是一个简单的例子：\n\n    \n    \n    import pdb\n    \n    try:\n        # 你的代码\n    except Exception as e:\n        pdb.post_mortem()\n    \n    \n\n当异常发生时，程序会停在异常发生的地方，然后你可以使用调试器命令（如 **`n`** 表示下一步，**`c`**\n表示继续执行，等等）来逐步查看代码的执行过程。\n\n  1. 使用日志记录：在程序中添加适当的日志记录语句，以便在运行时查看程序执行的详细信息。通过查看日志，你可以了解程序执行到哪一步时发生了异常。例如：\n\n    \n    \n    import logging\n    \n    logging.basicConfig(level=logging.DEBUG)\n    \n    try:\n        # 你的代码\n    except Exception as e:\n        logging.exception(\"An error occurred\")\n    \n    \n\n运行后，你可以查看日志输出，找到异常发生的位置。\n\n注：面试官想要招一个写Python脚本和pyspark的人，周五中午HR突然打电话问了一下基本情况，下午就一面，比较突然，没啥准备，也是自己基础不行。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573270472691875840?sourceSSR=users",
        "title": "完美世界 前端 一面",
        "content": "  * 项目难点\n  * （刚才提到了 Blink）说一下 Blink 是干什么的（答的是 Chrome 浏览器内核），Chrome 浏览器除了 Blink 还用了什么（没太听懂，答的是之前用 Webkit 内核）\n  * ES6 新特性\n  * Map 和 Object 的区别\n  * WeakMap 了解过吗（×）\n  * 箭头函数的特点\n  * generator 了解过吗（×），yield 后面跟一个异步任务会怎么样（×）\n  * 说一下构造函数和原型有什么关系\n  * new 一个对象的时候如果构造函数有返回值那么 new 出来的对象和这个返回值有什么关系\n  * 说一下 Promise，什么情况下用到，解决了什么问题\n  * Promise 内部具体实现原理是怎样的，then 是如何实现链式调用的（×）\n  * 有没有更简洁的异步方案（async/await），它们是如何实现像同步一样调用异步任务的\n  * 异步题，判断输出顺序\n  * 事件循环\n  * 垃圾回收（计数、标记），V8 如何做的（×）\n  * TypeScript 用过哪些特性\n  * interface 和 type 有什么区别\n  * enum 在编译后转化成什么（×）\n  * Vue 的响应式原理\n  * （深挖 Vue 的响应式原理）defineProperty 具体怎么做到响应式的（答的是劫持 getter、setter），具体在 getter、setter 中是如何做的（×_× 没看过源码彻底懵逼...）\n  * computed 计算属性的实现原理（x）\n  * pinia 与 Vuex 的区别\n  * http2 和 http1.1 有什么区别，如果有一段数据丢了会怎样（×）\n  * Webpack 和 Vite 用过吗（有），它们有什么特点，Vite 为什么快\n  * Electron 了解过吗（有），它是如何实现跨端的，还了解过其他跨端框架吗（Tauri、uniapp、Flutter），能具体说说 Flutter 是怎么实现的吗（x，不过应该只是随口问的...）\n  * （刚才说到 Tauri 提到了 WebView）WebView 原理（x），它和 Electron 有什么区别\n  * nodejs 用过吗，如何操作数据库\n  * 算法：删除链表倒数第 n 个元素、斐波那契数列、不使用临时变量交换两个变量的值\n  * 平时如何学习前端的\n  * 反问\n\n已挂\n\n**总结：菜，就多练✋✋**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573281237591138304?sourceSSR=users",
        "title": "1.5蔚来一面（1h）已约hr面",
        "content": "## gis\n\n由于我的专业和gis有点关系，一上来就狠狠被问了gis相关知识和webgis原理，真的懵了\n\n  * 坐标系 x\n  * arcgis、mapbox、cesium区别 ✅\n  * mapbox怎么用的 ✅\n  * 瓦片怎么显示，是什么格式的，并发怎么控制 ❌\n\n## 浏览器与网络\n\n  * 从输入url到渲染的过程 ✅\n  * 浏览器渲染过程 √✅\n  * 什么会引起重绘？什么会引起回流√✅\n  * 常用状态码 ✅\n  * TCP如何控制并发，如何进行安全增强 ❌\n  * TCP和UDP的区别、适合场景 ✅\n\n## JS\n\n  * 如何把函数转化为promise √✅\n  * 介绍promise的各个方法和实际场景使用 √✅\n  * async+await是如何实现的 √✅\n\n## CSS\n\n  * 图标 + 文本框 + 图标登录条如何实现 ✅\n  * 解决输入的字符覆盖图标问题 ❌\n\n## TS使用\n\n  * type和interface区别 ✅\n  * union联合类型 ✅\n  * 如何根据传入参数不同，调用不同函数 ❌\n\n## Vue\n\n  * setup()是什么，有什么作用 ✅\n  * 如何传参，子组件定义props ✅\n\n## 项目相关\n\n  * 前端鉴权 ✅\n  * token是如何放到header中的？✅\n\n    \n    \n    //添加一个请求拦截器\n    request.interceptors.request.use(\n      config => {\n        //从本地存储中获取Token\n        const token = localStorage.getItem('token');\n        if (token) {\n          //在请求头中携带Token\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      error => Promise.reject(error)\n    );\n    \n\n  * axios、fetch、ajax区别 ✅\n  * axios做过什么封装 ✅\n  * axios有什么拦截器 ✅\n\n    \n    \n    // http response 拦截器\n    axios.interceptors.response.use(\n        response => {\n            return response;\n        },\n        error => {\n            if (error.response) {\n                switch (error.response.status) {\n                    case 401:\n                        // 返回 401 清除 token 信息并跳转到登录页面\n                        store.commit(types.LOGOUT);\n                        router.replace({\n                            path: 'login',\n                            query: {redirect: router.currentRoute.fullPath}\n                        })\n                }\n            }\n            return Promise.reject(error.response.data)  \n             // 返回接口返回的错误信息\n        });\n    ————————————————\n    \n\n  * 实战场景中axios的使用（拦截接口状态码、拦截登录状态code）✅\n  * 文件上传怎么做的 ✅\n  * 大文件上传怎么做 要注意什么 ✅\n\n## 反问环节\n\n  * 技术栈 \n  * 总体体验不错，面试官长得神似上段实习的Leader，让我感觉很亲切\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/573123867636408320?sourceSSR=users",
        "title": "嵌入式软件 linux开发 面经",
        "content": "### 1.进程&线程（16道）\n\n###\n\n**1.1****异步****IO****和同步****IO****区别？**\n\n**答案：**\n如果是同步IO，当一个IO操作执行时，应用程序必须等待，直到此IO执行完。相反，异步IO操作在后台运行，IO操作和应用程序可以同时运行，提高系统性能，提高IO流量。\n\n**解读：**\n在同步文件IO中，线程启动一个IO操作然后就立即进入等待状态，直到IO操作完成后才醒来继续执行。而异步文件IO中，线程发送一个IO请求到内核，然后继续处理其他事情，内核完成IO请求后，将会通知线程IO操作完成了。\n\n  \n**1.2****进程间通信方式？******\n\n管道(pipe)| 是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程之间使用，通常是父子进程。  \n---|---  \n有名管道(named pipe)| 也是半双工的通信方式，但是它允许用于无亲缘关系的进程之间的通信。  \n信号量(semophore)| 是一个计数器，通常作为一种同步机制，用于进程和线程间的同步。  \n消息队列(message queue)|\n是一个消息链表，存放在内核中并且由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限的缺点。  \n共享内存(shared memory)|\n一段能够被多个进程共同访问的内存，由一个进程创建。共享内存是最快的IPC方式，它是针对其他进程间通信方式运行效率低而设计的，往往与其他通信方式如信号量配合使用，来实现进程间同步与通信。  \n套接字(socket)| 可用于不同主机间的进程通信。  \n信号(signal)| 用于通知接收进程某个事件已经发生，是一种比较复杂的通信方式。  \n  \n  \n\n**1.3****进程的地址空间模型？**\n\ntext segment| 存储代码的区域。  \n---|---  \ndata segment| 存储初始化不为0的全局变量和静态变量、const型常量。  \nbss segment| 存储未初始化的、初始化为0的全局变量和静态变量。  \nheap（堆）| 用于动态开辟内存空间。  \nmemory mapping space（内存映射区）|\nmmap系统调用使用的空间，通常用于文件映射到内存或匿名映射（开辟大块空间），当malloc大于128k\n时（此处依赖于glibc的配置），也使用该区域。在进程创建时，会将程序用到的平台、动态链接库加载到该区域。  \nstack（栈）| 存储函数参数、局部变量。  \nkernel space| 存储内核代码。  \n  \n![](https://uploadfiles.nowcoder.com/images/20220108/581229029_1641638395263/83E8DEAEB34D96934C50B9397812BE63?x-oss-\nprocess=image%2Fresize%2Cp_50)  \n\n  \n\n**1.4****进程的五种状态分别是****?**\n\n（1）就绪态：所有运行条件已就绪，只要得到了CPU时间就可运行。\n\n（2）运行态：得到CPU时间正在运行。\n\n（3）僵尸态：进程已经结束了但父进程还没来得及回收。\n\n（4）等待态：包括浅度睡眠跟深度睡眠。进程在等待某种条件，条件成熟后即进入就绪态。浅度睡眠时进程可以被信号唤醒，但深度睡眠时必须等到条件成熟后才能结束睡眠状态。\n\n（5）暂停态：暂时停止参与CPU调度（即使条件成熟），可以恢复。\n\n![](https://uploadfiles.nowcoder.com/images/20220108/581229029_1641638871412/3A07CB8122EE5C9110B0F07A7840D157?x-oss-\nprocess=image%2Fresize%2Cp_50)\n\n  \n\n**以上内容摘自专刊《嵌入式岗位笔试面试真题讲解》，该专刊不仅有真题讲解，还有经验分享，不清楚嵌入式该学什么的同学，想找嵌入式实习/正式工作的同学，都可以来看看：**  \n\n###\n\n[https://blog.nowcoder.net/zhuanlan/v0ELPM](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fhd.nowcoder.com%2Flink.html%3Ftarget%3Dhttps%3A%2F%2Fblog.nowcoder.net%2Fzhuanlan%2Fv0ELPM)\n\n  \n\n###\n\n嵌入式公司推荐：华为、       小米\n、[OPPO](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3DOPPO)、VIVO、荣耀、一加、\n[CVTE](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3DCVTE)、\n[大疆](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E5%25A4%25A7%25E7%2596%2586) 、insta360影石、\n[美的](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E7%25BE%258E%25E7%259A%2584) 、\n[TCL](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3DTCL)       、 海信、创维、烽火、比亚迪\n、吉利、长安、大众、[经纬恒润](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E7%25BB%258F%25E7%25BA%25AC%25E6%2581%2592%25E6%25B6%25A6)\n、小鹏、\n[图森未来](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E5%259B%25BE%25E6%25A3%25AE%25E6%259C%25AA%25E6%259D%25A5)、\n[百度](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E7%2599%25BE%25E5%25BA%25A6) 、\n[滴滴](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E6%25BB%25B4%25E6%25BB%25B4)、蔚来、理想、 联发科、\n[紫光展锐](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E7%25B4%25AB%25E5%2585%2589%25E5%25B1%2595%25E9%2594%2590)\n、全志、\n[寒武纪](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E5%25AF%2592%25E6%25AD%25A6%25E7%25BA%25AA)\n、[晶晨半导体](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E6%2599%25B6%25E6%2599%25A8%25E5%258D%258A%25E5%25AF%25BC%25E4%25BD%2593)\n、汇顶、\n[华为](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E5%258D%258E%25E4%25B8%25BA)、\n[中兴](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E4%25B8%25AD%25E5%2585%25B4)、\n[浪潮](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E6%25B5%25AA%25E6%25BD%25AE) 、[TP-\nLINK](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3DTP-LINK)、讯飞、商汤、\n[海康威视](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E6%25B5%25B7%25E5%25BA%25B7%25E5%25A8%2581%25E8%25A7%2586)\n、浙江[大华](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fjump%2Fsuper-\njump%2Fword%3Fword%3D%25E5%25A4%25A7%25E5%258D%258E)         、360、小马智行、元戎启行\n、深信服       、移动、联通、电信、旷视        、四维图新         、中芯国际         、复旦微电子、极氪\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/572934076882026496?sourceSSR=users",
        "title": "数据分析求职-面试技巧",
        "content": "之前咱们已经分享了岗位介绍、求职准备思路、简历如何准备，今天咱俩聊一聊面试的技巧~\n\n### 1\\. 面试流程\n\n咱们先聊聊面试的基本流程：简历/笔试筛选->技术初面->技术二面->技术三面->技术交叉面->HR面。\n\n这个过程中有几个点值得重点说说：\n\n  * 技术初面：这是整个面试环节中最难的一面，淘汰率最高，考察知识点最广。要是能通过一面，说明你的技术能力已经达到这个公司的基本要求了，后续的面试是为了在有效招聘名额下优中选优。\n  * 技术二面和三面：当然不排除只有二面或者是有更多的四面、五面，但是它们相比于初面而言，区别在于面试官的层级更高、考察的面更窄的同时深度更深。\n  * 技术交叉面：这个大概率是没有的，有的话也别担心，往往是因为面试官对你的方向吃不准，需要更匹配的其他部门的面试官一起帮忙评估而已。\n  * HR面：这是技术之外的考察，主要是性格、表达、抗压等方面，难度一般，只要不犯低级错误基本没问题。\n\n**面试流程**| **形式**| **主要考察点**| **通过率**  \n---|---|---|---  \n简历/笔试筛选| 线上|\n\n  1. 学历，实习/项目/比赛/论文经历\n  2. 笔试反映出的聪明度、协作、抗压能力\n\n|  \n技术初面| 线上|\n\n  1. 项目经历\n  2. 基础知识，代码能力\n\n| 10~20%  \n技术二面| 线上|\n\n  1. 亮点项目，重点基础知识，业务理解\n\n  * 更注重技术深度\n\n| 30~40%  \n技术三面| 线上|\n\n  1. 亮点项目，重点基础知识，业务理解\n\n  * 候选人横向比较\n\n| 50~60%  \n*技术交叉面| 线上| \n\n  1. 亮点项目，业务理解\n\n  * 多技术角度判断\n\n| 80~90%  \nHR面| 线上|\n\n  1. 性格判断\n  2. 表达、协作、抗压能力\n  3. 选择公司的理由\n\n| 80~90%  \n  \n### 2\\. 面试考察范围\n\n面试考察范围主要有三大方面：\n\n  * 围绕你的简历上项目展开，考察专业技能和解决问题的能力，这部分占比50%；\n  * 专业技能的更多知识考察，其中主要覆盖：数据分析/加工技巧、数据分析的工具使用、数据分析必备SQL的考察、数据分析案例的讨论、机器学习相关的能力。这部分占比30%；\n  * 通用能力的考察，又分为数据算法类岗位独有的概率题、各行各业普遍考察的逻辑题和IT岗位普遍考察的代码题。这部分占比20%。\n\n值得注意的是，如果你的简历上项目过于简单，那么除非你的基础知识非常优秀才可能通过面试。另外，如果项目和专业技能的考察都不错，即使通用类的考察出现问题也无关紧要。\n\n知道了面试主要考察范围的话，同学们准备起来也就有了大致范围了~\n\n![](https://uploadfiles.nowcoder.com/files/20240105/895283776_1704470074424/1700126245525-fea6ff61-e5f6-443b-9777-99d613f7b0b4.jpeg)\n\n### 3\\. 面试技巧\n\n关于面试技巧，不管怎么花言巧语，还是硬实力说话，所以同学们还是得花功夫、啃知识点、系统理解各种技术才是硬道理。我所能总结的技巧最多只能给到10-20%的帮助，当然后续我也会整理整个知识体系，带着同学们一起更高效地提升硬实力。\n\n下面咱们就聊聊那些锦上添花的面试技巧吧~\n\n面试说到底就是一个沟通对话的过程，我小结了四个原则分享给大家：\n\n  1. 心中有数：在参加面试之前，一定要做到对自己简历上的所有知识点以及大概率会展开的知识点做到心中有数，这是最低最低的门槛。其次才是对整个岗位的专业知识做到心中有数。\n  2. 详略得当：面试是一个对话，回答问题时，首先要简单概括地正面回答问题的核心，其次才是一一展开细节。每次回答最好不要超过3分钟，不要让面试过程变成你一个人讲，对方一直听。特别注意的是当感觉到面试官在打断你说话的时候就是觉得你说的太长了，要警惕这样的情况发生。但有时确实有很多细节需要展开说怎么办呢？那你要一定的概括，讲完后等面试官问他想要深入了解哪部分的细节，你再接着讲。\n  3. 保持镇静：这个每个人都懂，如果问题在你射程范围内，做到这点没任何难度。难的是当问题超出你的知识范围了，同学们很容易慌张，说话磕磕巴巴。这时候你要做的是告诉自己镇静，冷静下来思考下这个问题，如果能够猜着尝试着回答的话，你可以说“这个点我之前不了解，但是我推断来看，可能是XXXX的方案”。这就好比考试时候不会，猜答案总比空着不写要好。这时候如果你回答对了，是非常加分的，这说明你的举一反三能力非常好！如果你实在不知道，那就直接了当地告诉面试官我不了解就行。切记磨叽了好几分钟最后啥都说不出的情况。\n  4. 掌握主动：最后这个原则是最最重要的，当然也是最难掌握的，这个需要你不断地磨炼和悟性。很多同学都会遇到这种情况：XX面试官完全不懂我的项目，都是问的不着调的问题... 这种情况就是因为你不会掌握主动，确实存在面试官对你的项目的理解程度比较低的情况，这时候你首先要通俗易懂地把问题和方案描述清楚，此外再善于引导面试官问这个项目的核心问题，而不是让面试官老游走在问题的边缘。\n\n另外，针对100%会遇到的两个问题我展开讲讲，这两个问题的回答强烈建议提前准备好：\n\n  1. 自我介绍：切记不要太长太短，简单说清楚自己的姓名、年龄、教育背景和毕业时间，对于项目不要展开说，而是提下简历上几个项目，最后以“您如果对哪个项目比较感兴趣的话，咱们可以重点聊一聊”，这句话就是掌握主动的一个例子，就是让面试官要说的下一句话是按你的建议来的。\n  2. 简单介绍下第1个项目：这时候的思路和自我介绍是一样的。首先把项目的基本信息描述下，重点说明项目要解决的问题是什么，要让面试官真正理解清楚问题。之后，再简要说下对于这个问题，我是按照1、2、3个步骤来解决的，每个步骤不要展开讲，而是提下步骤的小标题（我前面的简历准备里有讲项目解决方案要先写小标题再展开写细节）。最后以“您如果对哪个步骤比较感兴趣的话，咱们可以重点聊一聊”。\n\n### 4\\. 后续预告\n\n后续计划会进行如下细分系列的内容展开，尽情期待~\n\n  * 简历准备：如何准备简历，真实案例的简历评析\n  * 面试准备：面试技巧以及常见面试题\n  * 项目实战：介绍详细的项目，帮助同学在简历中丰富项目经历\n  * 入职必备：拿了offer后入职前或者刚加入工作不久的同学，该做哪些准备\n  * 招聘内推：发布一些企业的招聘信息以及内推渠道\n  * 番外篇：会聊聊AI、大模型、互联网、Web3等等其他相关行业或者岗位\n\n下篇内容，计划讲讲数据分析师入职必备系列之工具篇~~~\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/572929667502542848?sourceSSR=users",
        "title": "❗【经验分享】宁德时代英语测评",
        "content": "宁德时代2024英语测评\n\n1.口语部分:和此前搜到的题目不一样，我的题目是讲一个你在工作或学习期间令你感到沮丧的经历，并讲述你如何解决这件事情的。(用英语作答)没能准备到这个题目，讲了东西但不知所云，令人头大！\n\n2\\. 听力部分一个会议，共四个发言人，将到市场部、研发等\n\n第1题：software在亚太地区销售量增长情况\n\n第2题：hardware销售碰到了什么困难\n\n第3题: 此次全球会议的目的是什么？\n\n3\\. 写作部分：收到一位客户的投诉，我一个月前给予回复但是错发给了另外一位客户，现在要给这位客户道歉并提出解决方案。 80字左右，格式正确\n\n4\\. 阅读部分:一个项目报告，在项目报告中找答案\n\n第1题：某个产品预期销量是多少\n\n第2题：该产品在发布过程中遇到的挑战是什么\n\n第3题：该项目所获成果是什么\n\n"
    }
]