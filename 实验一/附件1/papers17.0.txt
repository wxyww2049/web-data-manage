[
    {
        "url": "https://www.nowcoder.com/discuss/579760273091731456?sourceSSR=users",
        "title": "杭州图尔兹 一面",
        "content": "25 min （刷kpi）\n\n  1. 项目分工、负责的部分、技术栈选型\n  2. 单元测试、如何自测\n  3. 项目难点\n  4. ip检测功能 Nginx代理问题\n  5. http状态码\n  6. get和post\n  7. http和https\n  8. https连接过程\n  9. linux服务器 部署 日志 运维 docker \n  10. 研究开源项目\n  11. 有写博客吗\n  12. 遇到问题怎么解决\n  13. 学习看视频还是看书\n  14. 英文水平怎么样\n  15. 学校有哪些课程 操作系统 计组学过吗\n  16. 学校 工作地点 期望\n  17. 反问\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579759981029863424?sourceSSR=users",
        "title": "华为od",
        "content": "看了牛牛网这么多前辈的面经，我也分享给大家吧[大笑]\n\n背景：22双非本，工作一年半\n\n一、12.24机考 （297分）\n\n  * 虚拟理财游戏\n  * 绘图机器\n  * 最长的指定瑕疵度的元音子串\n\n二、12.28 hr面\n\n1.自我介绍\n\n2.为什么选了东莞，不选深圳（个人原因）\n\n3.od看法\n\n4.家庭情况\n\n5.如果给offer什么时候能入职\n\n6.期望薪资，如果低于该薪资会考虑吗\n\n三、1.05 技术一面\n\n1.redis热key和大key\n\n2.java中线程通信方式（没答出）（1、直接内存（注意并发） 2、wait、notify 3、CountDownLatch 4、管道 等都可以）\n\n3.springboot特性\n\n4.jvm垃圾回收（两到三分钟简单讲讲）\n\n5.责任链模式\n\n6.hashmap是否安全\n\n    \n    \n        /**\n         * 现要采购某种商品，已知不同商家商品数量和单价，商品每购买一次单价加一，已知需采购n个该商品，求至少需要多少钱\n         */\n        public void solution2() {\n    \t\t// 数组0上为单价，1上为数量\n            int[][] arr = {{100, 200}, {9, 2}, {10, 3}, {10, 1}, {10, 3}};\n            int n = 4;\n            int res = 0;\n            Map<Integer, Integer> map = new TreeMap<>();\n            for (int[] temp : arr) {\n                for (int i = temp[0]; i < temp[1] + temp[0]; i++) {\n                    map.put(i, map.getOrDefault(i, 0) + 1);\n                }\n            }\n    \n    \n            for (Integer i : map.keySet()) {\n                Integer count = map.get(i);\n                if (count >= n) {\n                    res += (n * i);\n                    System.out.println(res);\n                    return;\n                } else {\n                    res += (count * i);\n                    n -= count;\n                }\n            }\n            System.out.println(res);\n        }\n    \n\n四、1.07技术二面\n\n1.工作中是否出现过oom，怎么导出dump文件（jmat命令），使用什么进行分析处理（jprofile、mat）\n\n2.工作中项目使用的什么垃圾回收算法\n\n3.jvm内存区域\n\n4.redis的缓存击穿、穿透、雪崩（看简历问的）\n\n5.nio\n\n6.linux诊断命令 网络、磁盘、CPU之类的\n\n7.简历上写了docker，是否了解k8s（不了解）\n\n    \n    \n    /**\n         * 将字符串按字母出现次数倒序排序输出，Aabb则输入bbAa，有多个答案输入一个就行\n         */\n        public void solution1() {\n            String str = \"Aabb\";\n            Map<Character, Integer> map = new HashMap<>();\n    \n            for (char c : str.toCharArray()) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n            StringBuilder res = new StringBuilder();\n            List<Integer> values = map.values().stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n    \n            for (Integer value : values) {\n                for (Character c : map.keySet()) {\n                    if (map.get(c).equals(value)) {\n                        for (int j = 0; j < value; j++) {\n                            res.append(c);\n                        }\n                        map.remove(c);\n                        break;\n                    }\n                }\n            }\n    \n            System.out.println(res.toString());\n        }\n    \n\n五、技术三面1.11\n\n1、mysql的数据类型，30用什么类型存，300，30000，3000000\n\n2、java基本数据类型，30,300,30000,3000000分别用什么类型存，小数点后面有3,10,50位用什么类型存\n\n3、hashmap底层结构\n\n4、熟悉什么设计模式\n\n5、java设计原则、自己代码中哪里用到了\n\n6、springboot项目，如果创建新项目需要更改什么配置\n\n部分忘了\n\n手撕：lc.06 Z字变换（ac）\n\n六、1.18主管面\n\n1、个人专业上学的课程\n\n2、讲讲项目上自己负责的部分\n\n3、华为工作压力大能接受吗\n\n4、目前工作中每周加班多长时间\n\n追问：华为强度比这高得多，能接受吗\n\n七、感受\n\n加上前期刷题，整个流程下来快两个月[牛泪]，最终定级d2，定薪给了期望工资，offer过两天发下来，等offer下来准备离开现公司了[羞涩]。\n\n当然吹一波对接人@我是栗栗呀(685674902)，全程跟进，有问必答，有意向的可以私她。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579732101382021120?sourceSSR=users",
        "title": "字节日常实习一面",
        "content": "忘记录音了，记录比较模糊，被拷打了一个半小时，凉凉\n\n## 时间/部门\n\n2024/1/24  \n后端——商业化产品与技术\n\n## 自我介绍\n\n本硕西电  \n介绍了一下简历上写的三个项目\n\n  * 跟着网上做的铁路购票系统\n  * 自己手写的MQ\n  * 服务外包竞赛项目\n\n## 面试官提问\n\n  1. RocketMQ 延时消息是怎么实现的？(针对第一个项目问的)  \n我：使用 RocketMQ 的原因就是因为 RocketMQ 有一些内置的消息类型，延时消息就是其中一种。Kafka 里没有这个功能，所以这也是为什么没使用\nKafka。  \n面试官：那你知道 RocketMQ 是怎么实现延时消息的吗？  \n我：这个我目前还不太清楚，我下去看看。\n\n  2. 你自己手写的 MQ 实现了延时消息和死信队列这些功能么？  \n我：没有，我主要是模仿3.3版本之前的 Kafka，实现了消息持久化和主从选举。\n\n  3. Kafka 新版本怎么实现主从选举的？  \n(我答的 kraft)\n\n  4. 消息队列怎么保证消费者的消息不丢失的？  \n(我从 kafka 和 rocketMQ 两个消息队列怎么实现的来回答的)\n\n  5. 消息队列怎么实现顺序消费的？  \n我回答了 kafka 的两种方式和 rocketMQ 有内置的顺序消息类型\n\n  6. Kafka 生产者同步发送、异步发送和发送后遗忘，异步发送也可以使消息有顺序性么？  \n我没有想过这个问题，所以当时回答的使按理来说有可能会导致消息乱序，但是我猜kakfa做了相应的应对措施。(但事实上，Kafka\n并没有做对应的措施，如果异步发送的话，发送到 broker 里就有可能是乱序的，那消费的时候也是乱序的)\n\n## 手撕\n\n  1. 约瑟夫环  \n没做过，讲对了思路，但是最后空指针异常了，不想找bug了，就下一个题了。\n\n  2. 给一个图书管理系统设计数据库表  \n这个过程面试官一直在引导，体验很好。一开始说了基础的设计之后，面试官再加一些新的需求。\n\n  3. 写 SQL 语句  \n事先没想到会有这种，让我写一条 SQL 语句，在学生表、课程表(ID, TEACHER_ID, TEACHER_NAME, COURSE_ID,\nCOURSE_NAME)、学生_课程表三个表中找出没选\"XXX\"老师课的学生。\n\n## 其他\n\n在手撕 2 之后，问了一些计算机网络的基础。\n\n  1. 怎么用 UDP 实现 TCP？\n  2. 在浏览器输入一个 URI，到页面渲染到你的浏览器上，这一段时间发生了什么？\n  3. IP 是动态变化的，怎么根据 IP 找到你的电脑的？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579711457231716352?sourceSSR=users",
        "title": "快手前端实习一面 1.24 已挂",
        "content": "30min\n\n1\\. 看你项目用到了状态管理库zustand，为什么要用状态管理库，redux，mobx，zustand 为什么选择用zustand\n\n2.redux 是如何实现状态管理的,大概原理\n\n3.项目里路由权限控制怎么实现的\n\n4\\. 显示隐藏的时候，不想让 dom 销毁，还让他保留，应该如何做\n\n5\\. 手写一个发布订阅模式，实现 on，emit\n\n6.封装过组件库吗，手写实现一个级联组件\n\n7\\. 输入url会发生什么\n\n8.js实现把 arr = [1, 2, 3,[5, 5, [6, 7, 8]],8, 8, 9,[9]];变为一维数组\n\n反问：有什么学习建议\n\n开发的时候项目中使用的技术要更深一层的学习一下，不要只停留在使用的层面，使用的技术要层深一层的了解为什么要用这个方案，基础知识包括力扣的题要多去了解一下。\n\n凉凉[牛泪][牛泪][牛泪][牛泪]问的都不会[牛泪]react学的太少了，力扣也没怎么刷[牛泪][牛泪][牛泪]吸取经验，加油[牛泪][牛泪]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579693858410209280?sourceSSR=users",
        "title": "yy直播前端一面",
        "content": "  * 先问问个人情况\n  * 原型链 再问继承多态封装\n  * 用过路由和vuex嘛\n  * 讲一下vue2和vue3的区别\n  * 了解过浏览器缓存机制吗 sessionstorage和localstorage在什么时候会清除数据\n  * http和https协议 问为什么现在有些http没有升级为https SSL底层加密算法\n  * css样式 如何改变封装好的类的值 scoped下\n  * let和var的作用域 知道啥意思 没讲清楚\n  * vue3源码看过吗\n  * hash和history区别 深挖机制和history下缺点 不处理会怎样\n  * computed和watch区别 computed底层原理实现(当时看了底层也是watch 但说了别的 速通的容易搞混)\n  * 项目有部署到服务器上嘛\n  * 项目部署上去前需要准备什么 （都说没部署了还问( ）\n  * this指向问题 四种情况\n  * 介绍公司\n  * 反问 基础还行 web体系不太行\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579678425976152064?sourceSSR=users",
        "title": "京东young",
        "content": "flex布局\n\ncss处理文本溢出\n\n重绘重排\n\n为什么推荐flex不适用margin\n\n强制缓存和协商缓存\n\nhttp状态码，说说503错误\n\n说说js数组的方法\n\nmap和foreach方法区别\n\n字符串方法\n\napply和call以及bind方法\n\n原型和原型链\n\n异步处理\n\n生成器和迭代器\n\n说说事件循环\n\n脚手架相关知识说原理\n\n说说webpack打包过程\n\nwebpack热更新原理\n\n怎么提高webpack构建速度，tree-shaking‘’webpack新版本优势\n\nreact生命周期，react的hooks\n\nreact异步渲染，react闭包陷阱\n\n虚拟dom缺点（猝不及防，问优点就好了），除了redux的状态管理工具\n\n封装组件的原则\n\n小程序跳转页面的api，小程序的生命周期，小程序的页面之间传数据\n\n组件封装，webpack，脚手架\n\n面了快1个半小时，好在只有一面，hr面被挂\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579630327065223168?sourceSSR=users",
        "title": "游戏行业面试必问！谈谈你对岗位的理解",
        "content": "面试官问这个问题，其实背后的逻辑是考察你是否真正理解你应聘的岗位。既然投了这个岗位，那你是否有做功课进行一定的了解呢？如果你对本岗位毫无了解，那面试官就能戳破你之前面试侃侃而谈的一切。如果你能很到位的说出123点，那会成为整场面试的最强加分项！\n\n我们以游戏运营这个岗位来举例，怎么理解这个岗位，有个表达公式是\n\n**“这个岗位是做什么的+具体有哪些分类+你面试岗位的好的做法+输出一波升华的套路让面试官刮目相看”**\n\n面试之前我们要对面试的岗位做一个初步的了解，从以下三个方面来准备：\n\n1.查资料理解你的岗位是做什么的。\n\n2.查JD看你的岗位具体职责要求。\n\n3.根据你对行业的理解简洁的输出1-2句话让面试官觉得你思考深入的！\n\n下面套入公式我们尝试回答下这个问题。\n\n**-这个岗位是做什么的：**\n我理解游戏运营是游戏发行环节重要的一环，本质是把游戏产品在市场平台上线，通过运营让用户知道游戏、进入游戏、产生收益的过程；主要工作核心包括有负责规划、统筹和推进游戏上线前的准备工作，制定游戏的赢销策略和推广计划；根据产品类型协助制定对应的买量策略和计划，同时维护好游戏中的用户，并促进玩家转化...\n\n**-具体有哪些分类：** 游戏运营的岗位主要分为渠道运营、数据分析、活动策划、版本运营、用户运营等等。\n\n**-你面试的这个岗位好的做法（结合细分领域的要求）：**\n我面试的是用户运营，我认为一个好的用户运营，可以让用户更好的留在游戏里，能让用户有更多的输出价值。方式有很多，比如通过论坛来活跃玩家，促进玩家之间的交流，游戏经验的分享等，提升玩家对游戏的好感度。\n\n**-最后浅浅升华~**\n\n我认为总结来说游戏运营的2个核心词是“用户”和“收入”。\n\n用户层面，4个字总结“吸新，稳老”，不断吸引新用户，稳定已进入游戏的老用户。\n\n收入层面，就是促进玩家付费。\n\n而运营则需要在这两个层面之间找一个平衡点，最理想的情况就是在不损害用户游戏体验的情况下让玩家尽可能多付费...\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579637266021179392?sourceSSR=users",
        "title": "滴滴前端一面 人生第一面(八股背了4h速通)",
        "content": "##\n\n  * 说一下闭包的理解 在什么场景会使用\n  * 浏览器页面渲染过程\n  * 对内存生命周期理解\n  * 用过node.js嘛 没\n  * 用过ajax嘛 基于什么实现 底层原理\n  * 说一下get和post 没答深\n  * 对tcp协议理解 不会 没学计网\n  * 为什么要三次握手四次挥手 只说了确认信息收到 没学计网太痛了 面试官补充三次是最少三次\n  * 为什么用pnpm 对比原生node.js的优势\n  * 说一下对vue3的理解\n  * vue3生命周期\n  * vue如何实现组件通信\n  * 说一下router和route的区别\n  * git使用熟练度 问如何拉取代码 知道pull但想不起来说了clone 吐了\n  * 看一下你项目element-ui的实现\n  * 如何理解mvvm\n  * 讲一下二分 手写二分 输出结果 直接秒了\n  * 说一下线程 有用过吗\n  * java线程呢 有自己实现过tcp协议吗 写过socket\n  * 问最短路算法(简历中写的) 说了bfs和迪杰斯特拉\n  * 介绍公司 说准备二面\n  * 反问 基础不错 socket可以再巩固一下\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579614937916456960?sourceSSR=users",
        "title": "24校招 腾讯 teg运营开发 面经 1.23(已被鸽)",
        "content": "## 一面 1.23\n\n1.介绍一下实习的项目，有哪些功能，用了哪些技术栈\n\n2.项目用的微服务架构，服务是以什么依据进行拆分的？\n\n3.单体架构和微服务架构的差别，你觉得你参与的项目适合用单体架构吗\n\n4.有没有观测过项目各个微服务的资源使用情况，比如cpu，内存利用率等\n\n5.场景：一个数据清洗服务内存占用率比较高，你会想什么方法把内存利用率降下来？\n\n6.定位慢sql时，分析执行计划的结果怎么去解读\n\n7.你建了一个索引，但是发现执行计划没有使用到，这一般是出现了什么情况？(索引失效)\n\n8.我有提到数据库内核会比较不同的执行计划选择最优的，问：数据库提供的统计值一定是准确的吗？\n\n9.ForkJoinPool和ThreadPoolExecutor的区别\n\n10.消息队列的使用场景？如果下游的服务没有消费队列中的信息，你能判断是下游服务异常还是其他异常吗？你知道有一个消息失败了，有什么办法可以找到这个消息并做一些运维处理呢？（不是写死在代码里的）\n\n11.组成原理了解的怎么样？你怎么理解现代计算处理器的多核？多核的电脑每个独立的核心需要共享数据，你觉得怎样加缓存可以使得共享数据的效率最高？\n\n**算法题** ：根据给的层序遍历的List建二叉树，并按层序遍历分层返回每一层的节点的值 List<List<>> 的形式\n\n## 二面 1.25 没hc直接被鸽了[达咩]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579424553072418816?sourceSSR=users",
        "title": "小米日常实习面经-海外商业化预装应用运营",
        "content": "自我介绍\n\n对简历深挖：\n\n新媒体运营这方面你们有没有用一些什么样的传播策略？还是说你只是就是进行一个内容的分发这样一个角色？\n\n反问：内容和渠道的策略？\n\n提醒：你们可能前期是需要去调查每个平台的一个属性或者调性，或者是他们的受众人群的特点，然后再去根据这些平台的特点去做相应内容上的调整？\n\n其实比较想了解你们想利用这些平台，比如说推送的机制也好，或者是人群的属性也好，做出了一些内容上的定制化的调整？\n\n比如说你在这些平台发布一些内容之后，你们可能会关注什么样的指标来定义这条内容的质量好坏呢？\n\n我其实想了解，就是我觉得点赞、评论还有浏览可能是比较浅层的，或者是基于用户偏好的一些指标。因为我看到你这边还有写到销售跟踪的这么一条内容，你们有没有比如说把这些点赞转化跟销售线索转化之间有一个关联？然后去分析这之间的一些转化漏洞，然后给销售一些经验，或者是跟橡胶服一些的经验（这个橡胶服没懂，可能是向交付？）\n\n你的工作就是销售需求导向的，去根据他们的需求去定制一些传播的方案，然后除此之外还有一些你们品牌曝光上的一些内容的投放？\n\n我还想通过这段经历了解一下你的数据分析能力，展开讲讲（电商数据分析）?\n\nexcel vlookup和数据透视功能细拆（这部分要好好提升）\n\n你在分析洞察这一部分，你是拿到他们后台的一些分析报告，然后你做了什么样的工作，然后去给那个策略去提供数据支持的，还是说你只是把这个报告提供给相应的部门，你有没有在这方面有一些你自己的理解和产出？\n\n你的英语能力听说读写 OK 吗？来段自我介绍吧\n\n反问：二面时间？\n\n遗憾：没有说头天查到的预装应用客户信息，以及产业链运转逻辑，这一块自己也没怎么思考过\n\n问题：\n\n英语自我介绍没有准备\n\nexcel数据分析的工具的用法不熟悉\n\n对简历经历的整体star法则拆分的不是很清楚，和面试官解释的时候时间有点太长了，下次抓住重点，情景-任务-行动-结果的结构表达。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579401256020566016?sourceSSR=users",
        "title": "北泰智能项目助理岗 面经分享",
        "content": "一共是面了两次 一面的时候是和项目经理、HR分开单独线下面的 二面是董事长线上面的\n\n线下项目经理：\n\n上来自我介绍\n\n1、你知道项目助理这个岗位是做什么的吗？\n\n2、你了解PMP是什么吗？\n\n3、如果你在公司里面对接销售的时候，销售因为预算的价格问题和你产生了分歧/争吵你应该怎么做？\n\n4、之后有考公、考验意愿吗？\n\n5、不考虑走技术方向吗？\n\n6、之前做过这么多项目、有这么多经历，为什么选择这个岗位？\n\n之后反问了对方一些问题，关于薪资待遇方面他也不太清楚，就帮我找了HR过来进行了下一环节面试。\n\n线下HR：\n\n上来自我介绍\n\n1、目前是否有考公考研打算？\n\n2、有了解过我们公司吗？【然后HR带我去看了他们公司的一些产品展示 蛮酷的】\n\n3、中间这问的啥忘记了，应该不是特别难的问题都很基础\n\n后面没有再问其他的了，我了解了一些薪资待遇方面的问题，交谈的还是蛮愉快的。\n\n之后我就从北京离开了，线上收到了该公司董事长要进行线上面试的消息。\n\n线上董事长：\n\n上来自我介绍\n\n1、看你的经历很丰富，是否有考公考研的打算？\n\n2、在你的过往的项目和经历中，你觉得让你印象最深刻的是什么？\n\n3、你认为你是一个有责任心的人吗？\n\n4、好像还问了我一个我认为我自己的优点有什么吧 这段时间面试的太多了 岗位性质和问题都差不多 有一点混淆\n\n不过基本上是差不多\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579372784397148160?sourceSSR=users",
        "title": "华顺信安Golang后端开发实习",
        "content": "# 笔试（打字写写比较简单）\n\n  * 进程和线程的区别，如何通信\n  * TCP/UDP的区别和特点\n  * sql语句\n  * go中defer的顺序\n  * 面向对象语言的特点\n\n和最近几个兄弟遇到的一样\n\n## 面试\n\n协程是什么？\n\n进程、线程、协程的区别？\n\nchan中无缓冲和有缓冲的区别\n\nchan主要是干嘛的\n\n自己挖坑：分布式事务，然后问消息队列有什么应用场景\n\nmap怎么判断里面有没有某个key\n\n怎么删除某个key\n\ngo如何实现面向对象\n\n指针有什么作用？（刚问的时候一脸懵） （然后是指针乱七八糟的问题）\n\n:=和=的区别\n\nredis了解过吗？\n\n看你简历上写了redis分布式锁？你怎么实现的\n\nredis的数据结构有哪些\n\nmake和new的区别\n\ngo在main之前会执行什么函数吗\n\n索引有哪些？\n\n存储引擎有哪些？\n\n设计过数据库吗？你都怎么设计数据库\n\n  \n\n2.2 hr谈完薪资了，第二天说考虑实习时长，然后到现在不给offer，估计是凉了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579372550153678848?sourceSSR=users",
        "title": "小米AIGC大模型实习",
        "content": "一面主要是聊项目：数据来源，项目中负责的部分，图数据库等等。有问一些原理也是项目中的：  \n1\\. transformer  \n2\\. p-tuning v2  \n3\\. bilstm-crf  \n最后是道简单的算法题：给整数数组和target，找数组当中和为目标值的两个整数返回下标  \n二面也是简单聊项目，后续规划之类的\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579369708537782272?sourceSSR=users",
        "title": "面试题解析|宝洁八大问-沟通表达能力",
        "content": "🙋题目：举例说明你是怎样用事实促使他人与你达成一致意见的？\n\n💡关键词：以事实说服他人\n\n✨提示：这个问题隐含了一个转变的过程，对立方态度的转变也是需要我们溶入回答的一点。\n\n❗️讲述逻辑：\n\n1.当时你面临的情况是什么？（对立方的态度及原因）\n\n2.你对于当前情况的态度是什么？并说出你的原因\n\n3.你所重要依据的事实是什么！（重点讲述）\n\n4.事情的结果是什么，影响如何，以及对立方的新态度。\n\n🌞宝洁八大问作为非常经典的问题合集，能够很好的帮助大家总结自己的个人经历，建议每一位候选人在求职前都可以深入学习了解下宝洁八大问的回答技巧。如果有疑问，可以后台私信详细咨询。\n\n☝️面试稳稳赢系列会主要和大家共同讨论面试题目的拆解，站在HR的视角带你看透面试问题的本质。欢迎持续关注，另外同时有简历稳稳赢，求职稳稳赢等更多板块，欢迎大家来我的主页，学习以及讨论相关话题。\n![AMM0BHGBpGvWgc9mSukh8J5gjKtDSF9y.jpg](https://uploadfiles.nowcoder.com/images/20240123/722513612_1706004459971/BAD43560E0F4AD35D39F3881DD62E86B)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579361420597346304?sourceSSR=users",
        "title": "影石Insta360全栈实习一面面经",
        "content": "只问了30分钟，没做算法题\n\n1.拷打项目\n\n2.什么是索引\n\n3.get与post的区别\n\n4.post有几种模式\n\n5.数据库三大范式\n\n6.什么是restful风格\n\n7.选择排序时间复杂度\n\n8.介绍单例设计模式\n\n9.linux命令\n\n10.http3开头的状态码代表什么\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579337714500190208?sourceSSR=users",
        "title": "Momenta 日常实习一面",
        "content": "2024/1/13 面试\n\n\\-------------上来先自我介绍--------------\n\n我简历上写了三个项目：\n\n  * 给研究所做的项目，改的 vscode 源码和开发 vscode 插件完成的\n  * 跟着网上做的铁路购票系统（面试官只问了这个项目）\n  * 科研项目，做的计算机视觉\n\n\\-------------面试官提问-----------------\n\n  1. 购票系统中在算法层面怎么分配座位的，1、2、3等多个人购买怎么分配座位？  \n我：如果一个人的话就哪里有空位哪里插入  \n面试官：这样的话会导致什么问题  \n我：会导致座位分配碎片化，但是我的确是这么做的，当时没考虑太多。  \n面试官：那2、3多人呢  \n我：两个人的话就有相邻的空位就分配相邻的空位，没有的话就分配同一车厢离得近的座位，不同车厢就分配离得近的车厢。三个人也是这样。  \n面试官：三个人多人也是这样？  \n我：我目前是这么考虑的。没有想更复杂的情况。  \n面试官：你说的是流程方面的？算法方面呢？  \n我：就是简单的实现了一下。\n\n  2. 购票系统的登陆怎么完成的？  \n其实这个我不太懂。  \n我：用的 SpringSecurity ，第一次登陆要先查询数据库，然后把数据存储到 token\n中，之后再访问的话就不需要再查询数据库了，因为查数据库很重嘛  \n面试官：那用 token 存储会不会不安全？  \n我：理论上是有可能不安全的，因为 token 是保存在浏览器缓存中的，是有可能不安全的。  \n面试官：那传输过程会不会被截取？  \n我：这个我还真不了解，我下次去再看看。\n\n  3. 购票系统为什么要用消息队列？  \n我：先不说消息队列的削峰、异步、解耦这些功能，我在项目里使用消息队列还利用了消息队列的保证消息不丢失的功能，这样的话就能保证在删除缓存的时候一定能够删除成功，至于为什么使用\nrokcetmq 是因为项目中还用了延迟消息来延迟订单关闭，kafka 的话，这些功能需要自己去封装，所以使用了 rocketmq。  \n面试官：你说消息队列能保证删除缓存一定成功，那万一消息漏读了怎么办？  \n我：消费者没有消费成功是会重试的，而且只有消费成功了才会返回 ack  \n面试官：是不是有一个消费函数指定至少发送一次之类的？(想让我说 rocketmq 的 At Least Once 这次词？其实我大概意思已经差不多了吧？)  \n我：是有这个是有这个。\n\n  4. 购票系统这个令牌限流是什么？  \n我：令牌就是拿到令牌的请求才能再去拿分布式锁，这样的话就防止了大量的请求都去请求分布式锁，减轻了压力；令牌的数量等于票的数量，这样也可以防止超卖。  \n面试官：那我不卖这么多票不行么？有1000张票，我只让卖100张，不是一样？  \n我：（我觉得他说的有道理）您说的有道理，我觉得是差不多的。\n\n\\------------做题-------------\n\n题如图所示 easy 题，先让我说思路，我说了一个 nlgn 的思路，然后他说还有更简单的，也没让我做，就结束了。凉凉。\n![alt](https://uploadfiles.nowcoder.com/images/20240123/817112167_1705997276842/78EAA4D6A21C341E9E76A47D4DB46D87)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579331106432958464?sourceSSR=users",
        "title": "转转后端1面",
        "content": "> 面试时间25min 开发岗\n\n  1. HashMap为什么会有线程安全的问题\n  2. HashMap的基本put原理\n  3. ConcurentHashMap基本原理\n  4. 线程池有哪些参数\n  5. 临时线程怎么回收的\n  6. StackOverFlowError为什么会产生\n  7. 最左匹配原则\n  8. 为什么会有最左匹配原则\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579097284688830464?sourceSSR=users",
        "title": "小米-软件研发实习-一面-2023.2.1",
        "content": "base：北京 时长：约1h\n\n1\\. 自我介绍\n\n2\\.\n用过ThreadLocal吗？ThreadLocal是在哪个包下的？看过ThreadLocal源码吗？讲一下ThreadLocal的get和put是怎么实现的？\n\n3\\. 用过线程池吗？如何自定义线程池？线程池的参数？\n\n4\\. MySQL有哪些日志? 重启恢复读取的是哪个文件？如果redolog日志文件太大怎么办？\n\n5\\. char和varchar的区别？\n\n6\\. MySQL有哪些优化方式？\n\n7 Redis为什么快？\n\n8\\.\n你项目中有哪些地方用到了Redis？Zset的数据结构是什么？讲一下跳表吧？为什么层数增加的时候是0.25？那你再讲一下压缩列表吧？看过Redis源码吗？讲一下定期删除底层源码是怎么实现的吧？\n\n9\\. 讲一下你项目中遇到哪些并发安全问题？\n\n10\\. 讲一下一条http请求输入域名之后的过程？\n\n11\\. Nginx有哪些负载均衡算法？Nginx位于七层网络结构中的哪一层？\n\n12\\. 讲一下你项目中用过哪些设计模式？\n\n13\\. feed流是如何实现的？\n\n14\\.\n你项目中的热度排名有对浏览量进行加分吗？如果用postman在短时间内进行大量的访问怎么办？如果间隔时间长一点呢？有办法区分请求是从前端发出的还是从postman发出的吗？\n\n15\\. 反问\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579081705147949056?sourceSSR=users",
        "title": "1.12美团一面100min/二面30min 三小时速通",
        "content": "周五晚上19：00一面，面完已经20：40了（汗 一道手写一道算法写得太慢了 我真的对不住我可爱的面试官-\n现在是mentor了；二面是leader晚上22:00打电话来的（真的差点以为是诈骗电话，然后聊了半小时实习经历、宏观的技术视野问题；下个周一直接oc了，感谢团子收留😄\n\n## 一面（1h40min\n\n### 项目与实习\n\n  * 说一说实习做了哪些项目\n  * 性能优化的方式\n  * 是否了解过预加载，prefetch/preload的区别\n  * ![](https://uploadfiles.nowcoder.com/files/20240122/734579472_1705935734365/1705931034499-348db238-9529-4b17-877d-22bbc6128cd6.png)\n  * 如何进行性能优化的量化（lighthouse、performance\n  * 如何防止网络波动的影响（现学现卖 求平均数\n  * 测试的时候是用公网还是公司的网络测试/一共测了多少次/用的是什么浏览器和设备/国际化项目有没有考虑使用国外客户的当地网络IP进行测试（汗 问的也太细了 要招架不住了\n  * 首屏加载时间具体是多少，优化了30%，那具体优化了多少（冒汗\n  * 了解过TP50、TP99、TP999指标吗，他们是如何计算的（懵 性能测试监控TP50、TP99、TP999含义\n  * CDN引入依赖为什么快（突破并发限制，cdn服务器就近部署且带宽大\n\n### 八股\n\n  * 进程和线程的区别 浏览器里都有什么线程\n  * ![](https://uploadfiles.nowcoder.com/files/20240122/734579472_1705935734276/1705931849091-ba06a7c6-f6ba-4d7b-adf7-29c6abe03822.webp)![](https://uploadfiles.nowcoder.com/files/20240122/734579472_1705935734280/1705931895221-80d61397-bc59-40df-97c6-cc4ad28978b7.webp)\n  * 如何理解事件循环机制\n  * 如何理解Promise与异步\n  * WebWorker了解过吗（引申到大文件上传MD5加密、个人项目里Websocket可以用SharedWorker优化\n  * 说说Websocket协议\n  * 如何解决跨域\n  * iframe可以解决跨域吗，它有哪些优缺点如何基于 iframe 解决跨域？-阿里云开发者社区\n  * 说说强缓存和协商缓存\n  * 常用状态码有哪些，结合实际开发场景说一说\n  * 说一说你对Vue的理解，结合你最近看的Vue设计与实现说说设计思想与底层原理\n  * Pinia和Vuex的区别，为什么实习项目选择了Pinia\n  * Vite和Webpack的区别\n  * 对闭包的理解\n  * null和undefined的区别\n  * ![](https://uploadfiles.nowcoder.com/files/20240122/734579472_1705935734335/1705933159239-3fc3daca-dcfc-4dc0-9a9c-08b4f19e6dd2.png)\n  * position定位有哪几种\n  * 常用的布局 说说flex布局\n  * 宽度自适应后，单行文本超出显示省略号失效如何解决（没听懂啥意思 汗\n  * ![](https://uploadfiles.nowcoder.com/files/20240122/734579472_1705935734290/1705933501479-fce56ad9-86cd-45c9-a7c3-8c72e848dd82.png)、\n\n### 手写（30min\n\n  * 根据给定的规则，解析URL字符串为对象\n  * 很坑的一点是，牛客平台虽然内置了URLParams对象，但是运行不了这个api，因此我没办法打印出来看代码的结果\n  * 这边写出来了，但是存在很多小问题（因为没法console处理，脑内编译能力还是太差，尤其是对嵌套对象的处理，代码没法bugfree；被面试官指导了好久才完全写对，汗流浃背了\n\n### 算法（10min\n\n  * 经典的lc mid：topK，找出一个数组内第k大的元素，要求时间复杂度O(nlogn)\n  * 当时脑子已经被第一道手写题搞乱了，第二道题面试官就给了5min时间，想直接用sort的api来写（虽然我内心里知道sort某些情况可能是插入排序来实现的，不一定是快排，但是怕再手写快排出一堆问题；面试官也提醒了这一点，并让我口述了快排思路\n  * 最后运行通过了，但是因为没手动实现快排，也只能算a了一半吧hhh\n\n### 反问\n\n  * 面到这里已经一个半小时了，是我目前人生中遇到的最长的面试，感觉已经有点绝望了（手写和算法题不太理想，\n  * 技术栈：都有，也有自研的框架\n  * 部门规模：前端团队50人左右\n  * 最后发自内心地感谢了面试官，太有耐心了，一点点给我改bug；耽误了他周五下班时间真的不好意思orz（面完都20：40了\n\n## 二面（30min\n\n主要是聊天，聊了实习情况\n\n  * 实习做的项目类型和技术栈\n  * 独立负责过最大的一个模块，大概消耗了多少天的工时（15天/约3周，独立完成\n  * 你平常完成需求会经常问mt吗，还是倾向于独立完成（每日周报汇报进度，向上管理，做个让mt和团队放心的靠谱人；具体技术实现自己研究，实在要问也要给出几种尝试思路-说明失败的原因、卡点，体现个人思考\n  * 学校挺近啊，你出门坐十五号线就能来（这句话让我看到了希望hhh\n\n## 总结\n\n从1.2第一场面试到1.12最后一场，应该大中小厂面了十家左右，遇到了很多很好的面试官，也感谢有几家公司愿意给offer。高密度的面试下，感觉自己在面试的表达和节奏把控上都渐入佳境、越战越强，最后也实现了寒假找一个大厂实习的目标。下一个目标应该是继续强化算法和手写，补齐短板备战暑期实习，加油冲冲冲！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579075610215981056?sourceSSR=users",
        "title": "【经验分享】中邮科技-广东信源测评",
        "content": "1.测评形式：手机测评\n\n2.测评时长：30-40分钟\n\n3.测试方式：笔试\n\n4.题目类型：\n\n1）价值观、个人风格、能力等\n\n-从以下四组词语中选择你最为倾向的5个词语如：智慧、快乐、修炼、领导力等……\n\n2）行为类测评\n\n-从行为中选择一个自己倾向的行为\n\n5.最后会产出一个性格报告，显示出目前能力中的占比及不适合的岗位类型等\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579059483612028928?sourceSSR=users",
        "title": "24校招，快手测试开发工程师一面",
        "content": "## 前言\n\n大家好，我是chowley，今天来回顾一下， 快手测试开发技术一面\n\n面试官从我的经历入手，另辟蹊径，提出了很多值得思考的问题，最后也给我提出了改进建议\n\n### 时间：55min\n\n### 平台：轻雀\n\n## 过程\n\n  1. 面试官和我分别自我介绍\n  2. 讲一下压力测试怎么做的？用了什么工具？改进后的结果怎么样？JMeter\n  3. 实习业务，我讲了一个新发现的bug\n  4. 测试表单的必填字段？用例通过什么导入的？\n  5. 性能测试咋做的？\n  6. 最占功耗的功能是哪个？数据存储\n  7. 兼容性咋做的？怎么归类？不能跨平台，要细分操作系统、开发语言、版本\n  8. 公司的持续集成的工具？\n  9. 你了解过Jenkins部署的过程，从你输入分支名开始，后台的整体处理过程？\n  10. 怎么检测服务正常启动了？自动化接口测试\n  11. 测试规范了解过哪些？语法、注释、流程，测试左移，灰度发版\n  12. 灰度发布过程有哪些方法？可以在什么维度进行划分？\n  13. 测试左移有哪些体现？单元测试\n  14. 开发过程中，接口协议一直在变，怎么进行测试左移？\n  15. Java的编程规范\n  16. 驼峰命名应用在哪些场景？\n  17. MyBatis了解过吗？集成数据库操作\n  18. 它主要封装了哪些操作？\n  19. 它和sql语句有什么区别？\n  20. redis\n  21. redis能存什么类型的数据？\n  22. redis和mysql数据一致性的异常场景\n  23. Java框架\n  24. spring的加载过程了解过吗？\n  25. Ioc，aop\n  26. Java的数据类型\n  27. 字典的应用，存储的是什么形式的数据？hashmap\n  28. 用python做过什么项目吗？\n  29. 介绍一下项目\n  30. 异步任务的进程管理\n  31. 用户重复点击怎么处理？\n  32. 怎么标识任务是唯一的？\n  33. 安全性怎么保证？\n  34. 微服务是啥？\n  35. 为啥要用微服务平台？\n  36. 手撕：双指针，秒了\n  37. 反问\n\n## 总结\n\n### 难度：4/5\n\n### 面试官专业程度：专业\n\n### 体验打分：4/5，面试官面善爱笑，没有因为晚上面试而疲惫\n\n真是一次非常开阔视野的技术交流，希望有机会继续流程！\n\n**我是chowley，一个专注互联网技术和软件质量保证领域的博主，我们下次再见！**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579058365385498624?sourceSSR=users",
        "title": "1.12阿里健康（65min 一面过",
        "content": "### 八股\n\n  * transform的用法，如何旋转一个元素\n  * 你还用过transform的哪个用法（元素垂直居中\n  * transform默认基于元素的哪个点，和transition有什么不同\n  * transform同时写rotate和translate，执行顺序\n\n\\---终于不问transform了啊哈哈哈\n\n  * JS事件循环\n  * 说说闭包\n  * 我看过你的博客，能更深入说说闭包吗，从函数执行的角度（汗，早忘了\n  * 说说闭包的应用\n  * 防抖节流\n  * http缓存\n  * 在项目重新部署后，如何识别静态资源已经更新，而非错误地使用缓存（静态资源加版本号或随机数；检测自动更新可以用WS/SSE通信或心跳机制轮询 https://juejin.cn/post/7290855675751137292\n  * cdn原理\n  * get和post的不同\n  * put方法有没有用过\n  * Vue2、Vue3的生命周期\n  * React的生命周期\n  * React里父组件如何调用子组件的方法（[子组件](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fso.csdn.net%2Fso%2Fsearch%3Fq%3D%25E5%25AD%2590%25E7%25BB%2584%25E4%25BB%25B6%26spm%3D1001.2101.3001.7020) (通过useImperativeHandle() 抛出实例，父组件通过useRef获取子组件实例\n  * Vue3里父组件如何调用子组件的方法（父ref+子defineExpose\n  * Vue2和Vue3响应式的区别\n  * React是如何实现响应式的\n  * Vue3和React的hook实现的区别？底层是如何实现的？\n  * Vue3的hook和一般的工具函数存在什么区别 和Vue2的mixin有什么区别\n\n### 项目与场景题\n\n  * 如何理解SPA应用？说说你项目中用到的性能优化\n  * 在做性能优化的时候，如何避免因为网络波动引起的误差（多次测试求平均值\n  * 聊天室项目里，如果我想重新打开一个页面，Websocket会不会产生一个新的实例（会\n  * 有没有办法优化一下你的项目，让所有的页面共享一个Websocket实例（Shared Worker\n  * ![](https://uploadfiles.nowcoder.com/files/20240122/734579472_1705930130393/1705929754440-3950d116-0c85-4ea4-bf2d-3b6022b1931a.png)\n  * 组件库项目如何实现按需引入\n  * 挑一个组件讲讲你的实现思路\n  * 项目是如何部署的，用过nginx吗，了解过CI/CD吗\n\n### 手写\n\n  * 手写节流（我用的时间戳写法\n  * 节流优化（这里有点没懂\n\n### 反问\n\n  * 技术栈：Vue比较多，B端C端项目都有\n  * 建议：继续坚持写博客；项目要提炼思考亮点；对自己的项目一定要熟悉，不熟的别往上写\n  * 面试体验挺好的，当晚约了二面，但需要线下面试，后来因为种种原因给拒了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579048075893751808?sourceSSR=users",
        "title": "字节 字节云 测试开发 面经 社招",
        "content": "部门：字节云  \n岗位：测试开发  \n社招 3年  \n有点紧张  \n流程  \n1自我介绍  \n2你未来岗位有啥要求？（给我问懵逼了）为啥想要离职？  \n3以下问题偏测试（没问项目，可能项目差异太大了）  \n如何提升产品质量之类  \n你负责的产品质量怎么样  \n自动化有啥好处？  \n4编程语言python  \n  你知道哪些类型  \n  dict是怎么实现的  \n5做一个SQL题，大概用子查询吧  \n6编程题，最长回文子串  \n7你的优势，劣势  \n许愿，梦想还是要有的。  \n  \n  \n  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579028729842712576?sourceSSR=users",
        "title": "字节一面二面三面四面",
        "content": "**一面**\n\n最基础的一集，但是也会深挖，好久没被问基础了\n\n实习中最有挑战的问题\n\nSSR相关\n\njs有哪些数据类型\n\n数据类型判断\n\n如何判断数组\n\n原型链\n\nvue-router的两种模式，原理\n\nscript的async defer\n\n垂直水平居中\n\n块级格式化上下文\n\n输出题\n\n事件循环题\n\n事件冒泡捕获题\n\n字符串格式化\n\n    \n    \n    let str=`\n    1 2 4342    3 4 5\n    23 4\n        4  5\n    `\n    let ans=[[1,2,4342,3,4,5],[23,4],[4,5]]\n    \n\n**二面**\n\n输入url到页面展现的过程\n\n五层模型\n\ntcp在哪一层\n\ntcp依赖于哪个协议\n\n如何区别每一个进程\n\n端口的作用\n\n对首屏的理解 是哪段时间\n\n实现一个repeat函数\n\n    \n    \n    let timeLog=repeat(2,1000,console.log)\n    timeLog('hello world')\n    timeLog('ByteDance')\n    //'hello world'\n    //'ByteDance'\n    //'hello world'\n    //'ByteDance'\n    \n\n**三面**\n\n实习中最有挑战，最有价值的事\n\nvue中比较核心的提高开发体验的点，讲一讲\n\n如果我声明了一个响应式数据但是并没有使用它，在它发生变化时会rerender吗\n\nvue是在什么时候去做依赖收集的呢\n\n在使用tree-shaking时需要注意哪些事情\n\n    \n    \n    let str='a.b.c'\n    resolve(str)\n    // {\n    //   a:{\n    //     b:{\n    //       c:null\n    //     }\n    //   }\n    // }\n    \n\n**四面**\n\n为什么离职\n\n之前面试没有通过的原因有复盘过吗\n\n上一份实习时候有发现自己的不足，如何改进的呢\n\n为什么学前端的呢\n\n上份实习有做过一些商业投放页的功能能讲一讲吗，有难点吗\n\n上份实习学到了哪些东西\n\n以后的规划\n\n有在面其他公司吗\n\n为什么拒了呢\n\n对我们岗位的认识讲一讲\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579015191392690176?sourceSSR=users",
        "title": "蘑菇车联实习一面面经",
        "content": "30分钟，面试官不开摄像头，没做算法题，完全按简历写得来问，没问项目，感觉有点水\n\n1.redis5种数据结构\n\n2.缓存穿透、雪崩、击穿\n\n3.redis分布式锁\n\n4.Spring常用注解\n\n5.Mybatis怎么分页？本来想问分页的原理后来觉得太难了又没问\n\n6.常用集合有哪些\n\n7.hashmap实现原理\n\n8.mysql的优化\n\n9.什么是threadlocal\n\n10.怎么判断一个sql是慢查询\n\n11.concurrenthasnmap原理\n\n12.cas\n\n13.volatile\n\n14.jvm类加载器和类加载过程\n\n15.linux常用命令\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579000746226491392?sourceSSR=users",
        "title": "华顺信安Golang后端开发实习",
        "content": "## 笔试（打字写写比较简单）\n\n  * 进程和线程的区别，如何通信\n  * TCP/UDP的区别和特点\n  * sql语句\n  * go中defer的顺序\n  * 面向对象语言的特点\n\n## 面试\n\n自我介绍\n\n### Mysql\n\n  * mysql存储引擎 - 哪个支持事务\n  * char 和 varchar 区别\n  * 应用层索引\n  * 索引对左匹配原则\n  * 数据库的索引类型，使用过那些索引，还有那些索引\n  * 索引的数据结构\n\n### Go\n\n  * go有没有异常类型\n  * 介绍一下GMP，能不能去掉p层\n  * go的竞争条件 Mutex\n  * [场景] 100个协程执行了50个，51panic后面的还执行吗 - 不想退出怎么做\n  * 讲讲Grpc\n  * map有序还是无序 - 怎么实现排序\n  * 进程挂了怎么办-在linux环境挂了应该怎么处理\n\n### Redis\n\n  * 讲讲优缺点\n  * redis 有哪些数据类型\n\n### Linux\n\n  * 查看当前路径 pwd\n  * 查找一个文件，有名称 find -name\n  * 日志滚动查看 tail less cat\n  * 移动目录 mv\n\n### Docker/git\n\n  * 怎么查镜像\n  * 讲讲DockerFile\n  * 怎么下载其他分支 git branch相关\n  * 单机docker支持那些网络模式\n\n### 看程序说结果\n\n    \n    \n    func test()int {\n    \ti := 0\n    \tdefer func(){\n    \t  fmt.Println(\"defer1')\n    \t}()\n    \tdefer func(){\n    \t  i += 1\n    \t  fmt.Println(\"defer2\")\n    \t}()\n    return i\n    \t\t\t\t\t\t }\n    func main(){\n      fmt.Println(\"return\", test())\n    }\n    \n    \n\n不是第一时间记录的，有点忘了，但是看了其他的面经基本也在其他投稿的范围中。\n\n问了一个数据库，没听清问了啥，没用过... channel相关比较多可以多看看，不同的问题对应不同的业务。\n\n倒是一点简历都没问。OC了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579028408982650880?sourceSSR=users",
        "title": "字节前端面经",
        "content": "**一面**\n\n拷打实习（平常只是调接口，用sdk并没有仔细思考其中的细节，这下被拷打了）\n\n**小流量实验**\n\n有没有了解过小流量平台是如何分配流量的，如果让你设计呢？\n\n**埋点**\n\n埋点是如何上报的？是发送一个请求更快还是请求一个资源更快？为什么？\n\nsdk应该有什么功能收集信息？\n\n埋点本身的底层原理，如果埋点很多会影响页面性能吗？如何尽可能的减少埋点的影响？\n\n浏览器里面同时能发送多少个http请求？\n\nhttp1和http2区别\n\nhttp和https区别\n\n介绍一下cookie作用\n\n携带cookie前提\n\ncookie，localstorage区别\n\n常用请求类型\n\nget和post区别\n\n请求常见状态码 301 302区别\n\n跨域问题 跨域的场景下一个接口会发送几次请求 预检请求？\n\n数组扁平化\n\n打乱数组\n\n26进制\n\n**二面（记不太清了）**\n\n聊实习\n\n遇到过哪些难点\n\nvue2和vue3区别\n\nvue和react区别\n\n最长连续递增子序列\n\n字符串全排列\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578989153229029376?sourceSSR=users",
        "title": "莉莉丝后端服务器go开发实习生一面二面挂",
        "content": "## 一面\n\n### 极简版\n\n  * 自我介绍\n  * 解释一下虚拟地址是什么\n  * 一个几百 G 的游戏是怎么在只有几 G 的内存上运行的？\n  * 用户态怎么切换到内核态？系统调用\n  * c/c++编译完后，可执行文件的结构是什么样的？\n  * 进程和线程的关系\n  * 算法：介绍一下排序算法，比如快排\n  * 介绍一下 go 语言中的 channel\n  * TCP 和 UDP\n  * 数据库事务的属性\n  * 除了原子性都问了一遍性质和作用\n  * 事务隔离级别\n  * redis 使用过那些数据结构，介绍一下持久化操作\n  * 介绍一下 jwt，以及为什么使用 jwt ，有什么用？为什么以前浏览器使用的是 cookie + session ，改用 jwt 有什么好处？\n  * jwt 是明文的吗？\n  * 平常怎么进行并发编程\n  * CA的TLS和SSL协议是什么，简述一下握手的过程？\n  * 关闭已关闭的通道？\n  * 读关闭的 channel 能读吗？\n  * 写入关闭的 channel 能写吗？\n  * 读关闭的空 channel 会发生什么？\n  * 反问：如果入职主要做哪方面的工作？招聘信息上的“中台”是什么意思，后台和前台之间的中间？答：介绍工位。本质还是后台。\n\n### 心路历程版\n\n大致回忆了一下\n\n  * 自我介绍\n  * 解释一下虚拟地址是什么 这个我理解为，操作系统的内存结构和程序运行的虚拟地址，讲了虚拟内存，还提到了段页式内存地址转换 但是面试官可能想让我回答，一个几百 G 的游戏是怎么在只有几 G 的内存上运行的？ 答了从磁盘调入内存，内存再淘汰不常用的数据。\n  * 用户态怎么切换到内核态？系统调用\n  * c/c++编译完后，可执行文件的结构是什么样的？ 不知道怎么回答，但是仔细一想好像学过，就是汇编和机器指令\n  * 进程和线程的关系\n  * 算法：介绍一下排序算法，比如快排\n  * 介绍一下 go 语言中的 channel\n  * TCP 和 UDP\n  * 数据库事务的属性 说完 ACID 只记得原子性和一致性，隔离性和持久性脑抽忘记了，赶紧扯点别的\n  * 除了原子性都问了一遍性质和作用 只答上来一致性\n  * 事务隔离级别 **读未提交（Read Uncommitted）：** 事务可以读取其他事务未提交的数据，可能会出现脏读、不可重复读和幻读问题。 **读已提交（Read Committed）：** 事务只能读取其他事务已提交的数据，可以避免脏读问题，但可能会出现不可重复读和幻读问题。 **可重复读（Repeatable Read）：** 事务在同一事务中多次读取相同数据时保证结果一致，但仍可能出现幻读问题。 **串行化（Serializable）：** 最高隔离级别，事务串行执行，避免了脏读、不可重复读和幻读问题，但降低了并发性能。 明明才看过，就忘记了，只说了前两个，还说的不是很好。其实我擅长的是说索引，这个有点不太会讲。数据库方面答得不太好\n  * redis 使用过那些数据结构，介绍一下持久化操作 讲了 AOF （类似日志记录），和 RDB 快照（这个名字忘记了，功能说对的）\n  * 介绍一下 jwt，以及为什么使用 jwt ，有什么用？为什么以前浏览器使用的是 cookie + session ，改用 jwt 有什么好处？ 改用 jwt 有什么好处？瞎扯加密后更安全，给下面埋雷。\n  * jwt 是明文的吗？ 答不是明文的，是通过加密算法加密后的。但是面试官说是明文的，说我理解不太对，要再去看一下\n  * 平常怎么进行并发编程 答简单说了一下怎么用 go func 开新的协程，用 channel 搞并发控制，有缓冲和无缓冲的，阻塞的情况\n  * CA的TLS和SSL协议是什么，简述一下握手的过程？这个就打了前面一个问题，但是握手过程不清楚\n  * 关闭已关闭的通道？panic\n  * 读关闭的 channel 能读吗？可以\n  * 写入关闭的 channel 能写吗？不行，panic\n  * 读关闭的空 channel 会发生什么？不会，猜了一个panic，结果是零值（小问题，面试官应该不在意）\n  * 反问：如果入职主要做哪方面的工作？招聘信息上的“中台”是什么意思，后台和前台之间的中间？ 总结：介绍工位。本质还是后台。\n\n### 插曲\n\n刚开始的时候电脑出问题了，听不到面试官的声音。想着重进面试平台会不会好，结果退出就不让进了！\n\n还让我评价平台使用感受，直接 0 分。然后电话联系 hr 重进\n\n还有一点，大锅，简历上写熟悉 golang 语法写成了 熟悉 goland 语法，🤡\n\n面试官很 nice ，一直在引导，有很多问题都很有意思，即使我答不上来也是很耐心解释，面试体验很不错。祈祷能有后续😀\n\n## 二面\n\n一面结束第二天就是的\n\n没想到还有二面 leader 面，以为直接 hr 面了，一天没准备，特别紧张，看来不到最后一刻不能放松啊，菜狗半场开香槟😥\n\n面试官是一个leader，比较和善，做事非常有条理，面试过程分点提前告知我\n\n还有一个 hr 面，在等通知，感觉 leader 面回答的一般\n\n### 算法\n\n给一个数组，找出一个子数组，要求子数组中的每个数字只出现一次，输出这个子数组的长度最长是多少。\n\n### 操作系统\n\n  1. 知道那些进程调度算法？\n  2. 死锁是什么？如果发生了死锁，应该怎么破解？\n\n### 计算机网络\n\n  1. http1.0 和 http2.0 有了解过吗？有什么区别你觉得？\n  2. TCP 是怎么建立稳定的传输通道的？\n\n### Redis\n\n  1. 使用过那些数据结构，怎么使用的？（菜菜项目里只会键值存储，不敢让面试官问了）\n  2. Redis 是使用单线程的吗？为什么链接 Redis 使用多线程，存储操作使用的是单线程\n\n### 数据库\n\n  1. 数据库的日志有哪些？分别有什么用？\n  2. 数据库的索引是什么？为什么快？\n  3. 有没有定位过慢查询的问题？出现了慢查询该怎么解决？\n\n### 项目拷打\n\n省略至少 5 个问题，按着简历上一点一点的问\n\n### 其他\n\n简历上写了 ES ，面试官看到了，但是菜菜本人只在Ｂ站上学会了怎么用，不会说原理，再加上很久没用到，于是和盘托出，简单地说了一下倒排索引和分词器（学\nMySQL 时想到的😥）\n\n### 反问\n\n什么时候有通知……\n\n### 总结\n\n  * 大部分问题在八股上都看过，能理解，但是面试一紧张就忘光了，很多问题只能模糊的答上个五五开，需要加强总结\n  * 算法题手速太慢了，没做出来，没有一遍过，事后一看时双指针边界问题没处理好🤡\n  * 😥保佑\n\n## 挂😥\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578982134530973696?sourceSSR=users",
        "title": "华顺信安 一面凉经（golang后端）",
        "content": "面试官迟到了10分钟 不过还好 虽然没开摄像头但是人挺和善的 也不会给人压力\n\n先说不会的吧\n\n1.socket和websocket之间的区别（没用过websocket 只用过socket\n\n2.mysql索引 有哪些 （我对关系型数据库 不是熟悉 只会基本sql语句 所以只答了唯一索引 多列索引 覆盖索引 非覆盖索引 不会解释只知道基本概念）\n\n3.linux chmod的参数有啥含义 怎么用\n\n\\-----------------------------------------------------------------------------------------------------------------------------\n\n介绍项目\n\nUDP/TCP的区别 我还补充到如何监听端口\n\nosi七层模型\n\n缓存击穿怎么解决 我联想到go的map tophash\n\ngo语言中的int和int32区别\n\ngit的基本命令\n\nlinux的基本命令\n\nmake和new的区别\n\n如何用golang实现多态性 继承性 抽象性 封装性\n\n有些记不到了\n\n...\n\n最后面试官说我redis和go语言很熟悉但是mysql不熟悉 说我可能适合不偏业务的方向 但是要高学历\n\n其实我都可以 业务我没怎么尝试过 只要能学到东西就行\n\n希望能过[牛泪][牛泪][牛泪]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/579028098234982400?sourceSSR=users",
        "title": "快手电商一面",
        "content": "面试体验一般，当时刚面完字节，头疼，面到一半我都不想面了\n\n讲讲性能优化\n\n盒模型\n\nblock和inline-block区别\n\nbfc\n\n深拷贝 要解决循环引用和原型链继承\n\n事件循环 为什么需要它\n\n浏览器输入url过程发生了哪些事\n\ncss解析会阻塞页面渲染吗\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578915194387120128?sourceSSR=users",
        "title": "美团营销算法实习",
        "content": "1\\. 自我介绍  \n2\\. 这个岗位业务场景什么算法用得最多  \n3\\. 学习算法的思路  \n4\\. 评估指标  \n5\\. 随便选一个类型的算法比较其中两种  \n6\\. AUC比较低怎么去思考哪些部分有问题  \n7\\. XGBoost原理，GDBT或者其他梯度提升  \n8\\. mysql 成绩表转化为每个人的各科成绩  \n9\\. Python求逆序对\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578732577725431808?sourceSSR=users",
        "title": "1.11蔚来三面80min（已OC",
        "content": "二面是HR面，本以为顺利offer到手，没想到二面HR又加了一轮技术面，意思是一面面试官没考我算法题emmm，但还好三面虽然算法没完全写出来也过了。\n\n### 聊天（40min\n\n  * 聊我的博客，学习的规划，对我写博客这点印象比较好\n  * 问我为什么在学习计划里有学习日语这一项 反复问了好几遍（我：？？？？？\n  * 青训营是什么 青训营经历的收获 \n  * 最近看的书（Vue设计与实现 结合Svelte说了说对三大前端框架的理解、Vue的设计思想\n  * 实习中做了哪些东西\n  * 介绍一下最复杂的模块\n  * 为什么项目里不用类似context的全局状态管理 而是请求接口（组件自治 权限信息放到Pinia里\n\n### 写题（40min\n\n  * 给定一个字符串数组，每个元素类似于1=>2=>3，需要先转化为二叉树，并判断是否存在指定的路径\n  * 这道题对我来说第一个难点在于转化二叉树，需要自己构造Node，并且要用两个map去存节点、子节点关系的信息，然后还要判断二叉树的root，这部分面试官引导了很多，写得磕磕绊绊\n  * 第二个难点就是dfs，好久不刷算法题了还是有点懵的\n\n### 反问\n\n  * 技术栈：React的B端项目，也有一些Webgis项目\n  * 建议：加强算法和代码能力（我哭了\n  * 题虽然没有完全写出来，但面完半小时之后就oc了，蔚来真的很效率\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578698078316769280?sourceSSR=users",
        "title": "反思：打造好的实习（项目）、简历、面试",
        "content": "仅代表个人的一些小小见解  \n  \n实习（项目）  \n  \n1\\. 是否有足够的思考比能不能做出成绩更重要  \n假设A，B所在团队去参加一个机器人比赛，A所在团队拿了第一名，但A只是拧拧螺丝接接线；B所在团队没有奖，但B是做寻路避障识别抓取算法的，在做的过程中有细节需要思考，有难点需要攻破。最后的含金量肯定是比A要高得多的。  \n  \n2\\. 失败比成功更有价值  \n比如做算法跑模型，对模型设计做改动的时候肯定是有正向的预期的，如果实验正向了固然好解释，但是负向会更有价值，它迫使你思考为什么结果和预期不符，排查和反思的经历会让你对它的领悟更深，能表达的东西也更多。  \n我实习期间就是有一两个方向实验负向比较严重，然后就有不断地猜想，实验验证，再猜想的过程。这些比结果正向的实验对我的成长更大，后续面试的时候我也是着重说自己失败的历程。  \n  \n3\\. 没有内容，创造内容  \n看到很多牛友吐槽实习没有内容，后端在crud，算法在洗数据，体力活没有思考也就没啥价值。实习本身又不图钱（异地实习连开销都cover不掉），要是还没积攒经验岂不是白干了。  \n要提升含金量的话，最好的材料就是别人的文档。读文档的话可以尝试一边看一边预测后面的内容，或者是猜想一下实验结果或结论如何。在你觉得存疑的地方直接私戳写文档的人问清楚细节或者是请教探讨一下，这就是未来可以说道的地方。  \n对开发来说应该就是开发文档（没干过开发不清楚），比如程序架构，中间件选择，接口设计这些，如果你根据需求做设计的话会有啥不同，哪些地方考虑的不周全，它们是如何服务整个业务的这些思考。  \n  \n简历  \n  \n1\\. 多≠好  \n既然叫简历了，自然要做得精简。写很多不会让别人不明觉厉，反而是在大段文字中找不到有价值的内容而感到头大。  \n对内容做减法的方式就是从面试官的视角去审视它们。假如你是面试官，你看到这个条目会不会想问一句细节，如果压根不关心那就直接删掉。好多技术岗简历写普通话证书、驾照、校园经历这些，其实还不如不写，有一种凑字数的贫瘠感。哪怕没得写找你的课设放上去也会更好。  \n  \n2\\. 怎么大家都抗压能力强啊  \n八成的简历上都有个自评板块，以前写团队协作能力强，动手能力强就算了，现在人均抗压能力强[黑牛问号]大家都这么厉害的嘛？我抗压能力就不行。写抗压能力强给人的感觉就是快来压榨我吧的抖M形象，还助长无良hr的嚣张气焰。我是觉得自评这个板块根本不需要，不太可能你捏一个牛马人设，就从感谢信变成发offer了。  \n  \n3\\. 版面清爽美观  \n这部分比较见仁见智。选择合适的模板、字体、格式，不要有错别字，该对齐的对齐，该缩进的缩进，这些就不说了。  \n对我来说所谓清爽，就是用最短的话来传达相同的信息量，删掉那些没有信息量的文字。尤其是对于项目或技术栈里分点写的内容，可以考虑用词语替换整句话。举个例子：  \n反例：  \n\\- 使用Redis对某某数据进行缓存，减轻了数据库访问压力，提高访问效率。  \n\\- 熟练掌握Java开发语言，熟练使用SpringBoot、kafka等框架及中间件，掌握单例模式、工厂模式等设计模式  \n正例：  \n\\- Redis：某某数据缓存  \n\\- Java、SpringBoot、kafka、常见设计模式  \n  \n4\\. 重要地方不要写透，要留白  \n对于你准备比较充分，比较希望面试官问到的部分，不要在简历上写得太详细，要做谜语人写一半，剩下的一半引导面试官来问（见下述）。  \n  \n面试  \n  \n面试的本质就是一场马拉松，只不过马拉松跑的是里程，面试跑的是时间。面试也是一场你和面试官的battle，要尽力掌握主动权，而不是只被动回答，被面试官拷打得体无完肤。  \n你前面的所有准备，做过的实习，项目，写的简历都是为面试服务的。所以要利用这些内容把面试过程掌握在自己手里。  \n  \n具体来说，你项目里的思考，那些能展示你头脑和技术的点就是你的筹码。  \n1\\. 在面试之前应该把它们整理成连贯通顺的表述。多面试锻炼几次，练到直接像机关枪一样一张嘴停不下来。  \n2\\.\n在简历上不要写太清楚，挖好坑等面试官来问。如果写清楚的话，面试官很可能结合自己理解觉得并不是什么重要的东西然后压根不问。所以别给面试官误解的机会，尽量确保他踩坑。比如我实习工作就写[调整模型结构]，那你总要问一句做什么调整了对吧。  \n3\\.\n做好以上两点之后，除了写算法题这种梆硬还看运气的考察，剩下的时间尽量留给自己表述。面试官只要问到，那接下来就是你的输出时间，这段时间他只能去跟你说话的节奏，跟不上的部分后面还要再询问细节。这样你就把大部分面试时间锁定在自己有提前准备的话题，拷打八股和刨其他地方的时间就少，自己答不上来的东西也少。  \n  \n仅代表基于自己实习和面试经历的反思[喝可乐]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578671165623873536?sourceSSR=users",
        "title": "24美团产品运营面经1-3面（含复盘）已offer",
        "content": "**面试公司及方向：** 美团产品运营\n\n过往实习经历：秋招前共有3段大厂产品运营实习经历\n\n# 一面\n\n**1\\. 自我介绍**\n\n【问题拆解】自我介绍可主要就自己的实习经历展开，一句话带过每一段实习，同时结合当时面试的岗位，增加实习经历中高匹配度的一些内容\n\n**2\\. 深挖过往实习经历**\n\n**Q1：讲一下上一份实习的项目。**\n\n【问题拆解】该类问题可按照STAR原则进行拆解。\n\nA1：\n\n背景是有新的风险项目需要治理；\n\n目标是从整个集团的目标拆下来的，即：需要降低事件占大盘的比例；\n\n行动是我们会用到技术+产品的手段来同时治理这个项目，技术侧前期是通过人工运营的手段实现策略的准确率高于一定水平，后实现系统接管，人工兜底；产品侧主要是监管需求+数据需求，先定位特定人群，再对这个人群下发处置，并且对处置结果进行监控，主要是起到一个数据监控的作用这样；\n\n最后叙述结果：在我实习期间拿到的结果是降低了发案率3pp。\n\n**Q2：这个项目的价值是什么？**\n\n【问题拆解】可从3个角度进行分析，一个是业务角度，还有一个是企业价值观角度，最后一个是个人角度\n\n**Q3：(追问) 你提到的企业价值观，如何体现呢？为什么？**\n\nA3：先提价值观，再讲如何体现在项目上，解释一下原因即可\n\n**Q4: 个人理解是不只你们一个项目和价值观相关，你觉得这个项目一定很重要吗？和其他部门的其他项目相比应该如何衡量呢？**\n\n【问题拆解】结合部门的业务内容答就好。其他部门的项目也很重要，横向比较发现是价值观可以在不同业务发光发热\n\n**Q5：你觉得为什么你们的项目要看这些数据呢？为什么不看其他类似xx,yy的数据呢？**\n\n【问题拆解】结合指标体系回答即可\n\n**3\\. 开放性问题**\n\n**Q：未来的职业规划是什么？产品和运营的区别是什么？**\n\nA：职业规划是前期先做好产品/产运的执行层，懂业务，认知有所提升以后希望可以own一些项目，能带小团队；中后期希望可以做到对同一赛道的不同玩家都有一些认知，同时可以带新人，陪他们成长。\n\n# **二面**\n\n面试官提问\n\n**业务相关问题**\n\n**Q1：美团为什么做快驴业务？**\n\nA1：\n\n美团的核心是餐饮，过去是团购外卖，更多是ToC，餐饮的核心提供者是餐厅，站在餐厅的视角，如何提升收入，降低成本，提高效率是他们的核心。\n\n1）提升收入：到店、到家是帮忙餐厅获取更多客户，扩大经营流量，提升收入水平。\n\n2）提升效率：SaaS是为了提升其效率。\n\n3）降低成本：快驴的话是为了降低成本。一方面做营销赋能，一方面做经营、采购、IT赋能。（供给侧改革其实也是个契机）\n\n这三个方面实际是整个链条的打通及闭环。\n\n**Q2：快驴的业务核心价值？**\n\nA2：快驴的业务价值\n\n核心价值：替换中间环节。用电商的模式经营食材行业。\n\n两层价值：\n\n1、高效：相比传统行业发挥相同价值有更高的效率。传统行业已有的中间环节都已经起到作用了，而我们要替换的话，就需要在这个环节发挥更大的价值，或者发挥相同价值要有更高的效率。电商的技术手段能在每个环节，经营管理、信息流通等作出更好的效率体现。\n\n1）销售环节，传统的带着纸质清单去给商家谈，而电商可以通过商城快速传递商家价格变动（这点其实也算销售效率提升的范畴）。同时因为有一整套电商，可以更高效的帮助商家开拓新产品，替代产品\n、替代营销、报价等。\n\n2）配送环节，更优更短的路径。\n\n2、大体量带来商品的供给、流通趋势更精准。原本是层层分销，从生产者手中流到需求者手中，信息传递丢失导致供需的错位（需求的变动了上游供给还没有感知，进而引发\n供给与需求的不平衡）。替换中间环节之后，降低商品在中间环节的浪费。这一点需要中间环节电商公司有大的经营体量，使信息的传递过程和物品的流通过程从市场机制转化为电商公司的内部经营机制，实现价值的交付。\n\n**Q3：快驴的关键要素是什么？**\n\nA3：客户-履约-供给\n\n电商经营最重要的三要素：客户是谁？我们为客户提供什么样的服务？怎么提供？要想让这三者紧密协作，需要强大的系统来提升三者协作的效率，让我们经营的更加高效及低成本。\n\n1、需求：客户，客户是谁，需求是什么，哪些是重要需求，哪些是不重要需求，怎么满足好？\n\n1）按客户流水分层之后，越底部客户（小微客户）对价格敏感性越强，当我们价格有波动如上涨，那么就很容易流失。顶部（大连锁）对溢价能力很强，我们从他们那里获取的性价比会很低，且他们对服务会要求更好；\n\n2）快驴从小微入手，带动了上游供应商的溢价，但是由于价值不高，所以战略方面是需要向腰部客户转移。\n\n2、供给：找到客户之后，才知道我们需要用什么样的服务，找什么样的供应商解决客户需求；\n\n3、履约：高效、快捷的方式履约到客户手中。\n\n# 总结\n\n**实习的延展性很重要**\n\n看这一份实习不如看实习的延展性，即实习之间的暗线关联度，这样看可以帮助自己圈定一下自己相较于其他选手的优势和投递重点\n\n**提前进行针对性的准备**\n\n秋招要早投递！在投递完可以顺手写一下自己对这个厂&岗位的认知，有备无患。面试前可以大概体验一下对方的产品，对公司有一些认知&观察，特别是和自己过往经历匹配度高的内容可以重点进行准备\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578714907026239488?sourceSSR=users",
        "title": "1.10商汤一面（67min",
        "content": "总体答得都还行，只是可能没缘分，已经感谢信\n\n## 项目\n\n  * 讲讲做的模块\n  * 性能优化与SEO优化\n  * 实习项目技术选型思考 Vue3 TS Pinia好处\n  * Websocket了解吗 SSE有做过吗\n\n## 手写\n\n  * 手写三栏布局，右边一栏自适应\n  * JS实现点击最左侧一栏，使其消失\n  * 增加消失的过渡动画\n  * display:none和visibility:hidden区别\n  * 在过渡动画表现上的区别\n\n## 八股\n\n  * 对flex盒子的理解，有哪些用法\n  * Promise的理解和使用\n  * 防抖节流\n  * 一道变量提升的经典题目\n\n    \n    \n    var a = 0;\n    var b = 0;\n    var c = 0;\n    function fn(a){\n      console.log(a++, c);\n      function fn2(b){\n        console.log(a,b,c);\n      }\n      var c = 4;\n      fn = fn2;\n    }\n    console.log(fn(1));\n    console.log(fn(2));\n    \n\n  * 跨域解决\n  * React的Hooks介绍，实战用法\n\n## 反问\n\n  * 技术栈\n  * 建议：研究生别搞前端了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578604084438085632?sourceSSR=users",
        "title": "美团AIGC落地开发（Java），一面",
        "content": "  1. 自我介绍\n  2. 为什么tcp握手三次可以 两次不可以\n  3. 为什么挥手用四次\n  4. 如果已经建立连接，客户端挂了的话，会出现什么样的情况\n  5. 两个项目中承担了什么角色，做了什么，结果（ai、开发都问了，主要拷打项目细节，重点）\n  6. 微服务了解程度怎么样\n  7. nacos是自己部署的吗\n  8. 怎么发现问题并且解决问题的\n  9. 刚刚提到nacos断了，你是怎么解决的\n  10. redis了解哪些（自己发挥，下面关于redis的都是我自己说的）\n  11. redis持久化特性 RDB和AOF\n  12. 主从同步问题\n  13. 缓存淘汰策略（TTL LRU LFU）\n  14. redis数据结构\n  15. 大模型缺点是什么\n  16. 大模型过拟合问题\n  17. 模型性能优化问题 算法 1.链表交叉重排（我写了个算法，给他说了，他说不对，给我换了一个题） 2.链表判环（ak） 反问 1.面试评价 2.发展建议 3.是否影响后续秋招 \n\n========================\n\n美团是我的处女面，感觉寄了 [牛泪] [牛泪] [牛泪]\n\n1.24更新 约了二面，但是被捞到其他组了\n\n1.25 二面 问了大模型的优化方式\n\n1.26 OC\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578567458714398720?sourceSSR=users",
        "title": "24秋招，百度测试开发工程师三面",
        "content": "## ​前言\n\n大家好，我是chowley，今天来回顾一下，我当时参加百度秋招补录，测试开发工程师的第三面-leader面\n\n到面试开始的时间，面试官打电话表示让我等十分钟，随后跳过自我介绍，直接开面\n\n### 时间：50min\n\n### 平台：如流\n\n## 过程\n\n  1. 为什么参加补录\n  2. 先手撕，我看看面评\n  3. 手撕：读取文件内容，将出现的单词计数，返回种类、总数、每个单词和对应的数量，一开始我忘记了咋读文件，面试官降低难度了\n  4. 实习经历\n  5. 对遥控器设计测试用例？功能、性能、适用人群、多并发、特殊情况、低电量\n  6. 项目测试用例，登录注册模块咋测的？\n  7. 比赛经历，项目工作怎么分配？\n  8. 团队怎么组成，进展过程中的困难？\n  9. 任务进度的安排，有哪些时间节点？按周迭代，按天交付\n  10. 合作中出现意见不一致的情况，怎么处理？吸取多方意见\n  11. 作为队长，认为队员之间有什么改进的空间吗？先把自己做好\n  12. 出现问题，有采用什么手段和方法来解决问题？及时沟通\n  13. 实习+项目中，挑战和困哪最多的是哪一个？\n  14. 针对难题怎么处理？\n  15. 平时遇到问题，常逛的网站有哪些？国内：CSDN、知乎、51CTO、掘进、博客园、牛客等，国外：StackOverflow、GitHub、Reddit等\n  16. 最近两个月学习到了哪些新知识？软件测试基础、测试工具、自动化脚本基础、了解了QA要做哪些工作\n  17. 周末怎么安排？刷题、写博客、学习八股、做项目\n  18. 测试工具有哪些？postman、apifox-接口测试，LoadRunner、jmeter-性能测试，Fiddler-抓包工具，Jira-缺陷管理工具\n  19. 测试框架呢？Python-pytest，Java-Junit、TestNG，selenium、appnium-自动化测试框架\n  20. 反问\n\n## 总结\n\n### 难度：3/5，难度不高，只要上来别慌，把手撕做出来就行，后面都是聊天之类的，在这过程中最好体现你技术的深度和广度\n\n### 面试官专业程度：专业\n\n### 体验打分：4/5，经典leader面，何况还是美女leader*.*\n\n这是我人生的第一次大厂leader面，也为我后面准备相关面试做了铺垫，非常感谢那位面试官，我是chowley，我们下次再见！\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.** ​\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578707289272565760?sourceSSR=users",
        "title": "1.10滴滴一面（80min",
        "content": "这一面给我的感觉是，滴滴的面试官水平很高，逐步深挖直到说不出来为止。\n\n无自我介绍，上来就是共享屏幕写题。\n\n### CSS\n\n  * 手写三栏中间自适应布局-flex和浮动布局两种方法实现\n  * 浮动布局的坑点：mid元素要放到最后说说flex的各种属性\n  * flex：1的含义\n  * 上面浮动写法中，如何通过触发bfc方式实现\n  * 说说浮动和文档流的关系\n\n### JS\n\n  * 如何遍历对象上的属性\n  * 以上两种遍历方法的区别\n  * 如果我想让一些属性不可以遍历，可以怎么做\n  * 如何遍历Symbol属性\n\n![](https://uploadfiles.nowcoder.com/files/20240121/734579472_1705846066756/1704901877868-74836cc8-5dcd-4138-8294-c1c89c5f41a0.png)\n\n  * 输出题\n  * ![](https://uploadfiles.nowcoder.com/files/20240121/734579472_1705846291752/1704937494653-50db9031-05cf-4282-be6a-7d56dc7793da.png)\n  * 输出顺序\n  * 变问法 涉及变量提升等知识点（本场面试薄弱的部分）\n\n### 手写题\n\n  * 数组扁平化递归实现\n  * 数组扁平化的迭代优化\n  * 超时请求控制\n\n### 项目相关\n\n  * 性能优化\n  * 如何进行指标分解 关键指标是什么 如何量化\n  * cdn原理\n  * 用了cdn最后包的总体积不也是一样大吗 为什么这样可以优化\n  * 懒加载影响FCP、LCP吗\n  * 为什么用SSR\n  * 如果要做首屏渲染优化，为什么不直接在HTML上写一个首页的结构，一定要用SSR吗\n  * 组件库如何实现样式定制\n  * 组件库如何做的按需加载\n  * ElementPlus是怎么实现按需加载的\n  * Tree-shaking原理是什么\n\n## 反问\n\n  * 技术栈\n  * 不足 \n  * 对异步的理解不够 复杂的请求取消、retry、超时需要对异步有更深的理解（估计是G在了这里） \n  * 实习项目性能优化部分指标分解不够透彻 \n  * 对个人组件库项目不够熟悉\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578536163758055424?sourceSSR=users",
        "title": "智慧芽前端一面",
        "content": "#### PatSnap 智慧芽（62min，OC）\n\n面试官很擅长引导，体验感拉满[赞]\n\n自我介绍\n\n拎一个熟悉的项目进行展示 & 项目亮点（是什么 + 为什么 + 怎么做）✅\n\n前端工程化 ✅\n\nTS 用过哪些（`: type`）+ 补救措施 -> 自己做的 TS 笔记 ✅ -> 发散思维（谈到为什么两个项目没有使用 TS -> 业务目标 &\n技术难点的权衡，灵感来源于 @校校_拱猪仔丶(803379248) 学长之前和我共写文档的经历，感谢学长[送花]）✅\n\nVue2 & Vue3 响应式原理（开始吟唱）✅\n\nVue3 Proxy 的局限性（不到啊）❌ -> 面试官让我搜索 by 掘金 + Stack Overflow -> 为什么不用 GPT4\n直接查（忘了...）谈及自己关于 ChatGPT 的一些思考 ✅\n\nES6 新特性（开始吟唱）✅ -> 箭头函数 & 普通函数 ✅ -> Promise ✅\n\n输入 URL 到展示页面的全过程（吟唱一半发现忘记四次挥手过程）✅❌\n\nDNS 基于 TCP or UDP（猜错了...面试官和我讲解）❌\n\nHTTP 基于 TCP or UDP ✅\n\n用过哪些数据结构 ✅\n\n哈希表时间复杂度 ✅\n\n从链表末尾删除一个元素（没问完）\n\n平时有哪些兴趣爱好（扯了一堆历史 & 文学）\n\n为什么选择前端\n\n第一个项目是和学校社团一起做的还是\n\n能实习多久\n\n学校那边怎么处理\n\n反问（技术栈 & 如何参与开源 & 对我的建议）\n\n智慧芽效率很高，当晚就发 offer。﻿﻿[赞]\n\n小丑下去还要多练，沉淀去了。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578253802353045504?sourceSSR=users",
        "title": "测试工程师社招-python面试题",
        "content": "## **基础知识**\n\n**函数**\n\n函数是可重用的程序代码块，不仅可以实现代码的复用，还能实现代码的一致性。\n\nPython执行def时，会创建一个函数对象，绑定到函数名变量上。\n\n在函数内部改变全局变量的值，增加global关键字声明，nolocal声明外部函数的局部变量。\n\n    \n    \n    a = 20\n    def a():\n        b = 10\n        def inner():\n            nonlocal b  #声明外部函数的局部变量\n            print(b)\n            b = 30\n            global a    #声明全局变量\n            a = 1000\n        inner()\n        print(b)\n    a()\n    print(a)\n    \n    \n\nLocals()打印输出的局部变量（键值对的形式）\n\nGlobals()打印输出的全局变量（键值对的形式）\n\n局部变量的查询和访问速度比全局变量快，优先使用。\n\n函数的参数传递本质：从实参到形参的赋值操作1、对可变对象进行写操作，直接作用于原对象本身，比如：列表、字典等，直接修改这个对象\n2、对不可变对象进行写操作，产生一个新的对象空间，比如：数值、元祖、字符串等，系统会新建一个对象\n\n深拷贝和浅拷贝：1、浅拷贝：copy.copy()不拷贝子对象的内容，只拷贝子对象的引用2、深拷贝：copy.deepcopy()子对象的内存也全部拷贝一份，对子对象的修改不会影响源对象\n\n    \n    \n    import copy\n    def testCopy():\n        '''测试浅拷贝'''\n        a = [10, 20, [5, 6]]\n        b = copy.copy(a)\n        print(\"a\", a)\n        print(\"b\", b)\n        b.append(30)\n        b[2].append(7)\n        print(\"浅拷贝......\")\n        print(\"a\", a)\n        print(\"b\", b)\n    def testDeepCopy():\n        '''测试深拷贝'''\n        a = [10, 20, [5, 6]]\n        b = copy.deepcopy(a)\n        print(\"a\", a)\n        print(\"b\", b)\n        b.append(30)\n        b[2].append(7)\n        print(\"深拷贝......\")\n        print(\"a\", a)\n        print(\"b\", b)\n    testCopy()\n    print(\"*************\")\n    testDeepCopy()\n    \n    a [10, 20, [5, 6]]\n    b [10, 20, [5, 6]]\n    浅拷贝......\n    a [10, 20, [5, 6, 7]]\n    b [10, 20, [5, 6, 7], 30]\n    *************\n    a [10, 20, [5, 6]]\n    b [10, 20, [5, 6]]\n    深拷贝......\n    a [10, 20, [5, 6]]\n    b [10, 20, [5, 6, 7], 30]\n    \n\n传递不可变对象包含的子对象是可变的：修改可变对象，源对象会发生变化，a=(10,20,[5,6]) a[2][0] = 88 修改了源对象\n\n**参数的几种类型：** 1、位置参数，按照顺序传递形参实参一一对应，def f(a,b,c) f(1,2,3)\n2、默认值参数，默认值参数必须位于普通参数的后面 def f1(a,b,c = 10,d = 20) f1(9,8,19)\n3、命名参数，按照形参的名称传递参数，在调用的时候进行命名def f2(a,b,c) f2(c = 10,b = 20,a=22)\n4、可变参数：*param，将多个参数收集到一个元祖对象中；**param，将多个参数收集到一个字典对象中 def f3(a,b,*c)\nf3(8,9,19,20) def f4(a,b,**d) f4(8,9,name=’zmx’,age=18)\n5、强制命名参数：在可变参数后面增加新的参数，必须在调用的时候强制命名 def f5(*a,b,c) f5(2,3,4) f5(2,b = 3,c = 4)\n\nlambda表达式和匿名函数：简单的定义函数的方法，lambda函数实际生成了一个函数对象\n\n    \n    \n    f = lambda a,b,c:a+b+c\n    print(f)\n    print(f(2,3,4))\n    #<function <lambda> at 0x01397E40>\n    #9\n    g = [lambda a:a*2,lambda b:b*3,lambda c:c*4]\n    print(g)  #三个函数对象\n    print(g[0](6),g[1](2),g[2](3))\n    #使用lambda函数对字典的值排序\n    d = {'a':4,'b':1,'c':2,'d':3}\n    D = sorted(d.items(),key = lambda x:x[1])\n    print(b）\n    \n\n递归函数(栈)：自己调用自己，1、终止条件，递归什么时候结束2、递归步骤，n和n-1相关联\n\n    \n    \n    def fun(x,n):\n        if n == 0:\n            return 1\n        else:\n            return x*fun(x,n-1)\n    print(fun(3,4))\n    \n\n**字典**\n\n键值对的无序可变序列，键任意不可变，值任意数据\n\n创建：1、{}、dict()2、zip对象 dict(zip(k,v)) 3、fromkeys创建值为空的字典 dict.fromkeys()\n\n    \n    \n    k = {'name','age','job'}\n    v = {'gaoqi',18,'teacher'}\n    d = dict(zip(k,v))\n    print(d)\n    a = dict.fromkeys(k)\n    print(a)\n    \n\n访问：1、通过键访问\n2、get,不存在返回空，或指定对象3、items()所有的键值对，keys()所有的键，values()所有的值4、len()键值对的个数\n5、检测一个键是否在字典中，”name” in dict 返回true或者false\n\n    \n    \n    a = {'name': 'gaoqi', 'age': 18, 'job': 'programmer'}\n    print(a['name'])\n    print(a.get('sex','nan'))   #键不存在，返回指定的对象\n    print(a)\n    print(a.items())\n    print(a.keys())\n    print(a.values())\n    print(len(a))  #键值对的个数\n    \n\n字典元素添加、修改、删除：1、新增键值对，键已存在，覆盖旧的；不存在则新增2、update()将新字典所有键值对全部添加到旧字典上，key有重复则直接覆盖\n3、删除\n\n    \n    \n    a = {'name':'gaoqi','age':18,'job':'programmer'}\n    a['address'] = '111'\n    b = {'a':1,'b':2}\n    a.update(b)\n    print(a)\n    del(a['name'])\n    b = a.pop('age')\n    print(a)\n    print(a.popitem())#随机删除和返回该键值对\n    \n\n序列解包用于字典时，默认对键进行操作\n\n    \n    \n    s = {'name':'gaoqi','age':18,'job':'teacher'}\n    name,age,job = s\n    name,age,job = s.items()  #键值对\n    name,age,job = s.values()   #值\n    print(name)\n    \n\n面试题：统计一个字符串中每个字符的个数\n\n    \n    \n    str = 'hello,world'\n    dict = {}\n    for i in str:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] =1\n    for i in dict:\n        print(i,dict[i])\n    \n\n**元组**\n\n不可变，不能修改元组中的元素\n\n创建：1、() 可省略 2、tuple()\n\n访问：1、不能修改 2、a[1] a[:4]返回的仍是元组对象 3、sorted(tuple) 元组排序，并且返回一个新的元组对象\n\nZip:将多个列表对应位置的元素合成元组，并返回这个zip对象\n\n    \n    \n    a = [10,20,30]\n    b = [20,30,10]\n    d = zip(a,b)\n    print(list(d))\n    \n\n生成器推导式创建元组：可以通过生成器对象，转化成列表或元组，也可以使用生成器的__next__()方法进行遍历，元素访问结束之后，重新访问必须重新创建该生成器对象。T\n= (x*2 for x in range(5)) t.__next__() tuple(s)只能访问一次，第二次就空了需要在生成一次\n\n**集合**\n\n一个无序的不重复的元素序列，用花括号{}编写\n\n创建（1、s = set() #空集合 2、s= {} type(s) #dict 3、s = {3,4,1,4,3} #3,4,1 可以去重）\n\n访问（集合没有顺序没有索引 无法指定位置去访问，可以遍历）(s = {'a','b','c'} for i in s:print(i)\n\n添加、删除 s.add() s.update()参数可以是列表、元祖、字典 s.remove('a')删除不存在的会报错\ns.discard('3')元素不存在不会报错 s.clear()清空 s.pop()随机删除\n\n集合运算：s1&s2 s1|s2 交集并集差集\n\n**面试题：**\n\n集合和列表区别1、集合无序，列表有序（访问索引）2、集合元素时唯一不重复，列表元素可以重复 3、集合中的元素不可变，而列表可变 4、集合 {} 列表[]\n\n集合和字典区别1、集合无序不重复；字典有序可重复 2、集合只能存储不可变的对象，比如数字、str、元祖等 3、集合唯一 字典可重 4、集合不索引，字典可键\n\n**面向对象**\n\n面向对象和面向过程：1、都是解决问题的思维方式，都是代码组织的方式2、解决简单问题可以使用面向过程3、解决复杂问题：宏观上使用面向对象把握，微观处理上仍是面向过程\n\n类：通过类定义数据类型的属性和方法，对象是类的实例，一个类创建对象时，每个对象会共享这个类的行为（类中定义的方法），但是会有自己的属性值。\n\n    \n    \n    class Student:\n        def __init__(self,name,score):\n            self.name = name    #实例属性\n            self.score = score\n        def say_score(self):    #实例方法\n            print(self.name,'的分数是：',self.score)\n    s = Student('zmx',20)   #s是实例对象\n    s.say_score()\n    print(dir(s))   #获得对象的所有属性和方法\n    print(s.__dict__)  #对象的属性字典\n    #isinstance(对象，类型)  判断对象是不是指定的类型\n    \n\n__init__()方法：初始化创建好的对象，给实例属性赋值；不定义时，系统会提供一个默认的初始化方法；__new__()方法：用于创建对象，一般无需定义该方法；\n\nInit和new区别：1、new负责对象的创建\ninit负责对象的初始化2、new创建对象时调用，会返回当前对象的一个实例；init创建完对象后调用，对当前对象的一些实例初始化，无返回值\n\n实例属性：1、init方法中定义 2、本类其他实例方法self.实例对象名访问3、创建实例对象后，通过实例对象访问 obj = 类名（）;obj.实例属性名\n= 值 #给已有属性赋值，也可以添加新的属性\n\n实例方法：1、第一个参数self 2、调用时，不需要也不能给self传参\n\n函数和方法的区别：1、本质，都用来完成一个功能 2、方法通过对象调用 3、方法定义时需要传递self,函数不需要\n\n类对象：执行class语句时，会创建一个类对象\n\n类属性：从属于类对象的属性，也称为类变量\n\n    \n    \n    class Student:\n        company = 'sss'   #类属性\n        count = 0\n        def __init__(self,name,score):\n            self.name = name    #实例属性\n            self.score = score\n            Student.count = Student.count+1\n        def say_score(self):\n            print(\"我的公司是：\",Student.company)\n            print(self.name,'的分数是：',self.score)\n    s = Student('zmx',20)\n    s.say_score()\n    \n\n类方法：从属于类对象的方法，装饰器@classmethod 1、装饰器2、第一个参数cls，指的是类对象本身\n3、调用格式：类名.类方法名（参数列表），参数列表中不需要也不能给cls传值\n\n    \n    \n    class Student:\n        company = 'sss'\n        @classmethod\n        def printCompany(cls):\n            print(cls.company)\n    Student.printCompany()\n    \n\n静态方法：与类、对象无关的方法，和普通函数没有区别，只不过静态方法放到了类里面，需要通过类调用1、@staticmethod\n2、调用静态方法：类名.静态方法名（参数列表）3、访问实例属性和实例方法导致错误\n\n    \n    \n    class Student:\n        company = 'sss'\n        @staticmethod\n        def add(a,b):\n            print('{0}+{1}={2}'.format(a,b,(a+b)))\n            return a+b\n    Student.add(20,30)\n    \n    \n\n__del__方法（析构函数）和垃圾回收机制：用于实现对象被销毁时所需的操作，比如释放对象占用的资源；python自动垃圾回收机制，当对象没有被引用时自动调用析构方法。\n\n__call__方法和可调用对象：定义了call方法的对象成为可调用对象，该对象可以像函数一样被调用。\n\nPython方法没有重载：如果在类中定义多个重名的方法，只有最优一个方法有效。\n\n方法的动态性：可以动态的为类添加新的方法，或者动态的修改类的已有方法\n\n    \n    \n    class Person:\n        def work(self):\n            print(\"努力上班\")\n    def play_game(self):\n        print(\"玩游戏\")\n    def work2(s):\n        print(\"好好工作，努力上班\")\n    Person.play = play_game\n    Person.work = work2\n    p = Person()\n    p.play()\n    p.work()\n    \n    \n\n私有属性和私有方法（实现封装）：1、两个下划线开头的属性是私有的private\n2、类内部可以访问私有属性（方法）3、类外部不能直接访问私有属性（方法）4、类外部可以通过_类名__私有属性（方法）访问私有属性\n\n    \n    \n    class Employee:\n        __company = \"sss\"  #私有类属性\n        def __init__(self,name,age):\n            self.name = name\n            self.__age = age   #私有实例属性\n        def say_company(self):\n            print(\"我的公司是：\",Employee.__company)   #类内部可以直接访问私有属性\n            print(self.name,'年龄是：',self.__age)\n            self.__work()\n        def __work(self):   #私有实例方法\n            print(\"工作！好好工作！\")\n    p1 = Employee(\"sss\",22)\n    print(p1.name)\n    print(dir(p1))\n    p1.say_company()\n    print(p1._Employee__age)  #直接访问私有属性\n    \n    \n\n@property装饰器：将一个方法的调用变成属性调用，处理属性的读、写操作，做法不安全\n\n面试题：装饰器是什么（本质是一个函数，别的函数添加装饰器可以在不修改代码的基础上添加额外的功能）\n\n    \n    \n    class Employee:\n        @property\n        def salary(self):\n            return 30000\n    e = Employee()\n    print(e.salary)\n    print(type(e.salary))\n    \n    \n\n封装：隐藏对象的属性和实现细节，只对外提供必要的方法，通过私有属性私有方法实现封装\n\n    \n    \n    class Employee:\n        def __init__(self,name,salary):\n            self.name = name\n            self.__salary = salary\n    \n    \n        @property    #相当于salary属性的getter方法\n        def salary(self): \n            print(\"月薪为{0}，年薪{1}\".format(self.__salary,12*(self.__salary)))\n            return self.__salary\n        @salary.setter    #相当于salary属性的setter方法\n        def salary(self,salary):\n            if(0<salary<1000000):\n                self.__salary = salary\n            else:\n                print(\"薪水录入错误\")\n    e = Employee(\"zmx\",1000)\n    print(e.salary)\n    e.salary = -200\n    \n    \n\n继承：定义子类时，必须在其构造函数中调用父类的构造函数\n\n    \n    \n    class Person:\n        def __init__(self,name,age):\n            self.name = name\n            self.__age = age\n        def say_age(self):\n            print(self.name,'年龄是：',self.__age)\n    class Student(Person):\n        def __init__(self,name,age,score):\n            self.score = score\n            Person.__init__(self,name,age)\n    s = Student(\"zzz\",12,30)\n    s.say_age()\n    print(dir(s))\n    \n    \n\n1、成员继承：子类继承了父类除构造方法之外的所有成员 2、方法重写：子类可以重新定义父类中的方法，这样就会覆盖父类的方法，也称为重写\n3、mro()或者__mro__可以输出这个类的继承层次结构 Student.mro()\n\n    \n    \n    class Person:\n        def __init__(self,name,age):\n            self.name = name\n            self.age = age\n        def say_age(self):\n            print(self.name,'的年龄是：',self.age)\n        def say_name(self):\n            print(\"我是：\",self.name)\n    class Student(Person):\n        def __init__(self,name,age,score):\n            self.score = score\n            Person.__init__(self,name,age)\n        def say_score(self):\n            print(self.name,'的分数是：',self.score)\n        def say_name(self):\n            print(\"报告老师，我是\",self.name)\n    s = Student(\"张三\",17,89)\n    s.say_age()\n    s.say_score()\n    s.say_name()\n    \n    \n\n__str__()方法，用于返回一个对于对象的描述，常用于print()方法）（把对象转换成一个字符串，一般用于print方法）\n\n    \n    \n    class Person:\n        def __init__(self,name,age):\n            self.name = name\n            self.__age = age\n        def __str__(self):\n            return \"名字是{0},年龄是{1}\".format(self.name,self.__age)\n    p = Person(\"zzz\",20)\n    print(p)\n    \n\nSuper()获得父类定义：在子类中，如果想要获得父类的方法，可以通过super()来做。\n\n    \n    \n    class A:\n        def say(self):\n            print(\"A:\",self)\n            print(\"AAA\")\n    class B(A):\n        def say(self):\n            super().say()\n            print(\"BBB\")\n    b = B()\n    b.say()\n    \n    \n\n多态：同一个方法调用由于对象不同可能会产生不同的行为1、多态是方法的多态，属性没有多态 2、两个必要条件，继承和方法重写\n\n    \n    \n    class Animal:\n        def shout(self):\n            print(\"动物叫了一声\")\n    class Dog(Animal):\n        def shout(self):\n            print(\"汪汪汪\")\n    class Cat(Animal):\n        def shout(self):\n            print(\"喵喵喵\")\n    def animalShout(a):\n        if isinstance(a,Animal):\n            a.shout()\n    animalShout(Dog())\n    animalShout(Cat())\n    \n\n## 面试题\n\n**1、幂等**\n\n多次请求所产生的影响和一次请求执行的影响效果相同\n\n调用远程服务：成功、失败、超时，超时是未知的，转账超时做好幂等控制，发起重试，保证转账正常进行，又不会多转一笔（提交表单快速点击可能产生了两条一样的数据，前端重复提交）\n\n方案：超时了，先查一下对应的记录，如果成功，走成功的流程；如果失败按失败处理\n\n方案二：下游接口支持幂等，上游如果超时，发起重试即可（唯一索引、数据库主键）\n\n**2、内存溢出和内存泄露**\n\n内存溢出：内存不够，通常运行大型软件或者游戏的时候，软件和游戏所需要的内存远远超出了主机所安装的内存，这就是内存溢出\n\n内存泄露：程序申请内存后，无法释放申请的内存空间\n\n**3、进程和线程**\n\n进程：资源分配的最小单位，独立的执行环境，拥有自己的内存空间和资源\n\n线程：程序执行的最小单位，一个进程最少一个先后才能可以多个线程同时执行，共享进程的资源（通信）\n\n进程类比公司，线程类比员工\n\n**4、栈的应用** （括号匹配、函数递归调用）\n\n**5、app闪退和崩溃**\n\n手机、包、内存、第三方库、兼容\n\n包本身，内存问题（不足）、第三方库（没有容错机制）、兼容、设备故障\n\n编程错误、内存问题（内存溢出、内存泄露）程序崩溃、资源不足、第三方库（youbug,不兼容）、网络问题、数据异常、设备兼容问题、硬件故障\n\n## 编程题\n\n1、时间转秒\n\n    \n    \n    import datetime\n    #使用strptime(time,格式)将t.str解析为datetime对象\n    def time_to_seconds(time):\n        t = datetime.datetime.strptime(time,\"%H:%M:%S\")\n        seconds = (t.hour*3600)+(t.minute*60)+t.second\n        return seconds\n    print(time_to_seconds(\"10:35:40\"))\n    \n    \n\n2、秒转时间\n\n    \n    \n    import datetime\n    #使用datetime下的timedelta(seconds)函数将秒转换成时间，并且格式化\n    def seconds_to_time(seconds):\n        t = datetime.timedelta(seconds=seconds)\n        time = str(t)\n        return time\n    print(seconds_to_time(5445))\n    \n\n3、两个时间差\n\n    \n    \n    import datetime\n    #先转格式，在计算差，在total_seconds()转换秒\n    def time_diff(start_time,end_time):\n        t1 = datetime.datetime.strptime(start_time,\"%H:%M:%S\")\n        t2 = datetime.datetime.strptime(end_time,\"%H:%M:%S\")\n        diff = t2-t1\n        seconds = diff.total_seconds()\n        return seconds\n    print(time_diff(\"01:30:45\",\"02:15:30\"))\n    \n    \n\n4、统计每个字符串个数\n\n    \n    \n    s = 'hello world'\n    dict = {}\n    for i in s:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    for i in dict:\n        print(dict[i],i)\n    \n\n5、判断回文串\n\n    \n    \n    def palidrome1(s):\n        n = len(s)\n        for i in range(int(n/2)):\n            if s[i] != s[n-i-1]:\n                return False\n        return True\n    print(palidrome1(\"zmxmz\"))\n    \n    def palidrome2(s):\n        return s == s[::-1]\n    print(palidrome2())\n    \n\n7、找一个数组中最大的数\n\n    \n    \n    def func(alist):\n        n = len(alist)\n        mid_index = alist[0]\n        for i in range(0,n):\n            if alist[i]<=alist[mid_index]:\n                i+=1\n            else:\n                mid_index = i\n        return alist[mid_index]\n    \n    alist = [2,3,4,5,6,7,10]\n    print(func(alist))\n    \n\n8、冒泡排序\n\n    \n    \n    def bubble_sort(a):\n        n = len(a)\n        for k in range(n-1):\n            count = 0\n            for i in range(n - 1):\n                if a[i] > a[i + 1]:\n                    a[i], a[i + 1] = a[i + 1], a[i]\n                    count += 1\n            if count == 0:  #判断count的值是否等于0，如果等于0说明没有交换\n                    break\n    alist = [1,2,3,4,5]\n    bubble_sort(alist)\n    print(alist)\n    \n\n9、插入排序\n\n    \n    \n    def insert_sort(a):\n        n = len(a)\n        for j in range(1,n):   #两部分中的第二部分，从第二个元素开始到最后一个元素\n            i = j\n            while i>0:      #和有序列表中每个元素进行比较（从最后一个开始）\n                if a[i]<a[i-1]:\n                    a[i],a[i-1] = a[i-1],a[i]    #如果当前元素比前一个元素小，进行交换\n                else:   #否则已经是有序序列，不需要进行交换\n                    break\n                i -= 1\n    alist=[54, 226, 93, 17, 77, 31, 44, 55, 20]\n    insert_sort(alist)\n    print(alist)\n    \n\n10、选择排序\n\n    \n    \n    def select_sort(alist):\n        n = len(alist)\n        for i in range(n-1): #循环一次，找起始位置，最后一个不用   O（n）\n            min_index = i\n            for j in range(i+1,n):   #利用索引  在剩余元素中找到最小的元素    O（n）\n                if alist[j] < alist[min_index]:\n                    min_index = j\n            if min_index!=i:   #如果最小索引变了，交换元素\n                alist[i],alist[min_index] = alist[min_index],alist[i]\n    alist = [7,5,3,6,44,22,99,11]\n    select_sort(alist)\n    print(alist)\n    \n\n11、快速排序\n\n    \n    \n    def quick_sort(alist,start,end):\n        #递归退出的条件\n        if start>=end:\n            return\n        mid  = alist[start]\n        low  = start\n        high = end\n        while low < high:\n            #由右往左   alist[high]>mid  则high-1\n            while low < high and alist[high] >mid:\n                high -= 1\n            alist[low] = alist[high]\n            #由左往右  alist[low]<mid  则low+1\n            while low < high and alist[low] <mid:\n                low += 1\n            alist[high] = alist[low]\n        #将基准数放置在对应的位置\n        alist[low] = mid\n        #比基准数小的即左边的数据，要重复调用quick_sort()\n        quick_sort(alist,start,low-1)\n        #比基准数大的即右边的数据，要重复调用quick_sort()\n        quick_sort(alist,low+1,end)\n    alist=[54, 226, 93, 17, 77, 31, 44, 55, 20]\n    quick_sort(alist,0,len(alist)-1)\n    print(alist)\n    \n\n12、归并排序\n\n    \n    \n    def merge_sort(alist):\n        if len(alist)<=1:\n            return alist\n        num = len(alist)//2\n    \n        left = merge_sort(alist[:num])\n        right = merge_sort(alist[num:])\n    \n        return merge(left,right)\n    def merge(left,right):\n        l,r = 0,0\n        result = []\n        while l<len(left) and r < len(right):\n            if left[l]<right[r]:\n                result.append(left[l])\n                l+=1\n            else:\n                result.append(right[r])\n                r+=1\n        result += left[l:]\n        result += right[r:]\n    \n        return result\n    \n    alist = [54,26,77,17,44,55]\n    sorted_alist = merge_sort(alist)\n    print(sorted_alist)\n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578244212882255872?sourceSSR=users",
        "title": "24校招，得物测试开发工程师一面",
        "content": "## 前言\n\n大家好，今天我来回顾一下之前参加的得物-测试开发工程师第一次技术面试\n\n面试官上来跳过实习和项目经历，直接开始八股拷打，最喜欢这种简单直接的了，太好玩了\n\n## 过程\n\n  1. 自我介绍\n  2. 用的什么语言？ Python，来吧您内\n  3. Python是什么类型的语言？ **跨平台、可移植、可扩展、解释型、面向对象的动态语言**\n  4. Python中常见的内建的数据结构有哪些？ list、set、dict、元组\n  5. 列表和元组有什么区别？ 列表像队列，先进先出，对象可以修改，元组的元素不能修改\n  6. 列表长度可变吗？元组呢？ list可变，元组不可变\n  7. 取列表倒数第三个元素？ list[-3]\n  8. Python异常处理有哪些关键字？ try-except-else\n  9. 如果需要无论是否有异常，都触发的语句呢？ 放在finally里面\n  10. 封装异常类，怎么实现？ 继承Exception，实现子类\n  11. Python支持多继承吗？ Python可以，Java不行\n  12. Python内存管理机制？ 引用计数\n  13. Python装饰器？ 在现有函数上进行补充，嵌套\n  14. 多表查询，有哪些连接方式？ 左右连接、外内链接、union\n  15. MySQL里面的char和varchar()有什么区别？ char不可变，varchar上来设置一个最大范围，不使用就释放，长度范围、使用效率\n  16. MySQL的事务？ ACID，背就完了\n  17. MySQL里面inoodb是怎么实现的？ 结构太复杂，大家自行搜索吧\n  18. 哪些字段需要设置索引？ 非null、频繁查询、用于连接、作为条件查询\n  19. 哪些情况下索引失效？ 未遵循最左匹配、使用了函数、计算操作、like包含%、使用or、in或order by使用不当\n  20. Redis里面有哪些数据类型？string，hash，list，set、zset\n  21. 为啥查询效率比MySQL高？ Redis建立在内存，MySQL建立在硬盘\n  22. 进程和线程有什么区别？ 进程是资源分配的最小单位，线程是CPU调用的最小单元，线程共享一个进程资源\n  23. 线程有哪些状态？ 初始化、就绪、阻塞、运行、等待、终止\n  24. Python中怎么实现多线程？\n  25. 用Python那个包？ thread\n  26. 线程锁？ Python-GIL、Java-synchronized、reentrantLock、volatile（保证变量的可见性）\n  27. 测试工具？ Postman、Solopi、Fiddler、Jira\n  28. http接口的请求报文结构体，包含哪些内容？ 报文协议及版本（请求方法、协议版本）、状态码、响应报文头（编码格式、数据类型、存活时间、数据长度、携带内容）、报文体\n  29. token存储在哪了？ cookie-tokenId\n  30. body里面还是head里面？ head \n  31. JWT的结构？header、payload、signature\n  32. 用postman请求接口，登录信息，身份验证过程？ 用户发送登录请求-系统验证-系统返回token-客户端存储-服务端验证token-返回数据\n  33. 为啥选测试开发？\n  34. 反问\n  35. 流量回放、测试工具\n  36. 技术栈-Python、Java、golang、Vue、react\n  37. 简历增强方面，实习经历大于在校项目，突出经历重点\n\n## 总结\n\n一面的面试官是属于那种纯问八股的，上来啥实习项目经历都没问\n\n别说没用的，八股不过关就是进不了大厂，使劲背吧\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n**欢迎点赞、收藏、评论，it's important for me.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578224999820013568?sourceSSR=users",
        "title": "测试工程师社招-测试面试题",
        "content": "## **测试思维**\n\n**一、登录**\n\n功能：1、输入正确的用户名、密码 2、为空校验，密码为空或者用户名为空 3、长度校验，字符校验，用户名和密码最大长度 4、特殊字符，用户名和密码特殊字符限制\n5、错误校验，用户名或密码错误（错误的次数） 6、验证码，图形文字是否清晰、短信验证码，验证码一致、错误次数\n7、登录后能否正常跳转，是否有token、cookie等身份令牌\n\n界面：1、用户名和密码输入框、登录按钮是否同需求一致 2、密码明文展示，大写键开启后是否提示 3、是否记住密码勾选项，勾选后token时效\n\n兼容：1、win:chrome、firefox、edge 2、mac:safari、chrome、firefox\n\n性能：1、打开登录页面的时间、跳转首页的时间是否在要求的时间 2、高并发场景能否正常登录，系统会不会崩，登录的时长\n\n安全：1、生成的cookie、token是否唯一，token时长限制 2、多端登录，是否强制退出 2、密码传输存储是否加密 3、接口是否有校验\n4、多端登录，多机登录\n\n**二、搜索（高频）**\n\n功能：1、搜索框输入提示，是否暗文本，点击是否清空 2、模糊匹配和精准匹配，模糊左匹配右匹配，匹配到的部分是否有UI提示 3、长度限制，最大不能超过多少\n4、为空搜索，展示什么（链接：能正常跳转页面、外网不能访问是否有提示）5、图片搜索能否识别，访问图片是否有权限，读取部分照片还是全部照片\n6、如何搜索，失焦或者搜索按钮或者回车，同步更新内容 7、敏感词汇是否有限制 8、是否支持剪切编辑\n\n界面：\n\n兼容：\n\n性能：\n\n安全：无痕浏览、有痕浏览，是否加密\n\n**三、微信红包**\n\n功能：单个红包：1、红包金额的输入：只能输入数字，0.01-200之间，底部展示的金额是否正确，小数点位数限制，输入错误的金额比如0、300的是否有相应的ui提示\n2、备注表情包红包封面：正常的增删修改（可以为空、可以填写以及填写后能否红包标题、封面、详情表情包）\n3、支付：能否跳转收银台、余额不足是否有提示以及是否有其他银行卡的选项、指纹密码能否正常支付、支付错误的次数限制、支付后能否正常扣款以及短信提示、不想支付了是否可以退出\n多人红包：1、红包选项卡（普通红包、拼手气红包）2、红包的数量，最多不能超过群内人数，最少不能为0 3、红包的金额，最少每个0.01\n、红包的金额是否定量，相等还是随机，随机的话红包的金额是否相等，红包金额加起来等于总金额\n3、抢红包：自己发的自己能不能抢、比如三个红包三个人都能抢，第四个人抢不到，已经抢过的不能在抢了，最后一个红包多人抢，先请求的先拿到锁的先抢到\n\n界面：\n\n兼容：\n\n性能：高并发场景下抢红包，抢红包的时长、高并发多人抢红包（先拿到锁的先抢到、不会让红包一直抢）\n\n安全：\n\n**四、购物车（高频）**\n\n功能：1、没登录时加购，跳转登录 2、登录：1、能否正常加购、修改选项和数量、删除 2、购物车数量限制，最多不能超过多少个\n3、加购的商品：店铺、标题、图片展示，店铺过长如何省略展示 4、价格总计：勾选商品金额展示、优惠券淘宝币等 5、全选功能：全选汇总支付、全选删除\n6、下架商品、涨价、降价、优惠是否提示 7、支付：能否正常跳转收银台，余额不足是否有其他选项，支付成功能否正常扣款，支付失败能否在预付款列表 8、地址管理\n9、凑单功能（凑完单之后实付金额的展示）\n\n界面：\n\n兼容：android、ios等\n\n安全：\n\n性能：高并发支付的时间、同一个用户同一个订单请求多次（只有一个成功）\n\n**五、签到场景** （第二天可以补签、签到七天有礼物、日活一千万）\n\n功能：1、能否正常签到、签到的时间展示、签到按钮变化、签到前后功能业务是否正常使用 2、签到后是不是还能签到，第一天没签到能否补签\n3、签到七天礼物，第八天能否继续签到功能正常使用、签到七天任何一天中断无礼物\n\n界面：\n\n兼容：\n\n性能：1、根据具体性能需求设计方案，在有限的环境小批量模拟一千万数据接口的响应时间、数据库读写、cpu内存的负载等\n2、高并发场景，系统会不会崩，能否正常签到\n\n安全：\n\n**六、视频播放器**\n\n功能：1、视频正常播放、暂停 2、视频封面是否正常 3、上下视频切换能否正常 4、音量的大小 5、视频最大化、最小化、横屏、竖屏\n5、播放的顺序：顺序播放、随机播放，能否自动播放\n\n界面：\n\n兼容：\n\n性能：\n\n安全：\n\n**七、短信验证码**\n\n功能：1、输入框：为空校验、长度校验、区号校验、字符校验\n2、发送按钮：正常点击成功后发送、时间范围（60s倒计时），按钮是否置灰，发送次数限制（同一手机号）3、短信文案：标题、模板、多次无重复随机\n4、验证码输入：输入正确的验证码、错误的验证码、超时的验证码等\n\n界面：\n\n兼容：\n\n性能：\n\n安全：1、手机号是否传输加密 2、短信轰炸，是否次数无限制\n\n**八、微信点赞、微信朋友圈**\n\n微信点赞：1、点赞、取消赞、重复点赞 2、点赞后能否在点赞、评论 3、点赞后共同好友能否看到、能否消息提示 4、点赞的头像和昵称是否匹配\n5、是否按照时间显示 6、已删除的好友点赞和评论如何展示\n\n微信朋友圈：1、能否正常的发、删、查看朋友圈 2、图文版、文字版能否正常使用 3、可否多次发朋友圈、最多次数限制 4、内容限定，黄赌毒传销等不能过审\n5、屏蔽功能、被屏蔽功能 6、文字次数限制、图片个数限制\n\n**九、App白屏**\n\n1、手机有问题，重启看下 2、app打包有问题（闪退、白屏）3、第三方报错，长时间没有检测到，没有容错机制\n\n**十、充值、提现、转账等**\n\n功能：1、创建订单的字段是否一致（信息字段，类型）2、到资金账户、银行账户，银行账户的银行卡号（常用收款人、提现人）3、金额：为空校验、字符校验（数字）、数额限制位数限制（不能超过钱包余额、校验是否有锁定的金额）4、算费展示：谁是收款人谁是付款人，算费配置，没有配置算费是否有提示、配置了的是否符合规则\n5、金额预览：实际转出、提现金额\n6、场景：100块钱，创建订单锁定金额（取消后能否退还）7、重复提交：页面重复点击、接口重复调用（唯一：outtradeno随机数）8、接口校验时：过期时间expiretime默认市场、正常、过期后；下单时长，不能小于当前9、银行返回信息：正常、失败、未知10、支付后业务变化：回调后是否更新订单状态（三层订单），支付失败是否有提示（余额不足、卡信息错误、用户取消等）；订单状态（不同阶段状态变化是否正确）、退款和取消订单、支付异常（网络断开、中断处理能力等如何提升质量保障）、日志和监控（异常追踪）\n\n安全：1、接口测试（金额的多种） 2、传输字段是否加密 3、token身份识别\n\n界面：\n\n兼容：\n\n性能：\n\n（只要是支付，1、幂等性（前端防抖、后端防抖，同一个时间同一个订单对同一个token同一个no）2、回调金额一致\n3、高并发场景（token加锁）4、涉及第三方渠道，会考虑测试方案，测试环境配置mock模拟回调、主动查询等）5、因为第三方渠道回调的不一定及时，回调超时会去主动查询，设置延时队列（主动关单））\n\n**十一、社交网络测试点（大致思路）**\n\n社交主页（个人模块）：图片（访问权限）、标签、基本资料等、三重认证（学历、工作、身份）、预览\n\n聊天（匹配）：一对多、多对多（没有次数限制）；访客权限（充钱后可看）单匹配（不可以聊天，可以充钱聊天比如开通小纸条）、双匹配（双方匹配，可以聊天，聊天内容限制，黄赌毒，交换微信等信息加密和权限；拉黑后或者取消匹配后不可聊天；聊天记录漫游多少天），注销用户（单向，不可聊天\n---注销用例15天内保留用户信息）；消息提醒（实时提醒，微信公众号提醒）\n\n推荐机制：同城、同行、同学历、喜欢的类型精准匹配（充钱后曝光主页的推荐机制，推荐优势点）\n\n支付、vip：（包月、包年、包季）开通后什么权限--什么样的业务变化；支付失败、支付成功（支付渠道）\n\n易用：环节过于复杂、认证过于繁琐、界面不友好等\n\n兼容：小程序、winmac、androidiosipad\n\n安全：聊天的内容（涉嫌诈骗，诈骗识别索要银行卡号金额等；同意交换微信前无权访问）\n\n性能：高并发场景、日活几千万\n\n**十二、直播测试点**\n\n功能：直播预告、创建关闭直播（实名认证）、进入退出直播（用户进入是否提示）、访客聊天消息（消息字数限制、内容限制）、直播内容（限制）、访问人数、弹幕（滚屏）、直播下单场景（如何抓取的关键词）、直播信息是否同步（实时）、礼物等、音质是否延迟失真、画面清晰度、断电断网视频重连、前后台切换、UI界面（访问人数、礼物大小、消息滚屏等）\n\n直播结束后回放：回放的视频能否正常查看、倍速、回放（下单是否有效）、回放有效期\n\n推送给哪些人群（已关注、经常看）、被举报\n\nUI界面：\n\n兼容：\n\n性能：（首次是否秒开，画面是否流畅、多人同时在线留言、进入房间的接口压测、多人同时在线刷礼物抢红包等，某一时刻同时下单）\n\n易用：\n\n弱网：\n\n## 其他面试题\n\n**接口测试需要关注什么？**\n\n1、接口文档，接口信息（url、请求方式、数据类型、请求体等）\n\n2、分析正向、逆向场景，编写接口测试用例，正向产生什么结果，逆向返回什么样的错误码\n\n3、接口多参、少参、为空、长度等校验，参数之间的关联关系\n\n4、同一个接口请求多次，唯一标识，比如：api创建订单outTradeNo随机数每次请求不能重复\n\n5、时间字段，比如：outTradeTime小于当前时间，expireTime过期时间，过期后打不开连接\n\n6、接口返回的状态码、错误码\n\n7、接口请求后的业务变化，跳转什么页面，新增用户后发送邮箱、数据库增加日志（注销冻结状态，不能出金入金）\n\n**为什么做接口测试？**\n\n1、安全性测试，对后端接口做统一的校验，防止有人通过接口请求\n\n2、接口参数多样，比如金额，页面上会限制输入，而接口可以传入一些负数、大金额等\n\n3、完成手工无法完成的测试，子系统的互联，比如：WMS自动化仓，自动化部分状态流转\n\n4、更快速，大批量创建数据；更高效，回归测试\n\n**多接口如何串联？**\n\n比如提现场景：1、登录后拿到token，提取为全局变量\n2、填写提现的信息创建订单，拿到订单id作为回调接口的入参（提取json）3、银行返回的状态码和金额增加断言，一致则调取提现完成订单创建\n4、数据库校验是否正确提现\n\n**app测试**\n\n(我主要做B端，C端的面试题都是临时找的，能说上思路就行)\n\n1、android ios区别（登录ios有appleid；兼容android20多种；android操作系统版本更多；android可以降级；下载渠道）\n\n2、app测试注意点（跟web端区别，安装卸载更新（回归），权限（读写手机数据），切换应用（前后台切换、锁屏）、网络）\n\n3、app性能怎么做（android studio本身检测cpu 内存）\n\n4、覆盖更新（尽可能不影响用户态）\n\n**性能测试**\n\n28原则：百分之八十的用户操作集中在百分之二十\n\n关注：硬件配置cpu、内存 数据库读写、接口响应时间、吞吐率、吞吐量\n\njmeter:创建线程组，http请求、结果树、设置每秒多少线程\n\n策略：哪几种压测、压测的目的、每秒多少个线程\n\n基准测试（单接口）\n\n复杂场景（，，最后统一支付，同时结算）\n\n疲劳测试（高并发，能承受百分之八十，长时间高位运行，会不会崩）\n\n策略：会询问线上一千万，测试环境打不到一千万，如何去模拟（比如：测试环境改到五百万，以小观大，尽可能去模拟线上）\n\n**charles map用法**\n\nmap local指定请求重定向到本地文件 1、save response 2、map local choose文件 3、请求 修改后的数据\n\nmap remote 原+重定向的请求\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577998801860902912?sourceSSR=users",
        "title": "华为od 面经",
        "content": "### 华为od的具体情况、适合人群、笔试面试流程等可以参考：\n\n[这你也要和谐啊？](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F633562474%3Futm_psn%3D1732164620226453504)  \n\n### 个人情况：\n\n23毕业，24一战跨考ustc，觉G。\n\n211本，目标院校。\n\n### 知识储备：\n\n仅限408\n\n用leetcode刷过408排序算法\n\n0项目经验\n\n### 时间线：\n\n23.12.27 投的简历。当时啥也不会啥也不知道，听入职的同学说接受转码，就想着反正试试。\n\n24.1.7\n机试。一C姓站有题库；说是现在主考C卷，所以对着刷就行。两道100分题一道200分题。我大概23.12.30才开始刷题，到机考一共刷了11题（没别的语言基础，好多时间都花在弄懂C的输入输出处理、ide的配置和调试上面）。不过抽的题目都简单，大概是100+65+150过了（目标院校只要150分，所以做完第一题后面就没纠结了（机试要准备本地ide环境！当时以为直接可以用在线调试就没搞，考的时候瞪眼法+printf来debug太搞心态了）。\n\n24.1.10\n性格测评。嗯，建议pc完成。做之前有了解过，听说真的有挂很多人；但是没找到免费的题目；最后测试的时候还是汗流浃背了。有条件推荐还是做一下感受感受的好。立清楚人设再去代，不知道时间又没有影响，说是不限时但建议25min，我估计做了一个多小时。\n\n面试给拖了一周。\n\n24.1.16 资格面。问了点在校情况，主要就是说明考研有408四门基础，有点coding能力。问了代码量，哈哈哈这个真没有。\n\n24.1.19\n技术一面、二面。主打一个一问三不知。引用一下二面小姐姐结束时候的话：“咯咯咯，不要气馁，至少你代码写出来了”[废了]。一面手撕回文数；二面手撕滑窗。完完全全简单题，但是犯蠢了好几波。我简历上写了webserver项目、mysql、c++凑数，一面webserver没答上来，面试官直接去问数据结构和计网了；二面被按着简历问了一遍[废了]。好在手撕都勉强是过了。\n\n面试 | #webserver项目整理#（站内\n\n24.1.21 主管面。\n\n  \n\n通过了。d1，基本工资12k。总包19+。\n\n\\---\n\n最后插播广告\n\n不清楚别人，头一回应聘，感觉负责我的这个老哥人是挺好的，啥不会的不懂的基本都是问他听他怎么说。年底前有hc，机试通过点击就送；base杭州。在冲业绩所以放心打扰（冲绩效但至少很负责。有兴趣可以cue我或者看评论\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577966504298242048?sourceSSR=users",
        "title": "24秋招，帆软测试开发工程师一面",
        "content": "## 前言\n\n大家好，我是chowley，今天来回顾一下，我当时参加帆软测试开发工程师的技术面试\n\n### 时间：55min\n\n### 平台：腾讯会议\n\n## 过程\n\n  1. 自我介绍\n  2. 实习经历\n  3. 为啥选择测试岗\n  4. 实习中的主要收获是什么？\n  5. 印象比较深的bug？权限相关\n  6. 收到需求之后，你是怎么做拆解的？测试计划-测试用例-进行测试\n  7. 测试用例包含哪些方面？后端验证方面\n  8. 持续集成？\n  9. 是放在web容器里面吗？\n  10. 有参与脚本工具的研发和维护吗？\n  11. 代码走读是怎么做的？\n  12. code review咋做的？有发现什么问题吗？\n  13. postman是干啥的？用它做了什么？接口API测试，持续请求类似压力测试\n  14. http的请求包里有哪些内容？\n  15. 响应包有哪些内容？\n  16. 状态码？1**- information，2**- success，3**- redirect，4**- client error，5**- server error\n  17. 你在抓包过程中有遇到什么困难？请求失效时间，重试时间\n  18. fiddler和postman的差别场景\n  19. tcp和udp的区别？\n  20. 安全不安全你知道啥意思吗？ssl/tls\n  21. 项目的后端优化也是你来做的吗？\n  22. Java多线程的优化咋做的？\n  23. 值传递和引用传递的区别？\n  24. error和exception的区别？\n  25. arraylist和vector的区别？\n  26. Java用的咋样？为啥转python？\n  27. 用python做的啥项目？\n  28. 用python连接数据库的过程？jdbc不太了解\n  29. python多线程用的模块，可以做的操作？\n  30. 线程的生命周期\n  31. 在一个进程下开多个线程和开多个子进程的区别？\n  32. 用过Linux吗？常用命令\n  33. 看日志的命令\n  34. 访问一个web网站，都发生了什么？\n  35. 测一个web系统，访问不了怎么排查？\n  36. 压力测试咋做的？要关注哪些点？\n  37. 怎么监控服务器的性能参数？top，这个当时没听清。。说错了\n  38. 内存占用异常的情况？\n  39. 实习项目中比较有成就感的时刻？\n  40. 在项目中有发生过分歧吗？\n  41. 有给leader有什么反馈吗？改进建议？\n  42. 聊一下学校的项目，遇到的困难？\n  43. 怎么改进？怎么协调？\n  44. 队长的职责是如何获得？\n  45. 团队协作中有遇到什么障碍吗？\n  46. mysql主要用到的语句\n  47. 日常学习的途径\n  48. 反问\n\n## 总结\n\n### 难度：4/5，帆软的技术面只有一次，所以你的每次技术表现都可能是唯一的机会，不确定性很大，同样也考验一个人在关键时刻的承受能力\n\n### 面试官专业程度：专业，老乡小姐姐*。*\n\n### 体验打分：4/5\n\n这次的面试还是给了我很大的启发，让我真的深入去思考我是为什么选择这个工作，我在过去的经历是否真的有意义，这对我帮助很大，期待继续流程！\n\n我是chowley，我们下次再见！\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578217219994165248?sourceSSR=users",
        "title": "测试工程师社招-计网面试题",
        "content": "（ps:社招对计网的面试题较少，无非是三次握手四次挥手，HTTP状态码等，如果是网安方向建议去专门学习底层原理和测试方法）\n\n**打开一个网址url中间发生了什么**\n\ndns解析（递归、重复）；tcp连接三次握手；发送http请求；服务器处理请求；浏览器解析并渲染页面；连接结束\n\n**常见http状态码**\n\n200成功\n\n404 找不到页面\n\n500 内部服务器错误\n\n**http和https区别**\n\nhttp协议运行在tcp上，明文传输；https以ssl为安全基础，提供数据加密和身份认证，更安全\n\nhttps比http耗费更多的资源，相应速度也慢\n\nhttps和http完全不同的连接方式，https端口号443 http端口号80\n\nhttps通常不免费\n\n**四次挥手等2mls的原因**\n\n服务器端最后一次发送FIN关闭请求之后，客户端向服务端发送确认请求报文需要1msl的时间，如果服务器端没有收到确认请求的话它会再次发送一个FIN请求，也需要1msl的时间，因此如果2msl之后没有收到服务器端发送的关闭请求，即为已经关闭。\n\n**为什么三次握手、四次挥手？**\n\n三次握手：第一次握手，如果服务端接收到了客户端发送的请求，那就说明客户端发送能力没问题；第二次握手，如果客户端接受到了服务端的确认和请求，那就说明服务端的接收能力没问题以及发送能力没问题但是两次握手它没有保证客户端的接收能力没问题，所以第三次握手，如果服务端接收到了客户端的请求，那才能就说明客户端接收能力没问题。\n\n四次挥手：客户端发送了关闭请求表名客户端不再发送数据了，但是服务端可能还有数据要发送，发送数据之后在关闭请求\n\n补充：\n\n握手的目的是为了序列号seq一致，而下面两个握手要么做不到序列一致，要么多此一举\n\n两次握手：客户端发送请求，服务端收到请求并返回一个请求和确认，只有客户端知道序列号，服务端不知道，不可能达成序列号一致，不能保证通信的可靠性\n\n四次挥手：客户端发送请求，服务端收到请求并记录到本地命名为服务端的seq,服务端发送请求和确认请求给客户端，客户端收到后再发送一个确认请求给服务端。由此可知，第二步和第三步其实可以合并起来。\n\n总结:tcp传输是双向的，每个方向的通道建立都需要一次SYN和ACK,即四次握手，但是中间两次是可以合并的并且合并后延迟更低，所以使用三次挥手。而两次握手只能建立一个单方向的通道。\n\n补充：\n\n三次握手\n\n第一次握手：客户端发送一个SYN数据包到服务器，并等待服务器确认；第二次握手：服务器收到后向客户端发送一个确认包SYN+ACK；第三次握手：客户端收到后，向服务器发送确认包ACK\n\n四次挥手\n\n第一次挥手：客户端发送一个FIN包申请断开连接，等待服务器确认\n第二次挥手：服务器发送一个ACK包，表示接受到关闭请求，此时服务器会检查是否还有会处理完的数据\n第三次挥手：服务器有未处理完的数据会继续处理，处理完毕后会向客户端发送一个FIN包，表示可以断开连接\n第四次挥手：客户端收到服务器的FIN包，回复一个ACK包表示断开连接\n\n**cookie、session、token区别**\n\n用户第一次登陆，服务器会创建一个session生成一个sessionid,sessionid保存在cookie中返回到客户端保存在浏览器中，客户端每次发送请求都会把这个值带到服务器，做一个鉴权和会话的跟踪或时效;Token:每次登陆会产生一长串随机字符串，一般放在body里面，都是服务器产生的\n\n**Get和post区别**\n\n1、请求数据：get url通过？分割参数 通过&连接 不安全；post 请求体（多种不同的数据类型）\n\n2、get用来获取 读；post用来修改 读写；\n\n3、最大：get 2k 只接受ascii；post理论无限制\n\n4、get,一个tcp数据包（header data）--200;post，两个tcp数据包 先header 100(continue) data\n200(ok)\n\n5、get 主动缓存；post 手动\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577919560188174336?sourceSSR=users",
        "title": "即时设计前端实习一面-1.19",
        "content": "  1. 项目问题\n  2. 受控/非受控组件\n  3. 讲一讲SSR\n  4. OSI七层模型\n  5. 二叉树前序后序遍历\n  6. 除了基本的数据结构还了解哪些\n  7. 防止CSS污染的策略\n  8. 讲输出和引用类型存放顺序\n\n    \n    \n    let obj1 = new Object();\n    let obj2 = obj1;\n    obj1.name = \"名字1\"\n    obj2.name = \"名字2\";\n    console.log(obj1.name); \n    \n\n  9. 讲输出\n\n    \n    \n    console.log(1)\n    \n    setTimeout(function() {\n      console.log(2)\n    })\n    \n    new Promise(function (resolve) {\n      console.log(3)\n      resolve()\n    }).then(function () {\n      console.log(4)\n    }).then(function() {\n      console.log(5)\n    })\n    \n    console.log(6)\n    \n\n  10. 讲输出\n\n    \n    \n    var names = 'windowPerson'\n    let person={\n      names:'person',\n      sayName(){\n        console.log(this.names)\n      }\n     }\n     \n     function say(){\n        let fun = person.sayName\n        fun() \n        person.sayName() \n     }\n     \n     say()\n    \n\n  11. 写题 使用二分优化\n\n给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n面试体验很好 面试官人也很有意思 受益匪浅[冲鸭]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577915405956554752?sourceSSR=users",
        "title": "合并两个有序数组——面试算法",
        "content": "题目：\n\n// 88. 合并两个有序数组\n\n// nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n\n这题应该也可以用别的方法去做，例如快慢指针\n\n我这里用了最简单的倒序比大小方法，挺高频的，面试问过好几次\n\n    \n    \n    package main\n    \n    import \"fmt\"\n    \n    func main() {\n    \tnums1 := []int{1, 2, 3, 0, 0, 0}\n    \tnums2 := []int{2, 5, 6}\n    \tmerge(nums1, 3, nums2, 3)\n    }\n    \n    func merge(nums1 []int, m int, nums2 []int, n int) {\n    \t// 倒序\n    \tleng := len(nums1) - 1\n    \tm--\n    \tn--\n    \tfor m >= 0 && n >= 0 && leng >= 0 {\n    \t\tif nums1[m] > nums2[n] {\n    \t\t\tnums1[leng] = nums1[m]\n    \t\t\tm--\n    \t\t\tleng--\n    \t\t} else {\n    \t\t\tnums1[leng] = nums2[n]\n    \t\t\tn--\n    \t\t\tleng--\n    \t\t}\n    \t}\n    \tif n >= 0 {\n    \t\tnums1[leng] = nums2[n]\n    \t\tn--\n    \t\tleng--\n    \t}\n    \tif m >= 0 {\n    \t\tnums1[leng] = nums1[m]\n    \t\tm--\n    \t\tleng--\n    \t}\n    \tfmt.Println(nums1)\n    }\n    \n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578211876450942976?sourceSSR=users",
        "title": "测试工程师社招-mysql面试题",
        "content": "**一、关于查询**\n\n1、distinct删除重复行\n\nSelect distinct 列名 from 表名;\n\nCount(distinct device_id) 聚合函数\n\n**面试题mysql有哪几种方式去重** :1、distinct，对所有列进行去重2、group\nby，对指定列进行分类，去重2、union，将两个或者多个语句合并进行去重4、inner join将两个或者两个表连接起来，获取某一列去重的结果5、not\nin根据另一个查询结果过滤当前查询结果\n\n2、别名，修改显示的标题\n\nSelect name ‘s_name’ from stu;\n\nSelect name as s_name from stu;\n\n3、条件查询，多个条件可以用and或or连接，union all连接两个查询不去重\n\nSelect name from stu where name = ‘zmx’ and sex = ‘female’;\n\nSelect device_id,gender from user_profile where university = ‘aaa’ union all\nselect device_id,gender from user_profile where gender = ‘male’;(同一个表两个查询结果并集)\n\n4、比较搜索条件\n\n<>= != !> !<\n\nSelect * from person where age<23;\n\n5、返回搜索条件\n\n在范围之内：select * from stu where age between 10 and 20;(闭区间)\n\n不在范围之内：select * from stu where age not between 10 and 20;\n\n多个区间：\n\nCase\n\nWhen age>=25 then ‘25+’\n\nWhen age>=20 then ‘20-24’\n\nWhen age<20 then ‘20-’\n\nElse ‘其他’\n\nEnd as age_cut\n\n案例：\n\nSelect device_id,gender\n\nCase\n\nWhen age>=25 then ‘25+’\n\nWhen age<25 or age is null then ‘25-’\n\nEnd as age_cut\n\nFrom user_profile;\n\n6、in,只要匹配到括号里面任何一个值就有查询结果\n\nSelect * from stu where id in(1,2,3,4……)\n\nSelect * from stu where id not in (1,2,3,4……)\n\n7、模糊查询like\n\n%表示0个或者多个字符，_表示一个字符\n\nSelect * from stu where name like ‘z%’;\n\nSelect* from stu where name like ‘_mx’;\n\n字符串截取：substring_index(profile,’,’,3)\n\n案例：select substring_index(substring_index(profile,’,’3),’,’,-1) as\nage_cut,count(device_id) as number from user_submit group by\nage;(关键词：每个年龄group by，先截取前半部分在截取后半部分)\n\n8、涉及空值的查询\n\nSelect * from person where age is null;\n\nSelect * from person where age is not null;\n\n9、聚合函数\n\nCount(*)：统计表中元祖的个数，不忽略null\n\nCount(列名)：统计表中某个列有多少条记录，忽略null\n\nSum avg max min 忽略null值\n\n10、limit [start,] nums：默认从0开始计数，总共要查询几行\n\nSelect * from person limit 4,1;(只查询第五行)\n\nSelect * from person limit 2,3;(从第三行开始，查询三行)\n\n11、group by having分组查询,having可以包含聚合函数，where不可以\n\nSelect sex,min(age) from peson group by sex;(根据性别查看最小年龄)\n\n**面试题：** Select name,min(score) from stu group by name having\nmin(score)>80;(找出表中分数大于80的名字名字有重复的，name分组，每个名字下分数的最小值大于80)\n\nSelect * from person group by name having age<23;（年龄小于22的）\n\nSelect * from sc group by id having sum(score)<600;(总成绩小于600)\n\n12、排序，默认升序\n\nSelect * from person order by id desc|asc;\n\nSelect * from person order by gpa desc,age desc;(分别排序并组合)\n\n**面试题-sql语句执行顺序:** from表、join连接表、where、group by(聚合函数，然后having)、\n然后执行select语句进行筛选，最后去除重复的数据distinct、数据进行排序order by、limit结果限定\n\n**二、mysql中的函数**\n\n1、字符串函数\n\nLength:字符串字节长度，中文占两个字节，比如：select id,length(name) as ‘姓名长度’ from student;\n\nChar_length:字符串字节长度，中文占一个字节，比如：select id,char_length(name) from student;\n\nMid:截取，从某一个位置获取某个长度的字符，比如：select id,mid(name,2,1) as ‘m_name’ from\nstu;(2为开始位置，最小值是1，1位要截取的长度)\n\nRound:实现四舍五入，比如：select round(avg(age),3) from stu;(age保留三位小数)\n\nLeast:可以求最小的数字 least(1,2,3,4,5,6)\n\nGreatest:可以求最大的数字 greatest(2,1,4,5)\n\n2、日期和时间函数\n\nNow():当前日期时间\n\nCurrent_date():当前日期\n\nCurrent_time():当前时间\n\nTo_days(now()):日期转换成总天数\n\nDayofyear(now()):该年已过天数\n\nWeek():当前日是第几周\n\nDATEDIFF()：查看某一段时间的天数，比如：select datediff(end_date,start_date) as days from\norders where start_date>=”2023-11-28” and end_date<=”2023-12-19”;\n\n3、控制函数\n\nif有三个函数，第一个参数为空输出第三个参数，否则输出第二个参数\n\nSelect if(null,’你好’,’你不好’)\n\nifnull有两个参数，第一个为空输出第二个，否则输出第一个\n\nSelect ifnull(null,’你好’)\n\n**三、表连接，多表查询**\n\n内连接：只有匹配到的情况下才会返回结果值\n\n第一种：select sc.grade,stu.sname from sc,stu where sc.sno=stu.sno;\n\n第二种：select sc.sno,sc.grade,stu.sname from sc inner join stu on sc.sno=stu.sno\nand sc.grade>80;(inner可有可无，join一定要写)\n\n若两个表没有相同的地方作为连接条件，找一个中间表\n\n方法一：select stu.sname,sc.sdept from stu,course,sc where\nstu.sno=sc.sno,sc.cno=course.cno and course.cname = ‘VB’;\n\n方法二：select stu.sname,sc.sdept from stu inner join sc on stu.sno=sc.sno inner\njoin course on sc.cno=course.cno where course.sname=’VB’;(先两两结合，然后在连接两一个表)\n\n外连接：外部连接会返回from子句提到的至少一个表或者视图中的所有行，不匹配的显示null。\n\n左：对左表不加限制，左表中的数据可以为空\n\n右：对右表不加限制，右表中的数据可以为空\n\n**四、子查询**\n\n单值子查询，这样的子查询只返回一个值\n\nSelect * from sc,stu where sc.sno = stu.sno and sc.sno=(select sno from stu\nwhere sname = ‘zmx’);\n\n子查询：在其他查询结果的基础之上提供一种有效的方式来表示where子句的条件。可以嵌套在select insert update\ndelete语句之中。外面查询什么里面就查询什么。\n\nSelect sno,grade from sc where cno = ‘c02’ and grade>(select avg(grade) from\nsc where cno = ‘c02’);\n\n嵌套子查询：一个子查询中还可以包含另一个子查询 最多255个\n\n比如：select cno from sc where sno in(select sno from stu where sdept = ‘计算机系’);\n\n（从sc表里面来查询cno 但是要查询计算机系的学生号sc里面没有计算机系，所以根据stu里面的学号来查询）\n\n**五、其他面试题参考**\n\nhttps://www.cnblogs.com/souyunku/p/15633392.html\n\n1、Mysql慢查询\n\nMsql慢查询是指执行时间超过预设阈值的查询语句，可以通过分析慢查询日志，找出执行时间较长的查询语句，优化数据库性能。1、适当使用索引2、优化查询语句，减少不必要的连接和子查询3、避免全表扫描4、避免使用子查询6、避免使用聚合函数7、定期分析慢查询日志，找出执行时间较长的查询语句\n\nShow variables like ‘show_query_log’;查看慢查询日志的配置\n\nSet global show_query_log =’on’;开启慢查询日志\n\nSet global long_query_time = 1;设置慢查询阈值，秒\n\nShow variables like ‘show_query_log_file’;查看慢查询日志文件路径\n\nSelect * from mysql.slow_log;分析慢查询日志\n\n2、redis数据库\n\n本质上是一个key-value内存数据库（受物理内存的限制，主要集中在较小数据量和高性能运算上）\n\n支持哪几种类型：string、list、set、sorted set、hashes\n\n3、主键索引和唯一索引区别\n\n1、主键是约束，唯一索引是索引，本质区别\n\n2、主键创建后包含一个唯一索引，唯一索引不一定是主键\n\n3、唯一索引允许空值，主键不允许空值\n\n4、一个表只能创建一个主键，多个唯一索引\n\n4、优化sql查询\n\n1、尽量避免全表扫描，指定具体某个列\n\n2、避免在where中使用or,or会导致扫描（union all 分两个写）\n\n3、避免使用null is null in not in (可能放弃索引)\n\n4、索引\n\nhttps://www.sohu.com/a/601934836_121124376\n\n5、cpu飙升\n\ntop命令观察、是不是有消耗资源的sql在运行、找出消耗高的sql；\n\n调整：kill掉这些线程、调整（改sql、加索引、改内存参数）\n\n6、索引的数据结构：B+树索引（索引存储在硬盘上）\n\n平衡二叉树升级为B树（树的高度问题），然后升级为B+树（适合范围查找）\n\n平衡二叉树左子树和右子树高度不会超过1，但是随着树越高，查找速度也会变慢；\n\nB树最大特点一个结点存两个值，树的高度变矮了；\n\nB+树，一个结点存两个值，叶子结点链表排序，解决回旋链表的问题（单向链表）（非叶子结点-只存储key，叶子结点存储key和地址）\n\n7、数据库连接池\n\n一组可复用的数据库连接，目的是减少数据库连接的建立和关闭的次数，从而提高效率。（原理：在数据库连接池中维护一组可重用的数据库连接，当一个客户端程序需要访问数据库时，它可以从连接池中获取一个可用的连接，使用完后，连接不会立即关闭而是回到连接池中）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577898035716403200?sourceSSR=users",
        "title": "25届菜鸡找实习经历",
        "content": "六、中国电信（已过）\n\n    cv，做人脸算法\n\n    一面二面间隔2分钟，面了一个半小时多\n\n    自我介绍，拷打项目，问的特别细致，从本科到现在的研究方向，看过的论文，说清楚该领域的发展过程，模型的发展。面的脑壳子疼，做了一道智力题，三道算法题，以及口述如何完成人脸中嘴唇的拼接。\n\n    电信工资有点低，还自备电脑，于是放弃\n\n  \n\n七、昆仑万维（已过）\n\n岗位是做算法工程化和优化\n\n得自备电脑，于是放弃。\n\n  \n\n八、nvidia（寄）\n\n笔试三道算法题，只做出来一道，挂了。\n\n九、AMD（寄）\n\n做模型剪枝量化的\n\n面了一个多小时，面的脑袋疼，问的东西太多了，全忘了\n\n和面试官聊的挺好的，本来觉得自己稳了，但是后面迟迟没联系，应该是寄了。\n\n十、粤港澳大湾区数字经济研究院(寄)\n\n一说是做prompt的，我直接开摆了，遂寄。\n\n十一、金山云(寄)\n\n常规面试，自我介绍，项目拷打，主要是做大模型的，和我方向不匹配，遂寄。\n\n  \n\n十二、好未来(寄)\n\n投的是cv相关的，分的是nlp的岗，面试的时候我和面试官都懵了，草草结束了面试。\n\n  \n\n十三、米哈游(简历寄)\n\n  \n\n十四、京东\n\n面试面吐了，直接拒了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577903108961951744?sourceSSR=users",
        "title": "字符串反转——面试算法",
        "content": "题目：\n\n// 给定一个字符串 s ，你需要反转每个单词的字符顺序，同时仍保留空格和单词的初始顺序\n\n// 例如：\"God Ding\",输出 \"doG gniD\"\n\n忘记是那个公司问的了，反正挺简单的，看一眼当复习了\n\n    \n    \n    package main\n    \n    import (\n    \t\"fmt\"\n    \t\"strings\"\n    )\n    \n    func main() {\n    \tstr := \"God Ding\"\n    \ts := strings.Split(str, \" \")\n    \tfor i, v := range s {\n    \t\ts[i] = reverse(v)\n    \t}\n    \tsr := strings.Join(s, \" \")\n    \tfmt.Println(sr)\n    }\n    func reverse(s string) string {\n    \t// string 转 []int\n    \tbytes := []byte(s)\n    \ti, j := 0, len(bytes)-1\n    \tfor i < j {\n    \t\tbytes[i], bytes[j] = bytes[j], bytes[i]\n    \t\ti++\n    \t\tj--\n    \t}\n    \treturn string(bytes)\n    }\n    \n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578206945010626560?sourceSSR=users",
        "title": "测试工程师社招-linux面试题",
        "content": "一、如何查日志\n\ntail 比如：tail -200 tail-500查看当天的日志前面多少行或后面多少行；tail -f exception(异常) error(错误)\n通过关键字查看\n\n二、查看进程\n\nps top\n\nps -ef显示所有的进程 比如：ps -ef|grep httpd查看apache是否启动，ps -ef|grep java查看jdk进程是否启动\n\ntop 实时查看\n\n三、其他一般让你自己说命令（以下参考）\n\n1、Vi:生成新文件或编辑、查看文件 例如：vi 1.txt\n\n进入编辑模式：i或a键，i插入文本，a追加文本。\n\n再次进入命令模式：esc\n\n可执行操作：\n\n：w 保存文件\n\n：wq 保存并退出\n\n：wq! 保存并强制退出\n\n：q 退出\n\n：q！ 强制退出\n\ndd 删除一行文字\n\nX 删除一个字符\n\n：n 光标移至文本第n行\n\n$ 光标移至文本行尾\n\nG 光标移至文本末尾\n\n/查找某个字符串：只能查找一次\n\n2、管理文件和目录的指令\n\npwd:显示用户当前所处路径\n\ncd:改变用户的目录 cd .. cd cd /home\n\nls:显示指定目录下的内容 格式：ls [参数][目录或文件]\n\n-a:列举全部文件，包括隐藏文件\n\n-l:列举目录中的细节，包括权限、所有者、组群等\n\n-al:查看所有文件包含隐藏文件的详细信息\n\n-r:逆向 从后向前罗列（只是顺序变了）\n\n-R:递归 递归列举当前目录下所有子目录内的内容\n\n-s:数据块大小\n\n比如：ls -l 1.txt ls -al ls Desktop\n\ntouch:创建多个文件。touch 1.txt 2.txt...\n\ngrep:在一堆文件中查找特定的字符。区分大小写 Grep money 1.txt\n\ncat:查看。 cat 1.txt\n\ncp: 拷贝复制文件。Cp [源文件][目标文件]\n\n-i 互动：若将覆盖目标中的文件会提示\n\n-r 递归：若选项会复制整个目录，子目录或其他\n\n-v 详细：显示文件的复制进度\n\ncp 1.txt 2.txt\n\ncp 1.txt /home\n\ncp 1.txt /home/quan.txt\n\ncp /home/quan.txt /root/文档\n\ncp -i 1.txt /home y/n\n\ncp -r a /home 文件夹a复制到home里面\n\ncp -v 3.txt /home ->符号提示\n\nmv：对文件或目录进行移动。 mv [源对象][目的对象]\n\n-i 互动：若覆盖，提示\n\n-v 详细：显示进度\n\n-f 强制:不提示的移动文件\n\nmv -i li.txt /home\n\nmv -f /home/li.txt /root/文档/dagou.txt\n\nmkdir:创建目录。 mkdir [目录1][目录2]...\n\nmkdir bb cc dd 一次性创建多个目录\n\nmkdir -p aa/bb 目录里面只能嵌套一个目录\n\nrmkdir:删除空目录。 rmkdir [参数][目录1][目录2]...\n\nrmkdir bb cc dd\n\nrmkdir -p aa/bb\n\nrm:删除文件。 rm [参数][文件]\n\n-i:互动\n\n-f:强制\n\n-v:详细\n\n-r:递归：将删除整个目录以及其所有文件\n\nrm -r a\n\n3、线上查询命令\n\nman：用来查询和解释某一个命令的使用方法注意事项，退出q\n\nlocate:定位文件和目录，仅在自己的数据库内\n\nlocate test\n\n用数据库定位test这个词的文件或目录\n\nWhatis:用来查询每个命令的含义（只有含义 区别与man）\n\n4、文件备份和压缩命令\n\nbzip2:压缩文件 Bzip 1 文件被压缩，保存为1.bz2\n\nBunzip2:解压文件 bunzip2 1.bz2 1.bz2文件被删除1代替\n\nGzip:压缩文件 保存为filename.gz\n\nGunzip:解压文件\n\n-r:递归：指定目录所有文件一并处理\n\nGzip -r file 但是不能压缩目录只能压缩文档\n\nTar:文件目录打包、解压缩。 tar [参数][打包后的文件名][需要打包的文件或目录]\n\n-c:创建解压文件\n\n-x:展开归档文件,解压缩\n\n-t:显示包括tar在内的文件列表，不解压情况下查看内容\n\n-z:解压/压缩文件 (gz) tar+ gzip\n\n-v:写入或读取时，显示所有的文件\n\n-f:指明要展开的归档文件名\n\n-j:压缩或解压缩文件(bz2) tar+bzip2\n\n常用的:\n\nTar cvf xxx.tar 要压缩的文件或者目录(压缩)\n\nTar xvf xxx.tar （解压缩）\n\nTar tvf xxx.tar（不解压的情况下，显示压缩文件内容）\n\nTar cjvf xxx.tbz 要压缩的文件\n\nTar xjvf xxx.tbz\n\nTar czvf xxx.tgz 要压缩的文件\n\nTar xzvf xxx.tgz\n\n(参数前注意加-)\n\nTar cvf test.tar /home/test home下面的test打包\n\nTar xvf test.tar test.tar解压缩\n\nTar cvf file.tar b1 b2 压缩b1 b2放到file.tar文件\n\nTar tvf file.tar 不解压，显示文件内容\n\nTar cjvf file.tbz file tar和bzip2归档压缩文件\n\nTar xjvf file.tbz 解压缩\n\nTar czvf file.tgz file tar和gzip归档压缩文件\n\nTar xzvf file.tgz解压缩\n\n这个命令不会删除tar文件。但会把要解除归档的内容复制到当前目录下，并保留归档文件所使用的任何目录结构。\n\n5、文件阅读命令\n\nHead:查看文件的开头部分，默认前十行空格也占一行。Head -20 1.txt\n\nTail:查看文件结尾10行\n\nMore:按页来查看文件的内容。more [选项][filename]\n\n-num:一次显示的行数 more -20 一次性显示20行 more -20 \n\n-f:计算行数以实际行数为准，而非自动换行后的行数 more -f more -f 计算行数\n\n+num:从num行开始显示 more +2 more从第二行开始\n\nMore +5 1.txt 每次五行五行的查看\n\nMore 还可以在文本文档中搜索关键字，按/输入命令搜索条目(前两行开始展示的)\n\nMore +/lq 1.txt\n\nMore +/查找的关键字 文件名 more +/查找的关键字 文件名\n\n使用空格键来先前翻阅页码，按q键退出。\n\n当前一个目录下的文件内容太多，还可以用more来分页显示，和管道|结合起来。\n\nLs -al /etc|more -5 查看etc目录下所有信息，前面命令的输出做后面命令的输入，将查询结果分页显示。Ls -al /ect |more\n-5\n\nLs -al /etc |more -5\n\n6、定位查找文件的指令\n\nWhich:从path目录找出命令位置，并显示完整路径的名称。\n\nWhich ls /usr/bin/ls\n\nWhereis:定位在文件系统中，用于程序名的搜索。\n\nWhereis [-bm] 程序名\n\n-b:只找二进制文件\n\n-m:说明文件，查出说明文档的路径\n\n7、管理使用者和设立权限的命令\n\n一个文件目录的权限组成10位：\n\n第一位：文件类型 -普通文档 d目录\n\n第一组：文件主人的权限 u rwx按顺序 没有权限-\n\n第二组：文件主人同组成员权限 g\n\n第三组：其他人权限 o\n\nChmod:改变许可权限。文件的使用者（u,g,o）增减重新赋值（+，-，=）权限名称（r,w,x）文件。 chmod u/g/o+/-/=权限 文件或目录\n\nChmod u+r b1 用ls -l复查\n\n还可以数字，4-读取，2-写入，1-执行\n\nChmod 751 filename\n\nChmod u=rwx,g=rx,o=x filename\n\nUseradd [参数][用户名]：添加用户\n\nUserdel [参数][用户名]：删除用户，删除用户但还有残留文件\n\nUserdel -r zhang 删除用户目录\n\n(注意，如果只删除了用户没有删除残留文件，可以使用rm -r一步步进行删除)\n\nChgrp:变更文件或目录的所属群组。Chgrp zhang 1.txt\n\nChown:文件的拥有者改为指定的用户或组。只有root所使用。\n\nSu:用来修改用户。（切换用户）\n\nsu 用户名 切换用户，但环境变量保持\n\nSu -l 用户名 切换用户，载入环境变量\n\nPasswd:修改用户的密码。\n\n8、有关关机和查看系统信息的命令\n\nExit:退出 文本模式下使用ctrlD\n\nReboot:重新启动 shutdown -r <time>\n\nShutdown -r now 现在重启\n\nShutdown -r 11:30\n\nHalt:关机 shutdown -h <time>\n\nShutdown -h now现在关机\n\nShutdown -h 11:30等到11:30关闭系统\n\nShutdown -t 2 2min内关机\n\nPs:查看进程，某一时刻。\n\nPid命令进程编号 tty命令所运行位置 time运行命令占用cpu处理的时间 cmd该进程所运行的命令。\n\nPs u 查看有关使用者信息\n\nPs x 查询出所有的进程号\n\nTop:动态查看进程，几秒会更新一次，ctrlc q退出\n\nKill:杀死进程\n\nDate：设定和修改现在的时间和日期\n\ndate -r 1.txt 最后一次修改文件的时间\n\nCal:日历\n\nCal 10 2018 cal cal 2019 三种方式\n\n9、磁盘空间命令\n\nDf:检查磁盘的使用量 -a 列出全部\n\nDu:显示文件目录大小 du 参数 文件名字 -ab列出所有文件和目录占用空间\n\n10、网络操作命令\n\nIfconfig:显示网络设备状态 ip地址和子网掩码\n\nPing:检查主机 icmp传输协议 检测网络通不通\n\nNetstat:查看网络情况\n\nNetstat -a 显示详细的网络情况\n\nNetstat -apu 显示端口号的使用情况\n\n11、其他命令\n\nClear:清屏\n\nEcho:输出 echo “hello,world” echo $PATH $调用\n\nUptime:系统运行时间\n\nWc:计算数字 wc 参数 文件名 将计算文件的行数、字数、文件名字\n\n-c：只显示bytes\n\n-l:只显示行数\n\n-w：只显示字数\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577887616423436288?sourceSSR=users",
        "title": "鑫互联  55min 一面",
        "content": "  1. 用过哪些集合 hashmap扩容 如果<string> 如何查找 散列函数用什么散列 为什么大小是2的幂次 如果是key 为abc 怎么散列 如何知道key不存在 默认大小是否可以修改 改为30 32 可以不 是否看过源码 hashmap查找时间复杂度 arrayList查找时间复杂度\n  2. mysql版本 数据库隔离级别 用的哪个\n  3. 如何排查慢sql explain 字段\n  4. sql优化如何优化\n  5. 索引类型 聚集索引和非聚集索引区别\n  6. 索引数据结构 B+树 非叶子存的是什么 有没有数据 B+树存12345怎么存\n  7. 线程池 参数 任务处理完 线程怎么样 如何销毁 \n  8. redis 在哪里用到了 异步任务如何处理的 处理的是什么 redis数据结构 分布式锁 缓存穿透 雪崩 击穿 及如何处理\n  9. 消息队列 持久化是异步还是同步 如何实现消息不丢失不重复\n  10. 对于分布式架构的理解\n  11. 项目中最深印象的BUG\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577880452338294784?sourceSSR=users",
        "title": "topK算法——面试",
        "content": "题目：我现在有一个文件，把文件中出现单词频率最高的k个单词找出来，文件内容都是逗号分隔的单词\n\n我用go语言写\n\n    \n    \n    abc.txt内容\n    \"wang,jing,yu,shuai,ge,shuai,ge,j\"\n    \n    \n    \n    package main\n    \n    import (\n    \t\"fmt\"\n    \t\"io/ioutil\"\n    \t\"sort\"\n    \t\"strings\"\n    )\n    \n    func main() {\n    \tcontents, err := ioutil.ReadFile(\"D:\\\\test1\\\\topK\\\\abc.txt\")\n    \tif err != nil {\n    \t\tfmt.Println(\"无法读取文件:\", err)\n    \t\treturn\n    \t} else {\n    \t\tfmt.Printf(\"%s\\n\", contents)\n    \t}\n    \tk := 2\n    \twords := strings.Split(string(contents), \",\")\n    \t// 存放map，频率\n    \tpl := make(map[string]int, 0)\n    \tfor _, v := range words {\n    \t\tpl[v]++\n    \t}\n    \t// 去重后数组\n    \tqcWords := []string{}\n    \tfor k, _ := range pl {\n    \t\tqcWords = append(qcWords, k)\n    \t}\n    \tsort.Slice(qcWords, func(i, j int) bool {\n    \t\treturn pl[qcWords[i]] > pl[qcWords[j]]\n    \t})\n    \tfor i := 0; i < len(pl) && i < k; i++ {\n    \t\tfmt.Printf(\"%v,%v\", qcWords[i], pl[qcWords[i]])\n    \t}\n    }\n    \n    \n\n到此结束\n\n考察点：\n\n  * 打开文件的api\n  * strings.Split\n  * map 存储单词的频率\n  * 再做一个数组存储字符串（去重后的，可以直接从map的k拿）\n  * 最后对这个字符串排序，到了这里就有几个选择了，上方选择了sort.Slice函数，底层是快速排序\n  * 最后输出即可\n\n别的方案：\n\n  * 利用堆排序，因为是求频率最高的k个单词，所以可以用大顶堆，但是之前百度的面试官告诉我应该用小顶堆，各位大佬知道为什么吗？\n  * 或者你可以用其他排序方法\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/578203448550629376?sourceSSR=users",
        "title": "1月社招测试工程师面经",
        "content": "**58同城-三面**\n\n1、自我介绍\n\n2、项目介绍、干了什么、学习到了什么\n\n3、jmeter使用\n\n4、python自动化 什么程度\n\n5、有没有跟研发沟通矛盾\n\n6、发展前景、技能\n\n7、有什么想问的\n\n（两周后接到三面，三面后又无后续）\n\n**京东物流-一面**\n\n1、自我介绍\n\n2、最近项目介绍\n\n3、python自动化介绍\n\n4、yield和return区别\n\n5、mysql：模糊查询 limit(查询第五行) 分组 时间函数（查看某一段时间的天数） 如何去重 from where group by 顺序\n\n6、linux：如何查看日志 查看进程 查看命令\n\n7、网络：三次握手 get和post区别 状态码\n\n8、接口测试怎么做\n\n9、python：参数类型 lambda函数字典排序 多进程多线程 列表和字典的区别\n\n（挂）\n\n**博彦科技-字节外包-一面**\n\n1、自我介绍\n\n2、是否离职\n\n3、期望薪资\n\n4、说一个项目，介绍\n\n5、针对某一个功能，如何完成测试的\n\n6、web测试，（版本迭代）\n\n7、app测试，需要关注哪些\n\n8、搜索功能（功能、易用、安全（拍照读取、权限））\n\n9、python自动化，什么框架，做哪些方面\n\n10、postman jmeter接口测试\n\n11、接口测试流程\n\n12、手头很多项目，人力不足怎么办\n\n13、合作的是否愉快\n\n14、有没有要问的\n\n**博彦科技-字节外包-二面**\n\n1、自我介绍\n\n2、是否离职\n\n3、云客服项目介绍 测什么 怎么测试的 比较难的点、线上问题\n\n4、金融项目介绍 负责哪些模块\n\ntoken时效、接口测试、对账模块测试、如何规避这些、自动化优化想法\n\n5、自动化脚本写的什么\n\n6、接口测试流程\n\n7、python 数据类型 栈的使用 列表和元组 实例对象\n\n**字节应用岗-一面**\n\n1、自我介绍\n\n2、说一个项目\n\n3、对账流程 怎么实现的 细节\n\n4、其他负责的部分 app项目\n\n5、接口测试流程\n\n6、购物车支付场景用例\n\n7、python实现，统计字符串的字符出现的次数\n\n8、get和post的区别\n\n9、linux命令 使用过哪些\n\n10、sql实现 一个班级男生和女生的次数\n\n**字节应用岗-二面**\n\n1、自我介绍\n\n2、金融项目（回调接口容错机制）\n\n3、对账\n\n4、思维：百度页面搜索（功能、兼容、性能、界面、易用、安全）\n\n5、接口测试为什么必要、接口状态码、接口404、端口号\n\n6、性能方案：一千万数据 如何模拟\n\n7、python:集合和列表、数据类型、列表的删除、装饰器、字典\n\n8、redis数据库：数据类型\n\n9、jmeter\n\n10、有bug不改\n\n**字节应用岗-三面**\n\n1、自我介绍\n\n2、saas项目（介绍、规模）\n\n3、场景：拍摄vlog 抖动\n\n4、场景：短信功能\n\n5、python编程题时间差\n\n6、app项目\n\n7、测试参与度\n\n8、python自动化用例\n\n9、app性能\n\n（app、性能少，挂）\n\n**公安部研究所-一面**\n\n1、自我介绍\n\n2、云客服测试流程\n\n3、回归测试\n\n4、python自动化多少条\n\n5、python简单编程题\n\n6、linux常用语句\n\n7、测试需要具备什么功能\n\n8、自己的优缺点\n\n7、jmeter性能测试\n\n8、如何保证质量\n\n9、python 装饰器、集合、列表和集合\n\n10、领导看不到你的长处怎么办\n\n11、安全测试、渗透测试\n\n（偏网安方向，二面已拒）\n\n**满帮-一面**\n\n1、自我介绍\n\n2、介绍saas项目 怎么测、关注点、用例怎么设计、聊天场景测试点\n\n3、比较深刻的bug、数据库改字段可能会出现什么样的问题\n\n4、支付场景如何保证质量 高并发（测试环境如何模拟线上问题）\n\n5、仓储项目介绍 流程怎么测、关注点 python自动化用例 多少条\n\n6、公司获得的知识\n\n7、离职原因\n\n**满帮-二面**\n\n1、自我介绍\n\n2、项目介绍 金融支付（质量保障） 线上银行崩溃容错机制\n\n3、jmeter接口自动化流程 断言（）\n\n4、比较印象深刻的bug（偏重项目 详细问）\n\n5、工作当中自己的优缺点\n\n6、比其他测试的优势\n\n7、加班情况 周末大小周等\n\n8、离职原因\n\n**满帮-HR面**\n\n1、自我介绍\n\n2、项目介绍\n\n3、测试流程\n\n4、质量保障\n\n5、加班情况\n\n6、项目规模\n\n7、前公司考核机制\n\n（拒）\n\n**好奇莫斯-一面**\n\n1、小程序怎么测\n\n2、如何保证质量 测试流程\n\n3、不喜欢需求的情况下 如何保证质量\n\n4、python自动化 框架 介绍\n\n5、charles抓包\n\n6、项目团队人数 安排\n\n7、闲聊：读书 性格 朋友 大学等\n\n**好奇莫斯-HR面**\n\n1、自我介绍\n\n2、项目介绍\n\n3、闲聊：公司相关\n\n（已offer）\n\n**鼎对科技-一面**\n\n1、自我介绍\n\n2、云客服项目介绍 聊天场景 如何测试 支付部分\n\n3、金融项目\n\n4、仓储项目自动化 失败场景\n\n5、jmeter脚本编写\n\n6、charles map 模拟浏览器请求\n\n7、python数据结构类型\n\n8、linux常用命令\n\n9、接口测试流程\n\n10、mysql update 表连接 左外连接、右外连接 查询的限制条件\n\n11、redis数据类型 使用\n\n12、android和ios区别 登录的区别\n\n13、社交网络、直播测试思路\n\n14、视频卡顿怎么找原因\n\n**鼎对科技-二面**\n\n1、自我介绍\n\n2、python自动化 执行过程中的问题 如何校验两个reponse内容\n\n3、公司测试流程\n\n4、比较印象深刻的bug（针对项目 详细问）\n\n5、mysql 两个表 1、id name address 2、id name score 1、校验学生人数 2、校验学生分数\n\n6、postman jmeter使用\n\n7、金融产品支付\n\n8、如何校验翻译（多语言）\n\n9、android ios区别\n\n**鼎对科技-技术负责人面**\n\n1、自我介绍\n\n2、saas项目介绍\n\n3、算法题，找一个数组最大的数\n\n4、saas项目对接海外渠道 对接那些用户那些国家 对接形式 以及为什么对接\n\n5、离职原因 为什么裁员\n\n6、学校的情况 奖学金、四六级分数、奖学金几年（高考分数、理科生？！）\n\n7、个人爱好 周末干什么 朋友类似\n\n**鼎对科技-CEO面**\n\n1、自我介绍\n\n2、前公司各个部门的业务扮演的角色\n\n3、仓储部门 如何作为一个毕业的承接 出现的问题\n\n4、为什么获得奖学金（？！）\n\n5、身边的朋友外向的多吗（？！）\n\n6、对公司的期许 什么期许、为什么期许\n\n7、为什么离职\n\n8、QA团队\n\n（已offer）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577821756698738688?sourceSSR=users",
        "title": "记录今天的第一面，蘑菇车联前端实习一面",
        "content": "[好无辜]在牛牛上搜好像没有蘑菇车联前端实习相关面经，我攒个好运记录下。  \nbase 北京  \n面试官是个小姐姐，人很和蔼[大笑]  \n1.元素垂直水平居中  \n2.vue数据双向绑定原理  \n3.const obj={} 和 object.create(null)区别  \n4.react和vue的通信方式  \n5.react常用的hook，介绍一下  \n6.react fiber原理  \n7.有写过微信小程序吗  \n8.微信小程序怎么实现页面调整  \n9.微信小程序怎么实习下拉刷新  \n10.介绍一下简历中的threeJS项目  \n11.介绍一下threeJS的灯光有哪些  \n12.会不会ps之类的ui设计（可能是[笑cry][笑cry]）  \n目前只记得这么多，想起来再补上吧[喝可乐][喝可乐]  \n更新：上午面完，下午约了下周二的二面\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577814712155484160?sourceSSR=users",
        "title": "上海哲锦 一面",
        "content": "15min\n\n  1. 项目视频存储位置\n  2. 短信注册服务\n  3. rabbitmq重复消费问题\n  4. redis和mysql区别\n  5. redis缺点\n  6. list和map区别\n  7. 返回结果接口安全处理\n  8. 反问\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577803992814665728?sourceSSR=users",
        "title": "首约后端1面",
        "content": "> 面试时间55min 实习岗\n\n  1. Redis的内存淘汰策略\n  2. RDB和AOF的区别\n  3. 能简单聊一下分布式事务吗\n  4. Redis中的Hash为什么不用红黑树\n  5. 缓存穿透、缓存击穿、缓存雪崩的区别\n  6. 如何解决缓存穿透、缓存雪崩\n  7. InnoDb索引\n  8. InnoDb事务\n  9. 算法题 判断一个链表是否有环\n  10. TCP和UDP的区别\n  11. 多线程和多进程的区别\n  12. 暂停当前线程会有哪些操作\n  13. 聊一下List\n  14. ThreadLocal\n  15. 如何设计一个配置中心\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577656204747452416?sourceSSR=users",
        "title": "美团境外业务面试",
        "content": "工作一年多终于开始社招，第一次社招记录一下\n\n业务是新业务，需要跟商家沟通，做营销活动，产品需求设计。\n\n看起来要做的事情很多，但是面很广，跟营销也相关，所以还是蛮感兴趣的\n\n1、自我介绍\n\n2、能否具体说明是怎么做商品运营的，取得了什么效果\n\n具体的操作流程讲得很细致，但是忘记讲效果了，一下子想不到如何描述效果\n\n如何报活动-如何做效果监控，效果月比月稳定增长多少（回头盘下数字）\n\n3、整体的流程是怎样的？是一套流程都做还是只做一部分？\n\n只做一部分。。。我就是想接触多一点我才想离开的，不想当小钉子了\n\n4、跟卖家沟通的过程遇到什么困难？\n\n平台和卖家之间达到平衡。\n\n1\n活动订单占比低，只有4%。研究了卖家的价格，产品和配合程度后选取了几个卖家沟通，让他们做投入，做低价不愿意，那就用置换几个秒杀，最后同意。效果也是不错，当月的活动订单冲到了15%\n\n2\n站点总体单量跟不上大盘涨幅。从订单来源分析，活动单量占比跟大盘活动占比几乎一致且占比非常小，继续做活动也起不到非常好的提升ADO效果。只能从自然流量订单着手，大促前拉取头部10000个产品推动卖家降价，50%的商品降价，取得了比上次大促变好的增长。\n\n5、系统需要完善的地方会不会跟产品做沟通？\n\n会。举例（说得好乱）但真的就是提出需求啊，也没有真的写什么文档\n\n6、有多少卖家？头部和尾部的卖家管理有什么不同？\n\n400多个，头部\n\n7、我自己补充：卖家策略，怎么做卖家管理，成功案例？\n\n热销品和趋势品有什么？\n\n国家的人群特征？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577607413260464128?sourceSSR=users",
        "title": "24校招，阿里巴巴测试开发工程师二面",
        "content": "## 前言\n\n大家好，今天我来回顾一下之前参加淘天的技术面试\n\n面试官全程不问八股，只从实习、项目进行了解，十分考验我的逻辑思维和表达能力\n\n### 部门：淘天集团\n\n### 时间：50min\n\n### 平台：钉钉\n\n## 过程\n\n  1. 自我介绍\n  2. 实习经历\n  3. 介绍一下当时负责的项目-扫码登陆\n  4. 扫码登陆，在测试时要注重哪些方面？ 安全性、交互性、功能、性能、状态的变化、权限的变化\n  5. 你在过程中有发现什么比较复杂的测试点吗？权限、兼容\n  6. 权限方面有哪些点？ \n  7. 有了解过开发的实现吗？\n  8. 稳定性方面的有涉及吗？我介绍了一个项目的设计\n  9. 聊一下实习中的另一个项目\n  10. 有自动化、性能、测试工具开发方面有接触过吗？\n  11. 实习的这几家中，在哪个公司成长的最快？\n  12. 这家公司有给你做一些培养计划吗？都包括什么？\n  13. 他们有做一些工具开发、提效方面的工作吗？pipeline、接口自动化、CI/CD，我主要负责测试环境搭建、分一下管道\n  14. 从你的在校项目中选一个，在项目中你是什么角色、做了什么事情、结果是怎么样？项目背景-组队过程-分工部分-日常工作-迭代日期\n  15. 除了队长的角色，在工作中你还做了哪些？开发+测试，降本+提效\n  16. 介绍一下项目中用到的算法，性能方面时怎么提升的？梳理算法逻辑\n  17. 用的什么技术栈？在实现过程中用到了什么技巧？检索增速\n  18. 功能是怎么实现、解决的？UI设计\n  19. 有哪些比较难的技术挑战，是怎么做的？对穷举算法进行剪枝，回溯设计\n  20. 优秀学生干部咋得的？干呗（doge\n  21. 这个工作有哪些挑战？组织制度，招新换届，青年大学习绩效（\n  22. 举一个能展示你技术能力的项目，SpringBoot+Mybatis+MySQL+身份鉴权\n  23. 是从零开始，还是借鉴创作的？\n  24. 你的哪些模块是独创的？系统主题+优先队列+字段设计+web攻击+处理逻辑+读写锁+redis设计\n  25. 比赛的程序胜率提升，是怎么优化的？评估函数设计+攻击情况判断+丰满程序\n  26. 三方签了吗？可以撕\n  27. 反问\n\n## 总结\n\n###\n难度：4/5，虽然没问任何计算机八股，但其实这种才是最难的面试，因为所有问题都是不固定的，如果没有足够的知识基础，只是背诵能力强，在这种面试中可能会露怯\n\n### 面试官专业程度：专业，考察的点十分深入，针对简历中的多个细节进行提问\n\n### 体验打分：4/5\n\nOK，写到这里乔伊也是长舒了一口气，真是一段十分精彩的面试对答，希望有机会继续流程，我们下次再见！\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n**欢迎点赞、评论、收藏，it's important for me.**\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577565353031507968?sourceSSR=users",
        "title": "minimaxB端运营实习",
        "content": "hr：确认基本信息  \n  \n一面：  \n1\\. 自我介绍  \n2\\. 项目经历介绍  \n3\\. 数据来源，如何保证质量  \n4\\. 模型准确度  \n5\\. 如何继续改进（知识库还是prompt贡献大  \n6\\. prompt优化策略  \n7\\. 反问  \n  \n二面  \n1\\. 项目介绍  \n2\\. 对岗位的期望和理解  \n3\\. 你觉得这些期望会从方面获得  \n4\\. 如何选择模型  \n5\\. 市面上的竞品感受  \n6\\. 什么是B端什么是C端  \n7\\. prompt优化策略  \n8\\. prompt会包括哪些内容  \n9\\. 你怎么保持成绩的  \n10.面试官介绍了岗位内容：接触客户，大模型调优，语音优化，你有什么能力应对  \n11\\. 反问  \n  \n  \nhr最后一面  \n1\\. 自我介绍  \n2\\. 岗位期望，进一步向我介绍工作内容  \n3\\. 你最自豪的事情  \n4\\. 遇到过压力最大事情  \n5\\. 这个工作对你来说最有挑战性的点  \n6\\. 介绍工作氛围，确认一些信息  \n7\\. 反问\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577531787815952384?sourceSSR=users",
        "title": "快手日常实习二面【研发效能】",
        "content": "  1. Leetcode 123.买卖股票的最佳时机 III\n  2. 谷歌每天有很多的用户进行搜索，给你一台内存可能只有 4g 或者 8g 的笔记本电脑，不关心分词等，如何统计搜索关键词的 topK（想到用外部存储了，但是没有系统的回答出来❌。正解：每个字符串计算哈希，存入对应的桶中，桶的大小就是频次，然后进行归并排序）\n  3. 12 个小球，里面有一个小球质量不同，但是不知道是轻或者是重，给你一个天平，至少称几次能保证找到质量不同的小球（没见过这个题，自己思考到了4次）。\n  4. 开发一个 http sever，如何提高系统的 QPS（从多线程、Redis、布隆过滤器、消息队列、JVM 调优回答了一下）\n  5. 在 32 位机器上和 64 位机器上，int 类型的大小是多少\n  6. Java 中哪些变量在堆上，哪些在栈上\n  7. Java 程序编译成字节码的过程（没回答上❌）\n  8. TCP 和 IP 的区别（没回答上❌）\n  9. TCP 头部的关键字段（没回答上❌）\n  10. 你主要用的是 JDK 8，高版本的 JDK 特性你了解哪些\n\n反问环节：\n\n  1. 如果面试过了，后面还有几面\n  2. 对于实习生的培养\n  3. 还有哪些需要改进的地方\n\n1.18 hr面，面后 oc\n\n1.19 已 offer\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577503578525278208?sourceSSR=users",
        "title": "记录 中科院自动化前端实习(oc)",
        "content": "刚刚面完  \n1.react15之前的原理（一点都不知道）  \n2.react fiber的原理 （看了没记住)  \n3.浏览器的渲染原理  \n4.说说react的diff算法  \n5.谈谈虚拟dom  \n6.react的逻辑服用方式  \n7.react组件通信方式  \n8.useEffect包含哪些周期  \n9.如何在useEffect中做事件抽离  \n10.react16和react18有什么新的功能  \n11.react性能优化的手最后反问  \n项目一个没有问，感觉自己好菜[笑cry][笑cry][笑cry]没想到全是问react，因为他们那边都是用react做开发  \n更新：周一22号oc  \n  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577562614905970688?sourceSSR=users",
        "title": "滴滴后端研发-营销技术实习",
        "content": "一面寄了：  \n1\\. 自我介绍  \n2\\. 列表的底层实现  \n3\\. 单例的底层实现  \n4\\. redis消息队列  \n5\\. mysql事务  \n6\\. 力扣94题二叉树中序遍历\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577496418525470720?sourceSSR=users",
        "title": "蔚来前端实习（二面挂）",
        "content": "智能驾驶部门\n\n## 一面-1.15\n\n  1. 项目难点\n  2. 文件如何判断格式 是后缀名吗\n  3. 图片下载 应该会直接展示出来（？\n  4. url除了跳转网页的几种方式（如本地文件、邮件） 怎么通过在web输入url调起桌面端程序\n  5. 对象调用问题 讲输出顺序\n  6. 深拷贝遇到循环引用怎么处理\n  7. 讲输出步骤和内容\n\n    \n    \n    var nickname = \"LiLei\";\n    function Person(name) {\n      this.nickname = name;\n      this.sayHi = function () {\n        console.log(this.nickname);\n        setTimeout(function () {\n          console.log(this.nickname);\n        }, 0);\n      };\n    }\n    var Male = {\n      nickname: \"XiaoFang\",\n      sayHi: () => {\n        console.log(this.nickname);\n      },\n    };\n    var person = new (Person.bind(Male, \"XiaoHong\"))();\n    person.sayHi();\n    \n\n  8. 写题 实现一个异步任务队列deplayQueue，队列长度可指定，要求队列中所有任务都执行完毕才可以继续执行，要求每次运行可以拿到本任务的返回值\n\n## 二面-1.16\n\n  1. 聊一些个人情况\n  2. 讲讲hooks\n  3. 写题 日志格式转换\n  4. 写题 搜索 dfs or bfs\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577472995678044160?sourceSSR=users",
        "title": "字节懂车帝 后端开发 日常实习 25届 面经",
        "content": "### 写在前面\n\n  * 本人重庆理工大学，双非本科。\n  * 私信问问题不回复，因为可以直接上网搜，就别问我了。\n  * 建议使用电脑查看（为什么不用文字？方便保存；为什么不直接给出问题？方便各位了解面试情况）\n  * 非常欢迎指正我的错误和讨论话题。\n  * 个人能力的学习能力较强，但是缺乏引导性，假如各位24届以前的前辈看到了这篇博客，希望能够给我提一些建议和未来的规划。\n  * 秋招目标：目标城市自由度高；工资正常水平；尽量不要996；公司看中员工的能力和效率（目前外企为最优方案）。\n\n### 比较之前\n\n  * 优化了自我介绍。\n  * 重新复习了一遍知识总结。\n\n### TimeLine\n\n\\--12/22投简历--01/04约面试--01/15一面--01/16已终止--\n\n### 一面 1h\n\n![](https://uploadfiles.nowcoder.com/compress/mw1000/images/20240128/468686332_1706434407588/66B1A806139B1E1401F2474688F5AC46)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577252565222506496?sourceSSR=users",
        "title": "阿里国际二面面经，八股文问的瑟瑟发抖",
        "content": "![alt](https://uploadfiles.nowcoder.com/images/20240117/630265916_1705499625044/4A98C4C865953328DC979B80CFD1272E)\n\n## 2.hashcode和equals的区别\n\n`hashCode` 和 `equals` 是 Java 中用于处理对象相等性的两个方法：\n\n  1. **equals方法：**\n     * `equals` 方法是用来比较两个对象是否在逻辑上相等。根据类的设计，你可以重写 `equals` 方法来指定自定义的相等性判断规则。\n     * 一般来说，如果你重写了 `equals` 方法，就应该同时重写 `hashCode` 方法，以保持一致性。两个对象在调用 `equals` 方法返回 true 时，它们的 `hashCode` 值应该相等。\n\n    \n    \n    @Override\n    public boolean equals(Object obj) {\n        // 实现相等性判断的逻辑\n    }\n    \n    \n\n  2. **hashCode方法：**\n     * `hashCode` 方法用于返回对象的哈希码，它是一个整数值。哈希码的作用是在进行集合操作时提高查找效率，例如在哈希表中存储对象。\n     * 如果两个对象使用 `equals` 方法返回 true，它们的 `hashCode` 值应该相等。但是反过来并不成立，即相等的对象不一定具有相等的哈希码。\n     * 如果不重写 `equals` 方法，Java 默认使用 `Object` 类的实现，它比较的是对象的引用地址，而不是逻辑相等性。\n\n    \n    \n    @Override\n    public int hashCode() {\n        // 实现生成哈希码的逻辑\n    }\n    \n\n总体来说，`equals` 主要用于判断两个对象是否在逻辑上相等，而 `hashCode`\n用于支持对对象的高效存储和检索。在使用自定义类作为集合的键时，确保正确实现这两个方法是很重要的。\n\n>\n> **[面经专栏直通车](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fmanager%2FcolumnDetail%2F0xKkDM)**\n\n>\n> **[面经专栏下载](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fgit.acwing.com%2Flicw%2F24_job_hunter)**\n\n## 3.hashmap扩容，线程是否安全\n\n`HashMap` 是 Java 中常用的集合类之一，用于存储键值对。\n\n### 扩容机制：\n\n  1. **初始容量和负载因子：**\n\n     * `HashMap` 有一个初始容量和一个负载因子。初始容量是哈希表在创建时的容量，默认为 16。负载因子是一个在哈希表大小超过其容量乘以负载因子时，哈希表将进行扩容的阈值，默认为 0.75。\n  2. **扩容操作：**\n\n     * 当哈希表的元素个数达到了负载因子所定义的阈值，`HashMap` 将进行扩容操作。\n     * 扩容操作包括创建一个新的哈希表，其容量为原容量的两倍，然后将所有元素重新分配到新的哈希表中。\n\n### 线程安全性：\n\n  1. **非线程安全：**\n\n     * `HashMap` 不是线程安全的，即在多线程环境下，如果有一个线程在修改 `HashMap`，而另一个线程同时访问它，可能会导致不确定的结果。\n  2. **线程安全解决方案：**\n\n     * 如果需要在多线程环境中使用线程安全的 `HashMap`，可以考虑使用 `ConcurrentHashMap`。`ConcurrentHashMap` 提供了一些线程安全的操作，例如 `putIfAbsent`、`replace` 等，以及分段锁的机制，以提高并发性能。\n\n`HashMap` 的扩容机制是为了保持哈希表的性能， `HashMap` 本身不是线程安全的。如果需要在多线程环境中使用，可以使用\n`ConcurrentHashMap` 或者在并发访问时进行适当的同步处理。\n\n## 4.怎么样的hashmap线程安全，怎么实现，currenthashmap和Hashtable的区别\n\n在 Java 中，有几种实现线程安全的 `HashMap` 的方式。其中，`ConcurrentHashMap` 和 `Hashtable`\n是两种常见的线程安全的 `Map` 实现：\n\n### 1\\. ConcurrentHashMap:\n\n  * **分段锁机制：**\n\n    * `ConcurrentHashMap` 使用了分段锁机制。它将整个数据集分成多个段（segment），每个段拥有自己的锁。这样在多线程环境中，不同的线程可以同时访问不同的段，提高并发性能。\n  * **并发度高：**\n\n    * 因为不同的线程可以同时操作不同的段，`ConcurrentHashMap` 具有较高的并发度，适合在高并发的场景中使用。\n  * **不支持 null 键和值：**\n\n    * `ConcurrentHashMap` 不支持存储 null 键和值。\n\n### 2\\. Hashtable:\n\n  * **同步整个数据结构：**\n\n    * `Hashtable` 使用同步方法或同步块来确保线程安全。所有的读写操作都是同步的，这意味着在多线程环境下，只能有一个线程访问 `Hashtable`，可能导致性能瓶颈。\n  * **支持 null 键和值：**\n\n    * `Hashtable` 支持存储 null 键和值。\n  * **遗留类：**\n\n    * `Hashtable` 是一个遗留的类，而 `ConcurrentHashMap` 是 Java 5 引入的，更加现代化和高效。\n\n### 区别总结：\n\n  * `ConcurrentHashMap` 使用了分段锁机制，具有更好的并发性能，适合高并发场景。\n  * `Hashtable` 使用同步方法，整个数据结构同步，可能导致性能瓶颈。\n  * `ConcurrentHashMap` 不支持存储 null 键和值，而 `Hashtable` 支持。\n\n通常推荐使用 `ConcurrentHashMap`，因为它相对于 `Hashtable` 具有更好的性能。如果需要支持 null 键或值，可以考虑使用\n`HashMap` 并在访问时进行适当的同步处理。\n\n## 5.什么是死锁，怎么发现死锁了，怎么避免死锁\n\n死锁是指两个或多个线程在互相等待对方释放资源而无法继续执行的状态。当线程之间存在循环等待资源的情况，且每个线程都持有对方所需资源的锁时，就可能发生死锁。\n\n### 如何发现死锁：\n\n  1. **线程转储（Thread Dump）：**\n\n     * 通过获取应用程序的线程转储，可以查看每个线程的状态以及持有的锁信息。死锁通常表现为一组线程互相等待。\n  2. **监控工具：**\n\n     * 使用监控工具，如 Java VisualVM 或类似的性能分析工具，可以观察线程的状态、锁信息等。\n\n### 如何避免死锁：\n\n  1. **按序获取锁：**\n\n     * 确保所有线程按照相同的顺序获取锁。这样可以避免循环等待的情况。\n  2. **使用尝试获取锁：**\n\n     * 在获取锁的时候，使用尝试获取锁的方式，而不是一直等待。可以设置一个超时时间，在超时后放弃获取锁。\n  3. **使用锁的层次性：**\n\n     * 设计锁的层次性，确保所有线程按照一定的层次获取锁，避免发生循环等待。\n  4. **避免长时间持有锁：**\n\n     * 尽量减小持有锁的时间，避免在持有锁的时候执行复杂、耗时的操作。\n  5. **定期检查：**\n\n     * 定期检查系统中是否存在死锁，及时发现并处理。\n  6. **使用工具进行分析：**\n\n     * 利用死锁检测工具，如 `jstack`、`jconsole` 等，来监控和分析系统中的死锁情况。\n  7. **合理设计并发结构：**\n\n     * 在设计并发结构时，考虑线程安全性，避免设计上的瑕疵导致死锁的发生。\n\n## 6.new怎么回收，垃圾回收机制\n\n在 Java 中，通过 `new` 关键字创建的对象，其内存的管理和回收是由Java虚拟机（JVM）的垃圾回收机制来负责的。\n\n### 1\\. **垃圾回收的原理：**\n\n  * Java 使用自动内存管理，通过垃圾回收机制来释放不再被引用的对象占用的内存。\n  * 当对象不再被任何引用指向时，它就成为垃圾，垃圾回收机制将识别并释放这部分内存。\n\n### 2\\. **垃圾回收的方式：**\n\n  * **标记-清除算法：**\n\n    * 垃圾回收器会通过根对象开始遍历整个对象图，标记所有被引用的对象。然后清除所有未标记的对象，释放它们的内存。\n  * **复制算法：**\n\n    * 将内存分为两块，每次只使用其中一块。当一块内存用尽时，将存活的对象复制到另一块内存中，然后清除当前内存中的所有对象。\n  * **标记-整理算法：**\n\n    * 结合了标记-清除和复制算法的优点。首先标记所有存活的对象，然后将它们向一端移动，清理掉端边界以外的对象，最后释放内存。\n\n### 3\\. **垃圾回收器的类型：**\n\n  * **Serial 收集器：**\n\n    * 单线程执行，适用于小型应用或者客户端应用。\n  * **Parallel 收集器：**\n\n    * 多线程执行，适用于多核处理器，关注吞吐量。\n  * **CMS（Concurrent Mark-Sweep）收集器：**\n\n    * 以最短停顿时间为目标，主要用于对响应时间有较高要求的应用。\n  * **G1（Garbage First）收集器：**\n\n    * 面向服务端应用，将堆内存划分为多个区域，进行垃圾回收。\n\n### 4\\. **手动内存管理和`new` 的回收：**\n\n  * Java 中，开发者无需手动释放通过 `new` 创建的对象。垃圾回收器会自动检测不再被引用的对象并回收它们所占用的内存。\n\n  * 开发者需要注意的是，及时释放对对象的引用可以加速垃圾回收的进行，提高程序的性能。\n\nJava的垃圾回收机制为开发者提供了方便的内存管理手段，通过不同的垃圾回收算法和收集器，可以满足不同应用场景的需求。\n\n## 7.怎么判断是否还在引用\n\n在Java中，可以使用垃圾回收机制来判断一个对象是否还在引用。当一个对象没有任何引用指向它时，垃圾回收机制会将其标记为可回收的垃圾对象，并在适当的时候进行回收。\n\n然而，我们也可以通过代码来判断一个对象是否还在引用。以下是几种常见的方法：\n\n  1. 引用计数法：为对象添加一个引用计数器，每当有一个引用指向该对象时，计数器加1；当引用失效时，计数器减1。当计数器为0时，表示该对象没有任何引用指向它，即可判断对象不再被引用。\n  2. 可达性分析算法：通过判断对象是否可达来确定是否还有引用指向它。Java中的垃圾回收器使用的就是这种算法。当一个对象不再被任何根对象（如静态变量、局部变量等）引用时，即可判断对象不再被引用。\n\n下面是一个示例代码，演示了如何判断一个对象是否还在引用：\n\n    \n    \n    复制public class ObjectReferenceExample {\n        public static void main(String[] args) {\n            Object obj = new Object(); // 创建一个对象\n            Object ref = obj; // 引用指向该对象\n    \n            obj = null; // 将对象的引用置为null\n    \n            if (ref != null) {\n                System.out.println(\"对象还在引用中\");\n            } else {\n                System.out.println(\"对象已不再引用\");\n            }\n        }\n    }\n    \n\n在上述示例中，当将`obj`的引用置为null后，通过判断`ref`是否为null，可以确定对象是否还在引用。如果输出结果为\"对象已不再引用\"，则表示对象不再被引用。\n\n需要注意的是，Java的垃圾回收机制是自动进行的，我们无法手动控制对象的回收时机。因此，判断一个对象是否还在引用只是一种判断手段，具体的对象回收由垃圾回收机制负责。\n\n## 8.什么情况下回收到老年代\n\n在Java中，对象的内存分配和回收是由垃圾回收器（Garbage\nCollector）负责的。垃圾回收器会根据对象的存活时间和内存分配情况，将对象分配到不同的内存区域，包括新生代（Young\nGeneration）和老年代（Old Generation）。\n\n一般情况下，新创建的对象会被分配到新生代的Eden区域。当Eden区域满时，会触发一次Minor\nGC（新生代垃圾回收），将存活的对象复制到Survivor区域。经过多次Minor GC后，仍然存活的对象会被晋升到老年代。\n\n除了新生代中的对象晋升到老年代外，还有以下情况会导致对象直接分配到老年代：\n\n  1. 大对象直接分配：如果需要分配的对象大小超过了老年代的阈值（通过参数-XX:PretenureSizeThreshold设置），则该对象会直接在老年代分配。\n  2. 长期存活的对象：如果一个对象经过多次Minor GC后仍然存活，那么它会被晋升到老年代。这是因为老年代的对象存活时间更长，可以容纳那些长期存活的对象。\n  3. 动态年龄判定：在Survivor区域中，对象经过多次Minor GC后仍然存活的，会根据其年龄（通过参数-XX:MaxTenuringThreshold设置）决定是否晋升到老年代。\n\n对象被分配到老年代并不意味着它会立即被回收。老年代的垃圾回收通常是通过Major GC（Full\nGC）来进行的，它会对整个堆内存进行回收，包括新生代和老年代。Major GC的触发条件和具体行为会根据不同的垃圾回收器和参数设置而有所不同。\n\n总之，对象在Java中被分配到老年代的情况包括：大对象直接分配、长期存活的对象和经过多次Minor GC后仍然存活的对象。\n\n## 9.快排的原理\n\n  * 快速排序（Quicksort）是一种常用的排序算法，它的原理基于分治法（Divide and Conquer）。快速排序的基本思想是选择一个基准元素，通过一趟排序将待排序的序列分割成独立的两部分，其中一部分的所有元素都比基准元素小，另一部分的所有元素都比基准元素大，然后对这两部分继续进行排序，最终得到一个有序序列。\n\n具体的快速排序算法步骤如下：\n\n    1. 选择一个基准元素（通常选择序列的第一个元素）。\n    2. 设定两个指针，一个指向序列的起始位置，称为左指针（left），另一个指向序列的末尾位置，称为右指针（right）。\n    3. 左指针向右移动，直到找到一个大于等于基准元素的元素。\n    4. 右指针向左移动，直到找到一个小于等于基准元素的元素。\n    5. 如果左指针小于等于右指针，则交换左右指针所指向的元素。\n    6. 重复步骤3到步骤5，直到左指针大于右指针。\n    7. 将基准元素与右指针所指向的元素进行交换，此时基准元素左边的元素都小于基准元素，右边的元素都大于基准元素。\n    8. 对基准元素左边的子序列和右边的子序列分别进行递归调用快速排序算法。\n\n通过不断地划分子序列并对子序列进行排序，最终可以得到整个序列的有序排列。\n\n快速排序的时间复杂度为O(nlogn)，其中n为待排序序列的长度。它是一种原地排序算法，不需要额外的辅助空间，但是在最坏情况下（序列已经有序或逆序），时间复杂度可能达到O(n^2)。为了避免最坏情况的发生，可以采用随机选择基准元素或者三数取中法来选择基准元素，以提高算法的性能。\n\n## 10.在10亿条数据里找出最大的一百条用什么方法\n\n在10亿条数据中找出最大的一百条数据，可以使用堆排序（Heap\nSort）的方法来解决。堆排序是一种基于二叉堆的排序算法，它可以在O(nlogk)的时间复杂度内找出最大的k个元素。\n\n具体步骤如下：\n\n  1. 创建一个大小为100的最小堆（Min Heap）。\n  2. 遍历10亿条数据，对于每个数据项，执行以下操作： \n     * 如果堆的大小小于100，将数据项插入堆中。\n     * 如果堆的大小已经达到100，比较当前数据项与堆顶元素的大小： \n       * 如果当前数据项大于堆顶元素，将堆顶元素替换为当前数据项，并进行堆的调整操作，以保持最小堆的性质。\n       * 如果当前数据项小于等于堆顶元素，则忽略该数据项。\n  3. 遍历完所有数据后，最小堆中的100个元素即为最大的一百条数据。\n\n通过使用最小堆，我们可以始终保持堆中的元素是当前最大的k个元素。每次插入新的数据项时，如果堆已满且新数据项比堆顶元素大，则替换堆顶元素，并进行堆的调整操作。这样，最终堆中的元素就是最大的k个元素。\n\n需要注意的是，由于数据量非常大，内存可能无法一次性加载所有数据。因此，可以采用分批加载数据的方式，每次加载一部分数据进行处理，直到遍历完所有数据。\n\n另外，为了进一步提高性能，可以使用多线程或分布式处理的方式来并行处理数据，加快查找最大的一百条数据的速度。\n\n## 11.mysql的事物隔离级别和区别\n\nMySQL支持多个事务隔离级别，用于控制并发事务的隔离程度。不同的隔离级别提供了不同的数据一致性和并发性保证。以下是MySQL中常见的四个事务隔离级别及其区别：\n\n  1. 读未提交（Read Uncommitted）： \n     * 最低的隔离级别，事务中的修改可以被其他事务立即读取。\n     * 存在脏读（Dirty Read）问题，即一个事务读取到了另一个事务未提交的数据。\n     * 可能导致不可重复读和幻读问题。\n  2. 读已提交（Read Committed）： \n     * 保证一个事务提交后，其他事务才能读取到其修改的数据。\n     * 解决了脏读问题，但仍可能出现不可重复读和幻读问题。\n  3. 可重复读（Repeatable Read）： \n     * 默认的隔离级别，保证在同一个事务中多次读取同一数据时，结果始终一致。\n     * 通过多版本并发控制（MVCC）机制实现，读取的是事务开始时的快照数据。\n     * 解决了脏读和不可重复读问题，但仍可能出现幻读问题。\n  4. 串行化（Serializable）： \n     * 最高的隔离级别，确保事务串行执行，避免了脏读、不可重复读和幻读问题。\n     * 通过对读取的数据加锁实现，保证了最高的数据一致性，但并发性较差。\n\n需要注意的是，隔离级别越高，数据一致性越好，但并发性能也会降低。选择合适的隔离级别需要根据具体业务需求和并发访问情况进行权衡。\n\n在MySQL中，可以通过以下方式设置事务隔离级别：\n\n  * 在连接时设置：`SET SESSION TRANSACTION ISOLATION LEVEL <隔离级别>`\n  * 在事务开始时设置：`SET TRANSACTION ISOLATION LEVEL <隔离级别>`\n  * 在创建表时设置默认隔离级别：`CREATE TABLE ... ENGINE=<存储引擎> DEFAULT TRANSACTION ISOLATION LEVEL <隔离级别>`\n\n总结：MySQL的事务隔离级别包括读未提交、读已提交、可重复读和串行化。不同的隔离级别提供了不同的数据一致性和并发性保证，开发者需要根据具体需求选择合适的隔离级别。\n\n## 12.索引的底层，为什么用B+树\n\n在MySQL中，索引的底层数据结构主要有以下几种：\n\n  1. B+树（B+ Tree）：B+树是最常用的索引数据结构，它具有有序性、平衡性和磁盘访问优化等特点，适用于范围查询、排序和高效的插入、删除操作。\n  2. 哈希索引（Hash Index）：哈希索引使用哈希函数将键值映射到索引位置，适用于等值查询，具有快速的查找速度。但是，哈希索引不支持范围查询和排序操作，且对于键值的插入和删除操作相对较慢。\n  3. 全文索引（Full-Text Index）：全文索引用于对文本内容进行搜索，支持关键词的模糊匹配和全文检索。MySQL中的全文索引使用倒排索引（Inverted Index）来实现。\n  4. 位图索引（Bitmap Index）：位图索引使用位图来表示每个键值的存在与否，适用于低基数（Cardinality）的列，如性别、状态等。位图索引可以进行位运算来进行快速的多条件查询。\n  5. R树（R-Tree）：R树是一种用于空间数据的索引结构，适用于地理信息系统（GIS）等场景，可以高效地支持空间范围查询。\n\nB+树是一种平衡的多路搜索树，它具有以下特点，使其成为数据库索引的理想选择：\n\n  1. 有序性：B+树的所有节点都按照键值的大小顺序排列，这使得B+树在范围查询和排序操作上具有良好的性能。\n  2. 平衡性：B+树通过自平衡的方式保持树的平衡，使得每个节点的高度相对较小，从而减少了查询的IO次数。\n  3. 磁盘访问优化：B+树的节点通常比内存页的大小要小，一个节点可以存储多个键值对，这样可以减少磁盘IO的次数。\n  4. 支持快速查找：B+树的查找操作只需要进行一次从根节点到叶子节点的遍历，而不需要回溯。\n  5. 支持范围查询：B+树的有序性使得范围查询变得简单，只需要在叶子节点上进行遍历即可。\n  6. 支持高效的插入和删除：B+树的自平衡特性使得插入和删除操作相对高效，只需要进行少量的节点分裂和合并操作。\n\n由于数据库中的索引通常需要支持高效的查找、范围查询和排序操作，而B+树恰好具备这些特点，因此被广泛应用于数据库索引的实现中。\n\n## 12.回表查询\n\n回表查询是指在使用非聚集索引进行查询时，需要通过索引中的指针回到主键索引或者聚集索引中获取完整的数据行的过程。回表查询通常发生在以下场景中：\n\n  1. 需要查询的字段不在非聚集索引中：当查询的字段不在非聚集索引中时，数据库引擎无法直接从索引中获取完整的数据行，而是需要通过回表操作到主键索引或聚集索引中获取完整的数据行。\n  2. 需要返回的数据超过了非聚集索引的覆盖索引能力：覆盖索引是指索引中包含了查询所需的所有字段，可以直接从索引中获取查询结果，而无需回表操作。但是，如果需要返回的数据超过了非聚集索引的覆盖索引能力，仍然需要进行回表查询。\n  3. 使用了索引优化的查询：有些查询语句可能会使用到索引优化，例如使用了索引的覆盖扫描、索引合并等技术，这些优化可能会导致回表查询的发生。\n\n回表查询会增加额外的IO操作，因为需要通过指针再次访问主键索引或聚集索引。在一些对查询性能要求较高的场景中，可以考虑使用覆盖索引或者调整查询语句的优化方式，以减少回表查询的次数。\n\n回表查询并非一定是性能问题，有时候回表查询是必要的，特别是在需要返回完整数据行的情况下。在设计数据库表和索引时，需要根据具体的业务需求和查询场景来选择合适的索引策略，以达到最佳的查询性能。\n\n## 13.redis为什么快，怎么持久化\n\nRedis之所以快速，主要有以下几个原因：\n\n  1. 内存存储：Redis将数据存储在内存中，相比于传统的磁盘存储，内存的读写速度更快，可以达到微秒级的响应时间。\n  2. 单线程模型：Redis采用单线程模型，避免了多线程之间的竞争和锁的开销，简化了并发控制，提高了处理请求的效率。\n  3. 非阻塞IO：Redis使用了异步的非阻塞IO模型，通过IO多路复用技术（如epoll、kqueue等）实现高效的网络通信，提高了并发处理能力。\n  4. 简单的数据结构：Redis支持多种简单的数据结构，如字符串、哈希表、列表、集合和有序集合等，这些数据结构的实现都经过了优化，使得Redis在处理这些数据结构时更加高效。\n\n至于Redis的持久化机制，它提供了两种持久化方式：\n\n  1. RDB（Redis Database）持久化：RDB是Redis默认的持久化方式，它通过将内存中的数据快照保存到磁盘上的二进制文件中。可以手动触发或定期自动触发RDB持久化。RDB持久化适用于数据备份和恢复，但可能会有一定的数据丢失。\n  2. AOF（Append-Only File）持久化：AOF持久化通过将写操作追加到文件末尾的方式来记录数据的变化，以保证数据的持久性。AOF持久化可以通过配置不同的策略来控制写入频率，包括每个写命令、每秒钟同步一次或者按照一定的时间间隔同步。AOF持久化适用于数据的持久性要求较高的场景，但相比RDB持久化，AOF持久化的文件更大，恢复速度较慢。\n\n可以根据实际需求选择适合的持久化方式，或者同时使用RDB和AOF持久化来提高数据的安全性和可靠性。\n\n[出处飞机](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Ffeed%2Fmain%2Fdetail%2F8aeccf3c32b3448ba71a2d445168e369%3FsourceSSR%3Dsearch)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577244691104538624?sourceSSR=users",
        "title": "字节跳动安卓测试岗一面面经",
        "content": "考研二战老狗工作辛酸血泪史的起点\n\n1、自我介绍\n\n2、在公司做的内容\n\n3、操作系统 进程的创建底层逻辑  进程分配方式\n\n4、对于锁和死锁的理解\n\n5、计算机网络 关于tcp/ip的理解\n\n6、三次挥手 四次握手\n\n7、测试仪表 测试经历 有没有在测试中发现bug\n\n8、本科有没有写过一些便利自己生活学习的脚本\n\n9、有没有api接口的工程经验\n\n10、算法题：给出两个时钟的时间 输出秒数的差\n\n许愿后面顺利🥹🥹\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577243954207268864?sourceSSR=users",
        "title": "蔚来-测开-实习",
        "content": "1.问简历！所有项目都问！\n\n2.python里怎么打开和关闭文件\n\n3.使用过什么py的库\n\n4.python中常见的数据类型有哪些\n\n5.什么时候使用过字典\n\n6.python的深拷贝和浅拷贝\n\n7.使用过什么框架\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577209192319135744?sourceSSR=users",
        "title": "七牛云测开实习-我承认我菜了 后续oc",
        "content": "七牛云是我面过强度最高的厂，真把我面昏了[牛泪]  \n一面是一个小姐姐，好狠，上来做题，1.h  \n链表反转 k个链表反转 k个升序链表  \n二面是一个小哥哥，好狠，问死我了1.30min  \n\n1.问实习10min\n\n2.实习里面问场景\n\n3.面试官ping能到我电脑吗？为什么\n\n4.你讲一下ping的整体流程\n\n5.cdn节点怎么选择?cdn更新策略，出现脏数据怎么办\n\n6.cdn某一节点被攻击挂了，接下来怎么处理\n\n7.JAVA基础，arrylist linklist区别\n\n8.arry顺序读造成哪些问题\n\n9.arry线程安全吗？为什么不安全，arry扩容为什么不在原地扩容而是新开辟一个数组\n\n10.一核cpu和多核cpu的区别\n\n11.一核cpu操作arry线程安全吗？为什么\n\n12.volatile关键字介绍一下\n\n13.为什么不能保证原子性，既然不能保证原子性为什么要有这个关键字\n\n14.docker底层 隔离资源分配 镜像\n\n15.写个题吧\n\n死锁\n\n出现死锁怎么定位?\n\n反转二叉树\n\n递归的逻辑处理为什么要放在后面，放在前面不可以吗？放在中间呢\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577206879865094144?sourceSSR=users",
        "title": "B站后端1面",
        "content": "> 面试时间45min\n\n# Java基础\n\n  1. HashMap的实现原理\n  2. HashMap的put(key,val)和get(key)过程\n  3. HashMap一般用什么做Key\n  4. 为啥String适合做Key呢\n  5. HashMap的扩容机制\n  6. HashMap的大小为什么是2的n次方大小呢\n  7. 说一下Java中的List\n  8. 说一下volatite关键字\n  9. volatile可以保证线程安全吗\n  10. 说一下线程池的常见配置\n  11. 假如现在有15个任务 5个核心线程 最大线程是10 工作队列是5 请问执行顺序是怎样的\n  12. 说一下ThreadLocal\n  13. jvm的内存结构\n  14. 类加载机制\n  15. 创建对象的过程\n  16. 对象的生命周期\n  17. SpringAOP怎么实现的\n  18. AOP实现有哪些注解\n  19. JDK动态代理和cglib有啥区别\n  20. 聊一下Java中的反射\n\n# Coding\n\n  1. 用double check实现单例模式\n  2. 层序换行遍历二叉树\n\n# 复盘\n\n  1. 加强Java基础学习与思考 HashMap、List\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577166603473739776?sourceSSR=users",
        "title": "阿里妈妈广告算法工程师一面（社招）",
        "content": "1.自我介绍\n\n2.最近的一段工作的细节展开（可能是要讲跟算法相关的项目）\n\n3.找搜广推的原因\n\n4.讲实习项目\n\n5.一个推荐系统大致包含哪些模块以及这些模块各自的优化目标\n\n6.各个阶段的核心优化指标\n\n7.了解的最具代表性的召回算法和最近几年工业界最常用的召回算法\n\n8.attention（这个忘了。。）\n\n9.抛一枚硬币，抛到连续出现两次反面就结束，问抛的次数的期望（妈呀，问这种题。。）\n\n10.算法题\n\n最长公共子串（牛客hot101原题），用动态规划解\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577150513351761920?sourceSSR=users",
        "title": "秋招总结",
        "content": "兜兜转转，最终还是选择毁约中望签了华为，希望未来可以一切顺利！秋招彻底画上了句号。\n\n## 个人背景\n\n本硕西电，专业信息与通信工程，无实习，无论文，有一个已受理的专利，力扣大概350+。\n\n## 准备阶段\n\n我大概是在研一下半学期确定自己要走C++后端开发方向的，之前也是各种纠结和考虑，因为实验室主要做一些图像处理和雷达的交叉应用，所以一开始是想卷算法的，后来了解了很多之后果断放弃了，由于本科有C的基础，同时实验室有Qt的项目要求，所以选择了C++后端开发。ps：各位在选择的时候主要看自己未来想要从事哪方面的工作吧。\n\n这里特别感谢一些秀哥，不管是准备还是offer选择都给了我很多帮助和建议。\n\n在学习新知识方面，我个人比较喜欢先看视频了解大概，然后看书研究细节。我也算非科班，基本是0基础开始学习四大件，大概是从2022年4月正式开始学习，因为研究生还有科研任务，所以我的时间分配大概是：早上下午科研，晚上周末学工作的东西。\n\n#### 编程语言C++\n\n视频：黑马，侯捷老师\n\n书籍：《C++ Primer》《STL源码剖析》《Effective C++》《Effective modern\nC++》《深度探索C++对象模型》（部分章节）\n\n#### 数据结构与算法\n\n书籍：《大话数据结构》\n\n刷题网站主要是牛客和力扣，代码随想录+剑指offer+hot100，大概做了两遍，重点模块的题做了三遍，后期参加了几次周赛\n\n#### 计算机网络\n\n视频：计算机网络微课堂\n\n书籍：《图解TCP/IP》《图解HTTP》《计算机网络自顶向下》\n\n#### 操作系统\n\n提一句，我个人觉得走C++方向操作系统需要多深入学习一下，找工作有一定的帮助。\n\n视频：南京大学计算机系统基础(一)（二）\n\n书籍：《计算机是怎样跑起来的》《现代操作系统》《操作系统真象还原》（我的一个项目就是根据这本书做了一个miniOS）\n\n#### 数据库\n\n说实话，C++方向数据库问的不是很多，一些大厂的后端开发岗位喜欢问道\n\n视频：尚硅谷的MySQL入门视频和Redis视频\n\n书籍：《MySQL是怎样运行的》《MySQL必知必会》《Redis设计与实现》\n\n#### Linux\n\n书籍：《Linux高性能服务器编程》\n\n## 秋招阶段\n\n大概从7月中旬开始投递，也是海投战术，前期主要是一些中小公司和不会去的公司，后面因为想留在西安，所以基本只投西安的公司和大厂（特别想说，还是多一点城市选择的好，allin一个风险太高），提前批和正式批有100家左右，进笔试的有51家，进面试的有30家，最终拿到offer的有12家，除了华为和美团，其他的都是中小厂（OPPO，联发科，TP联洲，京东方，海康，中望，诺瓦，广联达，亚控科技，腾讯云智），最后也是选择了毁约中望去华为。8、9、10三个月是笔试面试高峰期，强度很高。\n\n大厂：腾讯没有投，阿里只投了阿里云（二面挂），字节（笔试挂，后面被捞没有去面），百度（三面挂），快手（三面后无消息），京东（笔试后转岗到移动端就放弃了）\n\n大部分的面经都在牛客有记录。\n\n笔试：大部分笔试难度适中，大厂的会难一些，需要多刷一些题目。\n\n面试：\n\n自我介绍准备1-2分钟就可以，主要介绍自己的经历和项目，突出自己的优势\n\n手撕基本是hot100，也有一些其他的类似手撕生产者消费者模型或者是自创题目，还是已hot100和剑指为主\n\n八股主要参考面经和博主网站，最好能够自己总结一下，也方便理解和记忆\n\n项目自己一定要吃透，最好是有一些自己的东西，即使没有也要把已有的东西弄清楚，一些关键部分的代码要会写，百度一面直接让自己选项目一块内容现场实现，所以要掌握的很牢靠，不能一知半解\n\n## 总结\n\n找工作其实是持久战，从准备到签约中间经历了有一年半多的时间，坚持不容易，需要时刻提醒自己，明确自己的目标，知道自己想要什么，工作还是在赚钱的基础上去选择自己喜欢的，毕竟这是未来每天都要接触的东西。非常感谢秋招期间帮助我的人，希望大家未来一切顺利，祝各位前程似锦！\n\n喜欢一句话“你只管努力提高自己，剩下的交给时间”。\n\n![alt](https://uploadfiles.nowcoder.com/images/20240111/779588882_1704944805514/516464A67AB5E06F4AA253C18D248748)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577131573783408640?sourceSSR=users",
        "title": "小丑面试记录：清华课题组 & 得物青训 & 三维家",
        "content": "#### Aurora System（60min，OC）\n\n基础 & 引用数据类型 {} === {} NaN === NaN\n\n圣杯布局 多种解法\n\n防抖/节流 手写\n\n生命周期 Vue/React 源码\n\n千分位转化 思路 正则 or 其他\n\n排序（我让面试官和我说）\n\n数组几十种方法 增删改查 参数/返回值/区别/注意事项/底层原理/手写\n\n树状数组转化（压轴，GitHub 有写）\n\nReact & Vue 区别\n\n反问（业务 & 技术栈）\n\n#### 清华课题组（20min，OC）\n\n都不让我展开讲讲┭┮﹏┭┮\n\n自我介绍\n\n项目相关\n\n什么是 TCP\n\n跨域请求方式\n\nVue 组件通信\n\nv-model 实现\n\n#### 得物青训（27min，OC）\n\n自我介绍\n\n项目相关\n\n为什么要做前端\n\n学校方面怎么处理\n\n怎么学习前端的\n\n个人博客相关\n\n业务目标 & 技术难点\n\n懒加载在项目中的具体实现\n\n封装组件思路\n\n判断是否是数组\n\n找到数组中最大的元素\n\n为什么大二实习\n\n反问（几轮面试 & 业务 & 技术栈）\n\n有人指导你吗\n\n#### 三维家一面（90min，HR 面挂）\n\n拷打项目\n\n为什么要做前端\n\n懒加载在项目中的具体实现\n\nVue2 & Vue3 & React 响应式原理（手写实现 & 整体架构）-> 面试官给予很高的评价\n\nVue 组件通信\n\n为什么大二实习\n\n高中有接触编程吗\n\n学校方面怎么处理\n\n反问（业务 & 技术栈 & 3D 与 算法、AIGC 和自动驾驶的关系）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577102086924513280?sourceSSR=users",
        "title": "6道游戏行业笔试题，试试你能做对几道",
        "content": "策划类 1\n\n某游戏的迎中秋活动，玩家每次消耗50点券，可以随机得到一排文字：“迎”“中”“秋”“吃”\",\"“月”“饼”的一个排列，比如“饼月中秋吃迎”。\",\"玩家可以对调任態两个文宇的位置，如对调“饼“和“月”得到“月饼中秋吃迎”。\",\"玩家拥有4次对调机会，当4次机会用尽后，如果玩家能够排列出\"迎中秋吃月饼”，则可以获得一个宝箱奖动。如果玩家不能够排列出，则本次游戏结束，需要消耗点券重新开始。\n\n1） 请问玩家平均花多少点券，才可以得到一个宝箱。\n\n2） 如果将玩家的每次消耗点券数量下调到M点券，并降低玩家对调次数到3次。允许玩家额外付费N点券，可以购买一次对调机会\",\"A\n如果期望玩家的平均开宝箱价格不变，则M,N设置为多少比较合适\",\"B 如果期望玩家平均开宝箱的价格提升10%，则M,N设置为多少比较合适\n\n3） 请设计一个你觉得最能促进玩家参与该活动的形式，提高该活动的玩家口碑，但总体统计，单个宝箱售价平均值不低于原先设计的90%\n\n策划类 2\n\n地图中有多个据点,红蓝双方要尽可能久地占领据点。\",\"当一方占领据点到一定时间后，则据点归属于该方，同时不断为该方增加分数。\",\"当一方的分数达到目标分数时，则胜利。\",\"图中，红蓝双方分别代表出生地，A/B/C点代表据点\n\n![](https://uploadfiles.nowcoder.com/files/20240117/492502066_1705462309031/.jpg)\n\n1）请随意安排出生点与据点的位置，用连线表示地图中的路线，使得该玩法基本成立。\n\n2）在问题1的基础上，请发散你的思维，任意增加各种玩法元素（例如机关、守卫等），完成一个FPS射击游戏的2D俯视地圈，使该玩法更加具有博弈性和趣味性。如有新的元素和策略产生，请简单闸述。\n\n营销类1\n\n你曾经处理过的最大量级数据是多少？处理目的是？你是如何处理的？处理结果如何？\n\n营销类 2\n\n名词解释，写出以下几个名词的代表意思。广告展示；广告点击；广告转化率\n\n营销类 3\n\n根据你对面向消费者的产品（To C类）、面向企业的产品（To B类）的认识，结合最近的案例来阐述这两类产品在品牌营销方式上的区别。\n\n运营/产品类\n\n内容付费成为近两年互联网的新风口，衍生了不少内容付费产品。轻列举3种当下主流的内容付费模式，并描述每种模式的特点和发展前景。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/577064987940683776?sourceSSR=users",
        "title": "富途测开社招记录",
        "content": "时间线：2024.1.10在boss上投递，base深圳\n\n投递完就有hr来打电话初筛，问了两道逻辑题，我说我都不会，然后就挂电话了，全程不到三分钟\n\n时间线：2024.1.16晚一面\n\n面试开始，没有自我介绍，直接开始\n\n1.介绍一下自己负责的一个最大的测试项目\n\n2.微信发消息的测试用例\n\n3.cookie跟session的区别\n\n4.什么是数据库左连接，我说是left join，他还要我把完整sql说出来，然后我就说出来了（我心想这还要说吗。。）\n\n4.面试官想问设计模式，我说我没怎么用过（其实是我忘了），然后面试官就不问这个问题了\n\n5.Java基础：什么是封装，为什么要封装\n\n（这个我回答也不好，脑子一时间又忘了）\n\n6.做一道算法题，给一个对象，有一个children跟parent属性，要求输出[a,b,c],[d,e,f]\n\n这道题长得很像树，但是他说的那个children属性又是个数组，\n\n我给出了树的dfs思路，递归思路都说出来了，可是他不理解，偏要我写出来，可是题目那个对象又要自己设计结构，我没设计好，最后也没真正写出来\n\n7.反问，问我哪里要补充的\n\n面试结束-----------------------------------------\n\n我觉得应该是凉了，我面试前准备的逻辑题一道都没有问。。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576902907447017472?sourceSSR=users",
        "title": "美团-工程效能组-开发工程师实习生(工程基建方向)-一面",
        "content": "### 项目\n\n  1. 介绍网页音视频项目\n  2. 项目代码量多少？是一个人完成的吗？\n  3. 介绍SaaS视频项目\n\n### Spring\n\n  1. Spring框架有什么特性？(❌不知道这个问题要问什么，答的扩展性、封装性啥的)\n  2. 控制反转了解吗？原理呢？(❌简单说了下，原理不知道)\n  3. AOP了解吗?项目用过吗？(❌简单说了下，项目里没用过)\n\n### Java\n\n  1. 线程池的七个参数？\n  2. 拒绝策略有哪些？(❌漏了一个静默丢弃)\n  3. 阻塞队列的长度怎么设置？(❌不会)\n  4. Java 里面异常处理都有哪些方式？\n  5. HashMap和HashSet有什么区别？\n  6. 解决hash冲突有哪些方式？\n\n### 数据库\n\n  1. 数据库有哪些索引类型\n  2. MySQL里有哪些锁？分别介绍下\n  3. SQL题 (name, course，score)求每个学生的平均分。开始是用的子查询，经过提醒后改成having\n\n### Redis\n\n  1. Redis有哪些数据结构？项目里怎么使用的\n  2. 缓存雪崩？\n\n### Linux\n\n  1. 修改文件权限的命令(❌忘了)\n  2. 查看端口的命令(❌忘了，这个忘了属实不应该)\n\n### 算法\n\n字符串数组的最大公共前缀并给出时空复杂度。eazy题。\n\n### 反问\n\n  1. 面试官还问了到岗时间，实习时长之类的信息。\n  2. 这个岗位到底是干啥的？\n\n面试官说是开发一些公司内部的软件平台比如持续交付、研发还有质量还有效率平台啥的，主要技术栈也是Java和Spring，和我比较匹配。\n\n### 总结\n\n这个岗位是乱投的，约面后看了介绍还以为是测开或者配置机房电脑啥的😂😂，所以对待比较随意，面试前十分钟才起床🤣，但是没想到也是Java和Spring技术栈😭，后悔没早点起来复习一下。面试官说一个星期内出结果，知道技术栈也是Java和Spring后我还挺想去的，团子求你收了我吧😭😭😭。\n\n  \n\n17 号更新，已 oc。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576874866918359040?sourceSSR=users",
        "title": "xx 实习面经 20240116",
        "content": "面试官人很好，只问我熟悉的内容\n\n  1. JVM内存结构分为哪几部分，都有什么用？\n  2. 反射机制及其应用？\n  3. 动态代理的实现\n  4. 讲一下线程池\n  5. 线程池的优点？\n  6. MySQL索引的底层数据结构\n  7. 索引失效的场景\n  8. redis跳表\n  9. 项目介绍以及项目中的难点\n\n答案整理：https://www.yuque.com/g/fengfeng-\nxwaso/da9maw/yrcf93t3ylidvrt1/collaborator/join?token=OlovtJ6rHQMy0KSs&source=doc_collaborator#\n《20240116》\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576849758786985984?sourceSSR=users",
        "title": "面试题解析|宝洁八大问-逻辑思维（优先级）",
        "content": "‼️题目：详细描述一个场景，在这个场景中你必须搜集相关信息，划定关键点，并且决定依照哪些步骤能够达到所期望的结果\n\n🌿关键词：收集信息&划定关键&决定步骤\n\n💡提示：本问题答案的选材有一个极容易忽视的点，即：最终你所选择的步骤，应该是一个最优路径或至少是一个很棒的解决方案，否则，整个思路都是不成立的。\n\n💗讲述逻辑：\n\n1.情景信息（当时面临的困难，需要解决的问题是什么）\n\n2.简单讲收集信息的步骤并对这一步的结果进行总结（如何选取信息源，如何判断有效信息）\n\n3.如何做出后续步骤的优先级排序（重点，讲出合理的原因）\n\n4.最终采取的步骤以及这个情景的结果。（次重点，这里所述会起到验证步骤的作用。）\n\n👍宝洁八大问作为非常经典的问题合集，能够很好的帮助大家总结自己的个人经历，建议每一位候选人在求职前都可以深入学习了解下宝洁八大问的回答技巧。如果有疑问，可以后台私信详细咨询。\n\n面试稳稳赢系列会主要和大家共同讨论面试题目的拆解，站在HR的视角带你看透面试问题的本质。欢迎持续关注，另外同时有简历稳稳赢，求职稳稳赢等更多板块，欢迎大家来我的主页，学习以及讨论相关话题。\n\n![](https://uploadfiles.nowcoder.com/compress/mw1000/images/20240116/722513612_1705403835418/A4C8AD41EC026D6917AC8359D963111B)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576849457367523328?sourceSSR=users",
        "title": "字节跳动商业化面经",
        "content": "#\n\n一面 1.15 1点 1h\n\n  1. 什么是死锁，死锁的产生条件，破坏死锁\n  2. 进程和线程区别，线程共享内存和进程共享内存的区别\n  3. 进程间如何通信\n  4. redis和mysql的区别\n  5. redis的zset，什么是跳表，插入一个节点要构建几层索引\n  6. B+树，为什么3层容纳2000W条，为什么2000w条数据查的快\n  7. url请求的全过程（要求详细）\n  8. (A,B,C) 联合索引 select * from tbn where a=? and b in (?,?) and c>? 会走索引吗\n  9. 力扣79\n  10. 二叉搜索树转双向链表\n\n二面 1.16 5点 1h\n\n  1. 什么是三大范式，为什么要有三大范式，什么场景下不用遵循三大范式，举一个场景\n  2. 什么是SQL注入，怎么避免，什么是参数化\n  3. mysql怎么存emoji，怎么编码\n  4. 什么是深分页，select * from tbl limit 1000000000这个有什么问题，如果表大或者表小分别什么问题\n  5. 一个表（name, sex,age,id），select age,id,name from tblname where name='shejing';怎么建索引\n  6. http和https的区别，https是怎么建立连接，https是对称还是非对称加密\n  7. http的响应号有哪些\n  8. http有哪些方法，http的get方法可以实现写操作吗，https传递url安全吗，为什么数据在浏览器中，中间人攻击是什么\n  9. 针对用户输入的前缀字符串，统计输出的top10的热词\n  10. leetcode 47\n  11. int num[] ,k。对这个数组进行排序，数组中的每个元素距离他排序后的位置相差的距离小于等于k\n\n二面面试官太压力了，得着我回答的一个点一直问，汗流浃背，许愿oc\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576835429337464832?sourceSSR=users",
        "title": "【面试经验分享】招商银行深圳分行二面",
        "content": "时长：10-15min\n\n形式：单面\n\n-有三位面试官\n\n流程：\n\n1\\. 自我介绍（1-2min）\n\n2\\. 简历问题提问\n\n-看你的简历上是没有去过深圳的，为什么要去深圳工作？\n\n-在你过去的实习经历里做的都是偏向于项目管理类的经历，为什么要投递对公类销售岗位？\n\n-为什么想在银行业工作？\n\n-你能不能举一个例子证明你的协调统筹能力\n\n-个人经历中有空缺的时间，在做什么？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576814493473255424?sourceSSR=users",
        "title": "中邮消费金融AI算法工程师（实习生） 面经",
        "content": "这个是在猎聘上投递的 能收到面试属实是意外之喜\n\n![](https://uploadfiles.nowcoder.com/images/20240116/594042216_1705394548014/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n面试官是nlp方向的，主要是问nlp相关\n\n首先自我介绍\n\n说一个在上段实习中的项目 这里说了一个搭建智能客服对话助手 我说了一下思路 面试官很快get到了 又问了一些细节（比如我用了DPR文本检索模型\n面试官顺带问了对比学习的方法和流程）\n\n看我做的是机器学习和优化算法比较多 问了遗传算法 如何找全局最优解和局部最优解\n\n遗传算法为什么能找到全局最优 它的交叉操作是怎么实现的\n\n神经网络如何与这种元启发式算法结合起来\n\n问了最优化方法的框架 重点问了无约束优化方法 分为哪几类（这里答了分为确定方向步长的方法和信赖域方法 并分别举例说明了）\n\n了解AIGC吗 有哪几种结构（这块只作为用户体验过 并不了解）\n\n了解文本生成模型吗 这里答了LDA主题模型 问了LDA的实现原理和两种求解方法（吉普斯采样和EM算法）\n\n概率图有哪些\n\ngpt的结构是什么 这里我答了transformer的结构\n\npython中的迭代器有哪些\n\nhttp的协议有哪些\n\n面了将近35分钟 终于结束了 已经出了一层虚汗hhhh\n\n总体体验是面试内容很硬核 面试官很年轻 性格很好 很多地方没答出来面试官一直说没事\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576796985886306304?sourceSSR=users",
        "title": "小米服务端实习一面1.11",
        "content": "  1. 自我介绍\n  2. api项目中的网关怎么鉴权的，加密算法是什么\n  3. 用户登录，为什么用Redis存储session\n  4. 针对项目，写出项目中的建表语句，以及查询语句\n  5. ArrayList与LinkedList\n  6. ==和equals\n  7. 方法不能被重写\n  8. 如何理解线程不安全\n  9. 好像是怎么创建多线程什么的\n  10. Exception和RunTimeException的区别，常见的RuntimeException有哪些\n  11. 手撕：斐波那也数，合并两个有序链表，都不能用递归\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576835007675695104?sourceSSR=users",
        "title": "【面试经验分享】前瞻产业研究院实习生笔试",
        "content": "时长：2h\n\n形式：线下笔试\n\n流程：\n\n1\\. 到公司后有工作人员带领到达指定电脑前笔试\n\n2\\. 笔试题目：对某一行业产出一份行业研究分析PPT\n\n-行业概念\n\n-行业特点\n\n-行业产业链情况\n\n-行业未来发展规模\n\n-行业公司等\n\n3\\. 可以在网上搜集资料，就是时间非常紧张\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576808699889528832?sourceSSR=users",
        "title": "美团（营销算法实习生） 2面面经",
        "content": "时间 1月11号 晚上7点\n\n![](https://uploadfiles.nowcoder.com/images/20240116/594042216_1705392893511/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n前一天下午面试官打电话约时间 他问了工资要求和最快到岗时间 问他什么时候面 他说现在就可以 我想准备一天 就约了11号\n\n首先是自我介绍\n\n问了在学校是否学过机器学习 深度学习类的课程 这里真是雷啊 学校确实开的有 但是我没选（我觉得效果不如自学来得快） 但是跟面试官说我学过\n他继续问你们机器学习的框架时什么 我说分为有监督学习、无监督学习、集成学习、深度学习等 这里面试官明显不满意 他说你们是这么设置的吗 这中间也没有什么关联\n（我内心爆哭 真还不如实话实说 没选过）\n\n然后让说一个印象深刻的项目 说了关于遗传算法的改进 但是面试官听完后又问的很细节 这块勉强答出来了 但是感觉已经没自信了 有点结巴\n\n然后问了有监督学习了解哪些 说了决策树 随机森林 逻辑回归 SVM等\n\n问了随机森林的原理和它的作用\n\n问了三种决策树的信息划分准则\n\n问了集成学习中的bagging和boosting算法以及两种的区别，这里我说随机森林是boosting算法，又是大雷，感觉我说完后面试官已经不想理我了hhh。我问是哪说的不对吗\n他说你了解xgboost算法吗 了解 那xgboost算法和随机森林的原理是一样的吗 我：应该不一样把~\n\n统计学中的P值是什么含义 如何通俗地像运营和内容的同学解释\n\n怎样理解AUC值（注意 是理解）\n\n问了整数规划的方法 给了一个场景 为美团平台上的所有用户发放优惠券 应该如何分配 是的收益最大 优惠券面额应该是以整数为主\n\n让说之前做过的机器学习项目 做分类模型的时候需要注意什么（当时真是脑子抽了 交叉验证 smote采样这些都没答出来）\n\n问梯度提升决策树的原理（这个没了解过 后面发现就是GBDT 我嘞个豆）\n\n然后没问题了 代码题也没出\n\n反问\n\n1、问了两次这次面试的结果大概率是不是不能过 （面试官：这个没法说）\n\n1、评价我的优缺点\n\n2、觉得我适合做算法哪一细分方向（面试官答 我可能给不了你建议~）\n\n30分钟就结束了 这把确实寄了\n呜呜呜伤心![](https://uploadfiles.nowcoder.com/images/20240116/594042216_1705393886876/3C2F9968B07D6894C590B853FC7E4C69)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576796586294984704?sourceSSR=users",
        "title": "蔚来-AI数据库开发实习一面1.11",
        "content": "1\\. 自我介绍\n\n2\\. 科大讯飞比赛做了什么，是用到了讯飞平台的某些功能吗\n\n3\\. API开放平台详细介绍一下\n\n4\\. 但是你做的这个接口调用具体收益，作用是干嘛的呢\n\n5\\. 接口调用高并发情况时用户使用延迟之间如何进行优化\n\n6\\. 用户访问时的延迟黑洞是什么，如何优化\n\n7\\. 软引用、弱引用分别是什么\n\n8\\. 如何提升系统的处理能力，如何优化\n\n9\\. 手撕：\n\n1\\. 多线程去查询数据库，并将查询结果放入List<String>中返回\n\n2\\. 上一个没写出了，面试官又给了一次机会让写快排\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576834569136050176?sourceSSR=users",
        "title": "【面试经验分享】华玺集团客户经理面试",
        "content": "时长：1h\n\n形式：单面\n\n流程：挺随意的，在公司一层聊天\n\n1\\. 面试官自我介绍（10min）\n\n-两个人，一个是人力总监，一个是业务线领导\n\n2\\. 个人自我介绍（1min）\n\n3\\. 问题：双方问答\n\n-是否拒绝销售类性质的岗位\n\n-有没有什么特长\n\n-家庭情况\n\n-父母是否支持在北京工作\n\n-前期在北京的开支也许无法覆盖，约有6个月需要自己投入，有没有什么问题？\n\n我的问题：\n\n-业务流程是什么样的\n\n-和客户对接是否需要在线下出差\n\n-如何跑业务\n\n-主要的项目有哪些？\n\n-是否需要同时跑多项业务？\n\n-主要的客户群体是什么？\n\n公司参观浏览\n\n4\\. 面试官介绍岗位内容（10min）\n\n面试官提醒：要把公司的主要情况告诉父母，获得父母许可等。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576803962838401024?sourceSSR=users",
        "title": "美团（营销算法实习生）1面 面经",
        "content": "美团一面 1月8号 下午3点\n\n![](https://uploadfiles.nowcoder.com/images/20240116/594042216_1705391487028/D2B5CA33BD970F64A6301FA75AE2EB22)\n\n一面总体体验还是很好 虽然有些问题没答上来 但还是过来 隔了一天就打电话约了2面\n\n一开始让自我介绍 我说对机器学习有比较深入的了解 面试官说在我面前说了解 看来你很自信啊hhh 其实当时我没想那么多hhh\n\n第一个问题就是如何解决过拟合和欠拟合 让结合具体的模型来说\n\n问了交叉验证\n\nL1正则化 L2正则化\n\n问了如何看数据统计效果（具体问题记不清了 当时也没有理解 又追问了这是什么意思） 后面面试官看我做过多目标优化的项目 就说你应该做过呀\n我从模型改进前后的效果评价去答了 面试官补充了一些比如看AUC值 感觉是从分类模型的效果评价去答的\n\n是否了解基于协同过滤的推荐算法 这块确实不了解 就过了\n\n知道因果推断模型有哪些方法 这块不了解 答得很模糊\n\n一个开放题 大概是如何看美团平台上不同人群的特征喜好 实话实说以前没做过真实场景 这块我从聚类的角度答得 提到了kmeans聚类 文本聚类（词袋模型、tf-\nidf、word2vec、bm25） 顺带着把大模型 bert transformer 也过了一下\n\n说一个之前的项目 怎么做的优化 （说了一个合成优化的项目 答得还比较流利 感觉面试官也比较满意）\n\n然后开始写编程题 出了一道“找零问题”（有1元、4元、5元的硬币，找到满足15元的最少硬币数量）\n\n一开始想用穷举法 但没写出来 17分钟之后 面试官说你写的不能涵盖所有情况 我提到可以用动态规划法做这个题 然后跟面试官交流了一下做法\n\n反问环节\n\n1、请面试官评价下这次的面试表现\n\n面试官说我认为面试效果是非常好的 主要认为比起以往面试的同学中我的逻辑很好 表达很清楚 这一点很难得。\n\n2、如果我未来想走算法这条路，有没有什么建议？\n\n面试官说我学习算法有一套自己的思路，并且这种方法思路是完全可行的，未来就按照自己的想法继续学习就可以了（这里有点感动）。并且说到未来算法工程师更多要关注行业的先验知识。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576793891735683072?sourceSSR=users",
        "title": "美团到店前端日常实习面经",
        "content": "## 一面\n\n35min\n\n  * 项目\n  * （刚才的项目）登录怎么做的，用户管理怎么做的\n  * 平时如何学习前端的\n  * 封装过组件库吗，用 axios 封装一个请求库（×，只在引导下写了一点）\n  * （上一个题中的 get 请求封装）给一个 get 参数对象将其拼接到 url\n  * 跨域\n  * TS\n  * （刚才提到了nginx）nginx 了解过吗，讲一下\n  * sleep 函数\n  * 垂直居中\n  * 反问：1. 前端学习建议（看一下系统性的课程，缺少系统性的学习 T__T）\n\n一面问得挺深的，以为寄了，没想到当天发了二面邀请\n\n## 二面\n\n60min\n\n  * 自我介绍\n  * 项目规模？项目组多少人？合作中分歧如何解决？\n  * （接上一个问题）git 如何在本地解决冲突？git merge 和 git rebase 有什么区别？开发中会选择使用哪个？\n  * git 原理（×）\n  * 与后端联调的方式（结合实习经历问一些项目后端的东西）\n  * http 常见状态码，解释一下 304\n  * 解释一下 http 缓存及其是如何实现的，Etag 是怎样生成的（这里深挖，没答好）\n  * 开发过程中碰到的难点\n  * 场景题：表单包含姓名邮箱密码字段，实现验证（邮箱验证没写好，在这里多问了一些正则相关）\n  * 算法题：链表插入排序（×，直接没写出来）\n  * 如何学习新框架\n  * GitHub 上有过什么开源贡献\n  * 最近在看什么新的前端技术（追着多问了一下）\n  * 实习周期\n  * 反问\n\n二面还穿插了其他一些常见的八股不太记得了，问得比较广。两天后 HR 给 OC，三天后发邮件\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576788698587541504?sourceSSR=users",
        "title": "百度灵翼go后端开发实习生一二面面经",
        "content": "1.字节项目拷打  \n2.go中slice和数组区别  \n3.进程，线程与协程的区别  \n4.知道channel吗？有什么作用。  \n5.主协程如何知道子协程退没退出  \n6.从按下url到出现网页的具体过程，用到哪些协议。  \n7.三次握手？为什么要有第三次握手。  \n8.四次挥手？为什么要四次。  \n9.tcp的拥塞控制算法有哪些。  \n10.一面题，链表两两反转。  \n11.二面题，a的b次方的十进制数最后三位。  \n12.反问。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576788583038664704?sourceSSR=users",
        "title": "记录：一次前端实习面试",
        "content": "![](https://uploadfiles.nowcoder.com/message_images/20240116/550678068_1705389099387/discuss_1705389098853.jpeg)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576784061914497024?sourceSSR=users",
        "title": "杭州某创业公司数据库C++开发一面",
        "content": "  * 做题：前缀树\n  * 自我介绍\n  * 为什么想要开现在公司，找工作；为什么选择我们，小创业公司？\n  * 介绍简历上第一个项目\n  * 移动语义\n  * 表达式值类别：左值 右值，泛左值，将亡值，纯右值\n  * 智能指针实现shared_ptr，unique_ptr\n  * 实现3个线程交替打印ABC，给出伪代码\n  * mysql的事务隔离级别，读取未提交，读取已提交，可重复读分别解决了什么并发事务的什么问题\n  * mysql有哪些锁\n  * 知道mysql的bufferpool\n\n总结：数据库最近好久没看了，忘记了，后面几道题回答的不是很好，HR已经沟通的二面，面者玩。\n\n积累经验加油~\n\nC++方向找工作不容易，各个领域完全是不同的知识点；在公司呆了2.5年，技术栈与互联网脱轨严重。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576780747017629696?sourceSSR=users",
        "title": "阿里云初面问题分析",
        "content": "最近有同学找我分享了他的阿里补录面试经验，并和他做了一些技术点的讨论，这里将面试问题分享给大家。大家关于这个面试问题有不了解的，可以先自己Google看下，**还是不理解的话可以找我讨论**\n\n###  组件\n\n  1. 问对哪个项目熟悉，为什么想要用java去写关系型数据库？\n  2. 可重复读，已提交读，这两个隔离级别表现的现象是什么，区别是什么样的？\n  3. 数据管理里，数据文件大体分成哪几种数据文件？\n  4. 说下MVCC机制的原理？\n  5. 索引的类型有哈希索引，B+树索引，而hash索引的时间复杂度是o1，那为什么我们一般情况下不使用哈希索引，而使用b+树索引呢？\n  6. 对一个慢sql怎么去排查？如果是我们接口访问慢了呢，你有哪些排查思路？\n  7. 为什么Mysql不用SkipList作为索引数据结构\n  8. Redis的主从复制了解吗？会存在数据丢失问题吗？那Mysql就一定能保证数据不丢失？\n\n### Java\n\n  1. MyBatis运用了哪些常见的设计模式？\n  2. Java的继承思想你觉得在编程中有什么缺陷？\n  3. MyBatis中创建了一个Mapper接口，在写一个xml文件，java的接口是要实现的，为什么这没有实现呢？\n  4. 与传统的JDBC相比，MyBatis的优点？\n  5. 还记得JDBC连接数据库的步骤吗？\n  6. 如果让你设计一个SpringIoc，你觉得会从哪些方面考虑这个设计？\n  7. Spring给我们提供了很多扩展点，这些有了解吗？\n  8. SpringAOP主要想解决什么问题\n  9. 代理模式和适配器模式有什么区别？\n  10. 使用多线程要注意哪些问题？\n  11. 那保证数据的一致性有哪些方案呢？\n  12. 线程池有了解吗？线程池大概的原理？\n\n### 网络\n\n  1. http协议的报文的格式有了解吗？\n  2. TCP三次握手有什么问题吗\n  3. 那TCP的拥塞控制有什么缺陷吗，如何优化\n\n### 微服务\n\n  1. 微服务部署理念有什么问题？单体架构一定就不好吗\n  2. 在数据的可靠性保障上你有哪些想法？双主写的话会导致什么问题？\n  3. ShardingJdbc的客户端和代理模式各自有什么优缺点？\n\n### 其他\n\n  1. 读书中遇到最难的技术是什么，怎么克服的？\n  2. 有没有什么强项在面试中还没有展现的？\n  3. 反问\n\n### 总结\n\n问的还是很全面，**有些问题是跟实际开发相关的**\n，如组件中问题6；Java中的问题2、4、5、7、10；微服务中的3。**有些问题不是只问概念和原理实现，还会考察在选型、对比以及宏观体系中的作用，看你平时有没有思考和积累**\n，如组件中问题5、7、8；Java中的6；网络中的3；微服务中的1、2。\n\n现在大厂的面试不可能再靠背背八股文就蒙混过关了，大家还是需要多花点时间思考、多参与项目实践\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576719440050417664?sourceSSR=users",
        "title": "得物一面",
        "content": "1.自我介绍\n\n2.介绍一下项目\n\n3.说一下Java集合，List和Map有什么区别\n\n4.ArrayList和LinkedList有什么区别\n\n5.如果List要使用线程安全要怎么办\n\n6.Map中要使用线程安全要怎么办\n\n7.ConcurentHashMap和HashTable有什么区别\n\n8.排序等算法如何在项目中使用的\n\n9.git如果发生冲突怎么办\n\n10.maven如果发生冲突怎么办\n\n11.分布式文件存储怎么使用的\n\n12.Nacos是怎么用的，\n\n13.Mybatis和MybtisPlus，在使用mybaits中设计到的端口问题\n\n14.项目中从前端来的请求如何最终到达mysql数据库\n\n15.Redis和KafKa的区别\n\n16.项目什么地方用的Redis\n\n17.你认为项目中最难的地方是什么，你是如何解决的\n\n总时长30分钟\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576490235048050688?sourceSSR=users",
        "title": "一小时复习前端面试｜2024年年初30道面试题冲刺金三银四",
        "content": "> 这套题目列举的都是**前端面试最最高频的问题** ，如果回答的太差，会减分！回答好了基本中高级没问题。\n>\n> *****************************************\n\n#### 1\\. 从输入url到渲染页面\n\n  1. 浏览器的地址栏输入URL并按下回车。\n  2. 浏览器查找当前URL是否存在缓存，并比较缓存是否过期。\n  3. DNS解析URL对应的IP。\n  4. 根据IP建立TCP连接（三次握手）。\n  5. HTTP发起请求。\n  6. 服务器处理请求，浏览器接收HTTP响应。\n  7. 渲染页面，构建DOM树。\n  8. 关闭TCP连接（四次挥手）\n\n#### 2\\. Js中的单线程和事件循环\n\n  * Js是单线程，但是浏览器是多线程。\n  * Js中采用了事件循环（Event Loop）来执行异步任务。\n  * 所以，事件循环是一种异步编程模型，事件循环会不断地从任务队列（Task Queue）中取出待处理的任务并执行，直到任务队列为空为止。任务可以分为两类：宏任务（Macro Task）和微任务（Micro Task）。\n  * 微任务会优先于宏任务执行\n\n#### 3\\. Js实现继承有哪几种方式？\n\n  1. 原型链继承：将父类的实例作为子类的原型，通过 prototype 进行继承\n  2. 构造继承：将父类的实例属性复制给子类，通过 call 进行继承\n  3. 实例继承：为父类实例添加新特性，作为子类实例返回\n  4. 拷贝继承：将父类实例通过循环拷贝给子类\n  5. 组合继承：就是 原型链继承 和 构造继承，一起使用\n  6. 寄生组合继承：通过寄生方式，砍掉父类的实例属性，避免了 组合继承中，在调用两次父类的构造时，初始化两次实例方法/属性 的缺点\n\n#### 4\\. Js 中bind(),call()和apply()的区别\n\nJavaScript 中的 bind()、call() 和 apply() 方法都**可以用来改变函数内部的 this 指向** 。\n\n它们有一些重要的区别：\n\n  * 三种方法最大的区别在于参数传入方式不同：bind() 方法接受一系列参数列表，而 call() 和 apply() 方法则分别接受一组参数和一个参数列表。具体而言，bind() 将参数作为一个个单独的值传入，而 call() 和 apply() 都允许传递一个数组作为参数。\n  * 执行时间不同：bind() 绑定后返回一个新函数，并不会立即执行，需要调用该函数才会执行；而 call() 和 apply() 则会立即执行函数。\n  * 返回值不同：bind() 方法返回一个绑定后的新函数，而 call() 和 apply() 则直接执行原始函数并返回执行结果。\n\n它们的作用分别如下：\n\n  * bind() 方法：bind() 可以指定函数内部的 this 指向，并将其绑定到一个新函数上进行返回。该函数并不会立即执行，而是等待调用。bind() 也可以用来实现柯里化（currying）\n  * call() 方法：call() 可以在指定的 this 值和若干个参数（参数的列表）的前提下调用某个函数或方法。注意，call() 方法需要将参数逐个传递进去，而不能像 apply() 方法一样将所有参数打包成一个数组。\n  * apply() 方法：apply() 和 call() 的作用非常类似，都是改变函数内部的 this 指向。区别在于，apply() 方法需要将参数打包成一个数组传递进去，而 call() 则是将参数逐个传递。\n\n#### 5\\. Js 中的闭包及其使用场景\n\n  * 官方说法：闭包就是指有权访问另一个函数作用域中的变量的函数。\n  * MDN说法：闭包是一种特殊的对象。它由两部分构成：函数，以及创建该函数的环境。环境由闭包创建时在作用域中的任何局部变量组成。\n  * 深度回答：浏览器在加载页面会把代码放在栈内存（ ECStack ）中执行，函数进栈执行会产生一个私有上下文（ EC ），此上下文能保护里面的使用变量（ AO ）不受外界干扰，并且如果当前执行上下文中的某些内容，被上下文以外的内容占用，当前上下文不会出栈释放，这样可以保存里面的变量和变量值，所以我认为闭包是一种保存和保护内部私有变量的机制。\n\n> *****************************************\n\n#### 6\\. Vue2与Vue3中的双向数据绑定\n\n双向数据绑定就是：**数据劫持 + 发布订阅模式（观察者模式）** 。\n\nVue2中在实例初始化时遍历 data 中的所有属性，并使用 **Object.defineProperty** 把这些属性全部转为\ngetter/setter。并 劫持各个属性 getter 和 setter，在数据变化时发布消息给订阅者，触发相应的监听回调，而这之间存在几个问题\n\n  * 初始化时需要遍历对象所有 key，如果对象层次较深，性能不好\n  * 通知更新过程需要维护大量 dep 实例和 watcher 实例，额外占用内存较多\n  * Object.defineProperty 无法监听到数组元素的变化，只能通过劫持重写数方法\n  * 动态新增，删除对象属性无法拦截，只能用特定 set/delete API 代替\n  * 不支持 Map、Set 等数据结构\n\n**Vue3中使用 Proxy 来监控数据的变化** 。Proxy 是 ES6\n中提供的功能，其作用为：用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。\n\n#### 7\\. Vue中template模版的编译原理\n\n  1. 解析（parse）：将模板字符串解析成 AST（抽象语法树）。\n  2. 静态分析（static analysis）：对 AST 进行静态分析，标记出其中的静态节点（Static Node）。\n  3. 优化（optimize）：遍历 AST，对静态节点进行优化，去掉不必要的操作。\n  4. 代码生成（code generation）：将 AST 转换成渲染函数(render function)的可执行代码。\n  5. 最终的渲染：将生成的渲染函数运用到数据上，最终生成视图。\n\n#### 8\\. Vue2中的diff流程\n\nVue2中的虚拟DOM diff算法，其核心是采用**双端比较** （Two-Ended Algorithm）。\n\n具体来说，Vue2中diff算法的步骤如下：\n\n  1. 首先比较新旧虚拟DOM树的根节点，如果它们是不同类型的节点，则直接替换整个节点树；\n  2. 如果根节点相同，则比较它们的子节点，这个过程称之为“Diff Children”；\n  3. 在“Diff Children”过程中，使用双端比较算法，即同时从新虚拟DOM树和旧虚拟DOM树的两端开始向中间遍历，找到相应的节点进行比较，找到更新的节点后就停止比较；\n  4. 如果新旧虚拟DOM树的子节点数组长度不同，则根据差异进行添加或删除节点；\n  5. 对于相同位置的节点，判断它们是否相同，如果不同则进行更新；\n  6. 最后返回新的虚拟DOM树。\n\n#### 9\\. Vue3中的diff流程\n\n在Vue3中，Diff流程主要分为两个阶段：**标记阶段和应用阶段** 。其中**标记阶段**\n是用来比较新老VNode树的差异，并记录下来需要进行的具体操作；**应用阶段** 则是将这些具体操作应用在真实DOM上，完成页面的更新。\n\n#### 10\\. Vue中的组件间通信有哪些？\n\n  1. props：父组件通过 props 属性向子组件传递数据。子组件接收该数据后，即可在其模板中直接使用。\n  2. $emit() 和事件：子组件通过 $emit() 方法触发一个自定义事件，并把需要传递的数据作为参数传入。父组件监听该自定义事件，并在回调中处理数据。通过事件可以实现任意级别的组件间通信。\n  3. $parent 和 $children：父组件可以通过 $children 找到所有的子组件，子组件可以通过 $parent 找到其父组件。这种方式属于直接引用和修改组件对象，需要注意和谨慎使用。\n  4. provide 和 inject：祖先组件通过 provide 属性向子孙组件传递数据，子孙组件通过 inject 属性来获取这些数据。provide 和 inject 绑定并非响应式的，但是可以将一个观察者实例注入到 provide 中，使得组件在 inject 期间发生变化时获得通知。\n  5. Vuex 状态管理（Vue3中的pinia）：Vuex 是一个专门为 Vue.js 应用程序开发的状态管理库，提供了一种集中式存储管理应用程序中的所有组件的状态。组件通过调用 mutation 方法来改变状态，其他组件通过监听 state 属性来获取最新的状态。\n  6. 兄弟组件间的传值：Vue2中使用eventBus中央事件总线 ， Vue3中使用的mitt库\n\n> *****************************************\n\n#### 11\\. Vue-router中如何实现懒加载？\n\n在**路由配置文件** 中**使用动态导入import()语句，并用箭头函数返回** 实现路由懒加载。\n\n#### 12\\. Vue3相对于Vue2进行了哪些优化？\n\n  1. 更灵活的响应式系统：Vue 2.x 中响应式系统的核心是 Object.defineProperty，劫持整个对象，然后进行深度遍历所有属性，给每个属性添加getter和setter，实现响应式。Vue 3.x 中使用 Proxy对象重写响应式系统。\n  2. 更快的渲染速度：Vue3 的编译器生成的渲染函数比 Vue2 生成的更高效。\n  3. 编译阶段：Vue 2.x 通过标记静态节点，优化 diff 的过程。Vue 3.x中标记和提升所有的静态节点，diff的时候只需要对比动态节点内容。\n  4. 更小的体积：Vue3 将源码拆分为多个独立的模块，这样就可以按需导入所需的模块，从而减小了整个库的体积。\n  5. 更好的 TypeScript 支持：Vue3 对 TypeScript 的支持更加友好，内部使用了更先进的 TypeScript 特性，并为其提供了更好的声明文件。\n  6. 更好的组件系统：比如，Vue3中引入了一个新的 Fragment 组件，它可以替代原来的 template 标签作为根节点\n  7. 新增了setup组合式API\n\n#### 13\\. 介绍一下React Fiber\n\nReact Fiber是React框架的一种重新实现，旨在改善渲染性能和用户体验。它通过引入**优先级调度** 、**增量渲染**\n和**可中断的工作单元**\n等机制，将渲染任务分解成小的可中断的单元，从而使React能够更好地处理大型应用程序和高优先级任务，提供流畅且响应迅速的用户界面。\n\n14\\. React中常用的高阶组件有哪些？\n\n  1. withRouter：将路由信息注入到组件中，使它们能够访问到路由对象（如location、history和match等）。\n  2. connect：将React组件与Redux Store连接起来，并将State和Dispatch作为Props传递给组件。这使得组件能够直接从Store中读取和操作数据。\n  3. memo：对于纯函数组件，使用memo可以缓存组件输出，以提高性能。\n  4. withStyles：用于添加CSS样式到组件中。\n  5. redux-thunk：使Action Creator返回一个函数而不是一个Action对象，从而可以执行异步操作并dispatch新的Action。\n  6. recompose：提供了一组高阶功能，用于增强函数式React组件。例如，compose函数可以将多个HOC组合在一起。\n  7. react-redux：提供了一组基于Redux Store的React组件，并简化了React与Redux之间的集成。\n\n#### 15\\. React Hook为什么不能放到条件语句中？\n\nReact Hook 不能放到条件语句中的原因是：**React 需要使用 Hook 的规则是必须确保每次渲染时，Hook 调用的顺序都是一致的**\n。也就是说，在一个组件内部，每一次渲染时，Hook 的调用顺序必须是相同的。\n\n如果将 Hook 放到条件语句中，当条件发生变化时，Hook 的调用顺序就可能被打乱，从而导致组件状态不一致、出现错误等问题。因此，React 在运行时会对\nHook 的调用顺序进行验证，来确保 Hook 的使用符合规范。\n\n> *****************************************\n\n#### 16\\. React有哪些常用的hooks？\n\n  1. useState：该 Hook 用于在函数组件中添加一个状态管理器。通过 useState，可以创建一个状态变量及其更新函数，并在组件内使用该变量来保存和更新组件的状态。\n  2. useEffect：该 Hook 用于在组件渲染完成后执行一些副作用操作（例如订阅数据、更新 DOM 等）。通过 useEffect，可以在组件加载、更新和卸载时设置和清理副作用操作，并且可以在副作用操作之间共享状态。\n  3. useContext：该 Hook 用于在组件之间共享一些全局的状态或函数，以避免通过多层嵌套的 Props 传递进行数据传输。通过 useContext，可以让组件在全局状态或函数的上下文中运行，并让它们能够方便地读取或更新全局状态或函数。\n  4. useReducer：该 Hook 用于在组件中使用一种“状态容器”模式，以避免通过多层 Props 传递或 Context 共享进行状态管理。通过 useReducer，可以创建一个状态容器及其更新函数，并在组件内使用该容器来保存和更新组件的状态。\n  5. useMemo：该 Hook 用于在组件渲染完成后缓存一些计算结果，以避免因为重复计算导致的性能问题。通过 useMemo，可以创建一个缓存变量，并在组件内使用该变量来保存计算结果并缓存。\n  6. useCallback：该 Hook 用于在组件渲染完成后，将一些函数进行缓存，以避免因函数重复创建导致的性能问题。通过 useCallback，可以创建一个缓存函数，并在组件内使用该函数来代替重复创建的函数。\n  7. useRef：该 Hook 用于在组件渲染完成后创建一个引用，以便在组件多次渲染时能够保留上一次渲染中的值。通过 useRef，可以创建一个引用变量，并在组件内使用该变量来保存一些持久化的数据。\n  8. useImperativeHandle：该 Hook 用于在组件中实现一些自定义的 Ref 对象，并且要求将一些组件内部的方法或状态暴露给父组件使用。通过 useImperativeHandle，可以创建一个自定义的 Ref 对象，并在组件内指定一些公开的方法或属性。\n  9. useLayoutEffect：该 Hook 与 useEffect 类似，但它会在浏览器渲染更新之前同步执行副作用操作，以确保 React 组件与浏览器同步更新。通常情况下，应该使用 useEffect，但在需要直接操作 DOM 元素或进行测量布局界面时，应当使用 useLayoutEffect。\n  10. useDebugValue：该 Hook 可以帮助开发者在调试工具中显示额外的信息，以便更好地理解 Hook 的使用和行为。通常情况下，这个 Hook 只用于调试过程中，而不是实际的应用程序代码中。\n\n#### 17\\. 介绍下React中的useEffect\n\n  * 在 React 中，useEffect 是一个用于处理副作用的 Hook。\n  * 副作用是指在组件生命周期中的某些特定时刻需要执行的操作，例如数据获取、订阅事件、手动操作 DOM 等。\n  * useEffect 的作用就是在组件渲染完成后执行这些副作用操作。\n\n#### 18\\. 介绍一下Promise的状态及其方法\n\n在JavaScript中，Promise对象包含**三种状态** ：**Pending** （进行中）、**Fulfilled**\n（已成功）和**Rejected** （已失败）。\n\nPromise的方法如下：\n\n  1. Promise对象可以通过 then() 方法添加成功（Fulfilled）和失败（Rejected）时的回调函数。then() 方法可以链式调用，每次返回一个新的 Promise 对象，因此可以很容易地实现异步任务的连续执行。\n  2. Promise对象还提供了 catch() 方法用于捕获错误和 finally() 方法用于在 Promise 被解析后运行代码块。\n  3. Promise.all() 方法接收一个 Promise 数组作为参数，返回一个新的 Promise，只有当所有 Promise 都解析成功时才会被解析，否则该 Promise 会被拒绝。\n  4. Promise.race() 方法接收一个 Promise 数组作为参数，返回一个新的 Promise，只要有一个 Promise 被解析或拒绝就会被解析或拒绝。\n  5. Promise.resolve() 和 Promise.reject() 方法分别返回一个已解析和一个已拒绝的 Promise 对象，可以用于快速创建 Promise。\n\n#### 19\\. 介绍一下async/await 的实现原理\n\n在 JavaScript 引擎中，async/await 函数的实现原理是**基于 Promise 对象** 和**生成器函数** （Generator\nFunction）的协作。\n\n#### 20\\. 介绍一下let、const、var的区别\n\n> *********************************\n\n#### 21\\. 箭头函数和普通函数有什么区别\n\n  1. 写法不同：箭头函数使用箭头（=>）来定义，而普通函数使用 function 关键字定义。\n  2. this 的处理方式不同：在箭头函数中，this 的值与外层作用域的 this 绑定。而在普通函数中，this 的值由调用该函数的方式决定。\n  3. 箭头函数没有 arguments 对象：箭头函数中没有自己的 arguments 对象，它的参数只能通过参数列表来传递。\n  4. 箭头函数不能用作构造函数：由于箭头函数中没有自己的 this 值，因此不能用作构造函数来创建对象实例。\n\n#### 22\\. Css中常用的垂直居中解决方案有哪些？\n\n`vertical-align` 属性| 用于控制元素内部的行内元素（如文本或图片）的垂直对齐方式。通常与 `display: table-cell`\n结合使用，实现单元格内部的元素垂直居中。  \n---|---  \n`line-height` 属性| 用于设置行内元素的行高，可以使单行文本元素垂直居中。但是如果元素高度超过一行，则无法实现垂直居中。  \n`flexbox` 布局| 使用 `display: flex` 和相关属性可以实现容器内元素的水平和垂直居中。  \n`grid` 布局| 使用 `display: grid` 和相关属性可以实现网格布局中元素的水平和垂直居中。  \n绝对定位 + 负边距| 将需要垂直居中的元素绝对定位到容器中心，然后通过负边距调整元素位置。  \n  \n#### 23\\. 什么是BFC？\n\nBFC（Block Formatting Context）是 CSS\n中一个很重要的概念。它是指一个块级容器，其中的元素按照特定规则布局和渲染，同时也影响着其内部和外部元素的布局。\n\n#### 24\\. Css中移动端适配有哪些方案？\n\n  1. 首先，通过meta标签设置viewport\n  2. rem单位搭配@media媒体查询：可以通过使用rem单位，它以HTML元素的font-size为比例，也可以搭配 postcss-pxtorem 搭建项目\n  3. vw/vh 布局：也可以通过使用vw/vh 布局，vw/vh 方案与 rem 方案类似，都是将页面分成一份一份的，只不过 vw/vh 是将页面分为 100 份，也可以搭配 postcss-px-to-viewport 搭建项目\n  4. 百分比布局：也可以使用百分比来实现布局，但是需要特定宽度时，这个百分比的计算对开发者来说并不友好，且元素百分比参考的对象为父元素，元素嵌套较深时会有问题。\n\n#### 25\\. 什么是Css中的回流（重排）与重绘？\n\n回流（重排）（reflow）和重绘（repaint）是**浏览器渲染页面** 时的两个核心概念。\n\n  * 回流（重排）指的是当页面中的元素发生布局或几何属性发生变化时，浏览器需要重新计算这些元素的位置和大小，然后重新构建页面的渲染树，这个过程称为回流。由于需要重新计算布局，回流的代价很大，会对页面的性能产生负面影响。\n  * 重绘指的是当页面中的元素样式发生改变时，浏览器会重新绘制这些元素的外观，但不会改变它们在页面中的位置和大小。重绘的代价相对较小，但仍然会对页面性能产生一定的影响。\n\n> *****************************************\n\n#### 26\\. 常用的跨域解决方案有哪些？\n\n  1. CORS：跨域资源共享（Cross-Origin Resource Sharing），是一种允许浏览器向跨域服务器发送 Ajax 请求的机制，支持现代浏览器，服务器端需要设置 Access-Control-Allow-Origin 头信息，指定允许的源或通配符，从而实现跨域请求。\n  2. 代理：在同源页面内部发送 AJAX 请求到同域服务器，由服务器代理转发请求到跨域服务器，最后再将结果返回给同源页面。\n  3. WebSocket：WebSocket 是一种 HTML5 协议，它使得浏览器和服务器之间可以建立持久化的连接，可以直接使用 Socket 进行通信，避免了浏览器的跨域限制。\n\n#### 27\\. Webpack中有哪些核心概念？\n\n  1. Entry（入口）：Webpack在打包时需要从哪个文件开始构建依赖关系图，就是入口。可以设置多个入口文件，以生成多个输出文件。\n  2. Output（输出）：打包后的文件放在哪里，以及如何命名这些文件。可以指定输出目录、文件名、公共路径等。\n  3. Loader（模块加载器）：Webpack只能处理JavaScript文件，而其他类型的文件如CSS、图片等需要通过Loader转换才能被Webpack处理。Loader用于对模块内容进行转换处理。\n  4. Plugin（插件）：Plugin可以用于执行各种任务，例如打包优化、错误处理和环境变量注入等。Webpack本身只提供了一些基本的Plugin，但社区中有很多第三方Plugin可供使用。\n  5. Mode（模式）：Webpack提供了三种模式：development、production和none。不同的模式会启用不同的Webpack内置Plugin和Loader，以便于开发和生产环境的优化。\n  6. Chunk（代码块）：Webpack在打包时会把所有相关联的模块组成一个Chunk。可以通过Code Splitting技术将代码拆分成多个Chunk，以实现按需加载。\n  7. Module（模块）：Webpack把每个文件都看作一个模块，它可以是JavaScript、CSS、图片等。这些模块通过依赖关系进行组合，构成整个应用程序。\n\n#### 28\\. Vite 和 Webpack 的区别\n\n  * 优点：快速的冷启动: 采用No Bundle和esbuild预构建，速度远快于Webpack高效的热更新：基于ESM实现，同时利用HTTP头来加速整个页面的重新加载，增加缓存策略真正的按需加载: 基于浏览器ESM的支持，实现真正的按需加载\n  * 缺点生态：目前Vite的生态不如Webapck，不过我觉得生态也只是时间上的问题。生产环境由于esbuild对css和代码分割不友好使用Rollup进行打包\n\n#### 29\\. Webpack常见的优化方案有哪些？\n\n  1. 升级 webpack 版本，3升4，实测是提升了几十秒的打包速度\n  2. 使用Tree Shaking和Scope Hoisting来减少代码体积和模块构建时间，其中Tree Shaking可以去除未使用的代码，而Scope Hoisting可以将模块内的代码尽量合并到一个函数（单一作用域）中，以减少函数声明和闭包的数量。\n  3. 使用splitChunksPlugin插件来将公共代码抽离成单独的chunk，以减少代码重复和提高缓存命中率。\n  4. 合理配置resolve.alias和resolve.extensions选项来减少Webpack查找文件的时间。\n  5. 针对生产环境，可以开启代码压缩以及多进程并行处理等优化方式，以减少构建时间和服务器负载。\n  6. 使用DLLPlugin和DllReferencePlugin来预先编译一些稳定不变的代码，以减少每次构建的时间。\n  7. 使用HappyPack来启用多线程并发处理，以加速代码构建和增强开发体验。\n  8. 对于图片、字体等资源文件，可以通过url-loader和file-loader等loader设置较小的limit值，将文件转换成base64编码的字符串内嵌在js文件中，以减少http请求次数。\n\n#### 30\\. 浏览器中强缓存与协商缓存的缓存机制\n\n强缓存和协商缓存是两种不同的缓存策略。\n\n**强缓存通过设置响应头中的Cache-Control或Expires字段**\n，告诉浏览器在一定时间内直接使用本地缓存，不需要发送请求到服务器。只有当缓存过期或被清除时，浏览器才会发送请求到服务器获取新的资源。\n\n**协商缓存通过设置响应头中的ETag和Last-Modified字段** ，浏览器在每次请求时携带If-None-Match和If-Modified-\nSince字段，与服务器进行比较。如果资源未发生变化，则服务器返回304 Not\nModified状态码，并告知浏览器继续使用缓存；如果资源发生变化，则服务器返回新的资源。\n\n强缓存是基于时间的缓存控制，而协商缓存则是通过与服务器进行交互来判断是否使用缓存，更加灵活。\n\n> *****************************************\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576772251303833600?sourceSSR=users",
        "title": "分库分表夺命连环问",
        "content": "整理了几个面试过程中分库分表常见问题分享给大家，这里面有常规面试必掌握题（1、2、3、5、7、10、11、12），也有面试拔高题（4、6、8、9、13、14、15），大家根据自己的需要查看，有关于技术上的问题也可留言讨论，有问必答。\n\n# **1 为什么分库分表**\n\n##  1.1 为什么要分库\n\n如果业务量剧增，数据库可能会出现性能瓶颈，这时候我们就需要考虑拆分数据库。从这两方面来看：\n\n  * 磁盘存储\n\n业务量剧增，MySQL单机磁盘容量会撑爆，拆成多个数据库，磁盘使用率大大降低。\n\n  * 并发连接支撑\n\n我们知道数据库连接数是有限的。在**高并发的场景下** ，大量请求访问数据库，MySQL单机是扛不住的！高并发场景下，会出现`too many\nconnections`报错。\n\n当前非常火的微服务架构出现，就是为了应对高并发。它把订单、用户、商品等不同模块，拆分成多个应用，并且把单个数据库也拆分成多个不同功能模块的数据库（订单库、用户库、商品库），以分担读写压力。\n\n## 1.2 为什么要分表\n\n**假如你的单表数据量非常大，存储和查询的性能就会遇到瓶颈了，如果你做了很多优化之后还是无法提升效率的时候，就需要考虑做分表了。一般千万级别数据量，就需要分表。**\n\n这是因为即使`SQL`命中了索引，如果表的数据量超过一千万的话，查询也是会明显变慢的。这是因为索引一般是`B+`树结构，数据千万级别的话，B+树的高度会增高，查询就变慢啦。MySQL的B+树的高度怎么计算的呢？跟大家复习一下：\n\nInnoDB存储引擎最小储存单元是页，一页大小就是16k。B+树叶子存的是数据，内部节点存的是键值+指针。索引组织表通过非叶子节点的二分查找法以及指针确定数据在哪个页中，进而再去数据页中找到需要的数据，B+树结构图如下：\n\n假设B+树的高度为2的话，即有一个根结点和若干个叶子结点。这棵B+树的存放总记录数为=根结点指针数*单个叶子节点记录行数。\n\n如果一行记录的数据大小为1k，那么单个叶子节点可以存的记录数 =16k/1k =16.\n非叶子节点内存放多少指针呢？我们假设主键ID为bigint类型，长度为8字节(面试官问你int类型，一个int就是32位，4字节)，而指针大小在InnoDB源码中设置为6字节，所以就是\n8+6=14 字节，16k/14B =16*1024B/14B = 1170\n\n因此，一棵高度为2的B+树，能存放1170 * 16=18720条这样的数据记录。同理一棵高度为3的B+树，能存放1170 *1170 *16\n=21902400，大概可以存放两千万左右的记录。B+树高度一般为1-3层，如果B+到了4层，查询的时候会多查磁盘的次数，SQL就会变慢。\n\n因此单表数据量太大，SQL查询会变慢，所以就需要考虑分表啦。\n\n# 2 什么时候分库分表\n\n对于`MySQL`，`InnoDB`存储引擎的话，单表最多可以存储`10亿`级数据。但是的话，如果真的存储这么多，性能就会非常差。一般数据量千万级别，`B+`树索引高度就会到`3`层以上了，查询的时候会多查磁盘的次数，`SQL`就会变慢。\n\n阿里巴巴的`《Java开发手册》`提出：\n\n> 单表行数超过`500万`行或者单表容量超过`2GB`，才推荐进行分库分表。\n\n**那我们是不是等到数据量到达五百万，才开始分库分表呢？**\n\n> 不是这样的，我们应该**提前规划分库分表** ，如果估算`3`年后，**你的表都不会到达这个五百万** ，则不需要分库分表。\n\n**MySQL服务器如果配置更好，是不是可以超过这个500万这个量级，才考虑分库分表？**\n\n> 虽然配置更好，可能数据量大之后，性能还是不错，但是如果持续发展的话，还是要考虑分库分表\n\n**一般什么类型业务表需要才分库分表？**\n\n> 通用是一些**流水表、用户表** 等才考虑分库分表，如果是一些**配置类** 的表，则完全不用考虑，因为不太可能到达这个量级。\n\n# 3 如何选择分表键\n\n分表键，即用来**分库/分表** 的字段，换种说法就是，你以哪个维度来分库分表的。比如你**按用户ID分表、按时间分表、按地区分表**\n，这些**用户ID、时间、地区** 就是分表键。\n\n一般数据库表拆分的原则，需要先找到**业务的主题** 。比如你的数据库表是一张企业客户信息表，就可以考虑用了**客户号** 做为`分表键`。\n\n**为什么考虑用客户号做分表键呢？**\n\n> 这是因为表是基于客户信息的，所以，需要将同一个客户信息的数据，落到一个表中，**避免触发全表路由** 。\n\n# 4 非分表键如何查询\n\n分库分表后，有时候无法避免一些业务场景，**需要通过非分表键来查询** 。\n\n假设一张用户表，根据`userId`做分表键，来分库分表。但是用户登录时，需要根据**用户手机号**\n来登陆。这时候，就需要通过手机号查询用户信息。而**手机号是非分表键** 。\n\n非分表键查询，一般有这几种方案：\n\n  * 遍历：最粗暴的方法，就是遍历所有的表，找出符合条件的手机号记录（不建议）\n  * 将用户信息冗余同步到ES，同步发送到ES，然后通过ES来查询（推荐）\n\n其实还有**基因法**\n：比如非分表键可以解析出分表键出来，比如常见的，订单号生成时，可以包含客户号进去，通过订单号查询，就可以解析出客户号。但是这个场景除外，**手机号似乎不适合冗余userId**\n。\n\n# 5 分表策略\n\n## 5.1 range范围\n\n`range`，即范围策略划分表。比如我们可以将表的主键`order_id`，按照从`0~300万`的划分为一个表，`300万~600万`划分到另外一个表。如下图：\n\n有时候我们也可以按时间范围来划分，如不同年月的订单放到不同的表，它也是一种`range`的划分策略。\n\n  * 优点： range范围分表，有利于扩容。\n  * 缺点：可能会有热点问题。因为订单id是一直在增大的，也就是说最近一段时间都是汇聚在一张表里面的。比如最近一个月的订单都在300万~600万之间，平时用户一般都查最近一个月的订单比较多，请求都打到order_1表啦。\n\n## 5.2 hash取模\n\n**hash取模策略：**\n\n> 指定的路由key（一般是`user_id、order_id、customer_no`作为key）对分表总数进行取模，把数据分散到各个表中。\n\n比如原始订单表信息，我们把它分成4张分表：\n\n  * 比如id=1，对4取模，就会得到1，就把它放到t_order_1;\n  * id=3，对4取模，就会得到3，就把它放到t_order_3;\n\n一般，我们会取**哈希值，再做取余** ：\n\n  * 优点：hash取模的方式，不会存在明显的热点问题。\n  * 缺点：如果未来某个时候，表数据量又到瓶颈了，需要扩容，就比较麻烦。所以一般建议提前规划好，一次性分够。（可以考虑一致性哈希）\n\n## 5.3 一致性Hash\n\n如果**用hash方式** 分表，前期规划不好，需要**扩容二次分表，表的数量需要增加，所以hash值需要重新计算** ，这时候需要迁移数据了。\n\n>\n> 比如我们开始分了`10`张表，之后业务扩展需要，增加到`20`张表。那问题就来了，之前根据`orderId`取模`10`后的数据分散在了各个表中，现在需要重新对所有数据重新取模`20`来分配数据\n\n为了解决这个**扩容迁移** 问题，可以使用**一致性hash思想** 来解决。\n\n> **一致性哈希**\n> ：在移除或者添加一个服务器时，能够尽可能小地改变已存在的服务请求与处理请求服务器之间的映射关系。一致性哈希解决了简单哈希算法在分布式哈希表存在的**动态伸缩**\n> 等问题\n\n# 6 热点倾斜问题\n\n如果我们根据**时间范围**\n分片，某电商公司`11`月搞营销活动，那么大部分的数据都落在`11`月份的表里面了，其他分片表可能很少被查询，即**数据倾斜** 了，有热点数据问题了。\n\n我们可以使用`range范围+ hash哈希取模`结合的分表策略，简单的做法就是：\n\n>\n> 在拆分库的时候，我们可以先用range范围方案，比如订单id在`0~4000万`的区间，划分为订单库1;id在`4000万~8000万`的数据，划分到`订单库2`,将来要扩容时，id在`8000万~1.2亿`的数据，划分到订单库3。然后订单库内，再用`hash取模`的策略，把不同订单划分到不同的表。\n\n# 7 分布式事务问题\n\n分库分表后，假设两个表在不同的数据库，那么**本地事务已经无效** 啦，需要使用**分布式事务** 了。\n\n常用的分布式事务解决方案有：\n\n  * 两阶段提交\n  * 三阶段提交\n  * TCC\n  * 本地消息表\n  * 最大努力通知\n  * saga\n\n我是分布式事务框架Seata的Committer，大家有关于分布式事务的问题可以找我讨论\n\n# 8 跨节点Join\n\n在单库未拆分表之前，我们如果要使用`join`关联多张表操作的话，简直`so\neasy`啦。但是分库分表之后，两张表可能都不在同一个数据库中了，那么如何跨库`join`操作呢？\n\n跨库Join的几种解决思路：\n\n  * 字段冗余：把需要关联的字段放入主表中，避免关联操作；比如订单表保存了卖家ID（sellerId），你把卖家名字sellerName也保存到订单表，这就不用去关联卖家表了。这是一种空间换时间的思想。\n  * 全局表：比如系统中所有模块都可能会依赖到的一些基础表（即全局表），在每个数据库中均保存一份。\n  * 数据抽象同步：比如A库中的a表和B库中的b表有关联，可以定时将指定的表做同步，将数据汇合聚集，生成新的表。一般可以借助ETL工具。\n  * 应用层代码组装：分开多次查询，调用不同模块服务，获取到数据后，代码层进行字段计算拼装。\n\n# 9 分页问题\n\n  * 方案1（全局视野法）：在各个数据库节点查到对应结果后，在代码端汇聚再分页。这样优点是业务无损，精准返回所需数据；缺点则是会返回过多数据，增大网络传输\n\n> 比如分库分表前，你是根据**创建时间排序** ，然后**获取第2页数据** 。如果你是分了**两个库**\n> ，那你就可以每个库都根据时间排序，然后都返回**2页** 数据，然后把两个数据库查询回来的数据**汇总** ，再根据创建时间进行**内存排序**\n> ，最后再取第**2** 页的数据。\n\n  * 方案2（业务折衷法-禁止跳页查询）：这种方案需要业务妥协一下，只有上一页和下一页，不允许跳页查询了。\n\n>\n> 这种方案，查询第一页时，是跟全局视野法一样的。但是下一页时，需要把当前最大的创建时间传过来，然后每个节点，都查询大于创建时间的一页数据，接着汇总，内存排序返回。\n\n# 10 分布式ID\n\n数据库被切分后，不能再依赖数据库自身的主键生成机制啦，最简单可以考虑`UUID`，或者使用**雪花算法** 生成`分布式ID`。\n\n> 雪花算法是一种生成分布式全局唯一ID的算法，生成的ID称为`Snowflake IDs`。这种算法由`Twitter`创建，并用于推文的ID。\n\n一个`Snowflake ID`有`64`位。\n\n  * 第1位：Java中long的最高位是符号位代表正负，正数是0，负数是1，一般生成ID都为正数，所以默认为0。\n  * 接下来前41位是时间戳，表示了自选定的时期以来的毫秒数。\n  * 接下来的10位代表计算机ID，防止冲突。\n  * 其余12位代表每台机器上生成ID的序列号，这允许在同一毫秒内创建多个Snowflake ID。\n\n# 11 分库中间件\n\n目前流行的分库分表中间件比较多：\n\n  * Sharding-JDBC\n  * cobar\n  * Mycat\n  * Atlas\n  * TDDL（淘宝）\n  * vitess\n\n我们项目当前就是使用`Sharding-JDBC`实现的分库分\n\n# 12 垂直、水平分库分表策略区别\n\n  * 水平分库：以字段为依据，按照一定策略（hash、range等），将一个库中的数据拆分到多个库中。\n  * 水平分表：以字段为依据，按照一定策略（hash、range等），将一个表中的数据拆分到多个表中。\n  * 垂直分库：以表为依据，按照业务归属不同，将不同的表拆分到不同的库中。\n  * 垂直分表：以字段为依据，按照字段的活跃性，将表中字段拆到不同的表（主表和扩展表）中。\n\n# 13 不停服扩容\n\n不用停服。不停服的时候，应该怎么做呢，主要分五个步骤：\n\n  1. 编写代理层，加个开关（控制访问新的DAO还是老的DAO，或者是都访问），灰度期间，还是访问老的DAO。\n  2. 发版全量后，开启双写，既在旧表新增和修改，也在新表新增和修改。日志或者临时表记下新表ID起始值，旧表中小于这个值的数据就是存量数据，这批数据就是要迁移的。\n  3. 通过脚本把旧表的存量数据写入新表。\n  4. 停读旧表改读新表，此时新表已经承载了所有读写业务，但是这时候不要立刻停写旧表，需要保持双写一段时间。\n  5. 当读写新表一段时间之后，如果没有业务问题，就可以停写旧表啦\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576482009858519040?sourceSSR=users",
        "title": "百度前端实习一面-1.12",
        "content": "不知道是哪个部门（\n\n  1. 项目难点\n  2. 设计数据库的流程\n  3. 讲讲JWT\n  4. JWT的加密算法 对称/非对称\n  5. 讲讲跨域\n  6. 水平垂直居中 尽可能多讲\n  7. 讲讲hooks\n  8. 讲讲fiber\n  9. 设计一个编辑器 有重做与撤销两个按钮 设计思路\n  10. 讲讲防抖\n  11. 手写useCounter\n\n寄！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/576480270690316288?sourceSSR=users",
        "title": "smartX前端实习一面-1.10（已挂）",
        "content": "  1. 项目相关\n  2. 手写eventemitter\n  3. 手写useLocalstorage\n  4. 讲讲useState\n  5. 讲讲useEffect\n  6. 为什么hooks不能在条件和循环中使用\n  7. 讲讲react fiber\n\n收获蛮大的一次面试 还有感谢信 面试体验挺不错的[赞][赞]\n\n"
    }
]