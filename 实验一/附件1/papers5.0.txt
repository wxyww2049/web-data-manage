[
    {
        "url": "https://www.nowcoder.com/discuss/601769587230695424?sourceSSR=users",
        "title": "研二找实习面经",
        "content": "**1.****钉子科技（****30min****）****-****算法工程师**\n\n面试体验：5\n\nHR电话询问基本情况\n\n线下面试\n\n问具体项目经历设计的算法（展示论文设计的网络）网络的表现\n\n了解大模型吗\n\n使用过stable diffusion相关的网站吗\n\n算法部分：（A4纸上书写）\n\n二叉树的顺序遍历（从左到右从上到下）\n\n快速排序\n\n动态规划\n\n反问\n\n**2.****商汤科技（****1h+****）****-****算法工程师**\n\n面试体验：4.5\n\n线上一面\n\n简历情况从学过的课程到工作项目经历每个都问的很详细\n\n在之前的实习经历中是否遇到过比较难的问题又是怎么解决的呢\n\n发现过什么比较大的漏洞（之前实习做的测试）\n\n算法部分：（用电脑的编译器）\n\n打印一个杨辉三角（带空格的正三角形）\n\n反问\n\n**3.Cyclone RPA****（****20Min****）****-****算法工程师**\n\n面试体验：4.3\n\n线下面试\n\n自我介绍工作项目经历\n\n发现过什么比较大的漏洞（之前实习做的测试）\n\n我研究的方向具体有什么应用场景有什么其他的应用场景\n\n使用过GPT吗GPT能够为我现在这个方向做些什么\n\n了解怎么训练GPT等大模型吗怎样通过修改一些提示词来训练GPT\n\n根据公司设计业务开放性提问\n\n反问\n\n**4.SAP****（****1h****）****-****测试开发工程师**\n\n面试体验：5\n\n线上面试\n\n自我介绍工作经历（由于之前实习是测试问的比较详细）\n\n敏捷开发测试需要的时间业务流程\n\n在之前的实习经历中是否遇到过比较难的问题又是怎么解决的呢\n\n使用过什么测试工具\n\n给一个具体模块该怎么测试怎么设计测试用例\n\n怎么在系统上提交bug 需要填写什么\n\nSql语句（给了id 工资和创建时间求前70行工资总和）DB了解吗\n\n了解python多线程通信吗\n\nJava的优点\n\n算法：\n\n有序整数数组查找一个整数的查找方式有哪些哪个最快二分查找的时间复杂度\n\n二分查找\n\nN阶楼梯可以上1阶可以上2阶有多少种方法可以上到楼顶\n\n反问\n\n**5.****车****300****（****30min****）****-****算法工程师**\n\n面试体验：4\n\n线上面试\n\nTransformer具体代码和模块有什么作用为什么我论文要用transformer\n\n位置编码的代码位置编码怎么取的\n\nPytorch:（库函数）\n\n调用一个图片的库函数\n\n将(3,256,256)变成(1,3,256,256)的方法有什么代码怎么写\n\n将维度(264,256,384)变成(384,256,264)的方法有什么代码怎么写\n\n如何将一个4x4的小patch拉伸为1x16 代码怎么写\n\n将cpu转为调用gpu运行的代码\n\n怎么将图片传进去具体的代码\n\nDataloader dataset的作用dataset有什么函数重写dataset需要重写什么方法\n\n…很多基础问题记不住了\n\n反问\n\n更新中…\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601752530212663296?sourceSSR=users",
        "title": "第一次写面经",
        "content": "某小厂，测试，（被拷打一个小时）  \n\n  \n\n1.自我介绍，询问成绩，竞赛，四级\n\n2.实习经历\n\n3.selenium八大定位\n\n4.selenium是基于什么的\n\n5.是否看过selenium底层代码\n\n6.selenium如何获取session，具体代码\n\n7.selenium如何去获取弹框，如何从原本页面转换到弹窗页面，用什么方法\n\n8.python数据类型\n\n9.python数据类型中哪些是可变的哪些不可变\n\n10.讲讲Python的闭包，迭代器，搬箱和拆箱\n\n11.什么是深拷贝浅拷贝\n\n12.用Python编写过哪些脚本\n\n13.数据库增删改查操作，具体代码\n\n14.排序用哪个关键字，去重用什么关键字\n\n15.如何做接口测试的？\n\n16.postman怎么做接口测试，拷打postman的自动关联\n\n17.fidder如何抓包，给你一个登录界面，如何抓包，怎么操作需要分析哪些信息\n\n18.https的请求信息用fidder怎么抓\n\n19.黑盒测试和白盒测试的区别\n\n20.问测试流程\n\n21.问测试阶段有哪些\n\n22.如果你提给开发一个bug，开发不认怎么办\n\n23.一个好的bug要考虑哪些因素\n\n24.判断测试结束的标准是什么\n\n25.给你一个纸杯怎么测试（答的很烂，面试官说这个主要考察你的发散思维，然后跟我说了一大堆测试的点，学废了）\n\n26.询问职业规划\n\n还有一些忘记了...\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601752090662215680?sourceSSR=users",
        "title": "快手广告算法暑期实习一面",
        "content": "![5wbQH1ISxTAFv1XUOaQmFZU0JA7O2VSj.jpg](https://uploadfiles.nowcoder.com/images/20240325/853190627_1711340866775/0EA34BF41495867BED4FBF1733CD077E)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601750963346530304?sourceSSR=users",
        "title": "科大讯飞测试工程师岗二面面经",
        "content": "秋招面试了科大讯飞测试工程师岗，感觉表现一般，可能会不通过吧。\n\n一面挺有难度的，会问到很多软件开发和代码相关的问题。\n\n二面同样也是问专业知识比较多，首先让你自我介绍，然后问关于项目的东西，而且问了挺多，大家要多准备。之后问了技术的东西，比如：白盒测试，单元测试；有用过一些第三方的代码或者开源库吗；进程和线程的区别，通信方式，为什么这么划分等等。问完后会有时间给你反问。\n\n大概是这样子的流程，感觉挺难的，而且很容易发挥不好......\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601749473227796480?sourceSSR=users",
        "title": "深信服测试工程师岗面经",
        "content": "深信服测试工程师岗面试，整体感觉不错，有一定难度。\n\n面试过程中，我发现更聚焦项目落地情况，对结果的考察会更多一些，包括在项目过程中的主动沟通，可能在深信服，就是研发与测试的地位差的比较大，感觉沟通不是很对等。主要还是围绕之前项目中的角色和项目细节考察。\n\n在这里建议大家，面试过程中要注重自己的仪容仪表，并且提前了解熟悉自己的项目流程，主动和面试官沟通，理清自己想表达的思路，抓重点，亮结果。\n\n以上就是我的面试经验和建议啦，希望能帮到大家！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601747322409676800?sourceSSR=users",
        "title": "OPPO测试工程师岗面经",
        "content": "面试了OPPO测试工程师岗，确实有一点难度，感觉没戏，还是给大家分享一下吧。\n\n首先是自我介绍，然后问测试相关内容，例如介绍TCP/IP协议，打开python共享屏幕介绍代码，问了正则表达式的内容，后面又问了项目经历。其实我个人觉得主要是围绕简历问问题，所以建议大家事先准备好简历的内容。\n\n最后反问环节，我问了面试官一个问题：新手开始软件测试工作最重要的能力是什么？\n\n内容不算太多，但结束面试到现在，我还没收到通知，估计是没戏啦！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601746038575144960?sourceSSR=users",
        "title": "大疆硬件工程师岗面经",
        "content": "秋招面试了大疆硬件工程师岗，第一感觉是HR挺亲切的，整个面试过程很愉快，而且问题比较简单，所以通过啦！今天来分享一下面试流程和问题：\n\n首先是自我介绍、大学课程和成绩介绍和所做的项目介绍，然后详细介绍之前的实习经历。\n\n问完这些之后会有一些专业性知识，比如：请介绍你对 SD 卡硬件接口协议的了解程度；请介绍你对 DCDC\n电源原理的了解程度；请解释原理图中电容和电感的作用等等。\n\n总的来说，整个面试过程大约持续了20分钟，我觉得难度并不大。我希望我的面试经验可以对大家有所帮助。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601742105697918976?sourceSSR=users",
        "title": "中科创达Java",
        "content": "一面蛮简单：\n\n  1. 自我介绍\n  2. 介绍一下印象最深的项目\n  3. 遇到过的难点\n  4. 组织过活动吗\n  5. 还有几个聊天性质的问题，忘了\n  6. 借口和抽象类的区别\n  7. 多态\n  8. 常用的集合（list啥的）\n  9. arraylist和list的区别\n  10. 常见异常\n  11. 堆内存和栈内存\n  12. 反问\n\nHR面：\n\n  1. 自我介绍\n  2. 聊天\n  3. 印象最深的项目\n  4. 问有没有别的OFFER，为什么上个学期没签约\n  5. 问期望工资，答：算上加班工资、奖金等，期望有X至X+3，回：**双非硕开不了这么高，软件行业加班很正常，加班调休，没加班工资**\n  6. 聊天，对方说：**很辛苦、很累、是否能接受**\n  7. 聊一些杂七杂八的\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601737263025807360?sourceSSR=users",
        "title": "网龙引擎开发岗一面 已OC",
        "content": "基本上是深挖项目，参考有限\n\n工作具体的工作内容有哪些？\n\n实现过哪些shader特效？\n\n移动平台上对溶解shader中alpha test的优化？\n\nshader变体 和剔除实现方案？\n\n在实习期间用什么引擎比较多？\n\nunity比较多STL：C++ list，vector和map的差别？底层？性能差异？\n\n如何优化链表的缓存命中率？\n\nFSR1.0 和2.0原理，如何优化？\n\n华为海思帧提升技术是咋样的？ vrs技术？\n\n讲讲自己的研究项目？和创新点\n\n第二天HR面 OC\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601732943014322176?sourceSSR=users",
        "title": "反射计数 - 华为OD统一考试（C卷）",
        "content": "> OD统一考试\n>\n> 分值： 200分\n>\n> 题解： Java / Python / C++\n\n![alt](https://uploadfiles.nowcoder.com/images/20231201/644248237_1701399029315/A4F5E48572027B66E6ECFA2EF0A7C66A)\n\n## 题目描述\n\n给定一个包含 0 和 1 的二维矩阵, 给定一个初始位置和速度。\n\n一个物体从给定的初始位置出发, 在给定的速度下进行移动, 遇到矩阵的边缘则发生镜面反射无论物体经过 0 还是 1，都不影响其速度。\n\n请计算并给出经过t 时间单位后,物体经过 1 点的次数。\n\n矩阵以左上角位置为[0,0](列(x),行(y)),例如坐标为[ 2 , 1 ](第二列,第一行)。\n\n    \n    \n    +--------------------------- 递增(x)\n    | 0 0 1 0 0 0 0 1 0 0 0 0\n    | 0 0 1 0 0 0 0 1 0 0 0 0\n    | 0 0 1 0 0 0 0 1 0 0 0 0\n    | 0 0 1 0 0 0 0 1 0 0 0 0\n    | 0 0 1 0 0 0 0 1 0 0 0 0\n    | 0 0 1 0 0 0 0 1 0 0 0 0\n    | 0 0 1 0 0 0 0 1 0 0 0 0\n    |\n    递增(y)\n    \n    \n\n> **注意** :\n>\n> 如果初始位置的点是 1, 也计算在内\n>\n> 时间的最小单位为1, 不考虑小于 1 个时间单位内经过的点\n\n## 输入描述\n\n第一行为初始信息 `<w> <h> <x> <y> <sx> <sy> <t>`\n\n第二行开始一共h行,为二维矩阵信息\n\n其中w,h 为矩阵的宽和高x,y 为起始位置\n\nsx,sy为初始速度t为经过的时间\n\n> 所有的输入都是有效的，**数据范围** 如下：\n>\n>\n> ![](https://www.nowcoder.com/equation?tex=0%3C%20w%2C%20h%20%3C100&preview=true)\n>\n> ![](https://www.nowcoder.com/equation?tex=0%5Cle%20x%5Clt%20w&preview=true)\n>\n>\n> ![](https://www.nowcoder.com/equation?tex=0%20%E2%89%A4%20y%20%5Clt%20h&preview=true)\n>\n>\n> ![](https://www.nowcoder.com/equation?tex=-1%5Cle%20sx%2Csy%5Cle%201&preview=true)\n>\n>\n> ![](https://www.nowcoder.com/equation?tex=0%5Cle%20t%5Cle%20100&preview=true)\n\n## 输出描述\n\n经过1的个数\n\n> 注意：初始位置也要计算在内\n\n## 示例1\n\n    \n    \n    输入：\n    12 7 2 1 1 -1 13\n    001000010000\n    001000010000\n    001000010000\n    000100001000\n    001000010000\n    001000010000\n    001000010000\n    \n    输出：\n    3\n    \n    说明:\n    初始位置为(2,1),速度为(1,-1),那么13个时间单位后,经过点1的个数为3\n    \n\n## 题解\n\n> 解题思路：\n>\n>   1. 读取输入的初始信息和二维矩阵。\n>   2. 使用循环模拟物体的运动，根据速度更新物体的位置，如果遇到矩阵边缘则进行反射。\n>   3. 在每次移动过程中，如果物体当前位置为1，则将计数器增加。\n>   4. 重复上述过程直到达到指定的时间。\n>   5. 输出计数器的值，即物体经过1的次数。\n>\n\n>\n> 代码特点：\n>\n>   * 使用二维数组表示矩阵。\n>   * 通过循环模拟物体的运动。\n>   * 使用条件判断处理边界反射。\n>\n\n>\n> 这是一个简单的**模拟题** ，主要考察对物体运动轨迹的模拟和条件判断的处理。\n\n### Java\n\n    \n    \n    import java.util.Scanner;\n    \n    /**\n     * @author code5bug\n     */\n    public class Main {\n        public static void main(String[] args) {\n            Scanner scanner = new Scanner(System.in);\n            int w = scanner.nextInt(), \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601730050144120832?sourceSSR=users",
        "title": "前端面经 雅迪科技",
        "content": "先说内容，两个面试官一个hr一起面，两个面试官都没开视频我也就没开了[痴笑]\n\n提前和我说进去了更偏向安卓开发[静装]我当然是ok的先狠狠舔一波\n\n1.大学都学过什么语言\n\n回答里提到过java，但是特意说了java基础不是很好希望他不要问我java[牛泪]\n\n2.没事那就说说==和equals的区别吧\n\n这个我倒是还记得[赞]答的还行\n\n3.再说说接口和抽象类\n\n这个记得，但不多[好无辜]\n\n4.git的分支管理你说说\n\n5.git冲突怎么办\n\ngit的也不是很懂啊[牛泪]做项目用的也就是add和commit了，补习git去了\n\n6.项目中router你是怎么用的\n\n可以看到问的不多，前端的八股只涉及了git方面的，js和css都没问，不过鼠鼠相信这只是部分情况[许愿]明天面建信金科期待一下吧\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601723151667474432?sourceSSR=users",
        "title": "拼多多 前端笔试3月24日",
        "content": "题型：3道选择 3道手写代码\n\n时长：19:00 ~ 20:15\n\n# 选择：\n\n第一题：CSS知识点 样式优先级、z-index等\n\n第二题：判断块级元素和行内元素 ps: <dl>是个什么标签，第一次看到\n\n第三题：浏览器知识点，cache-control、etag、状态码302304\n\n# 手写：\n\n第一题：一个函数，入参是一个promise数组。要求并行执行promise，立即输出，所有结果都输出\n\n第二题：vdom转真实dom函数\n\n第三题：手写Array.prototype.reduce 记得处理initialvalue不传的情况，把第一个元素当做初始值开始\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601712892072783872?sourceSSR=users",
        "title": "美团面试，问的贼细~",
        "content": "下面是美团校招的面试真题和答案解析，问的比较细，涉及到的模块有：网络、框架、设计模式（静态代理模式）、手撕代码、MySQL、Java 基础、HashMap\n等知识点，接下来我们一起来看吧。\n\n# 1.自我介绍\n\n自我介绍讲明白三个点：\n\n  1. 你是谁？有几年工作经验？哪一届的学生？毕业院线？\n  2. 你会啥？\n  3. 你最大成就？\n\n# 2.HTTP属于传输协议的哪一层协议？\n\nHTTP 属于应用层，基于 TCP/IP 实现。\n\n# 3.TCP和UDP的区别？\n\n  1. **TCP 有连接；UDP 无连接。**\n  2. **TCP 可靠；UDP 不可靠。**\n  3. **TCP 基于数据流；UDP 基于数据报。**\n  4. UDP 比 TCP 更高效。\n  5. TCP 发送缓冲区、接收缓冲区；UDP 只有接收缓冲区，没有发送缓冲区。\n\n# 4.TCP的可靠性传输怎么保证？\n\n保证可靠性的机制：\n\n  1. **确认应答。**\n  2. **超时重传。**\n  3. **连接管理（三次握手和四次挥手）。**\n  4. 拥塞控制。\n  5. 流量控制。\n\n# 5.如果让你设计一个协议，你怎么保证可靠性？\n\n可靠性主要依据：\n\n  1. 连接管理\n  2. 确认应答\n  3. 超时重传\n\n# 6.TCP为什么需要三次握手？\n\nTCP 通讯的双方都是全双工的，所以他们彼此要证明自己和对方的发送能力和接收能力。 TCP 如果两次握手不能证明服务器端的发送能力和客户端的接受能力 ->\n两次握手。 **TCP 至少需要三次握手才能证明彼此的全双工能力。**\n\n# 7.TCP为什么需要四次挥手？\n\n原因有两个：\n\n  1. TCP 本身自带确认应答。\n  2. TCP 有接收缓冲区的任务可能没执行完。\n\n# 8.GET和POST请求的区别？\n\n主要区别：\n\n  1. **隐私性** ：通常情况下 POST 的隐私性高于 GET。\n  2. **Restful 规范** ：GET 用于查询；POST 用于写入操作。\n  3. **传参的大小不同** ：GET 传参有大小限制，而 POST 没有。\n\n# 9.你刚才说GET请求传输文件大小是有限制是多少？\n\n不同的浏览器是不同。 早期版本通常是 2k4k，现在是 4K8k。\n\n# 10.我看你博客写了很多关于Spring的东西，你可以给我说一下Spring的最重要的两大特性吗？\n\nSpring 核心功能：\n\n  * IoC\n  * AOP\n\n# 11.可以聊一下AOP吗？\n\n思路：\n\n  1. **讲定义** ：AOP 面向切面编程。\n  2. **讲实现** ： \n    1. 框架添加 AOP 依赖\n    2. 定义切面（@Aspect）并且将它放到 IoC 容器\n    3. 定义切点 -> @Pointcut 拦截规则\n    4. 定义通知 -> 拦截之后的执行方法\n  3. **讲原理** ：依靠 AOP 实现： \n    1. JDK Proxy\n    2. CGLib\n\n# 12.说一下静态代理的实现类图吗？\n\nUML 类图 -> 设计模式 静态代理 UML 类图：\n\n  1. 接口类\n  2. 真实类（被代理的类）\n  3. 代理类\n\n# 13.现在手写一个静态代理？\n\n![alt](https://uploadfiles.nowcoder.com/images/20240325/623875366_1711331489598/D8F7D9A2F5C69959175AAA0B630921AC)\n\n# 14.Java基础类型有哪几个？\n\nJava 有以下 8 大数据类型：\n\n  1. **整型** ：byte、short、int、long\n  2. **浮点类型** ：float、double\n  3. **字符类型** ：char\n  4. **布尔类型** ：boolean\n\n# 15.int是几个字节？\n\n4个字节。\n\n# 16.int和Integer有啥区别？那你觉得哪一个用起来好，为什么？\n\n区别：\n\n  * int 属于基础数据类型\n  * Integer 属于对象。\n\n使用场景：\n\n  * **int 使用场景** ：定义类里面的属性。\n  * **Integer 使用场景** ： \n    * 传参\n    * 泛型\n    * 对象工具方法\n\n# 17.MySQL的事务隔离级别有哪几个？\n\n  1. **读未提交** ：存在脏读、不可重复读、幻读问题。\n  2. **读已提交** ：没有脏读问题了，但是依然存在不可重复读和幻读的问题。\n  3. **可重复读（默认隔离级别）** ：没有脏读、不可重复读的问题，但依然存在幻读问题。\n  4. **串行化** ：没有脏读、不可重复读、在幻读的问题，但效率较低。\n\n# 18.为什么读已提交有不可重复读的问题？\n\n读已提交会查询事务已经提交的数据，所以在两次相同的查询中，可能会读到不同的内容，这个问题就是不可重复读的问题。\n\n# 19.你可以给我模拟一下读已提交发生不可重复读的问题吗？\n\n    \n    \n    begin; -- 开启事务\n    select username from users where id=1; -- 张三\n    -- 事务2将 users id=1 username='李四'\n    -- ....\n    select username from users where id=1; -- 李四\n    \n\n# 20.写一个SQL语句：查询男生的数量？\n\n    \n    \n    select count(*) from users where gender=1;\n    \n\n# 21.根据写的SQL说一下这个里面索引是谁？生效了吗？\n\n> 考察的重点：性别是否适合做索引？\n\n无索引，因为性别不适合做索引。\n\n# 22.HashMap的底层实现原理？\n\nHashMap 使用数组+链表/红黑树来实现的。\n\n# 23.为什么HashMap要用到链表？\n\nHashMap 会有哈希冲突，HashMap 使用的是链地址法来解决哈希冲突（实现简单、高效），所以使用链表来实现 HashMap 解决哈希冲突。\n\n# 本文视频解析\n\n>\n> 飞书链接：[https://r6b93q3exi.feishu.cn/docx/GBJPdy5hIoqTZNxMV8WcBDWUnHb](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fr6b93q3exi.feishu.cn%2Fdocx%2FGBJPdy5hIoqTZNxMV8WcBDWUnHb%3Ffrom%3Dfrom_copylink)\n>\n> 密码：1p6698&1\n\n# 参考 & 鸣谢\n\njavacn.site\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601710562208178176?sourceSSR=users",
        "title": "腾讯云客户端三面（本科实习）",
        "content": "这回是技术主管面\n\n一开始先自我介绍，然后问了你认为自己最有成就感的项目的一些细节。\n\n之后是两道的设计题，很自由，让你开个记事本边写边讲。分别是设计一个跨进程共享内存同步的 API\n和处理快速创建释放堆上变量导致内存碎片的情况。主要看一个设计思路\n\n目前等 HR 面通知\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601708614289551360?sourceSSR=users",
        "title": "CSP题解|201512-2 消除类游戏|20分",
        "content": "\n    #include <bits/stdc++.h>\n    using namespace std;\n    int main() {\n    \tint n,m;\n    \tcin>>n>>m;\n    \tint arr[n][m];\n    \tbool del[n][m]={false};\n    \tfor(int i =0;i<n;i++)\n    \t\tfor(int j =0;j<m;j++)\n    \t\t\tcin>>arr[i][j];\n    \t//按行遍历数组\n    \tfor(int i=0;i<n;i++){\n    \t\tfor(int j =0;j<m-2;j++){\n    \t\t\t//发现三个一样的数\n    \t\t\tint tmp = arr[i][j];\n    \t\t\tif(arr[i][j] == arr[i][j+1] && arr[i][j] == arr[i][j+2] ){\n    \t\t\t\t del[i][j]=true;\n    \t\t\t\t del[i][j+1]=true;\n    \t\t\t\t del[i][j+2]=true;\n    \t\t\t\t //继续往右找\n    \t\t\t\t while(j<m){\n    \t\t\t\t \tif(arr[i][j]==tmp){\n    \t\t\t\t \t\tdel[i][j]=true;\n    \t\t\t\t \t\tj++;\n    \t\t\t\t\t }else{\n    \t\t\t\t\t \tj--;\n    \t\t\t\t\t \tbreak;\n    \t\t\t\t\t }\n    \t\t\t\t } \n    \t\t\t}\t\n    \t\t}\n    \t} \n    \n    \tfor(int j =0;j<m;j++){\n    \t\tfor(int i=0;i<n-2;i++){\n    \t\t\t//发现三个一样的数\n    \t\t\tint tmp = arr[i][j];\n    \t\t\tif(arr[i][j] == arr[i+1][j] && arr[i][j] == arr[i+2][j] ){\n    \t\t\t\t del[i][j]=true;\n    \t\t\t\t del[i+1][j]=true;\n    \t\t\t\t del[i+2][j]=true;\n    \t\t\t\t //继续往下找\n    \t\t\t\t while(i<n){\n    \t\t\t\t \tif(arr[i][j]==tmp){\n    \t\t\t\t \t\tdel[i][j]=true;\n    \t\t\t\t \t\ti++;\n    \t\t\t\t\t }else{\n    \t\t\t\t\t \ti--;\n    \t\t\t\t\t \tbreak;\n    \t\t\t\t\t }\n    \t\t\t\t } \n    \t\t\t}\t\n    \t\t}\n    \t} \n    \t for(int i=0;i<n;i++){\n    \t \tfor(int j =0;j<m;j++){\n    \t\t\tcout<<(del[i][j]?0:arr[i][j])<<\" \";\n    \t\t}\n    \t\tcout<<endl;\n    \t }\n    }\n    \n\n感觉一点毛病都没，不知道为啥20分\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601703160960327680?sourceSSR=users",
        "title": "小米笔试3月23日“移山”答案",
        "content": "\n    package main\n    \n    import (\n    \t\"bufio\"\n    \t\"fmt\"\n    \t\"os\"\n    \t\"strconv\"\n    \t\"strings\"\n    )\n    \n    func main() {\n    \tvar n, m int\n    \tinput := bufio.NewScanner(os.Stdin)\n    \tif input.Scan() {\n    \t\tline := input.Text()\n    \t\tarr := strings.Split(line, \" \")\n    \t\tn, _ = strconv.Atoi(arr[0])\n    \t\tm, _ = strconv.Atoi(arr[1])\n    \t}\n    \ta := make([]int64, n)\n    \tif input.Scan() {\n    \t\tline := input.Text()\n    \t\tarr := strings.Split(line, \" \")\n    \t\tfor i := 0; i < len(arr); i++ {\n    \t\t\ta[i], _ = strconv.ParseInt(arr[i], 10, 64)\n    \t\t}\n    \t}\n    \tvar l, r, h int\n    \tvar d []int\n    \tx := 0\n    \tfor i := 0; i < m; i++ {\n    \t\tx++\n    \t\t// 差分数组，+2防止越界，也可以使用if\n    \t\td = make([]int, n+1)\n    \t\tif input.Scan() {\n    \t\t\tline := input.Text()\n    \t\t\tarr := strings.Split(line, \" \")\n    \t\t\tl, _ = strconv.Atoi(arr[0])\n    \t\t\tr, _ = strconv.Atoi(arr[1])\n    \t\t\th, _ = strconv.Atoi(arr[2])\n    \t\t}\n    \t\td[l-1] = d[l-1] + h\n    \t\td[r] = d[r] - h\n    \t\tfor j := 1; j <= n; j++ {\n    \t\t\td[j] += d[j-1]\n    \t\t}\n    \t\tfor j := 0; j < n; j++ {\n    \t\t\ta[j] -= int64(d[j])\n    \t\t\tif a[j] <= 0 {\n    \t\t\t\tfmt.Println(x)\n    \t\t\t\treturn\n    \t\t\t}\n    \t\t}\n    \t\tfmt.Println(a)\n    \t}\n    \n    }\n    \n    //6 5\n    //8 9 10 25 36 63\n    //1 2 10\n    \n    //5 4\n    //6 5 3 4 6\n    //1 3 2\n    //4 4 2\n    //3 5 1\n    //1 5 6\n    \n    \n\n使用前缀和+差分数组做的，一定记得使用uint64，不然用例通过不了。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601698156044185600?sourceSSR=users",
        "title": "3.24拼多多算法笔试（pdd）",
        "content": "#### Q1\n\n这里有n个正整数，a1,....,an\n\nAlice 会先去掉其中最多d 个数\n\nBob 接下来会将剩余的数中最多m个数乘以 -k\n\nAlice 想要剩余数之和尽可能大，Bob 想要剩余数之和尽可能小。假设 Alice 和 Bob 都足够聪明，请问最后剩余数之和是多少。\n\n**输入描述**\n\n第一行一个正整数T，接下来有T组数据\n\n每组数据2行\n\n第一行4 个数\n\nn, m, k, d (2 ≤ n ≤ 10^5) (0 ≤ m, d ≤ n) (1 ≤ k < 10^4)\n\n第二行n个数，a1,a2,..., an (1 ≤ ai ≤ 10^9)\n\n保证sigma n不超过10^5\n\n**输出描述**\n\n每组数据输出一行，每行一个数，表示剩余数之和\n\n##### A1\n\n排序，滑动窗口解决，为啥有滑动窗口这个结论是因为有一个单调性：Alice和Bob都倾向选大端的数！\n\n    \n    \n    import sys\n    \n    t = int(input())\n    for i in range(t):\n        n,m,k,d = map(int,input().split())\n        nums = list(map(int,input().split()))\n        nums.sort(key=lambda x:-x)\n        tmp = -k*sum(nums[:m])+sum(nums[m:])\n        res = tmp\n        for i,num in enumerate(nums):\n            if i>=d:\n                break\n            tmp+=k*nums[i]\n            tmp-=(k+1)*nums[i+m] if i+m<n else 0\n            res = max(res,tmp)\n        print(res)\n    \n\n#### Q2\n\n伊文有两个由0和1组成的字符串，A和B，长度分别为m和n（m>=n）。伊文希望取出A的连续子串与B构造若干长度为n的S串，满足：\n\n  * ![](https://www.nowcoder.com/equation?tex=S_%7Bi%7D%3DA_%7Bx%2Bi%7D%5Coplus%20B_%7Bi%7D%2C%20i%5Cin%5B1%2Cn%5D%2C%20x%5Cin%5BO%2Cm-n%5D&preview=true)\n  * ﻿﻿![](https://www.nowcoder.com/equation?tex=S1%5Coplus%20S2%5Coplus%20S3%5Coplus%20...%5Coplus%20S_%7Bn-1%7D%5Coplus%20S_n%3D0&preview=true)\n\n伊文想知道总共能够构造出多少个不同的S串。\n\n**输入描述**\n\n输入有三行，第一行2个数m和n，为A和B的长度；\n\nm,n （0 <n≤m≤5 x10^3）\n\n第二行为长度为m的A串\n\n第三行为长度为 的B串，A和B仅由'0'和'1'组成\n\n**输出描述**\n\n输出：一个数字，代表不同的S串个数\n\n##### A2\n\n签到题在第二题，这个数据量级直接暴力了\n\n    \n    \n    import sys\n    \n    m,n = map(int,input().split())\n    a = input()\n    b = input()\n    \n    def xor(s1,s2):\n        res = \"\"\n        cnt = 0\n        for a,b in zip(s1,s2):\n            if (a=='1' and b=='0') or (b=='1' and a=='0'):\n                res+='1'\n                cnt^=1\n            else:\n                res+='0'\n                cnt^=0\n        return cnt,res\n    \n    s = set()\n    for i in range(m-n+1):\n        cnt,res = xor(a[i:i+n],b)\n        if cnt:\n            continue\n        if res not in s:\n            s.add(res)\n    print(len(s))\n    \n\n#### Q3\n\n多多快递站共有n个快递点，n个快递点之间通过m条单向车道连接。快递员从任何一个快递站点出发，都无法通过单向车道回到该站点。也就是说，n个快递点组成一张有向无环图。对于快递点u，如果对于所有的快递点v（u\n!= w），快递员都可以从w走到v，或者从v走到u，那么则评定站点u为超级快递点。\n\n请你帮忙算一算，一共有多少个超级快递点。\n\n**输入描述**\n\n第一行2个数字n（2≤n≤3*10^5）,m（1≤m ≤3*10^5），n为快递点个数，m为单向车道个数。\n\n接下来的m行每行两个数字u,v (1<=u,v<=n,u!=v)，表示有一条站点么指向0的单向车道。\n\n**输出描述**\n\n请输出1个数字，表示超级快递点的个数。\n\n##### A3\n\nDFS暴力ac不了不献丑了\n\n#### Q4\n\n多多有一个长度为n的字符串，这个字符串由26个小写字母组成.\n\n多多可以对这个字符串进行多次操作，每次操作可以把该字符串中一段连续的回文子串删除（单个字符也属于回文串），删除后剩下的串会拼在一起.\n\n请问最少需要多少次操作可以将这个字符串删光.\n\n**输入描述**\n\n第一行，包含一个正整数T（1≤T≤20）代表测试数据的组数.\n\n对于每组测试数据，仅有一行，代表这个字符串.（1≤n≤ 500）\n\n保证\\sigma n 不超过3000\n\n**输出描述**\n\n对于每组数据输出一行整数，代表多多在进行最少多少次操作后，可以将这个字符串删光.\n\n##### A4\n\ndp[i][j]代表最小操作数，从小到大枚举区间，并枚举区间分割点。\n\n    \n    \n    import sys\n    \n    t = int(input())\n    for i in range(t):\n        s = input()\n        n = len(s)\n        dp = [[n]*n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for k in range(1, n):\n          for j in range(0,n-k):\n            if s[j] == s[j+k]:\n              if k == 1:\n                dp[j][j+k] = 1\n              else:\n                dp[j][j+k] = dp[j+1][j+k-1]\n            for i in range(j, j+k):\n              dp[j][j+k] = min(dp[j][j+k], dp[j][i] + dp[i+1][j+k])\n        print(dp[0][n-1])\n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601689489517408256?sourceSSR=users",
        "title": "淘天3.22面经解析：BAT的核心部门原来这么难",
        "content": "嗨～我是可拟雀，一个后端开发工程师，毕业于某985大学，目前供职于bat某大厂核心部门后端。每天分享最新面经答案，希望在大环境不好的当下能帮到你，让你多积累面试经验。需要内推或者面经合集请评论哦。  \n  \n原文：  \n  \n八股集合，汗流浃背，但是确实学到了很多内容，是以前没有仔细看过的。目前记起来一些，后续想起来别的了再补充  \n  \n操作系统  \nLinux平常使用吗  \n线程和进程的区别，还有什么类似进程和线程的吗  \n什么是协程  \nCPU满了怎么看，怎么办  \nLinux下rm正在写入的文件会发生什么？  \n那么该如何在不使用kill的情况下删除该文件  \n磁盘满了怎么看  \n进程状态以及特殊两种状态  \n僵尸线程和孤儿线程是什么  \n清空进程时什么进程还存活？  \n  \n网络  \ntcp三次握手四次挥手  \n为什么不能两次握手  \n如何解决tcp包的粘连  \nudp和tcp的区别  \nudp如何变得安全  \n  \nJava基础  \nhashmap的底层  \nhashmap.get之后会发生什么  \n什么时候链表转红黑树  \n什么时候红黑树降级  \njmm  \nJvm区域及作用  \n老年代常用垃圾处理算法  \n  \n多线程  \nthreadlocal有没有使用  \nthreadlocal底层是什么（哈希表）  \nthreadlocal底层哈希表的key是什么  \n  \n数据库  \n两种引擎区别  \n事务的原理  \n数据库的四大特性  \n如何保证隔离性  \n隔离级别分别有哪些  \nMVCC有什么用  \n什么是死锁。如何解决  \nsql数据库如何解决死锁  \nsql锁  \n  \nSpring基础  \nspringboot运行原理  \nbean如何加载，循环依赖？  \naop底层  \n了解什么设计模式  \n代理模式在spring哪里使用过  \n单例模式在spring哪里使用过  \n包装者模式在spring哪里使用过  \n接口类代理和非接口类代理的区别  \n  \n中间件  \nredis基本类型  \nRedis缓存穿透，击穿，雪崩及解决方法，bitmap  \n  \n项目相关  \n  \n常见限流算法  \n  \n答案概答：  \n  \n操作系统：  \n\n线程和进程的主要区别体现在以下几个方面：\n\n  \n\n基本单位：进程是系统进行资源分配和调用的独立单位，它拥有独立的地址空间和系统资源。而线程是进程内的一个执行单元，它是CPU调度和分派的基本单位，多个线程共享父进程的地址空间。\n\n数量与关系：一个进程至少包含一个线程，也可以包含多个线程。线程之间共享进程的资源，这使得线程间的通信更为方便和快捷。而进程之间则是相对独立的，需要通过显式机制如管道、消息队列等进行通信。\n\n执行方式：由于线程共享进程资源，线程之间的切换开销相对较小，因此多线程并发执行时效率更高。而进程间的切换则涉及更多资源分配和回收的操作，开销较大。\n\n  \n\n除了进程和线程，协程是另一种轻量级的执行单元。协程不是进程或线程，其执行过程更类似于子例程或不带返回值的函数调用。协程的切换开销比线程更小，适用于高并发场景。\n\n  \n\n当CPU满载时，可以通过系统监控工具如top、htop等查看CPU使用情况。若CPU使用率过高，可能需要优化程序算法、减少不必要的计算或增加CPU资源。\n\n  \n\n在Linux下，如果尝试使用rm命令删除正在写入的文件，可能会导致数据丢失或损坏。因为rm命令会立即删除文件系统的引用，而正在写入的文件可能还有未写入磁盘的缓存数据。在不使用kill命令的情况下，可以尝试先停止写入进程（如通过发送信号或优雅地关闭程序），然后再删除文件。\n\n  \n\n磁盘空间使用情况可以通过df -h命令查看。如果磁盘空间已满，需要及时清理不必要的文件或扩展磁盘容量。\n\n  \n\n进程状态可以通过ps、top等命令查看。其中，僵尸线程是指子进程已经结束但父进程没有回收其资源，这可能导致资源浪费。而孤儿线程则是指父进程结束但子进程还在运行，这些子进程将被init进程（进程号为1）接管。\n\n  \n\n在清空进程时，通常系统进程和服务进程（如init、sshd等）会存活下来，因为它们负责维护系统的基本功能和安全性。\n\n  \n\n计算机网络：\n\n  \n\nTCP三次握手和四次挥手的设计是基于网络通信的可靠性和安全性考虑的，不能简化为两次握手。\n\n  \n\nTCP三次握手的主要目的是确认双方的发送和接收能力是否正常，以及初始化序列号，以保证后续数据传输的可靠性。在三次握手过程中，第一次握手由客户端发起SYN报文，第二次握手由服务端回应SYN+ACK报文，第三次握手由客户端回应ACK报文。这样的设计确保了双方都能发送和接收数据，并且初始化了序列号，为后续的数据传输做好了准备。\n\n  \n\n而TCP四次挥手的主要目的是在数据传输结束后，双方能够安全、有序地释放连接资源。在四次挥手过程中，第一次挥手由客户端发起FIN报文，第二次挥手由服务端回应ACK报文，第三次握手由服务端发起FIN报文，第四次握手由客户端回应ACK报文。这样的设计确保了数据传输的完整性和连接释放的安全性。\n\n  \n\n如果将TCP的握手和挥手过程简化为两次握手，可能会面临以下问题：\n\n  \n\n无法确保双方的发送和接收能力都正常，可能导致数据传输失败或丢失。\n\n无法初始化序列号，使得后续的数据传输无法按序进行，导致数据混乱。\n\n无法安全、有序地释放连接资源，可能导致资源泄露或连接状态不一致。\n\n  \n\n关于TCP包的粘连问题，一种常见的解决方案是采用定长发送的方式。也就是说，在发送数据时，将数据分包为固定长度的数据包进行发送。接收方在接收数据时，也按照固定的长度进行接收。这样，发送和接收就能一一对应，从而解决TCP包的粘连问题。但这种方法可能会引入一些额外的开销，比如在数据包长度不足固定长度时需要进行填充。\n\n  \n\nUDP和TCP的主要区别体现在以下几个方面：\n\n  \n\n连接性：UDP是无连接的协议，每个数据包都是独立的，发送端和接收端之间没有建立持久的连接。而TCP在数据传输前会建立一个可靠的连接，数据传输完成后再断开连接。\n\n可靠性：TCP提供可靠的数据传输，通过序号、确认和重传机制，确保数据按顺序、完整地传输到目的地。而UDP不提供可靠性保证，数据包可能会丢失或乱序。\n\n流量控制和拥塞控制：TCP支持流量控制和拥塞控制，以防止网络拥塞和数据丢失。而UDP不提供这些功能。\n\n  \n\n要使UDP变得安全，可以考虑以下几种方法：\n\n  \n\n实现多路径传输：通过利用多个网络路径同时进行文件传输，分散数据流量，避免单一路径的拥堵问题，提高UDP协议的传输速度和稳定性。\n\n应用数据重传机制：当接收端收到不完整的数据时，可以请求发送端重新发送丢失的数据段，保证数据的完整性和可用性。\n\n加入安全认证机制：通过使用加密算法和数字签名等技术，保证数据信息的机密性和完整性，防止黑客攻击和数据泄露。\n\n  \n\njava基础\n\n  \n\n1\\. HashMap的底层实现\n\n  \n\nHashMap的底层实现主要依赖于数组和链表（在Java\n8及以后版本中，当链表长度超过一定阈值后会转为红黑树），以及一个计算哈希值的函数。每个HashMap对象内部都有一个Node数组（Node<K,V>[]\ntable），数组的每个元素是一个链表。当向HashMap中添加元素时，首先根据key的哈希值计算出其在数组中的索引位置，然后将该元素添加到对应索引位置的链表中。\n\n  \n\n2\\. HashMap.get()之后会发生什么\n\n  \n\n当调用HashMap的get()方法时，首先会根据key的哈希值计算出在数组中的索引位置，然后遍历该索引位置处的链表或红黑树，查找与给定key相等的元素。如果找到了，就返回对应的value；否则返回null。\n\n  \n\n3\\. 什么时候链表转红黑树\n\n  \n\n在Java\n8及以后的版本中，当HashMap中的某个桶（bucket）的链表长度达到一定的阈值（TREEIFY_THRESHOLD，默认为8）时，链表会转换为红黑树。这样做的目的是为了优化性能，因为在链表较长时，查找元素的时间复杂度是O(n)，而红黑树的查找时间复杂度为O(log\nn)。\n\n  \n\n4\\. 什么时候红黑树降级\n\n  \n\n当HashMap中的某个桶的红黑树节点数少于一定的阈值（UNTREEIFY_THRESHOLD，默认为6）时，红黑树会退化为链表。此外，在HashMap进行resize（扩容）时，即使桶中的节点数大于UNTREEIFY_THRESHOLD，也会将红黑树退化为链表，然后再重新计算索引位置并插入。\n\n  \n\n5\\. JMM（Java内存模型）\n\n  \n\nJava内存模型（Java Memory Model,\nJMM）定义了Java虚拟机(JVM)中多线程程序并发访问共享变量时的内存可见性、原子性和有序性问题。JMM通过Happens-\nBefore规则来定义操作的可见性，确保多线程环境下的数据一致性。\n\n  \n\n6\\. JVM区域及作用\n\n  \n\nJVM（Java虚拟机）的内存区域主要包括以下几个部分：\n\n  \n\n方法区：存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n\n堆：所有线程共享的一块内存区域，用于存放对象实例。根据对象的生命周期不同，堆内存可以细分为新生代和老年代。新生代又可以分为Eden区和两个Survivor区（S0和S1）。\n\n栈：每个线程都有一个私有的栈，用于存储局部变量和方法的执行过程。栈中的每个元素称为栈帧，每个方法执行时都会创建一个新的栈帧。\n\n程序计数器：一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。\n\n本地方法栈：与Java栈类似，但它是为Native方法服务的。\n\n7\\. 老年代常用垃圾处理算法\n\n  \n\n老年代中常用的垃圾处理算法主要有标记-清除和标记-整理两种。\n\n  \n\n标记-清除：首先标记出所有需要回收的对象，然后统一回收所有被标记的对象。这种方法效率较高，但会产生内存碎片。\n\n标记-整理：首先标记出所有需要回收的对象，然后让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。这种方法不会产生内存碎片，但效率相对较低。\n\n  \n\nJVM的垃圾回收算法并不局限于这两种，还有复制算法、分代收集算法等，它们会根据不同的使用场景进行优化和选择。\n\n  \n\n多线程：\n\n  \n\nThreadLocal 的底层实现并不直接是一个哈希表（HashTable）。ThreadLocal 的实现涉及到了每个线程内部的\nThreadLocalMap。这个 ThreadLocalMap 是一个定制化的、用于存储线程局部变量的数据结构。每个 Thread 对象都持有一个\nThreadLocalMap 的引用，用于存储该线程特有的 ThreadLocal 变量。\n\n  \n\nThreadLocalMap 的内部实现，它确实使用了哈希表的概念，但并不是标准的 java.util.HashTable 或\njava.util.HashMap。它是专门为 ThreadLocal 设计的，具有一些特定的优化和特性。\n\n  \n\n在 ThreadLocalMap 中，key 是 ThreadLocal 的弱引用（WeakReference），而 value\n是与之关联的线程局部变量值。弱引用的使用是为了允许 ThreadLocal 对象在不再被强引用时能够被垃圾回收，即使它的值（即 ThreadLocalMap\n中的 entry）仍然存在。这是为了避免内存泄漏，因为线程可能会长时间存活，而 ThreadLocal 可能只在某个特定的代码块或任务中使用。\n\n  \n\nThreadLocal 底层并不是直接一个哈希表。\n\nThreadLocalMap 内部使用了类似哈希表的结构来存储键值对。\n\n在这个“哈希表”中，key 是 ThreadLocal 的弱引用。\n\n  \n\n虽然 ThreadLocalMap 的实现使用了哈希表的概念，但它并不是 java.util 包下提供的标准哈希表实现。它是专门为 ThreadLocal\n的需求而定制的。\n\n  \n\n数据库\n\n  \n\n以下是关于两种引擎区别、事务的原理、数据库的四大特性、隔离性的保证、隔离级别、MVCC的作用、死锁的定义与解决，以及SQL数据库中的锁和死锁解决方案的详细解释：\n\n  \n\n一、两种引擎区别\n\n  \n\n通常这两种引擎指的是InnoDB和MyISAM，它们在许多方面存在差异：\n\n  \n\n事务处理：InnoDB支持事务处理，而MyISAM不支持。事务是一种高级的处理方式，它确保了一组操作的原子性，即要么全部执行，要么全部不执行。\n\n外键支持：InnoDB支持外键，而MyISAM不支持。\n\n全文索引：MyISAM支持FULLTEXT类型的索引，而InnoDB不支持。\n\n行数统计：InnoDB不保存表的行数，需要扫描整个表来计算行数，而MyISAM可以简单地读出保存好的行数。\n\n自增长字段：在InnoDB中，自增长字段必须包含只有该字段的索引，而在MyISAM中，它可以和其他字段一起建立联合索引。\n\n  \n\n二、事务的原理\n\n  \n\n事务是并发控制的单位，是用户定义的一个操作序列。这些操作要么全部执行，要么全部不执行，是一个不可分割的工作单位。事务通常是以BEGIN\nTRANSACTION开始，以COMMIT或ROLLBACK结束。COMMIT表示提交，即将事务中所有对数据库的更新写回到磁盘上的物理数据库中去，事务正常结束。ROLLBACK表示回滚，即在事务运行的过程中发生了某种故障，系统将事务中对数据库的所有已完成的操作全部撤消，滚回到事务开始的状态。\n\n  \n\n三、数据库的四大特性\n\n  \n\n数据库的四大特性是ACID，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）。\n\n  \n\n原子性：整个事务是不可分割的，要么全部执行，要么全部不执行。\n\n一致性：事务的执行结果要与业务的逻辑保持一致。\n\n隔离性：多个事务之间隔离开来，互不影响。\n\n持久性：一旦事务执行完毕，执行后的结果会永久的保存下来。\n\n  \n\n四、如何保证隔离性\n\n  \n\n数据库的隔离性主要通过锁机制和多版本并发控制（MVCC）技术来实现。锁机制可以防止多个事务同时修改同一数据，而MVCC则通过保存数据的多个版本来实现无锁或低锁的并发访问。\n\n  \n\n五、隔离级别分别有哪些\n\n  \n\nInnoDB支持的隔离级别有四种，从低到高分别为：读未提交、读已提交、可重复读和串行化。\n\n  \n\n六、MVCC有什么用\n\n  \n\nMVCC（Multiple Version Concurrency Control）的主要作用是解决读-写和写-\n写冲突，使得大多数读操作不用加锁，从而提高了并发性能。通过保存数据的多个版本来实现并发访问，避免了读操作之间的锁竞争。\n\n  \n\n七、什么是死锁\n\n  \n\n死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。\n\n  \n\n八、如何解决死锁\n\n  \n\n解决死锁的方法主要有以下几种：\n\n  \n\n预防死锁：通过一次性分配所有资源、按序请求资源等方式来预防死锁的发生。\n\n避免死锁：通过银行家算法等来判断并避免系统进入不安全状态，从而避免死锁。\n\n检测与解除死锁：定期检测系统中是否发生死锁，一旦发生死锁，则采取解除死锁的措施。解除死锁通常涉及撤销一些进程，以便回收它们的资源，从而使得其他进程能够继续执行。\n\n  \n\n九、sql数据库如何解决死锁\n\n  \n\n在SQL数据库中，解决死锁的方法通常包括：\n\n  \n\n设置合理的锁超时时间：当尝试获取锁超过设定的时间后，放弃锁请求，避免长时间等待导致死锁。\n\n优化事务设计：尽量减小事务的大小和持续时间，减少锁的持有时间，从而降低死锁的风险。\n\n避免在事务中执行用户输入：用户输入可能导致不可预测的行为，增加死锁的风险。\n\n使用低隔离级别：如果可能，使用较低的隔离级别，以减少锁的需求和冲突。\n\n定期监控和诊断：使用数据库提供的工具和日志来定期监控和诊断死锁情况，及时发现并解决潜在问题。\n\n  \n\n十、sql锁\n\n  \n\nSQL中的锁主要用于控制并发访问，保证数据的完整性和一致性。SQL锁主要分为共享锁和排他锁。共享锁允许多个事务同时读取同一资源，而排他锁则阻止其他事务对同一资源进行读取或修改。此外，根据锁定的粒度，还可以分为行级锁、页级锁和表级锁等。不同的数据库管理系统和存储引擎可能会有不同的锁实现和策略。\n\n  \n\nspring相关\n\n  \n\nSpring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架，它主要用于简化企业级应用的开发。\n\nSpring的核心功能包括IoC容器和AOP，它们分别用于管理对象之间的依赖关系和实现横切关注点（如日志、事务等）。\n\nSpring支持声明式事务管理，通过注解或XML配置即可轻松实现事务的控制。\n\nSpring还提供了丰富的数据访问支持，包括JDBC、Hibernate、MyBatis等集成。\n\n  \n\nSpring Boot运行原理：\n\nSpring Boot的设计目的是简化Spring应用的初始搭建以及开发过程。它提供了大量的默认配置，使得开发者可以快速启动和运行Spring应用。\n\n  \n\nSpring\nBoot的运行原理主要基于自动配置和起步依赖。自动配置会根据项目的类路径和依赖关系自动为应用提供默认的设置和功能；而起步依赖则是一组预定义的依赖关系，用于简化项目中所需库和框架的导入过程。\n\n  \n\nBean的加载与循环依赖：\n\n在Spring容器中，Bean的加载过程包括解析配置文件或注解、创建Bean实例、注入依赖等步骤。\n\n  \n\n循环依赖是指两个或多个Bean相互依赖对方，形成一个闭环。Spring通过三级缓存机制来解决循环依赖问题。一级缓存存储成品对象，二级缓存存储半成品对象（已实例化但未完全初始化），三级缓存存储ObjectFactory用于解决代理对象的循环依赖。\n\n  \n\nAOP底层实现：\n\nSpring\nAOP的底层实现主要基于动态代理技术。对于接口代理，Spring使用JDK动态代理；对于非接口类代理，Spring使用CGLIB库来实现。动态代理允许在运行时创建代理对象，并将横切关注点织入到目标对象的方法执行过程中。\n\n设计模式在Spring中的应用：\n\n  \n\n单例模式：在Spring中，默认情况下Bean是单例的，即在整个Spring IoC容器中只创建一个Bean实例。\n\n  \n\n工厂模式：Spring使用BeanFactory和ApplicationContext作为工厂来创建和管理Bean对象。\n\n  \n\n代理模式：在Spring AOP中，代理模式被用于实现面向切面的编程。Spring通过动态代理为目标对象创建代理对象，并在代理对象上织入横切关注点。\n\n  \n\n包装者模式（装饰器模式）：在Spring中配置DataSource时，可能会使用到装饰器模式。当需要连接多个数据库时，可以根据需求切换不同的数据源。\n\n  \n\n代理模式在Spring中的使用：\n\n在Spring\nAOP中，代理模式被广泛应用。Spring通过创建代理对象来增强目标对象的功能，实现横切关注点的织入。无论是JDK动态代理还是CGLIB代理，都是代理模式在Spring中的具体实现。\n\n  \n\n接口类代理和非接口类代理的区别：\n\n接口类代理通常指的是JDK动态代理，它要求被代理的对象必须实现一个或多个接口。JDK动态代理通过反射机制在运行时创建接口的代理实例。\n\n  \n\n非接口类代理则是指CGLIB代理，它不需要被代理的对象实现接口。CGLIB通过继承被代理的类来创建子类作为代理对象，因此可以代理没有实现接口的类。\n\n  \n\nredis相关\n\n  \n\nRedis是一个开源的使用ANSI C语言编写的、支持网络、可基于内存亦可持久化的日志型、Key-\nValue数据库，并提供多种语言的API。以下是关于Redis基本类型、缓存穿透、击穿、雪崩及解决方法和bitmap的详细解释：\n\n  \n\nRedis基本类型：\n\n  \n\nRedis支持五种基本数据类型，分别是：\n\n  \n\nString：字符串类型，是Redis最基本的数据类型，可以存储任何类型的数据，包括字符串、数字和二进制数据等。\n\n  \n\nList：列表类型，是一种有序的字符串列表，可以在头部或尾部添加元素。\n\n  \n\nSet：集合类型，是一组无序、唯一的字符串集合，可以对集合进行并、交、差等集合运算。\n\n  \n\nHash：哈希类型，类似于Map的一种结构，key-value存储。\n\n  \n\nSorted\nSet：有序集合类型，与Set一样也是string类型元素的集合，且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。Redis正是通过分数来为集合中的元素进行从小到大的排序。\n\n  \n\nRedis缓存穿透、击穿、雪崩及解决方法：\n\n  \n\n缓存穿透：\n\n描述：客户端请求的数据在缓存和数据库中都不存在，导致缓存永远不会生效，请求都被打到数据库。\n\n解决方法：\n\n主动方案：增加id复杂度，避免被猜测到id规律；做好数据基础格式校验；加强用户权限校验；做好热点参数的限流。\n\n被动方案：缓存空对象，并为其设置一个TTL。但这种方法可能会有额外内存消耗，并可能造成短期的不一致。\n\n  \n\n缓存击穿：\n\n描述：缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。\n\n解决方法：设置热点数据永不过期；定时更新；使用互斥锁或布隆过滤器等方法。\n\n  \n\n缓存雪崩：\n\n描述：缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。\n\n解决方法：保持缓存层的高可用；缓存不过期；优化缓存过期时间；使用互斥锁重建缓存等。\n\n  \n\nRedis的Bitmap：\n\n  \n\nBitmap是一个通过最小的单位bit来进行0或1的设置，用来记录每一个元素对应的值或者状态。Redis的bitmap不是一种新的数据结构，而是基于String类型实现的位操作功能。Bitmap的常见应用场景包括日活统计、用户签到、统计独立用户数（UV）等。\n\n  \n\n限流算法：\n\n  \n\n常见的限流算法主要有以下几种：\n\n  \n\n计数器算法：\n\n  \n\n计数器算法是限流算法中最简单也最容易实现的一种。\n\n它通过对每个请求进行计数，当计数器的值超过设定的阈值时，触发限流策略。\n\n但这种算法存在临界问题，特别是在周期切换时，如果大量请求集中在周期末尾涌入，可能会导致限流失效。\n\n  \n\n滑动窗口算法：\n\n  \n\n滑动窗口算法是对计数器算法的一种改进，通过动态调整时间窗口来解决临界问题。\n\n它将时间划分为多个固定大小的窗口，并分别对每个窗口内的请求进行计数。\n\n当某个窗口内的请求数超过阈值时，触发限流策略。\n\n  \n\n漏桶算法：\n\n  \n\n漏桶算法基于时间的概念，将数据流想象成一个有固定容量的桶。\n\n当数据流进入桶时，如果桶未满，则数据被保留在桶中；如果桶已满，则新的数据会被丢弃或延迟处理。\n\n数据以一定的速率从桶中流出，从而控制整体的速率。\n\n  \n\n令牌桶算法：\n\n  \n\n令牌桶算法是另一种常见的限流算法，它通过模拟一个固定容量的桶和一定数量的令牌来实现。\n\n每个令牌代表一个请求的处理权限。请求到达时，如果桶中有令牌可用，则获取令牌并处理请求；否则，请求被拒绝或延迟处理。\n\n令牌以一定的速率添加到桶中，当桶满时，新的令牌会被丢弃。\n\n  \n\n令牌漏斗算法：\n\n  \n\n令牌漏斗算法结合了漏桶和令牌桶的概念。\n\n它将数据流想象成一个漏斗，每个时间间隔内漏斗会积累一定数量的令牌。\n\n请求到达时，需要获取令牌才能被处理。如果令牌不足，请求被拒绝或延迟。\n\n  \n\n分布式令牌桶算法：\n\n  \n\n在分布式环境中，多个服务器可能需要共享限流策略。\n\n分布式令牌桶算法允许多个服务器共同维护一个令牌桶，通过共享令牌来控制整个系统的流量。\n\n  \n\n[原文传送门](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fshare%2Fjump%2F566343146461733577)  \n\n  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601702312158998528?sourceSSR=users",
        "title": "B站3月24日校招笔试SQL题",
        "content": "\n    SELECT\n    CASE\n    \t\t\n    \tWHEN\n    \t\tt1.score >= 85 THEN\n    \t\t\t'非常满意' \n    \t\t\tWHEN t1.score >= 70 THEN\n    \t\t\t'满意' \n    \t\t\tWHEN t1.score >= 60 THEN\n    \t\t\t'接受' ELSE '不满意' \n    \t\tEND AS 'like',\n    \t\tcount( t1.user_id ) AS 'total',\n    \t\tROUND( SUM( t2.under_time - t2.log_time )/ COUNT( t1.user_id )/ 100, 3 ) AS 'time' \n    \tFROM\n    \t\tuser_action_tb AS t1\n    \t\tJOIN login_tb AS t2 ON t1.user_id = t2.user_id \n    \tGROUP BY\n    \t\t`like` \n    ORDER BY\n    \t`total` DESC;\n    \n\n题目不太记得了，大概思路是这样，当时死活不记得 SQL 语法 CASE 用法，导致做题 0 分， [牛泪]。\n\n![](https://uploadfiles.nowcoder.com/images/20240325/150893884_1711328938172/AD1A1B7183951DC89F508A6B6C422144)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601701564067160064?sourceSSR=users",
        "title": "小米3月23笔试算法题\"排队选人\"答案",
        "content": "\n    package main\n    \n    import \"fmt\"\n    \n    func main() {\n    \tvar n, k, a, b int\n    \tfmt.Scan(&n, &k, &a, &b)\n    \tai := make([]int, n)\n    \tbi := make([]int, n)\n    \tfor i := 0; i < n; i++ {\n    \t\tfmt.Scan(&ai[i])\n    \t}\n    \tfor i := 0; i < n; i++ {\n    \t\tfmt.Scan(&bi[i])\n    \t}\n    \tdp := make([]int, n)\n    \tvar count int\n    \tfor i := 0; i < k; i++ {\n    \t\tif ai[i] >= a && bi[i] >= b {\n    \t\t\tcount++\n    \t\t}\n    \t}\n    \tif count == k {\n    \t\tdp[k-1] = 1\n    \t}\n    \tfor i := k; i < n; i++ {\n    \t\tcount = 0\n    \t\tfor j := i - k + 1; j <= i; j++ {\n    \t\t\tif ai[j] >= a && bi[j] >= b {\n    \t\t\t\tcount++\n    \t\t\t}\n    \t\t}\n    \t\tif count == k {\n    \t\t\tdp[i] += dp[i-1] + 1\n    \t\t} else {\n    \t\t\tdp[i] += dp[i-1]\n    \t\t}\n    \t}\n    \tfmt.Println(dp[n-1])\n    }\n    \n    //10 2 2 4\n    //2 2 9 1 8 1 6 1 7 7\n    //4 8 5 1 9 4 1 3 9 4\n    \n    \n\ngolang 版本，使用动态规划做的，当时看错题，哎。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601548478774304768?sourceSSR=users",
        "title": "上海人工智能实验室大模型算法实习面经",
        "content": "问的很细很深，狠狠拷打了80分钟，这个组做LLM pretrain的，我主要会rl，nlp缺乏点，一面凉\n\n  * 自我介绍\n  * 项目\n  * 微调模型训练数据来源？\n  * LORA的理解\n  * Ptuning和全量微调对比\n  * RLHF全流程\n  * 写出RLHF的优化目标公式\n  * 目标公式中衰减因子的作用，取大取小有什么影响？\n  * RLHF的目标公式可以加入什么其他的项？\n  * 熵正则项是如何加入的？\n  * KL散度理解？\n  * RLHF中PPO算比率相对什么来算？\n  * 其中对数概率的作用？\n  * 马尔科夫决策过程的定义，有哪些参数变量需要考虑？\n  * Reward model 训练的loss是什么？\n  * 模型为什么会胡言乱语？根源在哪？可以考虑如何解决？\n  * 模型微调会性能下降为什么还需要这一步？\n  * 文本数据处理到进入模型的整个过程？\n  * 分词和向量化的过程？\n  * 模型微调过程中的调参？\n  * 1.8b和7b使用中的区别？选择？\n  * Recall，Precision的计算\n  * 训练数据量级？\n  * 如何把控数据质量？\n  * 场景题，在处理数据的时候面对有违规的语料（如黄暴内容）如何平衡Recall，Precision指标\n  * 对大模型整个发展趋势如何理解？\n  * 你认为LLM的数据质量的关键在于什么？\n  * 算法题一，easy 考察正则表达式\n  * 算法题二，dp ，medium [*********](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fleetcode.cn%2Fproblems%2Fedit-distance%2F)\n  * 算法题三，栈，easy [**********](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fleetcode.cn%2Fproblems%2Fvalid-parentheses%2F)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601540996224049152?sourceSSR=users",
        "title": "稿定科技产品经理实习生面经",
        "content": "1.自我介绍  \n2.你有学习过产品经理的相关知识吗  \n3.你是如何体现从0到1学习产品的？  \n4.假如现在顾客想吃面你要如何做？从哪几个纬度考虑？  \n公司利益 顾客需求 商家利益\n要知道顾客她是真的想吃面还是只是肚子饿了，如果给他一个龙虾吃吗？他肯定会吃，但是我要考虑我商家利益能否顾住；如果在北美其他地区，没有面，那其他饭他吃吗？要考虑顾客本质需求是什么  \n5你觉得产品最重要的是哪个方面？需求文档、原型、、、  \n6反问  \n公司架构是什么？如果通过这次面试，有什么给我的建议吗？  \n面试官后面回答了我上面的问题，以及点出了我在面试过程中存在的问题，还建议我不要在媒体软件上去临时抱佛脚，那样太局限性了，建议我可以看一些关于产品经理的书籍，系统的学习一下，确认自己要去哪个方面发展，再有目标性的去面试去学习。  \n跟面试官面完之后，真的很想去他手底下工作啊啊啊啊😿😿😿😿感觉会学到很多东西😿😿😿\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601539136390000640?sourceSSR=users",
        "title": "蔚来嵌入式岗三面面经",
        "content": "我是24应届毕业生，去面试了蔚来的嵌入式岗，总体面试感觉不错，说实话面试难度挺大的，所以没通过。面试一共是有三面：\n\n一面：常规八股文，linux、kernel问的比较多些，还有一道算法题，建议提前复习好相关专业知识\n\n二面：偏向于场景，给了两个mcu的场景进行提问，最后是一道算法题。\n\n三面：闲聊，和HR、主管聊聊对公司的看法和发展，个人发展之类的，这个的话我觉得需要提前做好自身规划，把自己想法和计划流畅说出来，不要磕磕巴巴。\n\n三面难度挺大的，没通过也是在意料之中，之后继续努力吧！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601547129458307072?sourceSSR=users",
        "title": "美团基础研发 大模型算法工程师实习面经",
        "content": "## 一面\n\n  * 自我介绍\n  * 项目+论文\n  * 为啥项目中使用Ptuning？\n  * 说一下Ptuning的原理\n  * 如何关注训练过程中的指标？ 训练步数如何确定？\n  * RLHF的整个流程详细\n  * llama factory代码看过吗？\n  * DPO了解吗？\n  * 算法题 二分，medium， 旋转数组的最小数字\n\n# 二面\n\n二面面试官问了很多开放性问题，就是丢给你一个一个问题/实际的步骤，问你怎么解决，怎么考虑，而不是问某某东西的原理\n\n  * 自我介绍\n  * 项目\n  * 训练大模型的数据如何弄的？\n  * RLHF的三个流程中你觉得哪个应该是最重要的？为什么？\n  * 为啥RLHF中要用PPO？和其他RL算法的区别？\n  * 为什么需要Rewar model？\n  * Reward model 如何训练？Reward model 你觉得训练到什么程度可以？\n  * Reward model不准确怎么办？\n  * 如何提升RLHF的效率？你认为关键在哪里？\n  * DPO的原理？\n  * Rewar model和训练的LLM模型用同一个基座模型可能有什么作用？\n  * Reward有多个目标可以怎么做？\n  * 算法题 爬楼梯 面试官会引导逐步改善最开始写的解优化算法到最优空间复杂度\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601535932356931584?sourceSSR=users",
        "title": "腾讯企业IT部门前端暑期实习 一面",
        "content": "投递的是前端开发，分配到了全栈开发方向，面试时间：3月15日，面试时长1h，面试官没有要求打开摄像头。\n\n  1. 说一下节流和防抖，你项目里哪些地方用到了节流和防抖\n  2. 说一下promise，如果有100个请求但一次只能处理10个怎么处理，如果10个请求第一个就错了怎么办（Promise.allSettled()）\n  3. axios有哪些拦截器机制，举出具体的例子（项目里）\n  4. react父组件下面有2个子组件，其中一个动态更新，另一个不动态更新，应该怎么实现\n  5. 前端毫秒级倒计时怎么实现\n  6. 浏览器重绘时间是多少，怎么基于浏览器渲染频率做倒计时( requestAnimationFrame（RAF）)\n  7. 数组forEach在循环过程中怎么打断。\n  8. settimeout和setInterval这些方法在浏览器缩小或切换table时会有什么表现\n  9. 网页上有一个抢红包，有倒计时，切走了再切回来怎么办\n  10. 浏览器里jsworker是什么\n  11. 移动端刷新率比如60fps，单位什么含义\n  12. http1.1和http2有什么区别\n  13. 从资源请求的角度来说，提升的性能具体表现是什么\n  14. cdn为什么会更快\n  15. 在http1中，浏览器对于多请求的限制\n  16. React18多了哪些新特性\n  17. 平常从哪里学习前端知识\n\n代码题：移动零 限定用JavaScript写。\n\n当天流程终止。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601535290469048320?sourceSSR=users",
        "title": "日常实习面经-第二弹",
        "content": "# 前言\n\n[第一弹](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fdiscuss%2F547273912275439616%3FsourceSSR%3Dusers)\n\n在特斯拉实习三个月后，因为许多原因离职了；曾经有考虑过学习一两个月再找暑期实习，不过背八股和刷题实在太无聊且对自己提升寥寥无几，于是开启寻找第二段日产实习\n\n# 背景\n\n除了第一弹提到的背景外，多了一段特斯拉三个月实习，岗位是无线系统的软开，偏测试工具链开发。\n\n## Momenta\n\n2024/03/15 系统研发C++开发（base广州） -> 二面后oc，但是base调到上海了\n\n### 一面\n\n  * 手撕：C++或C选一个，选了C++；题目：使用C++实现一个环形队列，实现入队出队等功能，已经给出了模板，使用STL的deque，并且保证线程安全；一开始看到题目有点懵逼，于是直接调用STL库的现成api，再用个lock_guard；面试官说可以了，就是考察个基础（需要原题的可以私聊）\n  * 智能指针\n  * 多态和继承底层原理\n  * C++里面保证线程安全的方法\n  * 吐槽：面试官耳机质量极差，反问工作职责的时候一句话没听清，大概听懂是做多媒体数据的传输和处理，比如传感器，摄像头，智能座舱等；面试体验很差，背诵八股的时候经常扭头跟别人说话，背景噪音极大；但是好在流程走得快，当天给二面链接\n\n### 二面\n\n  * 面试官迟到了5min，自我介绍后TL（Team Leader）对特斯拉实习期间做的两个项目进行拷打\n  * 反问：岗位职责：60-70%的实车测试，抓包，单元测试等等正向工作，剩下的才是开发，说能学到不少东西，但是也提到momenta的工作强度业界有名，问我在外企特斯拉实习过来了能不能抗住，我说我们组强度也不低hhh（不代表tesla整体情况）\n  * 面试完后TL说除了我之外还有一两个候选人也很合适，他要思考下，说只有一个实习hc，我大概率没有办法入职广州，问我愿不愿意去上海；感叹连日常实习竞争都这么激烈0.0，面试体验极佳，不愧是TL，温文儒雅，思路清晰\n  * 面完当天晚上打电话，oc了但是base改到上海，我问能不能等几天再做决定，hr说他们会立马开始面别人，所以到时候可能就没有hc了，遂拒绝\n\n## 大疆车载\n\n2024/03/20 感知软件C++开发 -> 因为momenta当时在push，所以向hr催了流程，上午一面完下午oc，立马接了\n\n### 一面\n\n  * 第一个面试官先发问，问了下特斯拉实习的一些情况\n  * 四种智能指针（面试真的很喜欢考这个）\n  * 多态，虚基类的作用和底层原理\n  * 构造和析构函数作用，是否能声明为virtual\n  * 说几个C++ OOB中用到的关键字和作用；说了override，virtual，delete，const，default\n  * 问了下对linux系统和开发熟悉不\n  * 对测试工作有什么看法；因为在特斯拉接触过不少测试，并且对大疆车载实习职责比较了解，回答的时候没有贬低测试，避免踩雷点\n  * 第二个面试官发问，问了下x86系统中内存对齐的字节数，额外提了下内存对齐的相关宏设置\n  * weak_ptr的作用：提了循环引用和保证多线程安全\n  * 紧接着问了个很工程的问题：在我实习过程中提到了控制仪器，上位机想要传个struct到下位机，但是上位机会对struct做内存对齐，下位机很可能无法处理，如何解决？答：实习过程中没遇到过这样问题，因为都是下位机是提供仪器驱动的，于是猜测可以调整编译器参数，或者优化级别来取消内存对齐，就是O1O2O3优化级别设置；\n  * 紧跟着又问O1O2O3几种优化级别有什么区别，CSAPP里学过，不过早就忘了，随便扯了点\n  * 反问工作岗位职责：一开始正向测试为主，代码质量达标后可以有开发任务\n\n## 文远知行\n\n2024/03/17晚 2025届研发实习 -> 机试后安排了21号一面，一面题没撕出来最优解法，以为挂了但还是约了二面，但是已经接了大疆了\n\n### 机试\n\n  * showmebug平台，一开始切题的时候平台就报错了，卡了15min后才好，无语。。\n  * 三道题，第一道lc322，第二道lc223拓展版，矩形个数大于2，第三题前缀字符串，用例都给错了\n\n### 一面\n\n  * 拷打了深度学习的水会议论文\n  * lc542手撕：写了个暴力bfs，问了复杂度，接下来问能否优化；面试官引导了怎么写O(mn)解法，但是面试官耳机太模糊了，啥都没听到，于是在尴尬中结束了；时长一小时\n\n# 总结\n\n  * 目前日常实习里面招人最多的就是车载相关的企业了，比如主机厂，特斯拉，蔚来，极氪，小米等等；自动驾驶T1T2，dji车载，文远，Momenta，地平线，禾赛（很多日常实习岗位没hc了）等等，如果想入局这个行业，好好抓住这些机会\n\n  * 从我个人经验来看，对于日常实习而言，进入难度排序大概是这样：\n\nT0：文远和图森这种要求比较高的自驾T1，对coding要求比较高，比如文远的jd提到acm，这种dddd\n\nT1：特斯拉和国内新势力主机厂，Momenta等等；特斯拉流程比较复杂，学历卡的也挺严，当时我面我的接班人，都是四轮面试（算上hr面），我了解过其他部门的intern的学历，本科都是985或国外名校，普遍学历都很高，有留学经历并且英语好很加分；魔子面试都要两轮，可能两轮技术，也可能像我一样一轮技术一轮主管，一般都要手撕，流程走的特别快，如果一两天没通知一般都是挂了，他们量产挺多，所以希望实习生都能立即到岗\n\nT2：大疆车载和一些主机厂；大疆车载的实习生面试并不难，只有一轮面试，一般C++有基础，常见mid题会写，有实习经历基本都能oc，卓驭量产车型不少，项目也挺多，所以hc还挺多的\n\n  * 对于车载相关行业的实习，比如软件开发，甚至是算法，请降低你的预期。尽管很多车载相关的实习岗位和职责是“软件开发”，但实际上还是以测试为主，颇有些挂羊头卖狗肉的意思；比如前司无线相关的实习jd写的跟招CTO似的，但是实习过后才发现嘛（dddd）；不过也可以理解，一是车这种东西对于安全性要求太高，一般不会让实习生去开发和修改核心业务代码，不然出了问题召回成本太高；二是因为车载相关企业竞争压力很大，迫于成本限制和快速交付的压力，才大量招实习生，帮着做很多正向的活儿\n\n  * 车载相关行业的技术岗普遍比较累，加班不少，即使是外企特斯拉这种；可以多上牛客和xhs，mm这种平台上面搜集意向公司的评价，在综合考虑要不要投递或接offer；迫于目前还在实习，没有找到正式工作，这里就不说多了:)\n\n# 祝各位Offer多多\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601525011140124672?sourceSSR=users",
        "title": "腾讯云智（数据库测试-武汉）面经",
        "content": "本来投的是另外岗位，简历筛选没过，可能是hr又帮忙投的。看到这个岗位我是有点懵逼的。这也没有相关经验，不会是被拿来刷kpi了吧。\n\n3.21 晚上7-8点\n\n约的晚上7-8点的面试，面试官是个声音很甜的小姐姐，刚开始我本来是开了摄像头的，后来发现对面没开，寻思有点亏，于是我也把摄像头给关了：\n\n1.自我介绍；\n\n2.离职原因；说是裁员，小姐姐表示很经验，说：”你们xx也裁员吗？“ 我寻思，你们母公司 tx 都可以裁😂，我们这还不可以吗？\n\n3. 你提到了系统的稳定性测试，你们是如何做系统测试稳定性的？\n\n4\\. 我听你们都是接口测试？没有界面测试吗？没有，为什么不进行？答：界面变的太快，维护成本太大。\n\n5.如何设计测试用例？\n\n6.你工作的过程冲，最有成就感的工作内容是什么？\n\n下面是分享的电脑屏幕在线做的题。\n\n1\\. 简单的sql 题？ t1(name,subject,socre).输出学生姓名name，和学生的总成绩total_scores\n，并用总成绩降序排名。\n\n2.找出名为mysql的进程？写完后，接着问，找出这个进程的pid?，写完了，再把这个进程杀死？以上操作都写出一条命令。\n\n3.编程题 python ：\n\n输入一个日志文件、动态更新，编写python函数，当有连续3条日志tps值小于tps均值80%的打印err信息，要求第n\n秒的tps均值为前n秒tps值求和后除以n.\n\n日志文件类似于以下内容\n\n\\---------------------------------------------------\n\n[ 1s ] thds: 10 tps: 0.00 qps: 98.65 (r/w/o: 88.79/0.00/9.87) lat (ms,95%):\n0.00 err/s: 0.00 reconn/s: 0.00\n\n[ 2s ] thds: 10 tps: 1.00 qps: 80.22 (r/w/o: 51.14/27.07/2.01) lat (ms,95%):\n1803.47 err/s: 0.00 reconn/s: 0.00\n\n[ 3s ] thds: 10 tps: 9.02 qps: 112.28 (r/w/o: 81.21/13.03/18.05) lat (ms,95%):\n2493.86 err/s: 0.00 reconn/s: 0.00\n\n[ 4s ] thds: 10 tps: 2.01 qps: 86.36 (r/w/o: 58.25/24.10/4.02) lat (ms,95%):\n2198.52 err/s: 0.00 reconn/s: 0.00\n\n反问（因为时间快到了，小姐姐好像很着急）：\n\n因为时间关系，我也就问了一个问题：数据库测试主要工作内容是什么？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601523015364472832?sourceSSR=users",
        "title": "2024-03-24 拼多多笔试 250/400",
        "content": "拼多多是真的难啊 [牛泪]\n\n  * 第一题 100%\n  * 有n，m，k，d四个数，n表示数组的大小。Alice可以选择删除d个数，Bob可以选择将m个数 *（-k）；其中Alice希望总和尽量大，Bob希望总和尽量小，假设双方都很聪明，输出最终的结果。\n  * 由于数字都是正数，最开始Alice不操作的情况下，Bob会调整最大的m个数，当Alice可以删除的时候，用滑动窗口从大往小维护即可\n  * 第二题 100%\n  * 题意有点复杂，但是就是字符串模拟\n  * 第三题 50%\n  * 有3e5个点组成的DAG图，定义一个超级点：点本身 + 能到达该点的点数 + 该点能到达的点数之和 = n\n  * 想了半天没想出来解法，最后暴力过了50%，bool vis[]定义成int vis[]时间戳的形式可以省去每次清空数组的时间\n  * 第四题 0%\n\nPS：第三题转换成无向图就是求割点，笔试的时候想起来感觉不对劲又没写了；一个大佬给了另一种解法，正反建图拓扑排序，当队列只有一个点并且被减少过入度的点都入队了，那么该点的左半边可以到达他，反过来跑的时候就可以判断右半边\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601518120636870656?sourceSSR=users",
        "title": "阿里云golang一面",
        "content": "电话面试，约60min\n\n1\\. 自我介绍\n\n2\\. 对OOP的理解\n\n3\\. OOP里多态和继承的概念\n\n4\\. 如果是语言开发者，怎么去设计和实现多态和继承的特性\n\n4.1 例如Python里一个子对象，覆盖了父对象，会发生什么操作\n\n5\\. Go里goroutine和线程的区别 -> GMP模型\n\n5.1 goroutine阻塞是会怎么做\n\n5.2 M对应的goroutine运行完了，其他M还有G，会怎么做\n\n6\\. Go的垃圾回收机制（与Python的区别）\n\n6.1 循环引用，能否回收掉\n\n7\\. Go会把新建的对象放到栈还是堆上\n\n8\\. 前端请求的数据，没有收到对应的消息，怎么排查\n\n8.1 前端收到的数据不符合预期，有时是乱码，怎么排查\n\n9\\. A、B、C形成的联合索引，BC能否使用到索引\n\n10\\. SQL查询非常慢，如何排查\n\n10.1 如果是回表，怎么优化\n\n11\\. 数据库遭受不住过高QPS，怎么办\n\n12\\. 如何保证缓存和和数据库的一致性\n\n13\\. Redis里哈希的实现\n\n13.1 其他的哈希实现方式\n\n13.2 Redis哈希的扩容过程\n\n13.3 扩容会把程序给停止吗，还是说是一个多线程的方式\n\n14\\. Redis单线程怎么支持那么高的并发\n\n15\\. 最新版本Redis的优化特性\n\n16\\. Redis分布式存储的底层通信协议\n\n16.1 这种协议能保证强一致性吗\n\n16.2 强一致性和非强一致性的区别\n\n17\\. Kafka消费者数据积压，有碰到过吗\n\n18\\. 命名空间有了解吗\n\n19\\. 算法：LC 238. 除自身以外数组的乘积\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601513325804957696?sourceSSR=users",
        "title": "茄子科技前端实习面经",
        "content": "  1. 需求沟通中有没有碰到什么问题，怎么解决的\n  2. 问项目\n  3. 用echarts有没有碰见什么问题\n  4. vue2和vue3的区别\n  5. defineproperty可以监听function和数组吗\n  6. 有碰见过双向数据绑定单向数据流的情况吗？父子传参\n  7. 父子传参有哪些\n  8. vuex的理解\n  9. 异步数据怎么在vux怎么改\n  10. vuex刷新数据会丢失，vue怎么来处理\n  11. 浏览器存储cookie、seesionstorge、localstorge\n  12. 闭包的理解\n  13. 闭包的优缺点\n  14. 自动回收机制怎么触发的\n  15. 数据类型\n  16. const基础数据（引用）类型可以改变它的值\n  17. js中的堆和栈\n  18. 暂时性死区\n  19. url输入的过程\n  20. axios和ajax的区别\n  21. promise\n  22. 为什么promise能一直用then\n  23. css权重的理解\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601509981006929920?sourceSSR=users",
        "title": "蔚来-安全开发一面/二面",
        "content": "基本不怎么会渗透测试，本科期间有过大数据隐私保护(密码)的项目，硕士期间有个华为合作的项目+一篇在投的ai安全论文\n\n一面（45min）\n\n1.介绍自己\n\n2.介绍一下实习\n\n3.场景题轰炸，主要针对实习中的场景，主要考察网络安全的基本功底\n\n> 证书链、TLS、加密解密.....（这一部分比较多）\n\n4.开发相关知识\n\n> 面向对象的特性、Linux相关、Git\n\n无手撕\n\n二面（40min）\n\n偏向于聊天，问Mysql和Redis比较多，同样问了很多密码\n\n无手撕\n\n感觉需要一些汽车知识会更好一点，车相关的部分基本都只能赔笑，已拒\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601509430093471744?sourceSSR=users",
        "title": "科大讯飞-产品运营助理实习面经",
        "content": "只有一面，共30min，很放松，面试官对每句话都会点头或者回应，最后还主动表扬了我~\n\n  \n\n1.自我介绍\n\n2.新东方实习经历中比较印象深刻或者困难的地方？\n\n3.新东方实习经历主要做什么了? 负责哪个部分？\n\n4.在新东方经历中学到的最重要的是什么？\n\n5.针对海外流失的客户有没有做过访谈？\n\n6.其他的经历中有做过问卷访谈吗？\n\n7.你怎么留住客户的？策略？\n\n7.这个项目中困难的点？\n\n8.你自己有没有参与过和用户的直接沟通？听起来你做的比较后台，模块设计之类的\n\n7.对该岗位的理解\n\n8.是否有文案策划能力和沟通协调能力？举例说明\n\n9.你认为这个岗位内都需要做什么？\n\n10.现在在哪里？能否接受两个工作地点？什么时候可以入职？\n\n10.表达了对我的沟通能力、理解能力和逻辑的认可，我反问了是否有拉新的业绩要求？因为有提到需要和客户直接接触\n\n回答：实习生无绩效要求，拉新只是配合市场部的活动，然后详细介绍了岗位内容问我是否可以接受\n\n  \n\n之后20分钟下 offer，但是衡量之下去了爱奇艺~比较喜欢爱奇艺的业务线\n\n![SRmee27ICO24uAvdBkFoapvnHhqSXGpa.jpg](https://uploadfiles.nowcoder.com/images/20240324/108864909_1711282974822/1CC47BCEFA91FFF47F9502FB05C0BCC8)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601507920286638080?sourceSSR=users",
        "title": "美团商业分析暑期实习面经｜美团人力分析",
        "content": "面经03|【美团人力分析组商业分析面经-二面】\n\n1️⃣自我介绍\n\n2️⃣深挖实习经历：除了xxx，还能想到其他的分析维度吗？你认为还有哪些方面可以改进？\n\n3️⃣深挖竞赛经历：如何看待竞赛题目？除了题目中给的xxx，还能有什么分析维度？\n\n4️⃣深挖论文：创新点在哪里？某些指标是如何构建的？深度学习的常见问题\n\n[面试必过]\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601469115613622272?sourceSSR=users",
        "title": "拼多多面经 拼多多一面（附内推）",
        "content": "##  很多找我内推的同学咨询pdd面经，就找了被内推的同学总结了下自己一面的感受，供大家参考：\n\nPS： 希望大家多多点赞，多多找我内推，效果好我继续联系前端同学找面经，服务大家\n\n  \n\n面试同学总结：\n\n1、Java中的HashMap、TreeMap解释下？\n\n2、TreeMap查询写入的时间复杂度多少？\n\n3、HashMap多线程有什么问题？ CAS和synchronize有什么区别？\n\n4、都用synchronize不行么？ 如果要保证线程安全怎么办？(ConcurrentHashMap)\n\n5、ConcurrentHashMap怎么实现线程安全的？ get需要加锁么，为什么？\n\n6、volatile的作用是什么？ 底层怎么实现的？ 在多核CPU下，可见性怎么保证？\n\n7、聊项目，系统之间是怎么交互的？ 系统并发多少，怎么优化？\n\n8、给我一张纸，画了一个九方格，都填了数字，给一个MN矩阵，从1开始逆时针打印这MN个数，要求时间复杂度尽可能低\n\n9、可以先说下你的思路(想起来了，说了什么时候要变换方向的条件，向右、向下、向左、向上，依此循环) 有什么想问我的？\n\n面完一面正准备出去吃饭，电话又来了， 二面：跟一面比起来，二面面试官的声音听起来就像是搞技术开发的，果不其然，一个小时的纯技术电话面试！面的特别全面！\n\n最后：欢迎大家找我内推\n\n###\n内推链接：[https://careers.pinduoduo.com/campus/intern?t=Q1RKK3fACC](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fcareers.pinduoduo.com%2Fcampus%2Fintern%3Ft%3DQ1RKK3fACC)\n内推码：Q1RKK3fACC。\n\n任何问题都可以咨询\n\n任何问题都可以咨询\n\n任何问题都可以咨询  \n\n  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601450262502404096?sourceSSR=users",
        "title": "阿里云3.24笔试第三题",
        "content": "自己用的二维dp超内存了，正确应该是贪心\n\n    \n    \n    import java.util.*;\n    \n    public class Aliyun324_3 {\n    \n        public static void main(String[] args) {\n            //阿里云3.24笔试 第三题\n            //n个城市，从1号城市到n号城市，每到达一个城市消耗1单位粮食\n            //输入n个数，表示每个城市粮食的单价。粮食无上限\n            //可以携带额外的的粮食，在移动时超过1单位的额外粮食要支付运费，每单位支付1\n            //求最小的支付金额\n    \n            //输入示例\n            //4\n            //1 3 2 4\n            //输出：5\n            //贪心做法： dp[i] = dp[i - 1] + Math.min(i - 1 - j + prices[j]) 对于：1 <= j <= i - 1\n            //贪心的地方在于对于i处，要选取之前城市中的价格最低的（包含上运费）\n            //dp[i]表示到达城市i所需要的最小花费\n            Scanner in = new Scanner(System.in);\n            int n = in.nextInt();\n            int[] prices = new int[n + 1];\n            int[] dp = new int[n + 1];\n            for (int i = 1; i <= n; i++) {\n                prices[i] = in.nextInt();\n            }\n            for (int i = 2; i <= n; i++) { //从第二个城市开始\n                int minVal = Integer.MAX_VALUE;\n                for (int j = 1; j <= i - 1; j++) { //检索第i个城市之前的最小花费，运费是i-1-j\n                    minVal = Math.min(minVal, i - 1 - j + prices[j]);\n                }\n                dp[i] = dp[i - 1] + minVal;\n            }\n            System.out.println(dp[n]);\n        }\n    }\n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601445688584531968?sourceSSR=users",
        "title": "xhs一面g经",
        "content": "xhs安全技术部门面试 面试官人很好手撕题写不出来还会引导我。\n\n面试内容：\n\n1.没有八股，全是实习项目相关，是我太菜了实习项目很多细节都没有关注，答的一塌糊涂。\n\n2.手撕：有两个线程分别请求接口A和B，接口A和B都返回的是手机号，那个线程先返回使用那一个。开始没有使用CountDownLatch，面试官提醒使用，非常感谢。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601441840037945344?sourceSSR=users",
        "title": "阿里云3.24笔试题",
        "content": "只说编程题，选择题太难了，我不会\n\n三道题都是O(n)解法：\n\n第一题是经典dp，每一个可以选蓝色或者黄色，有各自的得分，也可以不选，但是相邻不能同色。求最大得分\n\ndp维护蓝、黄、不选三个状态，最后求最大值即可。\n\n第二题是一个贪心，找到两个数组完全不同的互斥区间个数（区间内对应index的数都不能相同）\n\n维护一个两个数组同一下标数值相等的数组，在数组前push（-1），在数组后push（n，数组的长度）\n\n然后找到维护数组相邻下标之间有多少数，设为x，则结果加上x*(x+1)/2\n\n第三题是一个贪心，对于每一个国家必须对应一个粮食的消耗（第一个国家除外），然后找到每一个国家需要购买粮食的地方，这个地方的代价最小即可。对于国家i，从j买，花费vec[j],则开销(i-1-j+vec[j]),对于每一个i来说，只需要让（-1-j+vec[j]）最小，取反也就是（j+1-vec[j]）最大，对于i，维持一个[1,i-1]的最大一个即可。最后模拟累加即可\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601437428758405120?sourceSSR=users",
        "title": "钉钉 3.23 T2",
        "content": "钉钉 2.23 笔试第二题，朋友问我的，但是写出来不知道对不对，我感觉大概率对的，大家可以帮忙看看\n\n对数组中任意两个元素一个除 2（向下取整），一个乘 2，问是否能把数组中元素置为同一个元素\n\n思路是枚举最终相同数的二进制位长度，长度确定后去遍历数组内元素，都左移或右移到相同的长度，如果最后所有的数左移和右移后的数相等且最终左移和右移的位数和相同，则\nYes，其余情况为 No，时间复杂度最坏是 O(31 n)\n\n    \n    \n    int binary_length(int num) {\n        int len = 0;\n        while (num) {\n            num >>= 1;\n            ++len;\n        }\n        return len;\n    }\n    \n    bool solution(vector<int> &nums) {\n        int n = nums.size(), binary_len[n], max_binary_len = 0;\n        for (int i = 0; i < n; ++i) {\n            binary_len[i] = binary_length(nums[i]);\n            max_binary_len = max(max_binary_len, binary_len[i]);\n        }\n        bool ans = false;\n        // 枚举最终相同数的二进制位长度\n        for (int i = 1; i < max_binary_len; ++i) {\n            // 确定最终相同数的二进制长度后, 这个相同的数绝对是每一位左移或者右移得到的\n            int same_num = binary_len[0] > i ? (nums[0] >> (binary_len[0] - i)) : (nums[0] << (i - binary_len[0]));\n            int cnt = i - binary_len[0];\n            bool can = true;\n            for (int j = 1; j < n; ++j) {\n                int num = binary_len[j] > i ? (nums[j] >> (binary_len[j] - i)) : (nums[j] << (i - binary_len[j]));\n                if (same_num != num) {\n                    // 此时左移或右移到相同的二进制位数后仍然不相同, 所以直接 pass\n                    can = false;\n                    break;\n                }\n                cnt += i - binary_len[j];\n            }\n            if (can && cnt == 0) {\n                // 这证明所有的数左移或右移后得到的数都是相同的, 且移动的位数和为0\n                return true;\n            }\n        }\n        return false;\n    }\n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601420283664232448?sourceSSR=users",
        "title": "3.22小米春招前端一面（30-40min）",
        "content": "### 3.22小米春招前端一面（30-40min）\n\n  * 自我介绍\n  * 学习前端的时间？平时写CSS多还是JS多？\n  * 水平垂直居中\n  * 场景题：固定-垂直居中靠右布局\n  * 场景题： flex实现三栏布局，要求父容器340px，两两间隔20px，两边的盒子紧贴父盒子左右两侧 如果子元素添加，添加的子元素依然需要按照这个布局现在父元素的宽度不固定，需要在实现上述布局的同时，实现宽度自适应\n  * 闭包，以及闭包的应用\n  * 原型链\n  * 实现深拷贝\n  * 平时是使用Promise多还是await async多\n  * 代码题 手写Sleep()等待方法\n  * 对HTTP熟悉吗，介绍HTTP状态码 3XX\n  * 对跨域熟悉吗，介绍一下跨域；开发以及生产如何解决跨域问题\n  * 强缓存和协商缓存\n  * Nginx对前端资源缓存的处理（静态资源文件，html文件）\n  * 说一下Pm2\n  * Nginx如何处理多页面情况下，刷新404的问题\n  * Nuxt3重构有遇到什么问题\n  * React闭包陷阱（悲，简历上就不该写React给自己挖坑了）\n  * 偏向聊天（为什么学习的前端、你打算转全栈吗、Flutter有实际上手过吗）\n\n反问\n\n>   1. 面试流程（二技术面，一hr面）\n>   2. 部门业务（有点多记不清了）\n>   3. 部门技术栈（React）\n>   4. 您可以接受转框架（我做的大部分都是Vue ，想转React）\n>\n\n面试感受：面试官非常nice，特别是先易后难的这个问法，层层递进。求求了让我进二面吧！！！\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601410143527444480?sourceSSR=users",
        "title": "度小满 校招 笔试真题",
        "content": "10.7笔试\n\n90min\n\n选择x15（数据结构、java、计网、mysql）、编程x3（100%、100%、45%）\n\n  * 给一个n*的字符矩阵，请你判断将矩阵中的某一行按从左向右顺序或者某一列按从上到下顺序取出作为一个字符串后，该字符串中是否存在子串\"accept\"。\n  * 给定一个长度为n的数组A,数组下标为1到n,第i个数记为a1,保证A数组是1到的一个排列。现在，小明将对∧数姐按顺序进行m次操作来对八数妇排序。第i次操作会给定参数xi和yi(Xi<yi),表示若axi>ayi,则交换axi和ayi若数组恢复有序，小明会立刻停止操作。现仕，你需要告诉小明八数组最早仕什么时恢复有序（本题有序指数组单调递增，即从小到大有序），即找到一个最小的非负整数即，满足第即次操作后，数组A有序。特别地，若A数组在第1次操作前就有序，则p=0;若数组在m次操作后仍然没有处于有序状态，则p=m+1.\n  * 给定一个长度为n的数组A,下标为1到n。给定一个长度为m的数组B,下标为1到m,数组B中第i个数记为bi。请找出长度最小的连续区间[l,r](1≤|sr≤n)且l,r为整数，使得该区间对于所有满足1≤x≤m的正整数x均有：正整数x在A数组的下标落在区间l,r的所有数中至少出现了b×次。注意，对于任意一个连续区间[l,r],区间的长度定义为r-l+ 1。\n\n后续无消息\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601389045675028480?sourceSSR=users",
        "title": "腾讯面试",
        "content": "公司：[腾讯](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjoin.qq.com%2F)\n\n部门：腾讯视频\n\n岗位：数据科学\n\n![](https://uploadfiles.nowcoder.com/images/20240324/509758824_1711252540999/6F13B074AD66D140BF4F4BE889D540EC)\n\n形式：视频面试\n\n视频面试平台：面呗\n\n时长：50分钟\n\n流程：\n\n1、自我介绍。\n\n2、我看到你的简历上面写的都是项目经历，你本人没有参加过线下实习的原因是什么？\n\n3、你现在投递了数据科学方向的岗位，你有相关的一些职业规划吗？\n\n4、你最早可以开始参加线下实习的时间是什么时候？\n\n5、你后续还有继续读博深造的一些打算吗？\n\n6、（简历项目深挖）在你做过的数据分析相关的项目中，选一个你认为价值比较大或者是在这个过程中挑战比较大的项目，分享一下你具体所做的一些事情和成果。数据包含了多少个特征？这些特征有哪些？预测用户在未来某一个周期之内是否会复购这个事情，你觉得需要考虑哪些变量？你觉得需要考虑商品相关的信息吗？其实我想考察的是你在这个项目里面的一个分析框架，就是其中每一步帮助你去决策的一个动作是什么，你做了一些什么动作然后让你去做出这样的选择。复购的时间窗口是多长？你有没有想过时间窗口为什么是两天？最终选用的模型是什么？怎么评估模型的效果？你能简单说一下accuracy,\nprecision和recall这几个指标是怎么计算的吗？特征的重要性这方面有没有一些解释？\n\n7、你对Python和R的掌握程度怎么样？\n\n8、SQL题：某视频网站播放用户分析（3）\n\n某个视频网站的用户播放流水表user_play_log记录了每个用户在某网站的观剧行为。该表包含3列：userid（用户id）、videoid（播放视频id）、stamp（用户开始播放视频时间）\n\n（1）查询出最近3天每日播放用户数量和播放视频数量。输出字段：DATE, UV, VV\n\n（2）查询出昨日播放次数最多的3个用户和他们的播放次数。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601382838197334016?sourceSSR=users",
        "title": "3.24字节笔试题解",
        "content": "分享题解攒人品[嘤嘤嘤][嘤嘤嘤][嘤嘤嘤][嘤嘤嘤]\n\n（写题能力严重退化~\n\n## 第一题\n\n**题意** ：凸多边形有n条边，每条边上ai个标记，问选三个标记组成三角形的方案数，对1e9+7取模(n<=1e5, ai <=1e9)\n\n**思路** ：dp\n\ndp[i][j]表示前i条边取了j个标记，有转移式\n\ndp[i][j+k] += dp[i-1][j] + C(ai, k) 第i条边取了k个标记。\n\n由于j不超过3，k不超过2，且C(ai, k)可以直接乘除得到，复杂度O(n)\n\n看到有大佬容斥思路做的，很妙，没想到哈哈哈。\n\n## 第二题\n\n**题意** : 给定一个字符串，求包含\"byte\"或者\"dance\"的子串数量(字符串长度不超过1e5)\n\n**思路** ：数数\n\n先求出所有byte,dance子串的位置，我们记为一个区间[l,r]，我们知道既然byte是个合法串，那么[l,r]区间往左往右延伸都是合法的。\n\n然后就是怎么不重复计数了。我们对区间[l,r]按照l排序，从左往右扫，每个区间贡献是(l - last_l) * (n -1 - r +\n1)，其中last_l表示上个区间的左端点，n表示字符串总长。只要保持当前区间的左端点，不超过上个区间左端点就不会重复计数。复杂度O(n)\n\n## 第三题\n\n**题意** : 给n个二元组，每个二元组<u,v>表示v个u，比如<1,3>表示1 1 1。然后q次询问，每次问区间[l,\nr]和。（n<=1e5,u,v<=1e9）\n\n**思路** ：前缀和，二分，数数\n\n对u和v分别做前缀和，u的前缀和sum数组，v的前缀和cnt数组。\n\n对于询问[l,r]我们先在cnt数组中用lower_bound或者二分找到对应的下标pl和pr\n\n答案则为sum[pr-1] - sum[pl] + (cnt[pl] - l + 1) * 对应的u + (r - cnt[pr-1] ) *\n对应的u，复杂度O(n + qlogn)\n\n怎么理解呢，把[pl,pr]拆成[pl+1, pr - 1] 还有pl和pr单独两个点算贡献。[pl+1, pr -\n1]区间肯定是吃满每个数和数量的贡献，这里用前缀和算下就可以。pl和pr单独两个点就要看多出或者缺少多少个数组，然后乘上对应的u，这里说的有点抽象。。。\n\n贴个代码吧\n\n    \n    \n    #include <bits/stdc++.h>\n    using namespace std;\n    #define int long long\n    #define endl '\\n'\n    const int mod = 1e9 + 7;\n    const int N = 1e5 + 10;;\n    int n, q;\n    int sum[N], cnt[N];\n    array<int, 2> E[N];\n    signed main() {\n        cin >>n;\n        for(int i = 1; i <=n; i++){\n            int u, v;cin >> u >> v;\n            E[i] = {u, v};\n            cnt[i] = (cnt[i-1] + v);\n            sum[i] = (sum[i-1] + u * v % mod) % mod;\n        }\n        cin >> q;\n        while(q--){\n            int l, r;\n            cin >> l >> r;\n            int pl = lower_bound(cnt+1, cnt+1+n, l) - cnt;\n            int pr = lower_bound(cnt+1, cnt+1+n, r) - cnt;\n            int ans = (pr - 1 >= pl + 1 ? (sum[pr-1] - sum[pl] + mod) % mod : 0);\n            if(pl==pr){\n                ans += (r - l  + 1) * E[pl][0] % mod;\n                ans %= mod;\n            }else {\n                ans += (cnt[pl] - l  + 1 + mod) % mod * E[pl][0] % mod; \n                ans %= mod;\n                ans += (r - cnt[pr-1] + mod) * E[pr][0] % mod;\n                ans %= mod;\n            }\n            cout << ans << endl;\n        }\n    }\n    \n\n## 第四题\n\n**题意** :\n给01矩阵，行不超过5，列不超过1000。其中有些位置是问号'?'。现在要把'?'变成01，不能出现相邻的1，问合法方案数，对1e9+7取模。\n\n**思路** ：dp,状压\n\n由于就5行，2^5也就32。\n\ndp很容易想dp[i][s]，表示第i列的字符串状态为s，s即二进制状压。\n\nif(i列和i-1列没有相邻1) , 有转移dp[i][s] += dp[i-1][k]，复杂度O(4 ^n * m)\n\n代码是难写点。凭回忆写了下大概。\n\n这里状压有个特殊之处，就是01已知的地方就用已知的数表示即可，比如某列式01?（我把列横过来），的状态压缩是010或者011。所以下面我在check函数中首先会去check这个状态的合法性（代码11到14行）。\n\n    \n    \n    #include <bits/stdc++.h>\n    using namespace std;\n    #define int long long\n    #define endl '\\n'\n    const int mod = 1e9 + 7;\n    const int N = 1e5 + 10;;\n    int n, m;\n    int dp[1010][31];\n    string s[10];\n    bool check(int col, int col_state, int last_col_state){\n        for(int i = 0; i < n; i++){\n            if(s[i][col] != '?' && ((col_state>>i&1) != s[i][col] - '0')){\n                return false;\n            }\n        }\n        for(int i = 0; i < n; i++){\n            int k = s[i][col] == '?' ? col_state>>i&1 : s[i][col] - '0';\n            if(k){\n                // 与上一行进行check\n                int last_col_k = col_state>>(i-1)&1;\n                if(last_col_k){\n                    return false;\n                }\n            }\n        }\n        // 与前一列check\n        // 第一列无需与上一列check\n        if(col){\n            for(int i = 0; i < n; i++){\n                int k = s[i][col] == '?' ? col_state>>i&1 : s[i][col] - '0';\n                int last_col_k = last_col_state>>i&1;\n                if(k == 1 && k == last_col_k){\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    signed main() {\n        cin >> n >> m;\n        for(int i = 0; i < n; i++){\n            cin >> s[i];\n        }\n        for(int i = 0; i < m; i++){\n            for(int j = 0; j < (1<<n); j++){\n                if(i){\n                    for(int k = 0; k < (1<<n); k++){\n                        if(dp[i - 1][k] && check(i, j, k)){\n                            dp[i][j] = (dp[i][j] + dp[i - 1][k]) % mod;\n                        }\n                    }\n                }\n                else {\n                    if(check(i, j, -1)){\n                        dp[i][j]++;\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < (1<<n) ; i++){\n            ans = (ans + dp[m-1][i])%mod;\n        }\n        cout << ans;\n    }\n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601367083825307648?sourceSSR=users",
        "title": "3.21：实习淘天后端一面-深入java知识体系",
        "content": "嗨～我是可拟雀，一个后端开发工程师，毕业于某985大学，目前供职于bat某大厂核心部门后端。每天分享最新面经答案，希望在大环境不好的当下能帮到你，让你多积累面试经验。需要内推或者面经合集请评论哦。\n\n# 面试内容：\n\n1.hashmap.put流程\n\n2.concurrenthashmap\n\n3.知道java几面异常的(exceptiona类)的体系结构嘛？\n\n我直接道歉\n\n4.对象头都有什么内容\n\n5.cms讲一讲\n\n6.线程池，讲一讲，怎么用？什么时候创建线程？(具体说)\n\n7.我线程池放了几万个线程，有什么问题？\n\n8.jmm\n\n9.jvm内存模型\n\n10.元空间满了，可能是什么原因？\n\n11.如果频繁full gc 怎么排查？排查过程是什么样的？\n\n我直接道歉\n\n12.线程同步有哪些方法\n\n刚准备问spring啥的。我说我对框架源码还不熟，可以问问redis嘛？他说:好的，那我不问redis了。我直接😁😁😁\n\n13.cap理论\n\n14.聚簇索引，非聚簇索引\n\n15.B+树，红黑树，啥的都聊一聊\n\n16.mysql主从同步\n\n17.除了binlog日志，还有什么日志？\n\n18.同步io，异步io\n\n19bio，nio，aio\n\n20java底层用的什么实现的bio,nio。\n\n答:只知道nio应该是epoll，不知道对不对。道歉\n\n21.如何查看一个进程中线程的占用内存情况。用什么命令？\n\ntop？道歉\n\n22.netty了解嘛？\n\n23.mq了解嘛？\n\n24.类的加载过程\n\n25怎么打破双亲委派机制\n\n26.类加载器的层次结构\n\n# 答案概答：\n\n以下是各个问题的核心解释概要：\n\n  1. **HashMap.put流程** ：检查key是否已存在，若存在则更新value。若不存在，计算key的hash值，找到对应的桶位置。若桶位置为空，直接放入新节点；若已存在节点，则使用比较key的值是否一致，一致是会覆盖节点的反之就是进行链表或红黑树的插入操作。\n  2. **ConcurrentHashMap** ：线程安全的HashMap实现，支持高并发场景。通过分段锁或CAS操作来减少锁竞争，提高性能。\n  3. **Java异常体系** ：分为Error和Exception两大类。Exception进一步分为运行时异常（RuntimeException）和非运行时异常。\n  4. **对象头内容** ：包含对象的运行时数据（如哈希码、GC分代年龄等）。还可能包含指向对象类型元数据的指针。\n  5. **CMS（Concurrent Mark Sweep）** ：一种Java的垃圾收集器，旨在减少应用停顿时间。分为初始标记、并发标记、重新标记和并发清除几个阶段。\n  6. **线程池** ：用于管理和复用线程，减少线程创建和销毁的开销。根据不同场景，可配置核心线程数、最大线程数、队列容量等参数。当任务提交时，线程池会根据当前状态决定是直接执行、放入队列还是创建新线程。\n  7. **线程池放几万个线程** ：可能导致系统资源耗尽，如内存、CPU和文件描述符等。线程间切换开销增大，影响性能。线程管理成本增加。\n  8. **JMM（Java内存模型）** ：定义了Java程序中各种变量（主内存和线程工作内存）的访问规则。保证多线程环境下数据的一致性和可见性。\n  9. **JVM内存模型** ：包括堆、栈、方法区等部分。堆用于存储对象实例，栈用于存储线程局部变量和方法调用信息。\n  10. **元空间满了** ：可能由于加载了大量类或者类加载器未正确回收导致。可以通过调整JVM参数增加元空间大小或检查类加载器泄露问题。\n  11. **频繁Full GC排查** ：分析GC日志，确定Full GC的频率和原因。检查内存使用情况，查找可能的内存泄露。优化代码和配置，减少大对象创建和长时间持有的情况。\n  12. **线程同步方法** ：包括synchronized关键字、Lock接口及其实现类、volatile关键字和原子类等。\n  13. **CAP理论** ：一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）的权衡理论。分布式系统一般无法同时满足三者，需根据场景选择折中方案。\n  14. **聚簇索引与非聚簇索引** ：聚簇索引按照主键顺序存储数据，非聚簇索引与数据物理存储顺序无关。查询性能上，聚簇索引通常更快，但插入和更新操作可能较慢。\n  15. **B+树、红黑树等** ：B+树常用于数据库和文件系统的索引结构，具有多路搜索特性，适合外存存储。红黑树是一种自平衡的二叉搜索树，常用于内存中的数据结构。\n  16. **MySQL主从同步** ：主服务器将数据变更写入二进制日志（binlog）。从服务器读取主服务器的binlog，并执行其中的事件，实现数据同步。\n  17. **MySQL日志** ：除了binlog外，还有错误日志、查询日志、慢查询日志等。这些日志用于诊断问题、优化性能和监控数据库状态。\n  18. **同步IO与异步IO** ：同步IO需要等待操作完成才能继续执行后续代码。异步IO在操作开始后立即返回，通过回调函数或事件通知操作结果。\n  19. **BIO、NIO、AIO** ：BIO是阻塞式IO，NIO是非阻塞式IO，AIO是异步IO。NIO和AIO适用于高并发、大量数据传输的场景，可提高性能。\n  20. **Java底层IO实现** ：NIO在Java中通过java.nio包实现，底层可能使用epoll等高效IO模型。具体实现与操作系统和JVM版本有关。\n  21. **查看线程内存占用** ：可以使用jstack、jmap\n\n大家根据概答的关键字，了解哪里学习的不够系统和深入进行查缺补漏即可\n\n[#软件开发2024笔面经#](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fsubject%2Fb8d7014e82114b1ebaf0c42677b35bdc)\n\n[原文传送门](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Ffeed%2Fmain%2Fdetail%2F4796e093e0814df881df237b5e9b003c)\n\n{nowcoder-vote}{113114}\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601379967020097536?sourceSSR=users",
        "title": "腾讯音乐娱乐面试",
        "content": "公司：[腾讯音乐娱乐](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fjoin.tencentmusic.com%2Fcampus%2F)\n\n岗位：数据科学\n\n岗位描述\n\n  1. 基于平台的海量数据，结合数理统计、数据挖掘、机器学习等技术，设计可执行的方案并推动产品决策；\n  2. 深入理解业务问题，传递数据驱动的可视化方案和建议给到业务对接人；\n  3. 和用研，产品，工程师团队密切合作，部署和落地算法模型方案；\n  4. 通过执行和分析A/B test来加快产品的实验和迭代。\n\n岗位要求\n\n  1. 有相关工作经验，计算机、统计、数学等专业背景优先；\n  2. 有数据驱动意识和相关产品分析决策项目的领导经验；\n  3. 扎实的编程基础(Python/SQL/Scala)、大数据平台使用经验和数据分析工具（R,SPSS,Tableau）的使用能力；\n  4. 有将数据转化成可理解和执行的决策(A/B test, 产品方案）能力；\n  5. 良好的团队合作意识。\n\n形式：视频面试\n\n视频面试平台：腾讯会议\n\n时长：54分钟\n\n流程：\n\n1、自我介绍。\n\n2、（简历项目深挖）讲一个你之前做过的一个项目，从头到尾介绍一下。探索性数据分析主要是做什么？做预测时的特征是什么？样本量是多少？怎么定义活跃用户？为什么选择树模型？模型评估的指标是什么？\n\n3、（项目经历提到SVM）讲一下支持向量机的原理。\n\n4、（项目经历提到随机森林、AdaBoost和XGBoost）随机森林、AdaBoost和XGBoost的优缺点分别是什么？\n\n5、AUC是什么？为什么可以用AUC来评价分类的表现？\n\n6、编程题：有n件物品和一个最多能背重量为w的背包。第i件物品的重是是weight[i]，得到的价值是value[i]。**每件物品只能用一次**\n，求解将哪些物品装入背包里物品价值总和最大。\n\n7、反问。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601353525095882752?sourceSSR=users",
        "title": "字节二面",
        "content": "# 自我介绍\n\n## MySQL性能问题\n\n  * 问题：MySQL到60W条数据之后就不行了\n  * 优化方法：加索引\n\n## 索引底层原理\n\n  * B+树\n  * B树与B+树的区别 \n    * B树：一个节点存所有信息\n    * B+树：非叶子节点存的是比较信息，B+树会显得是矮胖型的\n    * 矮的含义：非叶子节点存储的信息少，如果把信息看着高度，B+树会显得矮\n    * 好处：查找需要磁盘到内存的IO，这种设计IO的数据量少\n\n## 联合索引问题\n\n  * 问题：联合索引失效\n  * SQL问题：未回答上来\n  * 项目建索引建议 \n    * 建议：联合索引\n    * 理由：查的时候要从省份查到村\n\n## 服务类型\n\n  * 单机服务\n  * 分布式了解：了解过，原来用nginx的轮询来轮询两台服务器\n\n## nginx分布式配置\n\n  * 问题：如何将nginx做成分布式的？\n\n## URL到网页的过程\n\n  * DNS解析\n  * HTTP请求前端\n  * 浏览器渲染再次请求\n\n## 存储省份和市区信息\n\n  * 使用zset\n  * 为什么快：跳表，复杂度降到log(n)\n  * 为什么不使用hash：hash的实现和时间复杂度未提及\n\n## 进程与线程\n\n  * 进程：操作系统管理，切换代价大，内存隔离性高\n  * 线程：进程管理，可以共享内存\n  * 进程间通信：管道，socket，共享内存\n\n## TCP协议\n\n  * 滑动窗口：防止消息覆盖\n  * 慢启动：初始值较低，指数上涨探寻最大网速\n\n## 字符串处理\n\n  * String，StringBuffer，StringBuilder的区别 \n    * String：内存分配\n    * StringBuilder：为了让字符串操作更快，改进了String的不可变性\n\n## 虚拟内存\n\n  * 思路：一部分暂时不用的分到磁盘，用了再load到内存里面\n  * 是否连续：不是\n  * 如何取得物理位置：操作系统管理，C语言有对应函数（具体函数未提及）\n\n## 线程安全与并发\n\n  * 了解过线程安全和并发写竞争\n  * Java同步：synchronized\n  * 分布式同步：Redis分布式锁\n\n## 锁问题\n\n  * 锁重入问题：使用LUA脚本串行解决（具体细节未提及）\n  * 服务挂掉问题：给锁加过期时间\n  * 业务执行长问题：未提及具体解决方案\n\n## 算法问题\n\n  * 题目描述：奇数位升序，偶数位降序的单向无环链表升序排序\n  * 输入：1->10->5->9->12->0\n  * 输出：0->1->5->9->10->12\n  * 初始思路：奇数压到队列，偶数压到栈\n  * 面试官建议：原地拆链，偶数链反转，合并\n  * 问题：空间复杂度优化\n\n## 闲聊与面试建议\n\n  * 面试官提到面试者的博客和GitHub，询问是否都是自己编写的内容\n  * 面试者提到操作系统和编程语言的学习背景\n  * 面试建议：在考虑解决方案时思考应更深入，不应直接跳到使用Redis\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601188584464375808?sourceSSR=users",
        "title": "平安银行金融类笔试具体考什么？",
        "content": "一、笔试简介\n\n中国平安银行金融类笔试是选拔优秀人才的重要环节，旨在考察应聘者的综合素质、专业知识以及逻辑思维“能力。笔试内容涵盖了多个方面，包括图形推理、阅读理解、金融知识、数字运算、词语理解和逻辑推理等。通过刷题和备考，你可以更好地了解考试形式和难度，提高应试能力。\n\n笔试内容：\n\n（1）图形推理（5题)\n\n图形推理主要考察应聘者的空间想象能力“和逻辑推理能力。题目中会给出一组图形，要求应聘者找出图形之间的规律或关系，并选出符合规律的选项。\n\n（2）阅读理解（5题）\n\n阅读理解部分主要考察应聘者的阅读速度和理解能力。题目中会给出一段文字材料，要求应聘者根据材料内容回答问题。这部分需要应聘者快速浏览材料，抓住重点信息，准确回答问题。\n\n（3）金融知识（10题)\n\n金融知识是平安银行笔试的重点之一，主要考察应聘者对金融基础知识的掌握程度。题目涉及货币银行学、金融市场、金融产品等方面的知识，需要应聘者具备扎实的金融理论基础。\n\n（4）数字运算（10题）\n\n数字运算部分主要考察应聘者的数学基础和计算能力。题目包括数学运算、数据分析、逻辑推理等多种题型，需要应聘者灵活运用数学知识解决。\n\n（5）词语理解（5题)\n\n词语理解部分主要考察应聘者对词汇和语法的掌握程度。题目中会给出一些词语或句子，要求应聘者根据上下文理解其含义，并选出正确的选项。\n\n（6）逻辑推理（5题)\n\n逻辑推理部分主要考察应聘者的思维能力和判断能力。题目中会给出一些假设或条件，要求应聘者进行推理分析，得出正确的结论。\n\n三、备考攻略\n\n1.了解考试形式和题型：在备考前，先了解笔试的形式和题型分布，有助于应聘者制定针对性的备考计划。\n\n2.系统学习金融知识：针对金融知识部分，建议应聘者系统学习货币银行学、金融市场等基础知识，掌握金融产品的特点和风险。\n\n3.提高数学运算能力：数学运算在笔试中占据一定比例，应聘者可以通过刷题和练习提高计算速度和准确性。\n\n4.注重阅读理解能力：阅读理解部分需要应聘者快速捕捉信息，建议多阅读相关材料。\n\n5.模拟练习和真题演练：通过模拟练习和真题演练，可以熟悉考试形式和难度，提高应试能力。建议应聘者多做真题，总结归纳考点和解题技巧。\n\n  \n\n  \n\n四，【测评笔试】平安银行春招金融类笔试测评经验分\n\n享\n\n题库使用的是智鼎在线”，笔试分为两个部分，总时长限制60分钟“作答，要开摄像头，点击自己邮箱里的链接即可进入。\n\n整个笔试部分含有不同类型的题目，一共50道。作答会有倒计时，但单个题目不限时，可以返回修改题目答案，也可以提前交卷。\n\n01-34题〔单选]：行测类题型为主，言语理解、段落主旨概括、数量关系、数学运算、情景分析、资料分析、时政等均有涉及。\n\n35-42题〔判断]：判断推理+逻辑推理，比如甲乙丙丁各给出了一个观点，但其中只有两个人正确，然后推断出正确的选项。\n\n![](https://uploadfiles.nowcoder.com/message_images/20240323/631346326_1711206520678/discuss_1711206521305.jpeg)  \n\n  \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601190342372716544?sourceSSR=users",
        "title": "特斯拉面试",
        "content": "公司：[特斯拉](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%253A%252F%252Fapp.mokahr.com%252Fcampus_apply%252Ftesla%252F)\n\n岗位：IT应用支持工程师实习生\n\n形式：视频面试\n\n视频面试平台：Teams\n\n时长：45分钟\n\n流程：\n\n0、面试官自我介绍及面试流程介绍。\n\n1、自我介绍。\n\n2、数学建模比赛做的什么事情？你在其中负责的是哪一块？\n\n3、你觉得你自己在哪些领域方面比较擅长或者是比较有信心？\n\n4、（项目深挖）讲一下用Python做数据分析的项目。训练集和测试集是怎么划分的？为什么选用最后的模型？对模型做了哪些改进？调参是怎么调的？\n\n5、在这些项目中，你印象比较深刻的或者是相对来说比较有挑战性的困难是什么？你是怎么去解决的？\n\n6、你对于第一份实习或者工作有什么样的规划？\n\n7、你的英语怎么样？可以用英文简单交流一下吗？Why do you want to join Tesla?\n\n8、反问。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601178259933421568?sourceSSR=users",
        "title": "3.22 微派贪吃蛇前端暑期实习二面",
        "content": "昨天三场面试，属实强度有点高，加上写了好几篇面经，这个留到今天写。\n\n微派的流程相当快，上午面完一面，下午hr打电话约了二面，晚上二面。\n\n二面几乎等于是纯聊天了，可能周五晚上面试官也想下班，就23分钟结束战斗了。\n\n还是浅浅总结一下。\n\n1.了解了一下目前在校情况\n\n2.Vue3相对Vue2做了哪些优化\n\n3.Vue2的defineProperty能监听后面push进数组的元素吗\n\n4.如果在Vue2里想要向数组里面增加一个元素并且实现响应式应该怎么做\n\n5.最近有没有看什么书？\n\n6.CSS中如何隐藏一个元素\n\n7.这些方法的区别是什么\n\n8.实习最快啥时候到岗，能实习多久\n\n9.算法题：从url里提取参数，将里面的key、value放进对象里（面试官说要考虑特殊字符，但是由于他只是口述没有给示例所以最后也没有让我继续修改）\n\n10.有了解什么新的前端知识\n\n11.平常从哪些渠道学习\n\n12.后续职业规划如何\n\n后面就是反问了，整体体验轻松加愉快\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601177644956168192?sourceSSR=users",
        "title": "腾讯云智 面试经验分享",
        "content": "谈谈面试准备相关经验（后端开发），希望能够帮助到大家~\n\n# 一、腾讯云智一面\n\n50min面试 20min编程题\n\n  1. 自我介绍\n  2. 发布订阅模式的优点是什么？缺点是什么？如果让你来实现类似MQTT的功能，你需要考虑哪些方面？\n  3. TCP粘包拆包实现原理？如果让你来实现，你会怎么设计？\n  4. 为什么用数据库连接池？如果数据库支持的最大连接数满了，怎么操作？（高可用）如果让你来设计一个数据库连接池，你会考虑什么因素？为什么？\n  5. 介绍IoC、DI、AOP原理？\n  6. 介绍一下红黑树？查询效率？时间复杂度？\n  7. 进程、线程的区别是什么？\n  8. 项目中用过Git分支吗？介绍一下？\n  9. 如何解决哈希冲突？\n  10. 红黑树？时间复杂度？\n  11. 什么原因导致I/O阻塞？\n  12. 编程题，翻转单词：“I am a student.” 翻转成 “student. a am I”。 要求：不允许使用Java内置函数\n\n# 二、腾讯云智二面\n\n1h面试\n\n  1. 自我介绍\n  2. 介绍项目\n  3. 如果给你一个项目，让你开发，需要考虑哪些方面？\n  4. 比赛中的收获？存在那些问题？解决方案？\n  5. 为什么不直接购买MySQL实例？\n  6. 项目组中如何进行分工？你负责的任务是什么？\n  7. 项目中遇到的难点，如何解决？\n  8. 项目中如何解决网络连接的安全性？可靠性？\n  9. MySQL的组成模式？\n  10. 项目中如何实现数据一致性？有哪些解决方案？\n\n# 三、腾讯云智三面\n\n30min\n\n  1. 自我介绍？\n  2. 你最有成就感的事情？为什么？\n  3. 你的优点是什么？缺点是什么？\n  4. 介绍一下项目的技术栈？\n  5. 为什么考虑采用新的技术栈？\n\n# 四、相关经验总结\n\n1\\. 弄清项目细节，主要是针对简历上的项目进行提问。\n\n（1）安卓项目：MQTT协议（会底层原理）、人脸识别（图片处理、图片压缩、过程中会出现什么问题）、手机端控制的实现过程、系统架构、前端采用的架构\n\n（2）小程序：RabbitMQ消息队列相关（消息可靠性、持久化、几种模式，对应的博客总结）\n\n（3）web项目：分库分表的方式（中间件、水平分库分表）、Redis相关（缓存击穿、缓存雪崩、缓存穿透，Redis数据类型，Redis持久化方式（两种方式应用场景、对比结果））\n\n（4）你负责哪部分内容，做了哪些工作，如何进行项目组内部协调，如何进行规划......\n\n2\\. 基础知识打牢，对于基础知识这块，一定要打牢\n\n（1）Java多线程、锁、集合、网络编程，力扣算法题...\n\n（2）计算机网络：HTTP、HTTPS、TCP、UDP、拥塞机制、流量控制，三次握手、四次挥手...\n\n（3）数据库：MySQL、Redis...\n\n（4）消息队列：RabbitMQ几种模式，如何保证可靠性，如何保证一致性...\n\n（5）操作系统：进程线程、虚拟内存（段式、页式、段页式~）、I/O问题、IO多路复用...\n\n（6）数据结构：数组、链表、跳表（Redis中的应用）、红黑树、二叉搜索树、B树、B+树及其应用和结构特点...\n\n（7）SSM框架、SpringBoot......\n\n3\\. HR面回答技巧\n\n（1）实习时间\n\n（2）何时能来实习\n\n（3）期望工作城市\n\n（4）目标，职业规划\n\n（5）优点、缺点\n\n（6）家庭情况\n\n4\\. 待加强\n\n（1）MySQL索引，B树、B+树\n\n（2）Java反射、动态代理\n\n（3）SSM、SpringBoot、Redis等\n\n（4）操作系统进程线程、内存管理、多路复用\n\n（5）计算机网络\n\n（6）基本排序算法\n\n（7）简历修改、优化\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601167596045512704?sourceSSR=users",
        "title": "特斯拉笔试",
        "content": "公司：[特斯拉](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fapp.mokahr.com%2Fcampus_apply%2Ftesla%2F)\n\n岗位：IT应用支持工程师实习生\n\n笔试平台：Codility\n\n考试时长：130分钟\n\n考试题型：两道SQL，一道Python\n\n# Task1\n\nYou are given two tables, `department` and `employee`, with the following\nstructure:\n\n    \n    \n    create table department (\n     \tdept_id integer not null,\n     \tdept_name varchar(30) not null,\n    \tdept_location varchar(30) not null,\n    \tunique(dept_id)\n    );\n    \n    create table enployee (\n    \temp_id integer not null,\n    \temp_name varchar(50) not null,\n    \tdept_id integer not null,\n    \tsalary integer not null,\n    \tunique(emp_id)\n    );\n    \n\nEach record in the table `department` represents a department which might hire\nsome employees. Each record in the table `employee` represents an employee who\nworks for one of the departments from the table `department`. The salary of\neach employee is known. (However, the locations of the departments are not\nrelevant here.)\n\nWrite an SQL query that returns a table comprising all the departments\n(`dept_id`) in the table `department` that hire at least one employee, the\nnumber of people they employ and the sum of salaries in each department. The\ntable should be ordered by `dept_id` (in increasing order).\n\n# Task2\n\nCodility is a company that creates programming tasks which are solved by\ncandidates. After submitting their solution to a task, each candidate receives\na report containing the number of points their solution scored, which is an\ninteger between 0 and 100.\n\nYou are given two tables, `tasks` and `reports`, with the following structure:\n\n    \n    \n    create table tasks (\n    \tid integer not null,\n    \tname varchar(40) not null,\n    \tunique(id)\n    );\n    \n    create table reports(\n    \tid integer not null,\n    \ttask_id integer not null,\n    \tcandidate varchar(40) not null,\n    \tscore integer not null,\n    \tunique(id)\n    );\n    \n\nYour task is to write an SQL query which assigns a difficulty rating to\ndepends on the average score of all candidates' solutions submitted each task\n**having at least one solution**. The difficulty of the task depends on the\naverage score of all candidates' solutions submitted for this task. It is\npossible that one candidate have submitted multiple solutions for the same\ntask; in this case, all of those solutions should be included in the average.\n\nThere are three difficulties: \"Easy' , \"Medium\" and \"Hard\".\n\n  * If the average score for the task is lower than or equal to 20, then its difficulty is \"Hard\".\n  * If the average is higher than 20 but lower than or equal to 60, then its difficulty is \"Medium\".\n  * If the average is higher than 60, its difficulty is \"Easy\".\n\nFor example, if the average score of the task is 50, then its difficulty is\n\"Medium\" because the average score is greater than 20 but less then 60.\n\nYour query should return a table containing three columns: `task_id`(ID of\ntask), `task_name` (name of task) and `difficulty` \\- the difficulty of the\ntask, which is one of three possible strings: Easy \", \"Medium\" or \"Hard\". Rows\nshould be ordered by increasing `task_id`. If no solutions exist for some\ntask, that task should not appear in your table.\n\n# Task3\n\nConsider a non-empty string S= `S[0]S[1]... s[Q-1]` consisting of Q\ncharacters. The _period_ of this string is the smallest positive integer P\nsuch that:\n\n  * P ≤ Q / 2 and\n  * S[K] = S[K+P] for every K, where 0 ≤ K < Q-P\n\nFor example, 8 is the period of \"`codilitycodilityco`\" and 7 is the period of\n\"`abracadabracadabra`\".\n\nA positive integer M is the _binary period_ of a positive integer N if M is\nthe period of the binary representation of N.\n\nFor example, 4 is the binary period of 955, because the binary representation\nof 955 is \"1110111011\" and its period is 4.\n\nYou are given an implementation of a function:\n\n`def solution(N):`\n\nThis function, when given a positive integer N, returns the binary period of\nN. The function returns -1 if N does not have a binary period.\n\nFor example, given N = 955 the function returns 4, as explained in the example\nabove.\n\nThe attached code is still **incorrect** for some inputs. Despite the\nerror(s), the code may produce a correct answer for the example test cases.\nThe goal of the exercise is to find and fix the bug(s) in the implementation.\nYou can modify at most **two** lines.\n\nAssume that:\n\n  * N is an integer within the range [1..1,000,000,000].\n\nIn your solution, focus on **correctness**. The performance of your solution\nwill not be the focus of the assessment.\n\n    \n    \n    def solution(n):\n        d = [0] * 30\n        l = 0\n        while (n > 0):\n            d[l] = n % 2\n            n //= 2\n            l += 1\n        for p in range(1, 1 + l):\n            ok = True\n            for i in range(l - p):\n                if d[i] != d[i + p]:\n                    ok = False\n                    break\n            if ok:\n                return p\n        return -1\n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601157219677204480?sourceSSR=users",
        "title": "美团暑期实习一面",
        "content": "上来自我介绍，介绍项目的时候直接让停了，后面一整场都没讲项目一点东西，狠狠拷打八股，但面试官人还是很nice的，回答的有问题会帮忙分析。\n\n## 计算机基础\n\n计算机网络分层，网络层的协议有哪些，传输层tcp如何保证可靠传输，如何实现拥塞控制\n\ntcp为什么要三次握手，两次有什么问题\n\nhttp和https区别，http安全性问题，https加密流程，公钥和私钥作用\n\n进程间通信方式\n\n## java\n\nJava泛型\n\n反射机制（反射缺点）\n\n集合，hashset如何保证不重复，为什么要用hashcode和equals两个方法，hashmap原理（包括多线程情况会有什么安全问题），concurrenthashmap如何实现\n\n为什么会有什么可见性问题，volatile如何解决这种问题，为什么加了volatile就从主存读\n\ncas机制，什么场景下用cas（想问什么时候用乐观锁），写多读少的时候用乐观锁有什么问题\n\nsynchronized和reentrantlock的区别，性能区别，synchronized不做性能优化有什么问题，\n\n线程池解决了什么问题，有哪些参数及流程，拒绝策略有哪些\n\n## 数据库\n\ninnodb数据结构，b+树特点，为什么b+树搜索会更稳定\n\nmysql事务隔离级别，可重复读如何实现的\n\n索引失效场景，最左匹配原则的理解（给了个例子问走不走索引）\n\nredis分布式锁，分布式锁可能出现的问题，如何解决\n\n## 算法\n\n一道链表反转的题\n\n## 总结\n\n全程问了一个小时八股，问的很细，就是看到底理解没有。\n\n然后有些八股会结合场景来问，确实答不上来。\n\n总的来说，认识到自己基础确实不扎实，有时候看面经八股感觉自己能回答上来，就没有细想，但是真正答的时候又会卡。虽然被狠狠的拷打，但是也是提醒了八股不能全靠背，理解更重要！\n\n再见了团子~\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601150894482223104?sourceSSR=users",
        "title": "华为硬件工程师岗二面面经",
        "content": "前段时间面试了华为硬件工程师岗，感觉有一定难度，但可惜二面没通过。想了很久还是决定来分享一下我的面试经验：\n\n首先是要笔试，这个我通过了，考的都是比较专业性知识。\n\n然后一面技术面，问了一些简历上的项目，还问了一些FPGA的基本资源、项目中的难点以及解决方案。技术面感觉还不错，通过。\n\n二面主管面，问为什么选择我们，为这个面试做了哪些准备，兴趣爱好，以后想去哪。整体感觉面的不太好，当时以为主管面没有项目介绍了，但是还是要介绍项目，没有准备好所以紧张了，导致回答不流畅，最后果然挂了！\n\n经过这次面试，我真心觉得大家在准备面试的时候要准备充分，把可能问到的问题提前理清思路构思回答方向，这样才能流畅回答。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601151195515760640?sourceSSR=users",
        "title": "亚信科技笔试",
        "content": "公司：[亚信科技](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fcampus.51job.com%2Fasiainfo%2F)\n\n试卷：算法开发岗\n\n考试时长：45分钟\n\n总分：100分\n\n题型：单选题、多选题\n\nPython：11道题\n\nR语言：11道题\n\n机器学习：9道题\n\n深度学习：9道题\n\nPython：程序文件的扩展名、表达式、数据类型、注释、列表、字典、映射、列表生成式\n\nR语言：字符串、数据对象、数组、矩阵、plot函数、时间序列分析ts()函数、ctree、dbinom、runif、逻辑回归函数\n\n机器学习：众数、等频划分、等宽划分、属性类型、数据挖掘、最大最小规范化、随机森林、precision和recall\n\n深度学习：神经网络、Dropout、批规范化、多层感知机、卷积神经网络（CNN）、循环神经网络（RNN）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601148198610083840?sourceSSR=users",
        "title": "腾讯云智技术笔试",
        "content": "# 题型\n\n30道单项选择和2道编程。\n\n# 考题内容：\n\n## 单选\n\nlinux指令、操作系统分段分页区别、mysql指令、计算机网络、python,C++程序段选择输出内容\n\n具体的有http/2和http/3的的区别，kubernets的内建支持特性，rip协议的距离向量。\n\n## 编程\n\n第一道是写一个linux 的shell脚本。。。我太菜了对linux一点都不了解。。。根本没写，题也记不住[笑cry][牛泪][牛泪]\n\n第二道就写了一点点。。。。\n\nps:下周还要面试，我是一点准备都没有。操作系统和计算机网络都快忘完了。。。[切][切]一点希望都没有了\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601139620767641600?sourceSSR=users",
        "title": "春招-美团-产品运营-一面",
        "content": "3.25更新:已回到人才库，还真挂了，这下彻底不用纠结base北京的事情了。。。\n\n\\---------------手动分割线---------------------\n\n美团的时间线跟别的厂相比实在太慢了，3月中才发海笔，3月22日我才进一面。可能HR主要把时间和精力全部用在金三银四的全职招聘上，对春招的学生不是很友好吧。\n\n吐槽完还是得说业务面的水平真的很好，整体面了一个小时，有一点压力面的内容在里面，不算汗流浃背但也是出点汗的。\n\n  1. 自我介绍\n  2. 简历深挖。\n  3. 太细了，每一处都可能会一直挖下去，所以简历不能瞎写什么数字之类的，我瞎搞了一处差点没圆过来。。。\n  4. 以往团队如何合作的，遇到问题怎么解决，还有问问自我认知。\n  5. python和sql经验（JD上有写，我简历也提到了，这一步应该是顺着简历问下去，没有相关经验的宝宝也不要太紧张，工作内容好像不是涉及这些）\n  6. 有没有2B的经验（面试官做的就是2B的）\n  7. 以往项目/实习经验有什么让你觉得最有成就感的\n  8. 产品经理和产品运营差别\n  9. 做好产品运营最需要的特质\n  10. 介绍了一下他的业务和产品运营岗位在美团的职能\n  11. 反问（面试官好评，真的超级耐心，感觉这一段他给我介绍了二十分钟）：\n  12. 美团工作氛围和工作强度如何\n  13. 有什么技能是可以让职场菜鸟学习完就能明显提升的。\n  14. 美团的成长体系\n\n整体还是很考验整体思维能力的，只准备自己做过项目还是不太够，要做一些项目复盘和还有如何把做过东西能迁移到美团这样一个能力。\n\n整体情况感觉应该是过一面了，不过要是挂了也正常（我所有实习都是2C的，2B业务我确实没做过55555）。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601136956990365696?sourceSSR=users",
        "title": "吉利控股自动驾驶系统工程师岗面面经",
        "content": "我参加了吉利控股自动驾驶系统工程师的面试。我的面试初印象一般，面试体验一般，题目稍微有一定难度，我对自己能否获得这个职位没有太大信心。\n\n面试的流程是这样的：我参加了某211高校的招聘宣讲会，通过内部链接投递了简历。当天晚上，我收到了简历筛选通过的通知，并获得了面试邀请。面试参与的人数并不多。\n\n面试时，我面试的岗位是自动驾驶工程师。面试官并没有过多地问专业问题，而是要求我先进行自我介绍，然后选择一个项目进行讲解。我选择了我参与过的一个路径规划项目进行了详细的介绍。面试官表示他从事研发工作，似乎是在研发测试岗位。之后，他询问了我关于路径规划算法的评价以及相关指标。我进行了解释。\n\n接下来，面试官问了一些个人问题。最后，他给我提供了机会提问，并向我介绍了他所在的部门。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601133831730569216?sourceSSR=users",
        "title": "小米笔试 开发岗 低于90无入围可能？【代码参考】",
        "content": "\n    试题一参考：\n    小D是一名老师，他想选出一些同学床架一个团体比赛，总共有n个同学，每个同学有一个能力值x和一个合作制y，小D将这小同学拍成一排，选人规则如下：小D将选择一排中连续的K个同学参加比赛，而且为例保证成绩，者K个同学的能力值不能小于a，合作值不能小于b。小D想知道总共有多少种可能的选人方案。\n    输入描述\n    第一行四个正整数n，k，a，b\n    第二行n个通过空格隔开的正整数表示一排n个同学的能力值。\n    第三行n个通过空格隔开的正整数表示一排n个同学的合作值。\n    输出描述：\n    输出一个非负数表示选人的方案数\n    \n    #include <iostream>\n    #include <vector>\n    \n    using namespace std;\n    \n    int count_selections(int n, int k, int a, int b, vector<int>& abilities, vector<int>& cooperations) {\n        int count = 0;\n        for (int i = 0; i <= n - k; ++i) {\n            bool valid = true;\n            for (int j = i; j < i + k; ++j) {\n                if (abilities[j] < a || cooperations[j] < b) {\n                    valid = false;\n                    break;\n                }\n            }\n            if (valid) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    int main() {\n        int n, k, a, b;\n        cin >> n >> k >> a >> b;\n    \n        vector<int> abilities(n);\n        vector<int> cooperations(n);\n    \n        for (int i = 0; i < n; ++i) {\n            cin >> abilities[i];\n        }\n    \n        for (int i = 0; i < n; ++i) {\n            cin >> cooperations[i];\n        }\n    \n        int result = count_selections(n, k, a, b, abilities, cooperations);\n        cout << result << endl;\n    \n        return 0;\n    }\n    \n    \n    \n    \n    \n    试题二参考：\n    \n    \n    天帝被愚公的诚心感动，命令手下的仙人帮助移山。然而仙人的法术也是有局限性的，山势连绵起伏，法术并不能直接把山一走。每次施法，可以把一段连续区域的汕头一走相同的高度。现在愚公想知道什么时候会有至少一个山头高度小于等于0.给出一个长度为n的数组和m表示山头的高度和可以施法的次数，每次施法还会给出左右断点L,R和高度h，表示将al到ar减去h。问在那次操作时候会存在ai小于等于0\n    输入描述：\n    第一行两个数字n和m表示山头数量和施法次数\n    第二行n个数，分别表示山的高度\n    接下来m行，每行3个数字L,R,h表示依次具体的施法参数\n    输出描述：一个整数\n    \n    \n    #include <iostream>\n    #include <vector>\n    \n    using namespace std;\n    \n    bool has_negative_height(const vector<int>& heights) {\n        for (int height : heights) {\n            if (height <= 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    int main() {\n        int n, m;\n        cin >> n >> m;\n    \n        vector<int> heights(n);\n        for (int i = 0; i < n; ++i) {\n            cin >> heights[i];\n        }\n    \n        for (int i = 0; i < m; ++i) {\n            int L, R, h;\n            cin >> L >> R >> h;\n            for (int j = L - 1; j <= R - 1; ++j) {\n                heights[j] -= h;\n            }\n            if (has_negative_height(heights)) {\n                cout << i + 1 << endl; // 1-indexed\n                return 0;\n            }\n        }\n    \n        cout << -1 << endl; // No mountain head becomes less than or equal to 0\n        return 0;\n    }\n    \n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601132551834509312?sourceSSR=users",
        "title": "小鹏汽车汽车质量工程师岗三面面经",
        "content": "我参加了小鹏汽车汽车质量工程师的面试。我的面试初印象一般，整个面试过程并没有太大的难度，但最终收到通知表示通过了。\n\n面试流程分为三轮，分别是与主管、总监和HRBP的面试。\n\n因为我有朋友内推，而且我们都是同城的企业，所以基本上可以说是知根知底。在面试过程中，他们询问了我过往从事的工作内容，特别关注了我的重点项目经验等。通过对这些问题的回答，我成功通过了面试。\n\n总体来说，我的面试体验一般，整个过程并没有太大的难度。然而，我很高兴地得知自己通过了面试。无论如何，我都会继续努力学习和提升自己的汽车质量工程师技能，并期待能够在小鹏汽车这样的优秀企业中发展。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601132263505440768?sourceSSR=users",
        "title": "腾讯PCG 后端开发 golang暑期实习一面凉经40min",
        "content": "3.20号投递\n\n3.21测评\n\n3.22号就有面试\n\n1.自我介绍\n\n2.为什么要学golang\n\n3.有没有做过云原生相关的工作\n\n4.golang是值传递还是引用传递\n\n5.golang的深拷贝还是浅拷贝\n\n6.context对象作用 原理\n\n7.context 数据结构 （回答的内部数据结构 结果说的是存储结构 树状存储）\n\n8.说一下红黑树\n\n9.hash查找的时间复杂读\n\n10.go中协程的通讯\n\n11.go锁机制 读写锁 互斥锁\n\n12.延申到操作系统中的 锁机制 （没回答上来 应该是问的信号量PV操作这些吧）\n\n13.http 1.0 1.1 2.0 3.0\n\n14.https 与http区别\n\n15.问项目实现 想看代码 结果不在面试电脑上没看到\n\n16.项目中的并发情况处理\n\n17.代码题 很简单的 链表 操作\n\n18.有没有用过redis集群 没有。。。\n\n19.redis的5大类型\n\n20.redis zset底层数据结构 ziplist 字典 跳表\n\n21.项目中数据库表的设计\n\n就记得这些了\n\n反问 哪个事业群\n\ngolang后期发展方向\n\n面试官很好 感觉比较着重问 并发 与 分布式情况下的处理\n\n3.23号 已退回到测评阶段\n\n问的不难 但自己答的也一般 比较看重 基础能力与自己思考\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601131351902826496?sourceSSR=users",
        "title": "广汽乘用车电机工程师岗面面经",
        "content": "我的面试初印象非常好，感觉面试过程很亲切。面试题目的难度适中，我希望能够获得一个结果。\n面试流程分为几个步骤。首先，我通过邮件安排了面试，并需要选择预约时间。因为预约时间需要抢，所以如果没有抢到，只能等待下一轮的安排。我错过了两次的预约，第三轮才成功约上。约上之后，我被要求扫码加入面试群组。然后按照群组里老师的安排进行面试。面试时，有两位面试官，应该是一个人力资源老师和一个技术老师。面试内容包括自我介绍，时间限制在1-3分钟都可以。他们还问了为什么选择广州或广汽的原因。此外，他们询问了与我的简历相关的问题，例如我的实习经历、项目经验以及入职后适合的岗位等。他们强调这些问题并不是为了为难我，所以我可以放松回答。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601127913529847808?sourceSSR=users",
        "title": "先导智能电气设计工程师岗二面面经",
        "content": "我的面试初印象一般，面试体验平平。面试中的问题相对简单，但我希望能够获得一个好的结果。\n\n面试分为两轮，第一轮是综合面，由人力资源负责。HR主要询问了我的学校相关事宜，包括成绩和项目经验等。第二轮是专业面，由部门的工程师进行。他们问了一些与专业相关的简单问题，这些问题并没有太大难度。此外，我注意到他们对我的学校级别表示了一定的关注。\n\n综合来看，我的面试体验一般，问题相对简单。我希望能够获得一个好的结果。无论结果如何，我都会继续努力学习和提升自己的电气设计工程师技能，并寻找更适合我的机会。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601125912679079936?sourceSSR=users",
        "title": "360 服务端开发工程师-Golang 笔试记录附算法题解题",
        "content": "投递时间3.20\n\n3.23笔试\n\n题型 40选择题 2道代码题\n\n选择题 ：c++代码阅读 填空选择 数据库基础知识选择 计算机网络知识选择 操作系统知识选择\n\nC++代码完全看不懂基本上靠蒙\n\n代码题 1\n\n描述的很 复杂 简化来说给 定一个 长度为n的整型数组 中元素无序 且 有重复数字\n\n对元素可以进行的操作为 可以将任意两个元素x与y相加 再放入数组中代替 x或y\n\n最后返回 将数组中所有元素 都无重复情况的 元素操作次数\n\n基本思路 ：将元素排序后 遍历 将第一个重复的数字与最大值相加后再放入数组中 再排序 再遍历\n\n代码通过70% 不知道那种情况没处理好\n\n    \n    \n    package main\n    \n    import (\n    \t\"bufio\"\n    \t\"fmt\"\n    \t\"os\"\n    \t\"sort\"\n    \t\"strconv\"\n    \t\"strings\"\n    )\n    \n    func main() {\n    \tvar n int\n    \tfmt.Scanf(\"%d\\n\", &n)\n    \tarr := ReadLineNum()\n    \n    \tif chongfu(arr) {\n    \t\tfmt.Println(0)\n    \t\treturn\n    \t}\n    \n    \tcount := 0\n    \tsort.Ints(arr)\n    \n    \tfor !chongfu(arr) {\n    \t\tarr, count = zhonghe(arr, count)\n    \t}\n    \tfmt.Println(count)\n    \n    }\n    \n    // 判断一个arr有无重复元素\n    func chongfu(arr []int) bool {\n    \tfor i := 0; i < len(arr)-1; i++ {\n    \t\tif arr[i] != arr[i+1] {\n    \t\t\tcontinue\n    \t\t} else {\n    \t\t\treturn false\n    \t\t}\n    \t}\n    \treturn true\n    }\n    \n    // 将一个美食中和\n    func zhonghe(arr []int, count int) ([]int, int) {\n    \tmaxnum := arr[len(arr)-1]\n    \tfor i := 0; i < len(arr); i++ {\n    \t\tj := i + 1\n    \t\tif arr[i] == arr[j] {\n    \t\t\tarr[i] = maxnum + arr[i]\n    \t\t\tmaxnum = arr[i]\n    \t\t\tsort.Ints(arr)\n    \t\t\tcount++\n    \t\t\tbreak\n    \t\t}\n    \t}\n    \treturn arr, count\n    }\n    \n    // 读取一行带空格的数据\n    func ReadLineNum() []int {\n    \tread := bufio.NewReader(os.Stdin)\n    \ts, _ := read.ReadString('\\n')\n    \tsarr := strings.Fields(s)\n    \tarr := make([]int, 0)\n    \tfor _, s2 := range sarr {\n    \t\tv, _ := strconv.Atoi(s2)\n    \t\tarr = append(arr, v)\n    \t}\n    \treturn arr\n    \n    }\n    \n    \n\n代码题 2\n\n给定一组人的坐标 与 限定距离 人与人之间的 距离小于限定距离就会传染成高风险患者 被传染的人会 再次传染个身边小于限定距离的人\n求从任意一个人开始最多的传染人数\n\n解题思路 ：想到了要递归处理 但是时间不够了没写完 后面又花了大半个小时写好了 供大家参考\n\n    \n    \n    package main\n    \n    import (\n    \t\"bufio\"\n    \t\"fmt\"\n    \t\"math\"\n    \t\"os\"\n    \t\"strconv\"\n    \t\"strings\"\n    )\n    \n    type man struct {\n    \tx    int\n    \ty    int\n    \tflag bool  //true为已传染  \n    }\n    \n    // 两人间的距离\n    func length(man1 man, man2 man) int {\n    \tlengt := int(math.Abs(float64(man1.x-man2.x))) + int(math.Abs(float64(man1.y-man2.y)))\n    \treturn lengt\n    }\n    \n    // 传染过程  n为第n个人感染\n    func chuanran(n int, mans []man, k int) {\n    \tmans[n].flag = true\n    \tfor i := 0; i < len(mans); i++ {\n    \t\tif i == n {\n    \t\t\tcontinue\n    \t\t}\n    \t\tif length(mans[i], mans[n]) < k && mans[i].flag == false {\n    \t\t\tmans[i].flag = true\n    \t\t\tchuanran(i, mans, k)  //递归传染\n    \t\t}\n    \t}\n    \treturn\n    }\n    \n    func main() {\n    \tvar n, k int\n    \tfmt.Scanf(\"%d %d\\n\", &n, &k)\n    \txi := ReadLineNum()\n    \tyi := ReadLineNum()\n    \tpeoples := make([]man, 0)\n    \tfor i := 0; i < n; i++ {\n    \t\tpeople := man{\n    \t\t\tx:    xi[i],\n    \t\t\ty:    yi[i],\n    \t\t\tflag: false,\n    \t\t}\n    \t\tpeoples = append(peoples, people)\n    \t}\n    \n    \tmaxcount := 0\n      //\n    \tfor i := 0; i < len(peoples); i++ {\n    \t\tarr := make([]man, len(peoples))\n    \t\tcopy(arr, peoples)\n    \t\tchuanran(i, arr, k)\n    \t\tfor _, a := range arr {\n    \t\t\tfmt.Println(a)\n    \t\t}\n    \t\tcount := 0\n    \t\tfor _, m := range arr {\n    \t\t\tif m.flag == true {\n    \t\t\t\tcount++\n    \t\t\t}\n    \n    \t\t}\n    \t\tif count > maxcount {\n    \t\t\tmaxcount = count\n    \t\t}\n    \t\tfmt.Println(count)\n    \t}\n    \tfmt.Println(maxcount)\n    \t/*for _, people := range peoples {\n    \t\tfmt.Println(people)\n    \t}*/\n    }\n    \n    func ReadLineNum() []int {\n    \tread := bufio.NewReader(os.Stdin)\n    \ts, _ := read.ReadString('\\n')\n    \tsarr := strings.Fields(s)\n    \tarr := make([]int, 0)\n    \tfor _, s2 := range sarr {\n    \t\tv, _ := strconv.Atoi(s2)\n    \t\tarr = append(arr, v)\n    \t}\n    \treturn arr\n    \n    }\n    \n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601125775449829376?sourceSSR=users",
        "title": "长安汽车底盘工程师岗二面面经",
        "content": "我的面试初印象非常好，细节处理得很不错。然而，面试的难度较高。尽管如此，我成功通过了面试。\n\n面试分为两轮，技术面和专业面。\n\n一面是技术面，面试官会详细询问我在过去做过的课题。整个面试过程大约持续了15分钟。两天后，我收到通知进入二面。\n\n二面是综合面，主要考察我的各方面能力。面试官向我提出了一些问题，包括我之前遇到的最大困难，以及我感到最有成就感的事情。如果我有实习经历，他们会着重询问我在实习过程中的收获等。此外，他们还对我的专业能力进行了再次考察，甚至提出了几个专业问题。这一轮的面试持续了将近半个小时，我感觉从中获益良多。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601124316146610176?sourceSSR=users",
        "title": "中航商发热设计工程师岗面面经",
        "content": "我的面试初印象非常好，面试官态度良好，整个面试过程并没有太大的难度。然而，根据整体感觉，我可能没有通过面试。\n\n首先是一面的内容。面试安排在酒店的会议室，一共有3位技术面试官和1位人力资源面试官。面试开始时，我被要求用3分钟做自我介绍。接着，他们针对我的简历上的项目进行了询问。之后，他们询问我为什么想来他们公司，并询问我对两个基地的倾向。最后，我有机会提出反问问题，我提到了宿舍和薪资待遇等方面。\n\n总体而言，面试官的态度非常好，整个面试过程并没有太大的难度。然而，我个人感觉可能没有通过面试。尽管如此，我会继续努力学习和提升自己的热设计工程师技能，并寻找更适合我的机会。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601122948069552128?sourceSSR=users",
        "title": "ABB中国机械工程师岗面面经",
        "content": "我参加了ABB中国机械工程师的面试。我的面试初印象非常好，整体难度在中等水平，但最终我并没有通过面试。\n\n这次面试是针对厦门ABB机械设计实习岗位进行的。工作内容主要是使用CAD或SolidWorks等软件进行绘图。HR小姐姐非常温柔，态度也很好，整个面试过程相对顺利。大概问了一下我在本科和研究生期间所做过的项目，只需要简单介绍即可。然而，由于时间冲突的原因，我最终没有参加实习，这让我感到非常遗憾。\n\n虽然我没有通过面试并未有机会参加ABB的实习，但我会继续努力学习和提升自己的机械工程技能，并寻找更适合我的机会。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601121344389980160?sourceSSR=users",
        "title": "4399 C++后端笔试",
        "content": "笔试全a被刷\n\n编程题目三道第一道没印象很简单\n\n第二道是把数组分成k个子数组 求子数组中最大值的最小值 二分法\n\n大致方法是 从数组中最大值开始和数组sum区间内二分 每次check的逻辑就是如果滑动窗口值大于查找值 窗口数就++\n\n最后判断窗口数和k的大小\n\n第三题分组背包求路径 也算是模板题\n\n真难啊今年\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601121044828594176?sourceSSR=users",
        "title": "西门子机械工程师岗面面经",
        "content": "我的面试初印象一般，我个人感觉成功的机会较低。\n\n这次面试采用了AI面试的形式，面试的岗位是“初级制造工程师”。面试过程中，首先被问到期望的工作城市和薪资等问题，还有其他一些问题，具体的记忆有些模糊。总共大约有7个题目。接下来是AI面试环节，一共有8道题目。其中包括如何应对时间紧任务重的情况、如何通过学习提高专业知识、如何通过自学完成任务等。还有一道题涉及项目创新和优化的关键，需要分析相关经历并描述自己在过程中做了什么以及结果如何。另外还有关于团队决策和协作沟通的问题，以及从他人身上学到的能力和所得到的帮助的分享。最后一道题是用英文回答关于西门子求职动机的问题。\n\n综合而言，我个人感觉面试结果可能不太乐观。但我会继续努力学习和提升自己的机械工程技能，并寻找更适合我的机会。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601119868263391232?sourceSSR=users",
        "title": "思源电气机械结构工程师岗二面面经",
        "content": "我参加了思源电气机械结构工程师的面试。我的面试初印象非常好，细节处理得很不错，并且我成功通过了面试。\n\n首先是一面的内容。面试官问到了我的研究项目，并期望我对该项目非常熟悉。稍后，他们还略微问了一些工艺设计问题，比如热处理方法等。之后的面试过程就变成了一次聊天。\n\n接着是二面，这是一次纯粹的聊天环节，没有太大的难度。\n\n总体来说，面试过程中我对细节进行了良好的处理，这可能对我通过面试起到了积极的作用。我非常期待能够加入思源电气团队，并为公司的发展做出自己的贡献。我会继续努力学习和提升自己的机械结构设计能力。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601118728893308928?sourceSSR=users",
        "title": "比亚迪底盘工程师岗二面面经",
        "content": "我的面试初印象非常好，面试问题相对简单，并且我很高兴地收到了Offer。\n\n首先是一面电话面试，面试问题很简单。我进行了自我介绍，然后被问及学习成绩和最擅长的科目，以及为什么选择来比亚迪。面试官还介绍了岗位和工作内容，并询问我是否能够接受这些工作。有些具体问题的细节我记不太清楚了，总之整个过程非常简单。\n\n接着是二面现场面试，地点在学校的报告厅举行。一面通过后，二面主要问了一些项目经历和性格特点等常规问题。整个面试过程都比较标准。\n\n总体来说，我对比亚迪的面试体验感觉很简单。我有一种感觉，就是他们似乎更看重学历。目前我在985本硕阶段，这可能对我起到了保底作用。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601116668567318528?sourceSSR=users",
        "title": "衡阳镭目科技电气工程师岗面面经",
        "content": "我的面试初印象非常好，面试难度也不低，并且我很高兴地得知我通过了面试。\n\n我是在学校现场投递的简历，并当场与技术负责人进行了面试。整个面试过程让我感到不错。开始时，我进行了一个简单的自我介绍，然后面试官根据我的简历提出了问题，尤其关注了我的项目经历。他们更倾向于考虑那些参加过技能竞赛的学生，如果简历上有相关竞赛经历，他们会更加详细地询问比赛的细节。之后，我还接到了一次HR面试电话，期间被问及了期望薪资等问题。接着是一轮技术面试，面试官介绍了工作环境，并提到会去钢厂出差。虽然研发岗位可能较少，但仍然会有出差的机会。HR面试和技术面试全部通过后，还需要进行一次测试，测试通过后才能确定薪资待遇。总体来说，整个面试过程给我留下了良好的印象。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601114941692669952?sourceSSR=users",
        "title": "极米科技机械结构工程师岗面面经",
        "content": "我参加了极米科技机械结构工程师的校园招聘面试。整个面试过程可以说非常高效。\n\n我在3月27日进行了笔试，3月31日进行了初面，4月6日进行了终面，最后在4月19日收到了Offer。这样的时间安排显示出了面试效率较高的特点。整体来说，面试的难度较低，与其他公司相比差别不大。笔试部分主要考察了一些常规的专业知识，而技术面试则简单地询问了我的项目情况以及两个关于公差的问题。面试时间也没有很长。我有一种感觉，就是他们现在可能比较缺人。终面的难度和流程都比较像国企，这也可能是因为他们对学历更加看重。总的来说，我对极米科技的面试体验还算满意。希望能够顺利加入他们的团队，并为公司的发展做出自己的贡献。我会继续努力学习和提升自己的机械结构设计能力。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601109303197507584?sourceSSR=users",
        "title": "三一重工电气设计工程师岗二面面经",
        "content": "我参加了三一重工电气设计工程师的面试。三一重工是一家知名的工程机械制造公司。总体来说，我的面试体验还可以，面试难度一般，但我非常期待能够得到一个好的结果。\n在一面面试中，我进行了自我介绍，并围绕我的项目经历回答了相关问题。面试官主要针对我的项目进行了提问，询问了项目中遇到的困难以及我是如何解决的。\n在二面面试中，我记录了此轮面试的问题或者表达了自己的感受。由于没有具体提到二面的内容，因此暂时无法给出详细描述。\n希望能够尽快收到面试结果，并期待能够进入下一轮面试阶段。同时，我会继续努力准备，并不断完善自己的电气设计技能。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601107153830617088?sourceSSR=users",
        "title": "中联重科机电工程师岗面面经",
        "content": "我参加了中联重科机电工程师的面试。整体来说，我的面试体验很好，面试官问了一些常规的问题。我希望能够尽快收到他们的面试结果。\n\n在面试过程中，主要围绕我的简历上的信息展开了提问。然而，我意识到我的岗位匹配程度可能不够高。因此，我询问了公司对无经验新人的培养方面。面试官表示他们会提供充分的学习机会，这让我感到非常欣慰。\n\n然而，考虑到转业的问题，我还在犹豫不决。这也是我在面试中提出的一个问题，希望能够得到面试官的指导和建议。\n\n希望能够尽快得到面试结果，同时我也会继续思考和权衡自己的职业发展选择。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601107063107792896?sourceSSR=users",
        "title": "上海人工智能实验室 校招 面经",
        "content": "8.4开\n\n8.14投 全栈AI开发工程师\n\n9.13 一面\n\n50min\n\n  * 本科gpa 排名\n  * 有接触游戏引擎吗，如unity，有接触图形学吗\n  * 对地理系统有什么认识，如气象台风之类的\n  * 本科进过实验室吗\n  * 个人优势\n  * 兴趣爱好，周末怎么度过\n  * 能接受加班吗，实习时候几点上下班（面试官：你们是对内部门吧 估计看出不是特别卷）\n  * 城市怎么考虑\n  * 手撕：序列化二叉树\n  * offer情况\n\n反问\n\n  * 我是做算法的，我们的核心是一个大的算法团队\n  * 清北复交研究生排序较高，本科生项目经历比较少，从课程项目很难看出能力，不过你有企业级实习还好（高情商）\n  * 建议：想做ai的话要有一个ai全栈的项目\n\n挂了 估计不匹配\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601102951217721344?sourceSSR=users",
        "title": "鼎晶科技机械工程师岗面试为两轮，整体难度中等",
        "content": "整体而言，鼎晶科技的机械工程师岗位面试分为两轮，难度中等。\n一面：我选择了校招的方式前往鼎晶科技参加面试。公司位于嘉兴学院附近，环境优美，拥有独栋的科技园区。在一组由6到7个人组成的群面中，首先与人力资源部门进行了谈话，随后与几位部门领导进行了交流。主要目的是了解我的专业知识掌握程度、目标岗位、成绩以及优势等情况。\n二面：在完成一面后等待了一段时间，当所有人都完成了一面之后，人力资源部通知进入二面的人留下。二面在经理的办公室进行，与经理进行群面交流。主要目的是了解我的性格特点和处事思路等方面。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601101500965761024?sourceSSR=users",
        "title": "钉钉笔试第三题",
        "content": "\n    import java.util.*;\n    \n    public class DingDing_3 {\n        public static void main(String[] strs) {\n            //钉钉3.23第三题\n            //一棵n个节点的树，起始所有节点都是B黑色。根节点为1\n            //将一些节点染为R红色，要求任意一棵子树中R红色节点的总数不是3的倍数（0也是三的倍数）\n            //输入任意一种染色方案\n    \n    \n            //想一下怎么做？\n            //每个节点都可以选择染为红色还是黑色，那么如果dfs搜索的话，\n            //如果一个节点的所有子树都满足，但是到这个节点这里就不满足了，那么只需要将这个节点的颜色翻转。\n            //那么从下往上，就这样依次变化呗\n            Scanner in = new Scanner(System.in);\n            int n = in.nextInt();\n            Map<Integer, List<Integer>> mp = new HashMap<>();\n            for (int i = 1; i <= n; i++) {\n                mp.put(i, new ArrayList<>());\n            }\n            boolean[] red = new boolean[n + 1];\n            for (int i = 1; i <= n - 1; i++) {\n                int u = in.nextInt();\n                int v = in.nextInt();\n                List<Integer> list1 = mp.get(u);\n                List<Integer> list2 = mp.get(v);\n                list1.add(v);\n                list2.add(u);\n                mp.put(u, list1);\n                mp.put(v, list2);\n            }\n            help0(1, mp);\n            help1(1, mp, red);\n            for (int i = 1; i <= n; i++) {\n                if (red[i]) {\n                    System.out.print(\"R\");\n                } else {\n                    System.out.print(\"W\");\n                }\n            }\n        }\n    \n    \n    \n    \n        public static void help0(int index, Map<Integer, List<Integer>> mp) { //从根节点向下遍历，去除子节点指向父节点的边\n            List<Integer> children = mp.get(index);\n            for (Integer child : children) {\n                List<Integer> tmp = mp.get(child);\n                tmp.remove(Integer.valueOf(index)); //树，单向，去掉子节点指向父节点的边\n                help0(child, mp);\n            }\n        }\n    \n    \n    \n    \n        // dfs搜索就行, 起始所有节点为黑色\n        // 就是对于某一节点的一棵树，其子树都满足了，获取所有子树的红色节点之和count，如果count % 3 != 0,那么当前节点颜色不用变化\n        // 否则就将其染为黑色\n        public static int help1(int index, Map<Integer, List<Integer>> mp, boolean[] red) {\n            List<Integer> children = mp.get(index);\n            int count = 0;\n            for (Integer child : children) {\n                count += help1(child, mp, red);\n            }\n            if (count % 3 == 0) {\n                red[index] = true; //起始都是黑色，如果不满足的话染成红色\n                count += 1;\n            }\n            return count;\n    \n    \n        }\n    \n    \n    }\n    \n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601077986648989696?sourceSSR=users",
        "title": "3.23 钉钉笔试 好难哇",
        "content": "好难啊我靠，来个大佬给大家伙讲解一下吧\n\n0.2； 0.28； 0\n\n第一题感觉要dp但是没想明白，随便写了个贪心\n\n第二题感觉是找位运算的规律，没想明白就猜了个异或和之后的结果每一位都为1，则返回yes\n\n第三题没看懂\n\n呜呜呜呜好菜好菜\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601067640425115648?sourceSSR=users",
        "title": "广州嘉为科技java后台面试（已oc）",
        "content": "### 前言\n\n我就喜欢这种响应及时迅速的hr，面完十分钟之后说面试通过了，oc，孩子的第一个oc啊TAT\n\n那个腾讯云1小时45分钟的面试还挂了真的让我太难过了，真·鹅子**粉****转黑**\n\n跟这个公司约面经历也挺神奇的\n\n我3.12就跟hr发起对话了结果已读不回XD\n\n然后20号再去骚扰就找我要简历\n\n21号跟我约面22号下午\n\n【总结：BOSS上没跟你说你简历不行就**反复骚扰！别怕HR嫌你烦，人家每天收到成百上千条消息，不醒目点真看不到** 】\n\n中厂和大厂面的问题差别又好大，大厂就问408底层特别多，然后中厂（嘉为算中厂吗？求牛友们解答）问框架方面的很多，真的分身乏术[懵]\n\n孩子先接着这个offer去实习了，主要是他真的很近（就在石牌桥），还跟我方向对口（java后台开发[牛泪]）\n\n问了一下：他们公司主要业务是做devops的运维平台开发的，类似于腾讯蓝鲸的那种，请教下各位牛友有在这个公司上过班么，感觉咋样\n\n![](https://uploadfiles.nowcoder.com/images/20240323/665508540_1711174835212/B74E71DFBACCB3D5425825AC83BD5CF4)![](https://uploadfiles.nowcoder.com/images/20240323/665508540_1711175350956/884E0E13C1DBFFD46049752515E27FCB)\n\n### 面经\n\n这次没录音，只能凭印象回忆了，也问了半个小时，说老实话，确实被问倒了，也不知道为啥就过了[笑cry]\n\n  * 自我介绍\n  * 介绍项目背景以及相关\n  * 开始拷打Spring八股\n  * 你介绍下Spring里面IOC和AOP是啥？\n  * AOP底层实现是啥？\n  * AOP怎么选择什么时候用JDK的动态代理，什么时候用Cglib的动态代理\n  * 介绍一下SpringMVC的一个底层原理？（DispatcherServlet那些）\n  * 如何确认传到前端的数据是啥类型的？（json, 还是text那些）\n  * 给你一个情景，我现在要从前端传输10G的大文件，你要怎么传输？（一开始说了HTTP的分片和断点传输，不自信，后来说了使用类似FTP这种来传输数据，面试官就说不可能给你还能弄台服务器来搞）\n  * 介绍一下bean的生命周期？（凭自己最后的一点印象说了个大概）\n  * 你能给我举一个你在项目中利用bean生命周期做的一些案例吗（举了一个业务的例子我需要curl一个锁密码的请求，那我需要在bean初始化的时候先把token获取到才能获取到锁密码）\n  * 你刚刚说到bean是单例的，那bean一定能确保线程安全吗？（不一定能，正常来说像类似于Controller和Service层这些bean就能保证线程安全，因为他们的类不携带状态；而比如像用户登录身份信息状态，如果在多线程的情况下，吗，每登录一个账号状态就会被更改，进而我们为什么使用ThreadLocal来维护身份信息）\n  * 你说你比较熟悉Springboot，能给我介绍一下Springboot的自动配置的底层原理吗？（这个我真的没看到了，直接说不知道了）\n  * 【追问】Springboot里面是有一个启动类的，SpringbootApplication这个注解的底层你了解吗？以及在依赖库中，springboot-starter这个依赖包是怎么弄的你了解吗？（哭，这一块真妹看到[牛泪]）\n  * java相关\n  * 你能给我介绍一下java的集合吗？（只记得个关于List的基类都是源于Collection了，还胡扯掰扯说Map也是这个类的子类，被面试官问了才发现不太对）\n  * 如果有两个方法，方法签名一样，然后参数是List的不同泛型，那请问他是方法重载吗？（忘了有**泛型擦除** 这个概念了，面试官还提醒我了，说你了解泛型擦除吗？结果我又不知道了）\n  * **泛型擦除：** Java的泛型信息只在编译期有效，在运行时会进行类型擦除，这意味着泛型参数会被擦除到它们的边界，比如List<String>和List<Integer>，在编译后会被擦除到类型为List\n  * 你一般是怎么学习一个新事物的？（用中学，用中遇到问题慢慢掌握，再接着开始去研究一些底层的去研究为什么这么用）\n  * 反问\n  * 面评：会用，但是底层不熟练（XD，确实）\n\n### 总结\n\n真的很高兴，虽然我觉得面试表现真的一般都是真的给我过了[牛泪]从开学第一周就开始在BOSS上投简历，投了差不多200家，只有30家能发简历过去，能面试的就更少了。一次又一次被打击，一次又一次陷入自我怀疑，是不是自己不适合java后台岗啊，真的很感谢我的身边的朋友，在我难受的时候能够给我及时的鼓励，我这心态真的太容易崩了。[牛泪]这还仅仅是个开始，还远不是终点，加油~！[打call]\n\n![](https://uploadfiles.nowcoder.com/images/20240323/665508540_1711177341518/A94C9DEE30732B859151C1836CB6A72B)\n\n### 后记\n\n永远都会记住这一夜的对话，希望正在求职的小伙伴一定要坚定自己！尽管这一路坎坷\n\n![](https://uploadfiles.nowcoder.com/images/20240323/665508540_1711177658563/821E0C7346B361956123F9E35E8EA40B)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601050530529505280?sourceSSR=users",
        "title": "杭州某医疗公司  Java 面经",
        "content": "# 杭州某医疗公司 Java 面经\n\n1）\n\n面试官：我看你项目用到了 AI，是自己做过大模型这块吗？\n\n我：没有没有，主要是调用讯飞星火和阿里百炼的一个模型。\n\n2）\n\n面试官：我看你用 Dubbo 讲一下为什么要用？\n\n我：从耦合度、效率上面去讲，网关需要调用某个业务层方法，可以直接 pom 文件、可以 Http 请求（OpenFeign），RPC （较为高效、而且\nDubbo 支持多种协议，可以灵活应对消费者和提供者的变化。）\n\n3）\n\n面试官：序列化 Id 有什么用？\n\n我：实现序列化接口可以网络传输，序列化 ID 是用来区分同个类，但是可能成员数量发生了变化，序列化 ID 可以相当于版本号机制。\n\n4）\n\n面试官：跨域怎么产生的？\n\n我：经典问题，同源策略，协议，IP，端口号三者有一个不同就会发生跨域，解决方案：Jsoup，Cors,Nginx\n反向代理，因为服务器和服务器是不会发生跨域的，浏览器才会有问题。\n\n5）\n\n面试官：差不多就这样\n\n我：？？？结束了？不多问几个问题吗？内心OS：面经太短了，不好使啊\n\n6）\n\n我：反问了技术栈，然后是业务方面，工作时间，是否加班（主动提出.jpg）等问题。\n\n建议双非的 xdm\n海投就完事了，给你们说下重点，某软件上在线简历必须好好填写，不然他看到你学校后就划走了...，招呼语一定要突出你的亮点（没亮点，包装也要给我包装出来），招呼语、在线简历、附件简历（准备多份，可以应对不同岗位、不同公司、专门定制），92\n投小公司纯纯刷 KPI 的，他们不会跟你竞争，HR 说的也只是有人面试，92 每天待遇低于 200都是侮辱价了，甚至是低于\n300，完善后去进行有效沟通（找专业对口的，符合职位要求的，人家说只要 92 你就别投了，没必要，很多 92 优先的，基本只要\n92，这种可以后期去投，前期基本是无效沟通）。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601045807923507200?sourceSSR=users",
        "title": "淘天一面（寄）",
        "content": "1.自我介绍\n\n2.介绍项目 ，难点\n\n3.问项目\n\nRPC框架\n\n一致性哈希，\n\n容错层实现，故障转移，重试策略\n\n你自定义实现的spi为什么比java的好，怎么做的\n\n短链接项目：\n\n布隆过滤器，\n\n通过布隆过滤器完成判断短链接是否已存在，性能远胜分布式锁搭配查询数据库方案;\n\n问这个是哪里用到了分布式锁？没说清楚\n\n说一下幂等性，你用redis怎么实现的？\n\n能不能换一个方式？\n\n  1. 算法1，2，3，4，3，2，1\n\n一个先递增后递减的数组找最大值\n\n二分\n\n改条件了\n\n1，2，3，3，4，4，4，3，2，1\n\n这种怎么实现？\n\n5.八股\n\nhashmap\n\njava是值传递还是引用传递\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601033593447571456?sourceSSR=users",
        "title": "腾讯云智 一面（挂）攒个人品",
        "content": "1.自我介绍：准备的一般\n\n2.实习经历问题\n\n3.介绍项目及其功能，都是一个人完成的吗？\n\n4.项目后端实现功能，后台架构是什么样子的，微服务中包含哪些服务，服务是如何划分的\n\n5.端口使用协议：HTTP\n\n6.HTTP协议的报文内容结构\n\n7.HTTP协议的方法，及具体功能\n\n8.HTTP协议基于传输层的协议是什么\n\n9.TCP三次握手，四次挥手\n\n10.HTTPS\n\n11.Redis可以存放的数据类型，持久化方式及其区别，\n\n12.Redis缓存雪崩\n\n13.RabbitMQ的exchange，类型\n\n14.哈希表底层实现的数据结构\n\n15.哈希冲突，解决方式\n\n16.Mysql数据库的存储引擎\n\n17.主键索引和一般索引的区别，哪个更快，为什么\n\n18.Mysql隔离级别\n\n19.想看一个语句执行时间，看有没有索引，分析语句有没有使用索引，使用什么样的索引\n\n20.索引的优点\n\n21.建立索引语句\n\n22.删除一个数据库，删除一个表\n\n23.Java string，stringBuffer，stringBuilder，为什么buffer安全\n\n24.Java垃圾回收算法，垃圾回收在哪，堆和栈分别是什么\n\n25.进程和线程的区别\n\n26.进程间通信方式\n\n27.C++三大特性，多态具体，如何实现，动态的查找\n\n28.虚函数，如何实现虚函数\n\n29.New关键字的用法，new跟malogc区别\n\n30.C++程序如何实现到二进制文件\n\n31.动态库和静态库的区别\n\n32.瀑布开发模型\n\n33.软件测试的各种测试方法\n\n34.黑盒测试和白盒测试\n\n35.Socket程序：完全没接触过\n\n36.前端：mvvm架构解释，和mvc的差别\n\n37.Linux查看进程id ：ps，查一个：\n\n37.杀掉一个进程，-9是什么\n\n38.建立了多少个Tcp链接\n\n39.查看目录磁盘空间：du\n\n40.挂载硬盘：\n\n41.文件系统结构\n\n42.文件设为只读，chmod 444 是什么，r--r--r--是什么意思\n\n43.删除文件，删除目录，f是什么意思，r是什么意思\n\n44.查看GPU负载，查看每个系统CPU，查看系统剩余内存，统计文件有多少行\n\n45.编程：三层二叉树层序遍历；\n\n总结：有点紧张，说话比较结巴，说话有点口语化。八股和基本操作回答的可以（但是不算熟练）但是往深问底层大部分不太了解\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601031622695116800?sourceSSR=users",
        "title": "多益网络(二面 游戏工具链开发工程师)",
        "content": "整体感觉面试和想象中的一样 主要是第一次比较正规的面试\n\n面试的主要内容就是根据我的简历来问的 虽然dy网上评价不是很好 但是面试整体没啥大问题\n\n主要是第一次真的比较紧张 说话吞吞吐吐含糊不清\n\n(PS：面试官长得有点像红衣教主)\n\n# 一.自我介绍\n\n建议真的需要准备一下 我这个就是一下子不会讲了 感觉这个特别影响第一印象\n\n# 二.八股问题（问题+自写答案）\n\n  * 结构体和类有什么区别？\n\n（1）class和struct\n本身成员的默认访问级别不同，是最本质的特点（这块我之前有知道，但是具体的不同忘记了，就谈了pubilc、protect、private）。**结构体的成员和成员函数在默认情况下的访问级别是公有的（public），类的成员和成员函数在默认情况下的访问级别是私有的（private）。**\n\n（2）两者在赋值上存在不同\n\n    \n    \n    struct A{char c1; int n2; float db3;};A a = {'a',1,3.14};\n    \n\n**这样可以直接给结构体赋值，没有任何错误，但是并不可以给类赋值。**\n我们平时使用{}来对结构赋值，是一个初始化列表形式进行初始化，这样简单的初始化只能用在简单的数据结构上，如果加上构造函数，那么struct会表现出一种对象的特性，因此再使用这种方式赋值就会失效。也就是说当我们在一个结构中加入构造函数后，结构体的内部结构会发生变化；但加入一个普通函数，结构体内部结构依旧不变；因此可以理解为普通函数是一种对数据结构的算法，并不会打破原本数据的特性。\n\n  * 智能指针和野指针（这块是模糊的）\n\n（1）智能指针：在构造的时候**分配内存** ，当离开作用域的时候，自动**释放分配的内存**\n，这样的话开发人员就可以从手动动态管理内存的繁杂内容中解放出来。（重点注意！！）\n\n（2）野指针：指向非法的[内存](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fso.csdn.net%2Fso%2Fsearch%3Fq%3D%25E5%2586%2585%25E5%25AD%2598%26spm%3D1001.2101.3001.7020)地址指针叫作野指针（Wild\nPointer），也叫悬挂指针（Dangling Pointer），意为无法正常使用的指针。\n\n**野指针产生的原因：**\n\na. 指针变量未初始化或者随便赋值：指针变量没有初始化，其值是随机的，也就是指针变量指向的是不确定的内存，如果对它解除引用，结果是不可知的。\n\nb. 指针释放后未置空：有时候指针在释放后没有复制为\nnullptr，虽然指针变量指向的内存被释放掉了，但是指针变量中的值还在，这时指针变量就是指向一个未知的内存，如果对它解除引用，结果是不可知的。\n\nc. 指针操作超出了变量的作用域：函数中返回了局部变量的地址或者引用，因为局部变量出了作用域就释放了，这时候返回的地址指向的内存也是未知的。\n\n**如何避免野指针：**\n\na. 指针变量一定要初始化，可以初始化为 nullptr，因为 nullptr 明确表示空指针，对 nullptr 操作也不会有问题。\n\nb. 释放后置为 nullptr。\n\n  * C++11、C++14、C++17、C++20 都有什么特性（随便答了几个特性）\n\n**C++11** ：（1）引入了 auto 关键字和 decltype 关键字，用于自动推导变量类型；（2）引入了 lambda\n表达式，用于定义匿名函数；（3）引入了智能指针，例如 shared_ptr 和\nunique_ptr，用于自动管理内存；（4）引入了可变参数模板，允许模板参数数量可变；（5）引入了右值引用和移动语义，用于提高代码效率。\n**C++14：** （1）改进了泛型编程，引入了泛型 lambda 表达式；（2）引入了二进制字面量和通用的 lambda 捕获初始化； （3）改进了\nconstexpr 函数，允许函数内包含控制流语句。 **C++17：** （1）引入了 if constexpr\n语句，允许在编译期间进行条件判断；（2）引入了折叠表达式，简化了变长参数模板的实现；（3）改进了模板参数推导规则，支持类模板参数推导。 **C++20：**\n（1）引入了概念（Concepts），用于限定模板参数的类型；（2）引入了协程（Coroutines），用于实现异步编程；（3）引入了三向比较运算符（Three-\nway Comparison），用于简化比较操作；（4）引入了格式化输出库（std::format），用于格式化输出字符串。\n\n  * 谈谈对C++多态的了解已经虚函数（多态这块就记得多态有两个一个静态多态，一个动态多态）\n\n（1）静态的多态：**函数重载,看起来调用同一个函数却有不同的行为。静态：原理是编译时实现。**\n\n（2）动态的多态：**一个父类的引用或指针去调用同一个函数，传递不同的对象，会调用不同的函数。动态：原理是运行时实现。**\n\n（3）虚函数：**即被virtual修饰的类成员函数称为虚函数。**\n一旦定义了虚函数，该基类的派生类中同名函数也自动成为了虚函数。也就是说在派生类中有一个和基类同名的函数，只要基类加了virtual修饰，派生类不加virtual修饰也是虚函数。\n虚函数只能是类中的一个成员函数，不能是静态成员或普通函数。\n\n  * C++设计模式（这么直接没准备 后面狠狠的补一下）\n  * STL中各种容器的实现原理，简单解释一下\n  * vector中扩容机制的理解\n\n当 vector 的大小和容量相等也就是满载时，如果再向其添加元素，那么 vector 就需要扩容。\n\nvector 容器扩容的过程需要经历以下 3 步： （1） 完全弃用现有的内存空间，重新申请更大的内存空间；\n（2）将旧内存空间中的数据，按原有顺序移动到新的内存空间中； （3） 最后将旧的内存空间释放。\n\n因为vector扩容需要申请重新申请新的空间，但是扩容以后它的内存地址会发生变化，这样进行扩容是非常耗时的，为了降低时间车成本，每次扩容时候都会申请比用户需求更多的内存空间，以便后期使用。\n\n  * 如何判断链表中是否有环\n\n可以利用快慢指针来实现，让慢指针每次向下移动一个节点，让快指针每次向下移动两个节点，如果快慢指针可以重合表示在链表中有环，否则则表示无环。\n\n  * 面向对象语言的特征（心里知道 但是表达的逻辑很混乱）\n\n面向对象的三大特征：**封装、继承、多态**\n\n（1）封装：将数据以及对数据的操作保护起来，隐藏其操作过程，只对外呈现操作的接口，由public，protect，privare三个级别，很好的保证了代码的安全性\n\n（2）继承：一个B类继承A类，B类中含有A类的一些属性，这表现了共性，B类中还可以添加一些属于自己的属性，这体现了个性，继承可以很好的实现代码的复用和拓展性，同时继承也是多态的前提\n\n（3）多态：多态是指基类的指针或引用，在运行时动态的调用实际绑定对象函数的行为。基类指针绑定基类对象就调用基类方法，基类指针绑定派生类对象就调用派生类方法，多态提高了代码的可读性和组织性。\n\n# 三.手写算法题\n\n很简单的找子集的问题\n\n题目链接：[**************************************************](**************************************************)\n\n    \n    \n    /*\n    我第一反应是可以利用递归进行解决 但是后面去看了一下迭代法实现子集枚举更简单\n    */\n    class Solution {\n    public:\n        vector<int>t;\n        vector<vector<int>>ans;\n        void dfs(int cur,vector<int>&nums){\n            if(cur==nums.size()){\n                ans.push_back(t);\n                return ;\n            }\n            t.push_back(nums[cur]);\n            dfs(cur+1,nums);\n            t.pop_back();\n            dfs(cur+1,nums);\n        }\n        vector<vector<int>> subsets(vector<int>& nums) {\n            dfs(0,nums);\n            return ans;\n        }\n    };\n    \n\n# 四.薪资待遇和对加班的看法\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601029326057824256?sourceSSR=users",
        "title": "美团春招笔试-3",
        "content": "  * A 枚举左上角点 判断右下角是否越界 和=2即可\n\n    \n    \n    #include <bits/stdc++.h>\n    using namespace std;\n    const int N = 110;\n    char a[N][N];\n    int n, m;\n    int main()\n    {\n        cin >> n >> m;\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= m; j++)\n                cin >> a[i][j];\n        }\n        int ans = 0;\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= m; j++)\n            {\n                if (i + 1 <= n && j + 1 <= m)\n                {\n                    int res = (a[i][j] - '0') + (a[i + 1][j] - '0') + (a[i][j + 1] - '0') + (a[i + 1][j + 1] - '0');\n                    if (res == 2)\n                        ans++;\n                }\n            }\n        }\n        cout << ans;\n    }\n    \n\n  * B 没有偶数回文串 本质上是不存在两个相邻字符一样 找出所有连续相同字符数量-1 求和即可\n\n    \n    \n    #include <bits/stdc++.h>\n    using namespace std;\n    const int N = 110;\n    char a[N][N];\n    int n, m;\n    int main()\n    {\n        cin >> n;\n        string s;\n        cin >> s;\n        int ans = 0;\n        for (int i = 0, j = 0; i < s.size(); i++)\n        {\n            while (j + 1 < s.size() && s[j + 1] == s[i])\n                j++;\n            ans += (j - i);\n            i = j;\n        }\n        cout << ans;\n    }\n    \n\n  * C 位置为W一定不能交换 先判断该位置是否i=ai 否直接-1 交换下标 将i与目标位置ai连边 最后会形成环 比如样例2要和3交换连边 2-3-2这个环 交换次数为环的大小-1 最后有多个环 将环的所有贡献相加即可 找环的大小可以dfs 也可以并查集维护\n\n    \n    \n    #include <bits/stdc++.h>\n    using namespace std;\n    const int N = 1e5 + 10;\n    int a[N], st[N];\n    vector<int> g[N];\n    int ans;\n    void dfs(int x, int s, int cnt)\n    {\n        if (st[x])\n        {\n            if (x == s)\n            {\n                ans += cnt - 1;\n            }\n            return;\n        }\n        st[x] = 1;\n        for (auto v : g[x])\n            dfs(v, s, cnt + 1);\n    }\n    int main()\n    {\n        int n;\n        cin >> n;\n        for (int i = 1; i <= n; i++)\n            cin >> a[i];\n        string s;\n        cin >> s;\n        s = ' ' + s;\n        for (int i = 1; i < s.size(); i++)\n        {\n            if (s[i] == 'R')\n            {\n                g[i].push_back(a[i]);\n            }\n            else\n            {\n                if (i != a[i])\n                {\n                    cout << -1;\n                    return 0;\n                }\n            }\n        }\n        for (int i = 1; i <= n; i++)\n        {\n            if (!st[i] && s[i] == 'R')\n            {\n                dfs(i, i, 0);\n            }\n        }\n    \n        cout << ans << endl;\n    }\n    \n\n  * D 首先将每个字母和数量取出来 从左往右双指针贪心 sum为当前长度 cnt为当前字符个数 若sum*cnt<k 则继续往前走，直到找到一个下标j 满足i-j中的字符串长度*种类数>=k 在j中二分取出最小字符数量满足 再往右贪心即可 不知道哪些细节写错了。。。\n\n    \n    \n    #include <bits/stdc++.h>\n    using namespace std;\n    const int N = 1e6 + 10;\n    #define int long long\n    int a[N], s[N];\n    char c[N];\n    int n, k, ans;\n    bool check(int idx, int sum, unordered_map<char, int> mp)\n    {\n        int val = sum + a[idx];\n        mp[c[idx]]++;\n        int x = mp.size();\n        if (--mp[idx] == 0)\n            mp.erase(idx);\n        // cout << idx << \" \" << x << \" \" << val << \" \" << k << endl;\n        if (__int128(x * val) < __int128(k))\n            return 1;\n        return 0;\n    }\n    signed main()\n    {\n        ios::sync_with_stdio(0);\n        cin.tie(0);\n    \n        cin >> n >> k;\n        string s;\n        cin >> s;\n        int cc = 0, ca = 0, ss = 0;\n        unordered_map<char, int> mp, tmp;\n        for (int i = 0; i < s.size(); i++)\n        {\n            if (s[i] >= 'a' && s[i] <= 'z')\n            {\n                c[++cc] = s[i];\n                tmp[s[i]] = 1;\n            }\n            if (s[i] >= '0' && s[i] <= '9')\n            {\n                int tmp = s[i] - '0';\n                int j = i;\n                while (j + 1 < s.size() && s[j + 1] >= '0' && s[j + 1] <= '9')\n                {\n                    tmp = tmp * 10 + (s[j + 1] - '0');\n                    j++;\n                }\n                a[++ca] = tmp;\n                ss += tmp;\n                i = j;\n            }\n        }\n        if (ss * tmp.size() < k)\n        {\n            cout << -1;\n            return 0;\n        }\n        int sum = 0;\n        for (int i = 1; i <= cc; i++)\n        {\n            if (a[i] >= k)\n            {\n                int res = a[i] / k;\n                ans += res;\n                a[i] -= res * k;\n            }\n            if (a[i] == 0)\n                continue;\n            mp.clear();\n            int j = i, sum = a[i];\n            mp[a[i]] = 1;\n            while (j + 1 <= cc && check(j + 1, sum, mp))\n            {\n                sum += a[j + 1];\n                mp[c[j + 1]]++;\n                j++;\n            }\n            cout << i << \" \" << j << \" \" << sum << \" \" << mp.size() << endl;\n            if (j + 1 <= cc)\n            {\n                int l = 1, r = a[j + 1];\n                int cnt = mp.count(c[j + 1]) ? mp.size() : mp.size() + 1;\n                while (l < r)\n                {\n                    int mid = l + r >> 1;\n                    if (__int128(mid + sum) * __int128(cnt) >= __int128(k))\n                        r = mid;\n                    else\n                        l = mid + 1;\n                }\n                a[j + 1] -= l;\n                ans++;\n            }\n            i = j;\n        }\n    \n        cout << ans;\n    }\n    \n\n  * E 先找出s和t的lca 维护路径上的边数量减掉首尾 乘积取逆元 待补..\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601028048850329600?sourceSSR=users",
        "title": "腾讯PC客户端开发一面凉经",
        "content": "首先很感谢给我这个双非鼠鼠一次面试的机会[牛泪]（第一次面试）\n\n1、自我介绍\n\n2、c++：\n\n说一下引用和指针的区别\n\n野指针是怎么出现的\n\n了解虚函数吗？\n\n虚函数和纯虚函数呢？他们的使用场景呢？\n\n栈区和堆区的区别？\n\n问我一些变量存储的位置，就是考察栈区，堆区，代码区，全局区\n\n虚析构了解吗？（这题我真的哭死，我说半天发现是错的，面试官还好心的回答我说不是这样的，然后为我解释）\n\nc++11有了解过嘛？（我说没有[牛泪][牛泪]）\n\n然后问我用过智能指针吗？（我还是说没有，但我说了解过）\n\n然后又喊我说一下智能指针\n\n了解c++从编译阶段到转化成机器能识别的语言之间发生了什么吗？（不知道）\n\n知道预编译吗？\n\nSTL容器和数据结构（记不大清楚了）：\n\n问我最常用的STL容器是什么？（我说是vector 和unordered_map）\n\n栈和队列有什么区别\n\nset的底层是通过什么实现的（红黑树）\n\n然后给了一道题让我做：反转链表！！！（我力扣上做过好几遍的题目，不知道为什么当时我竟然没写出来，想扇死自己，可能是因为第一次面[尴尬][尴尬]太紧张了）\n\n3、计算机网络\n\n计算机网络一般有哪几层\n\n每层分别实现什么功能或作用（没答上）\n\nTCP和UDP讲一下\n\nhttp和https的区别（完全没了解过）\n\n4、操作系统\n\n就问了我一个进程和线程\n\n5、其他\n\n版本管理（我没了解过，面试官说什么git之类的，然后说我可能还用不到）\n\n最后就一个反问环节\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601023686191161344?sourceSSR=users",
        "title": "3.23 美团前端&移动端笔试",
        "content": "第1题 回文串删除，**有差不多的原题\n\n    \n    \n    #include <iostream>\n    #include <string>\n    using namespace std;\n    \n    int main() {\n      cin.tie(0)->sync_with_stdio(false);\n      int ans = 0;\n      int n;\n      cin >> n;\n      string s;\n      cin >> s;\n      for (int i = 0; i < n; i++) {\n        int j = i;\n        while (j < n && s[j] == s[i]) {\n          j += 1;\n        }\n        ans += j - i - 1;\n        i = j - 1;\n      }\n      cout << ans << endl;\n    }\n    \n\n第2题 置换环\n\n    \n    \n    #include <iostream>\n    #include <string>\n    #include <vector>\n    using namespace std;\n    \n    int main() {\n      cin.tie(0)->sync_with_stdio(false);\n      int n;\n      cin >> n;\n      vector<int> a(n), p(n);\n      for (int i = 0; i < n; i++) {\n        cin >> a[i];\n        a[i]--;\n        p[a[i]] = i;\n      }\n      string s;\n      cin >> s;\n      for (int i = 0; i < n; i++) {\n        if (s[i] == 'W' && a[i] != i) {\n          cout << -1 << \"\\n\";\n          return 0;\n        }\n      }\n      int ans = 0;\n      vector<int> vis(n);\n      for (int i = 0; i < n; i++) {\n        if (vis[i]) {\n          continue;\n        }\n        int j = i;\n        int circle = 0;\n        while (!vis[j]) {\n          circle += 1;\n          vis[j] = 1;\n          j = a[j];\n        }\n        ans += circle - 1;\n      }\n      cout << ans << \"\\n\";\n      return 0;\n    }\n    \n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601015368278175744?sourceSSR=users",
        "title": "美团到店-后端开发一面全方位解析：操作系统勿忽视",
        "content": "# 面试场景：\n\n1\\. 介绍一下spring的两大核心思想\n\n2\\. 介绍一下java的代理，以及动态代理和静态代理的区别\n\n3\\. spring动态代理是如何生成的，jdk动态代理和cglib的区别\n\n4\\. 介绍一下synchronized关键字、以及synchronized锁和lock的区别\n\n5\\. 讲一下java中synchronized的锁升级\n\n6\\. 介绍一下hashMap，如何处理冲突，设计一个哈希函数需要考虑到的要素。\n\n7\\. 哈希冲突怎么解决，有几种解决方案\n\n8\\. 介绍一下redis缓存穿刺以及缓存穿透，并说明项目中是如何解决这个问题的\n\n9\\. 介绍一下布隆过滤器，项目是用布隆过滤器做了什么\n\n10\\. 操作系统的内核态、用户态分别说一下\n\n11\\. 进程间的通信方式\n\n12\\. 进程通信的时候信号量是如何实现的\n\n13\\. 手撕：添加最少的字符形成回文字串 （abc--&gt; cbabc）\n\n14\\. 手撕：合并区间\n\n八股文的不多也没有为难，但是第一道手撕hard我是真不行，面试官看我做不出来换成合并区间了，权当增加面试经验了美团到店-后端开发一面\n\n# 答案简概:\n\n**Spring框架的两大核心思想** ：IoC（Inversion of\nControl，控制反转）：通过容器管理对象的生命周期和依赖关系，将对象的创建、绑定、初始化等过程从代码中抽离至配置文件或注解中，实现了松耦合和可配置化。AOP（Aspect-\nOriented\nProgramming，面向切面编程）：允许开发者定义“切面”，在这些切面中编写横切关注点如事务管理、日志记录等逻辑，通过代理机制在运行时织入目标方法，增强了业务代码的模块性和重用性。\n\n**Java代理及动态代理与静态代理区别**\n：静态代理：代理类在编译时就已经确定，由程序员创建或特定工具生成，代理类与委托类之间存在明显的依赖关系，代理类在程序运行前就已完成。动态代理：在运行时动态生成代理类及其行为，主要分为JDK动态代理和CGLIB代理。\nJDK动态代理：基于接口实现，通过InvocationHandler接口和Proxy类创建代理对象，只能代理实现了接口的类。CGLIB代理：通过对类进行字节码增强的方式来实现代理，不需要接口，可以代理任何类，但不是Java标准库的一部分。\n\n**Spring动态代理生成机制** ：Spring使用JDK动态代理或CGLIB代理实现AOP，具体选择哪种方式取决于目标对象是否实现了接口。\n若目标对象实现了一个或多个接口，则Spring默认使用JDK动态代理。若目标对象没有实现接口，则Spring会选择CGLIB作为代理机制。\n\n**synchronized关键字与Lock区别**\n：synchronized：Java内置的关键字，用于保证线程安全，可以修饰方法或代码块，同一时刻只有一个线程能获取监视器锁并执行同步代码块或方法。Lock（如ReentrantLock）：Java并发包提供的显式锁机制，提供了比synchronized更细粒度的控制，例如尝试锁定、定时等待、可中断、公平性设置等功能，使用try-\ncatch-finally语句确保锁能够正确释放。\n\n**Java中synchronized锁升级**\n：Java虚拟机为了提高效率，在某些条件下会将synchronized锁从偏向锁、轻量级锁逐渐升级到重量级锁，这是一个优化手段，目的是在竞争较弱的情况下减少不必要的系统开销。\n\n**HashMap介绍及冲突处理**\n：HashMap是一种基于哈希表的Map接口的非线程安全实现，采用数组+链表/红黑树存储元素。处理冲突（哈希碰撞）通常采用开放地址法（比如拉链法）或再散列法。在Java的HashMap中，冲突时使用链表（Java\n8及以后版本在链表长度达到阈值时会转化为红黑树）链接相同的哈希值的元素。\n\n**哈希冲突解决方案** ：开放寻址法：当发生冲突时，寻找下一个可用位置存放元素。链地址法（如Java\nHashMap所采用）：每个哈希桶是一个链表，所有哈希值相同的数据都存储在这个链表中。再哈希法：使用不同的哈希函数计算新的位置。建立公共溢出区：当主哈希表达到一定负载因子时，将新增元素放入溢出区。\n\n**Redis缓存穿透与缓存穿刺**\n：缓存穿透：查询的数据在数据库中不存在，且缓存层不保存空结果，导致每次请求都要去数据库验证，增加了数据库压力。解决方案：可以通过布隆过滤器预判不存在的键，或者对空结果也进行缓存（但要注意过期策略）。缓存穿刺：特指那些未命中缓存且应当被缓存的数据，通常是由于数据刚刚被更新或者初次访问而引起的。解决方案：一般情况下，正常的缓存更新策略即可解决，即当数据库更新时同时更新缓存。\n\n**布隆过滤器及其应用** ：布隆过滤器是一种空间效率极高的概率型数据结构，用于判断一个元素是否在一个集合中，可能存在误报（false\npositive），但不会漏报（false\nnegative）。在项目中，布隆过滤器常用于预估某个查询请求的结果是否存在，提前拦截可能穿透缓存的请求，减少数据库负担。\n\n**操作系统的内核态与用户态**\n：内核态：CPU运行在最高权限级别，可以执行所有的指令，直接操作硬件资源，如内存管理、进程调度、设备驱动等。用户态：限制了程序对硬件的直接访问，大部分应用程序运行在此状态下，以防止错误操作破坏系统稳定性。\n\n**进程间通信方式** ：管道（pipe）、命名管道（FIFO）信号（signal）信号量（semaphore）共享内存（shared\nmemory）消息队列（message queue）互斥量（mutex）临界区（critical section）套接字（socket）\n\n**信号量实现进程通信**\n：信号量是一种同步原语，用于控制多个进程对共享资源的访问。进程通过P（wait）和V（signal）操作来申请和释放信号量，从而协调对资源的访问。\n\n**手撕代码** ：大家看看力扣就行啦\n\n[原文传送门](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fshare%2Fjump%2F1711176557836)\n\n[专栏合集（超2w+人学习）](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fwww.nowcoder.com%2Fcreation%2Fmanager%2FcolumnDetail%2FMJ4LAm)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601010046306148352?sourceSSR=users",
        "title": "腾讯IEG光子 客户端面经",
        "content": "昨天oc了, 平日也看了很多牛客的面经, 今天轮到我回馈一下社区了.\n\n#### 一面 3.11\n\n  1. 自我介绍, 自我介绍的时候提到了我的独立游戏暴死经历, 于是直接问起了项目\n  2. 独游暴死的技术原因 性能优化的尝试 复杂逻辑下设计模式的选择\n  3. 讲一下c++11的新特性 auto/decltype, bracket initialization, smart pointer, constexpr 等等\n  4. ordered_map的插入时间\n  5. 既然提到了 smart pointer, 讲一下 shared_pointer 的实现原理, shared_pointer 是否线程安全\n  6. 讲一下移动语义的概念, 为什么c++11要设计move? 为了减少 copy temporary object 的时候不必要的 new 和 delete\n  7. 两道性能优化的题, 提供一个 class definition 和两个待优化的 methods\n\n反问: 我有什么地方还需要努力? 面试官: 可以学一下 unreal, 继续看点书\n\n总结: 比我预想的简单, 没考计网和os运气非常好. 面试官会不断追问我提到过的内容, 所以我会有意识得把话题往我熟悉的方向引. 多线程和计算机网络我不熟,\n即使我的简历里有相关内容我也绝口不提.\n\n#### 二面 3.18\n\n  1. 介绍自己, 交换的经历, 有读研的规划吗\n  2. 喜欢什么游戏, 玩过什么竞技类游戏\n  3. 项目里用过什么数据结构? 我: 独立游戏开发比较追求效率和简洁, 数据结构什么简单用什么\n  4. 项目里用过recursion吗? 我: 简单结构直接顺序枚举, 算法是不存在的\n  5. Leetcode 445 要求用recursion\n  6. 有考虑选择游戏客户端开发的具体方向吗? 以前都是做game jam和小项目, 我就是全栈, 还真没想过\n\n反问: 我有什么地方还需要努力? 面试官: 可以去了解一下客户端开发的具体内容\n\n总结: 基本都是在聊天, 根据我的回答出了一道mid题也顺利解出来了, 流程平淡到我没法判断自己到底过没过.\n\n#### HR面 3.18\n\n这回是真纯聊天了, 问了我每个项目的具体分工和收获, 我的每个项目都踩了很多坑, 技术上的人事上的, 失败是主旋律, 所以分享出来就可以了.\n最后不出意外的也过了.\n\n#### 写在最后\n\nHR跟我说光子还缺策划和客户端岗, 有想法的可以官网投或者简历直接私信给我 (如果你放心的话)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601006653533679616?sourceSSR=users",
        "title": "社交距离 - 华为OD统一考试(C卷)",
        "content": "> OD统一考试（C卷）\n>\n> 分值： 200分\n>\n> 题解： Java / Python / C++\n\n![alt](https://uploadfiles.nowcoder.com/images/20231201/644248237_1701399029315/A4F5E48572027B66E6ECFA2EF0A7C66A)\n\n## 题目描述\n\n疫情期间，需要大家保证一定的社交距离，公司组织开交流会议，座位有一排共N个座位，编号分别为[0..N-1]，要求员工一个接着一个进入会议室，并且可以在任何时候离开会议室。\n\n满足:每当一个员工进入时，需要坐到最大社交距离的座位(例如:位置A与左右有员工落座的位置距离分别为2和2，位置B与左右有员工落座的位置距离分别为2和3，影响因素都为2个位置，则认为座位A和B与左右位置的社交距离是一样的)，如果有多个这样的座位，则坐到索引最小的那个座位。\n\n## 输入描述\n\n会议室座位总数seatNum，(1 <= seatNum <= 500) 员工的进出顺序 seatOrLeave数组，元素值为1:\n表示进场，元素值为负数，表示出场(特殊:位置0的员工不会离开)。\n\n例如-4表示坐在位置4的员工离开 (保证有员工坐在该座位上)。\n\n## 输出描述\n\n最后进来员工，他会坐在第几个位置，如果位置已满，则输出-1。\n\n## 示例1\n\n    \n    \n    输入：\n    10\n    [1, 1, 1, 1, -4, 1]\n    \n    输出：\n    5\n    \n    说明：\n    seat ->0，坐在任何位置都行，但是要给他安排索引最小的位置，也就是座位0。\n    seat ->9, 要和旁边的人距离最远，也就是座位9。\n    seat ->4，位置4与0和9的距离为(4和5),位置5与0和9的距离(5和4)，所以位置4和5都是可以选择的座位，按照要求需索引最小的那个座位，也就是座位4。\n    seat ->2，位置2与0和4的距离为(2和2),位置6与4和9的距离(2和3)，位置7与4和9的距离(3和2)，影响因素都为2个位置，按照要求需索引最小的那个座位，也就是座位2。leave(4)，4号座位的员工离开。\n    seat-> 5，员工最后坐在5号座位上。\n    \n\n> 此题为非ACM模式，只需要实现 conferenceSeatDistance 方法即可。\n\n## 题解\n\n> 这是一个**模拟** 会议室座位安排的问题，需要根据特定规则安排员工的座位。\n>\n>   1. 使用有序 Set 来维护已经被坐的座位情况（java 代码使用 TreeSet\n> ）。并通过插入两个虚拟的座位作为边界来方便计算最大社交距离的座位。\n>   2. **进入会议室的算法：** 使用`join`方法来计算员工进入会议室时的最佳座位。通过遍历 TreeSet\n> 中相邻的位置，计算中间座位的社交距离，找到最大距离的座位，并插入到 TreeSet 中。\n>   3. **座位计算：** 在主方法中，遍历员工的进出顺序，根据不同情况调用`join`方法或者从TreeSet中移除座位。\n>   4. **输出：** 输出最后一个员工坐的位置。\n>\n\n### Java\n\n    \n    \n    import java.util.Iterator;\n    import java.util.Scanner;\n    import java.util.TreeSet;\n    \n    public class Main {\n    \n        public static void main(String[] args) {\n            Scanner sc = new Scanner(System.in);\n            int seatNum = sc.nextInt();\n            sc.nextLine();\n            String seatOrLeaveLine = sc.nextLine();\n            String[] c = seatOrLeaveLine.substring(1, seatOrLeaveLine.length() - 1).split(\", \");\n            int[] seatOrLeave = new int[c.length];\n            for (int i = 0; i < c.length; i++) {\n                seatOrLeave[i] = Integer.parseInt(c[i]);\n            }\n    \n            Main socialDistance = new Main();\n            int ans = socialDistance.conferenceSeatDistance(seatNum, seatOrLeave);\n            System.out.println(ans);\n        }\n    \n        /**\n         * 计算最后进来的人，坐的位置\n         *\n         * @param seatNum     会议室座位总数\n         * @param seatOrLeave 员工的进出顺序\n         * @return 最后进来的人，坐的位置\n         */\n        public int conferenceSeatDistance(int seatNum, int[] seatOrLeave) {\n            TreeSet<Integer> seatTree = new TreeSet<>();\n            // 插入两个虚拟的座位，有了这两个个边界方便计算最大社交距离的座位\n            seatTree.add(-2 * (seatNum - 1));\n            seatTree.add(2 * (seatNum - 1));\n    \n            int last = -1;\n            for (int t : seatOrLeave) {\n                if (t == 1) { // 进来\n                    last = join(seatTree, seatNum);\n                } else { //　\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/601004027014328320?sourceSSR=users",
        "title": "腾讯云 一面 面经",
        "content": "##\n\n  1. 项目介绍一个\n  2. 项目的技术栈是怎样的，拿下订单这个功能来讲一讲\n  3. 登录流程有没有过期的说法\n  4. 拦截器实现机制\n  5. redis本身能做到原子性吗\n  6. redis高性能如何实现\n  7. mysql存储引擎的数据结构\n  8. B+树是怎么存储数据的\n  9. 带主键的查询需要几次磁盘I/O\n  10. mysql回表概念\n  11. 不回表的情况\n  12. mysql的acid概念\n  13. 隔离性mysql通过什么机制实现\n  14. 持久性是通过什么实现\n  15. redo log是什么时候进行写入的\n  16. 用户态有什么方式陷入到内核态\n  17. 用户态到内核态有什么开销\n  18. 为什么要设计用户态和内核态\n  19. 在一个子网下面，两个主机需要通信，讲一下通信过程，越详细越好\n  20. 对端mac从哪里来的\n  21. ARP协议是怎么做的\n  22. 对端的应用程序是怎么收到这个包的\n  23. 做题\n  24. 部门介绍（NoSQL业务）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/600843881160171520?sourceSSR=users",
        "title": "pcg客户端一面1h40分钟什么水平",
        "content": "项目拷打撞翻我，啥也不会  \n八股问了线程进程  \n虚拟内存  \nhttps握手  \n算法  \n删除链表重复节点  \n回溯 硬币\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/600819713781866496?sourceSSR=users",
        "title": "字节跳动-前端-暑期实习",
        "content": "这是第一个一面没过的公司，自己发挥失常了，很多题都没答对。感觉自己可能没休息好，头昏脑胀去答题。果然第二天就进人才库了。当然字节面试体验也不好，面试官会打断回答，而且一直歪头，感觉挺不爽的。八股基本忘得差不多了，就写一下算法部分吧。\n\n# 输出题\n\n  1. Promise，setTimeout调用顺序。这里大家多做吧，感觉最好面试前做一下，不然容易记错。我这里主要是在一个promise里面resolve了后我以为就转到then了，结果不是，还会执行之后部分，这里自己没注意。\n  2. this指向问题，大家也可以找一下有没有原题，多写一下\n\n## 编程题\n\n  1. 平铺数组转树形结构，这个大概就是数组扁平化的逆过程，网上有\n  2. 返回括号匹配结果结果，就是返回括号内的值，比如((2+3))，返回的是就是2+3,(2+3)\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/600800283811164160?sourceSSR=users",
        "title": "腾讯c++后台开发一面凉经",
        "content": "自我介绍\n\n论文介绍\n\n1.http长连接，短连接什么区别，长连接有什么好处？\n\n2.3次握手，四次挥手过程，为什么？\n\n3.连接中，服务器重启会发生什么？\n\n4.reactor ，proactor的区别？\n\n5.管线化是什么？\n\n5.虚函数？\n\n6.linux cp 系统发生了什么？\n\n7.软链接和cp的区别？\n\n8.extern \"C\" ？\n\n9.c++函数重载？\n\n10.手撕最少硬币兑换次数\n\n  \n\n第一次面c++开发，非常紧张，八股答了七八成，手撕太紧张没撕出来[笑cry][笑cry][笑cry]。\n\n面完一小时后显示流程结束。\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/600797603940364288?sourceSSR=users",
        "title": "海康威视   软件开发工程师一面--3.22",
        "content": "总共40min\n\n技术部分：30min\n\n1、上来先是自我介绍\n\n2、学过C语言吗，熟悉程度\n\n3、Linux怎么样\n\n4、用过malloc吗\n\n5、写下代码：malloc分配100个字节，全部赋值'a'，打印\n\n6、有没有要注意的？如果系统不够100个字节要怎么去考虑？\n\n7、讲下简历上比较熟悉的一个项目，项目怎么改进？\n\n8、项目有线程同步或者并发吗，怎么去做的\n\n9、有互斥操作的话，用什么做到互斥的？互斥锁有哪些\n\n10、PV操作讲一下\n\n11、多进程项目有用到吗\n\n12、多进程多线程区别\n\n13、平时自己会用一些宏定义吗\n\n14、static你能总结概括一下吗\n\n剩下聊天：10min\n\n1、最有成就感的事\n\n2、最近有没有压力大的事\n\n3、为什么想来杭州\n\n4、家里有兄弟姐妹吗\n\n5、反问：1）部门具体工作？还没确定 2）多久出结果？一周\n\n整体感觉问的很简单，没问啥深入技术，像kpi\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/600816185424310272?sourceSSR=users",
        "title": "腾讯WXG-前端实习-2面",
        "content": "唉，牛友们，感觉要G了，估计腾讯难有三面机会。大家加油吧，主要以算法为主，而且每道题有复杂度要求，比较难，完了了两道半，感觉G了。面试官说让我写个作业，详细写一下项目优点，横向对比不同方案，估计项目也不太像。看面试官如何汇报吧🤣🤣🤣。\n\n## 编程\n\n  1. 结合中序和后续遍历生成2叉树\n  2. 剑指Offer，数组重复元素筛选，要使用原地交换。\n  3. 字符串实现大整数相乘\n  4. 求无序数组中的有序状态下的相邻元素差值。比如[1,3,2,6],返回3，排序后为[1,2,3,6]，6-3=3。要求不可以使用排序\n\n个人完成了1,3,4接近完成，说了思路，思路应该是对的。第二题我记忆混乱，记成了剑指offer70题排序数组中只出现一次元素😂。\n\n## 八股\n\n主要是要求介绍项目，说项目难点亮点？但项目没有什么难点呀，都是API的调用和可视化展示，这很尴尬。感觉找不到前端有难点的项目，牛友有推荐吗？\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/600786467455049728?sourceSSR=users",
        "title": "美团到店一面",
        "content": "3.22\n\n1\\. 自我介绍\n\n2\\. 项目介绍，在每个项目中学到了什么\n\n3\\. 计算机网络五层和七层有哪些（上面几层忘了），介绍每层是干嘛的\n\n4\\. ipv4和ipv6的区别\n\n5\\. 为什么要用websocket？和http的区别？websocket使用中遇到的问题？怎么解决多线程问题？\n\n6\\. 线程池几个参数？如果更多的请求进来怎么办？\n\n7\\. jdk21和jdk8的区别？虚拟线程是什么？\n\n8\\.\n算法题：[*****************](https://gw-c.nowcoder.com/api/sparta/jump/link?link=https%3A%2F%2Fleetcode.cn%2Fproblems%2F4sjJUc%2F)写的力扣上能跑过，他给的测试用例有一个超时，让我优化去重，没优化出来。\n\n9\\. 反问\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/600784612188545024?sourceSSR=users",
        "title": "解密犯罪时间 - 华为OD统一考试(C卷)",
        "content": "> OD统一考试（C卷）\n>\n> 分值： 100分\n>\n> 题解： Java / Python / C++\n\n![alt](https://uploadfiles.nowcoder.com/images/20231201/644248237_1701399029315/A4F5E48572027B66E6ECFA2EF0A7C66A)\n\n## 题目描述\n\n警察在侦破一个案件时，得到了线人给出的可能犯罪时间，形如 `HH:MM` 表示的时刻。\n\n根据警察和线人的约定，为了隐蔽，该事件是修改过的，解密规则为：\n\n利用当前出现过的数字，**构造下一个距离当前事件最近的时刻** ，则该时间为可能的犯罪的时间。每个数字都可以被无限次使用。\n\n## 输入描述\n\n形如 `HH:SS` 字符串，表示原始输入。\n\n## 输出描述\n\n`HH:SS` 字符串，表示推理处理的犯罪时间。\n\n备注：\n\n  1. 可以保证现任给定的字符串一定是合法的，例如，\"01:3501:35\" 和 \"11:0811:08\" 是合法的，\"1:351:35\"和\"11:811:8\" 是不合法的。\n  2. 最近的时刻可能在第二天。\n\n## 示例1\n\n    \n    \n    输入：\n    20:12\n    \n    输出：\n    20:20\n    \n\n## 示例2\n\n    \n    \n    输入：\n    23:59\n    \n    输出：\n    22:22\n    \n\n## 题解\n\n> 这个问题可以分为以下几个步骤来解决：\n>\n>   1. **记录已经出现的数字：**\n> 遍历输入的时间字符串，记录出现过的数字。这里可以使用一个长度为10的布尔数组`exists`，用于标记数字0到9是否出现过。\n>   2. **计算原始时间：** 将输入的时间字符串转换为分钟表示，方便后续的计算。\n>   3. **枚举所有时间：** 使用两层循环枚举所有可能的小时和分钟，然后计算对应的分钟数，得到当前时间点。\n>   4. **判断当前时间点是否符合条件：**\n> 判断当前小时和分钟的每一位数字是否都在已经出现过的数字中。如果有任何一个数字未出现，说明这个时间点不符合条件，直接跳过。\n>   5. **计算时间间隔：** 计算当前时间点与原始时间的时间间隔，考虑了第二天的情况。\n>   6. **找到最近的时刻：** 通过比较时间间隔找到最近的时刻，更新最近时刻的小时、分钟和时间间隔。\n>   7. **格式化输出结果：** 最终输出找到的最近时刻。\n>\n\n### Java\n\n    \n    \n    import java.util.Scanner;\n    /**\n     * @author code5bug\n     */\n    public class Main {\n        public static void main(String[] args) {\n            Scanner scanner = new Scanner(System.in);\n            String stime = scanner.next();\n            int pos = stime.indexOf(\":\");\n    \n            // 记录已经出现的数字\n            boolean[] exists = new boolean[10];\n            for (char c : stime.toCharArray()) {\n                if (Character.isDigit(c)) {\n                    exists[c - '0'] = true;\n                }\n            }\n    \n            // 小时，分钟，最近的时间间隔（分钟）\n            int hour = 0, minute = 0, d = Integer.MAX_VALUE;\n    \n            // 原始时间\n            int times = Integer.parseInt(stime.substring(0, pos)) * 60 + Integer.parseInt(stime.substring(pos + 1));\n    \n            // 枚举所有时间，找到下一个距离当前事件最近的时刻\n            // - 如果时间点中有字符未出现，则不考虑该时间点，因为该时间点已经不可能是答案了\n            // - 如果时间点中有字符出现:\n            //          - 如果时间相同，则不考虑该时间点，因为该时间点已经不可能是答案了\n            //          - 如果时间不同，则考虑该时间点，因为该时间点可能是答案了，但是要判断当天还是下一天\n            for (int h = 0; h < 24; h++) {\n                if (!exists[h % 10] || !exists[h / 10]) continue;\n    \n                for (int m = 0; m < 60; m++) {\n                    int curTimes = h * 60 + m;\n                    // 字符未出现或时间相同\n                    if (!exists[m % 10] || !exists[m / 10] || curTimes == times) c\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/600783494603661312?sourceSSR=users",
        "title": "腾讯云一面凉经 3.22",
        "content": "发凉经攒人品\n\n背了一个月八股，结果几乎没问，内心是崩溃的。\n\n面了52min\n\n算法题：lc24 （菜鸡写了半小时，内心快崩溃了）\n\n项目：拷打我的toy project（瑞吉外卖），真崩溃了，脑子一片空白。\n\n八股和场景题：\n\n1、垃圾回收了解吗？（快速吟唱垃圾回收算法，yong gc/full gc，堆的结构，垃圾回收器）\n\n2、如何定位项目的性能瓶颈并优化项目？（胡言乱语）\n\n3、项目的技术难点？（跟着黑马程序员感觉没什么难点orz）\n\n4、项目部署了几台服务器？（mysql主从库，redis，nginx）\n\n5、怎么实现主从同步插件？（参考binlog）\n\n6、binlog逐条执行会有什么问题？（不知道）\n\n7、mysql存储结构？（索引b+树，物理存储是段区页行）\n\n8、执行一条insert语句，b+树会有什么变化？（不知道）\n\n9、redis 键值对过期是怎么实现的？（胡说八道，应该是被动式删除和主动式删除[笑cry]，感觉答一下淘汰策略更好）\n\n10、springcloud（只配过docker环境和prometheus[尴尬]）\n\n11、一般使用哪种垃圾收集器？（默认的cms）\n\n12、学习这些有关垃圾回收的知识点后对编码习惯有什么帮助？（真不知道）\n\n13、报错怎么排查？（top+jstack）\n\n反问：\n\n有什么问题如何改进？（再多准备一下）\n\n"
    },
    {
        "url": "https://www.nowcoder.com/discuss/600777979144220672?sourceSSR=users",
        "title": "美团 3.22 Java 一面",
        "content": "面试官人很好，面试很舒服\n\n1.自我介绍\n\n2.实习项目细问（问了很久）\n\n3.Redis了解吗，跳表的结构细说\n\n4.Redis还用过哪些？底层原理？（说的底层数据结构）\n\n5.为什么了解Redis底层结构？因为遇到相关问题才细究还是兴趣？（兴趣）\n\n6.==和equals区别\n\n7.Hashcode和equals区别？有了equals判断相等，为什么还要hashcode，hashcode意义是什么（盲猜hashcode更快，加速比较判断，hashcode能更快过滤不相等的值）\n\n8.接口和抽象类（支支吾吾）\n\n9.Java和C++继承区别？多继承？\n\n10.垃圾回收有哪些算法？\n\n11.分代收集和垃圾回收算法的联系（比如young代就可以用标记-复制）\n\n12.JVM的分区知道吗？（因为刚刚问的是垃圾回收，我说是不是eden s0\ns1区这种？他说不是，回去了解一下。后知后觉复盘想起来可能是问我JVM的内存结构（运行时数据区那玩意？）？）\n\n13.数据库隔离级别有哪些？\n\n其他忘了，想起来再补\n\n手撕\n\n1.数据库一道题\n\n（一个表 a 有 id，product_id，status（0无效 1有效）, price，以及其他字段。\n\n求 product_id=200 且 最大price 的 id\n\nselect id\n\nfrom a\n\nwhere product_id=200 and status=1 and price in (\n\nselect price\n\nfrom a\n\nwhere status=1 and product_id=200\n\norder by price DESC\n\nlimit 0, 1)\n\n）好像是这个sql，写的很丑，面试官提示了几次才写对的（细节漏了好多）\n\n还根据这个sql问了问题\n\nA.根据这sql你怎么建索引（我说的 product_id, status, price 联合索引）\n\nB.只给product_id建索引如何？（忘了怎么答的了）\n\nC.给status建索引如何？（只知道不行，具体为啥没打出来（重复字段太多，频繁回表））\n\n2.二叉树层序遍历（简单题，注意要一层一层走，我一开始用dfs被让重做）\n\n3.二维数组，左上到右下的路径数（简单题）\n\n反问：\n\n1.觉得我咋样（面试官：不可说 我：.............）\n\n2.有什么建议（细一点，应该指我写sql漏了一些细节，以及层序遍历没看题，直接dfs，而不是一层层走）\n\n3.多久出结果（1-2周，还要跟HR商量，问有几面？分人，可能G，可能2，可能3，可能直接HR了）\n\n（感觉没问啥八股，题目很简单。。。）\n\n许愿二面\n\n\\------------------------------------------------------------\n\n发二面了，27号二面\n\n"
    }
]